
TS24_UCM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c9c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005da8  08005da8  00006da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de4  08005de4  00007088  2**0
                  CONTENTS
  4 .ARM          00000000  08005de4  08005de4  00007088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005de4  08005de4  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de4  08005de4  00006de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005de8  08005de8  00006de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08005dec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000088  08005e74  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08005e74  00007438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efaa  00000000  00000000  000070b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fc  00000000  00000000  0001605b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00018558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b92  00000000  00000000  00019430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a29  00000000  00000000  00019fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011512  00000000  00000000  000329eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e3b5  00000000  00000000  00043efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d22b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f88  00000000  00000000  000d22f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d6280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d90 	.word	0x08005d90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005d90 	.word	0x08005d90

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_d2uiz>:
 8000938:	004a      	lsls	r2, r1, #1
 800093a:	d211      	bcs.n	8000960 <__aeabi_d2uiz+0x28>
 800093c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000940:	d211      	bcs.n	8000966 <__aeabi_d2uiz+0x2e>
 8000942:	d50d      	bpl.n	8000960 <__aeabi_d2uiz+0x28>
 8000944:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000948:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800094c:	d40e      	bmi.n	800096c <__aeabi_d2uiz+0x34>
 800094e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000952:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000956:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095a:	fa23 f002 	lsr.w	r0, r3, r2
 800095e:	4770      	bx	lr
 8000960:	f04f 0000 	mov.w	r0, #0
 8000964:	4770      	bx	lr
 8000966:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096a:	d102      	bne.n	8000972 <__aeabi_d2uiz+0x3a>
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	4770      	bx	lr
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	4770      	bx	lr

08000978 <EEPROM_24FC_Init>:
#include "EEPROM_24FC.h"

static I2C_HandleTypeDef* EEPROM_24FC_I2C_Handle; //i2c handle

void EEPROM_24FC_Init(I2C_HandleTypeDef *Handle)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	EEPROM_24FC_I2C_Handle = Handle;
 8000980:	4a03      	ldr	r2, [pc, #12]	@ (8000990 <EEPROM_24FC_Init+0x18>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	200000a4 	.word	0x200000a4

08000994 <EEPROM_24FC_I2C_Write>:

//Framework neutral I2C write
static void EEPROM_24FC_I2C_Write(uint8_t *DataBuffer, uint8_t i2cAddress, uint8_t DataLength)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
 80009a0:	4613      	mov	r3, r2
 80009a2:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Master_Transmit(EEPROM_24FC_I2C_Handle, i2cAddress, DataBuffer, DataLength, EEPROM_24FC_I2C_TIMEOUT);
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <EEPROM_24FC_I2C_Write+0x30>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	b299      	uxth	r1, r3
 80009ac:	78bb      	ldrb	r3, [r7, #2]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	220a      	movs	r2, #10
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	f002 fddb 	bl	8003570 <HAL_I2C_Master_Transmit>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000a4 	.word	0x200000a4

080009c8 <EEPROM_24FC_I2C_Read>:

//Framework neutral I2C read
static void EEPROM_24FC_I2C_Read(uint8_t *DataBuffer, uint8_t i2cAddress, uint8_t DataLength)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
 80009d4:	4613      	mov	r3, r2
 80009d6:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Master_Receive(EEPROM_24FC_I2C_Handle, i2cAddress | 0x01, DataBuffer, DataLength, EEPROM_24FC_I2C_TIMEOUT);
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <EEPROM_24FC_I2C_Read+0x34>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	78bb      	ldrb	r3, [r7, #2]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	220a      	movs	r2, #10
 80009ec:	9200      	str	r2, [sp, #0]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	f002 febc 	bl	800376c <HAL_I2C_Master_Receive>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000a4 	.word	0x200000a4

08000a00 <EEPROM_24FC_Poll>:

_Bool EEPROM_24FC_Poll()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(EEPROM_24FC_I2C_Handle, 0xA0, 1, EEPROM_24FC_I2C_TIMEOUT) == HAL_OK) return 1;
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <EEPROM_24FC_Poll+0x24>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	230a      	movs	r3, #10
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	21a0      	movs	r1, #160	@ 0xa0
 8000a0e:	f003 f919 	bl	8003c44 <HAL_I2C_IsDeviceReady>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d101      	bne.n	8000a1c <EEPROM_24FC_Poll+0x1c>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <EEPROM_24FC_Poll+0x1e>
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000a4 	.word	0x200000a4

08000a28 <EEPROM_24FC_ByteWrite>:

void EEPROM_24FC_ByteWrite(uint16_t WordAddress, uint8_t Data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	80fb      	strh	r3, [r7, #6]
 8000a34:	4613      	mov	r3, r2
 8000a36:	717b      	strb	r3, [r7, #5]
	uint8_t DataBuffer[2];

	uint8_t Address = (0xA0);  //Control Code
 8000a38:	23a0      	movs	r3, #160	@ 0xa0
 8000a3a:	73fb      	strb	r3, [r7, #15]
	Address += (WordAddress/256);  //Block select
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	4413      	add	r3, r2
 8000a48:	73fb      	strb	r3, [r7, #15]

	DataBuffer[0] = (WordAddress % 256);
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	733b      	strb	r3, [r7, #12]
	DataBuffer[1] = Data;
 8000a50:	797b      	ldrb	r3, [r7, #5]
 8000a52:	737b      	strb	r3, [r7, #13]

	EEPROM_24FC_I2C_Write(DataBuffer, Address, 2);
 8000a54:	7bf9      	ldrb	r1, [r7, #15]
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff99 	bl	8000994 <EEPROM_24FC_I2C_Write>

	while(!EEPROM_24FC_Poll()); //Wait until EEPROM has finished writing.
 8000a62:	bf00      	nop
 8000a64:	f7ff ffcc 	bl	8000a00 <EEPROM_24FC_Poll>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f083 0301 	eor.w	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f7      	bne.n	8000a64 <EEPROM_24FC_ByteWrite+0x3c>
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <EEPROM_24FC_ByteRead>:

	while(!EEPROM_24FC_Poll()); //Wait until EEPROM has finished writing.
}

uint8_t EEPROM_24FC_ByteRead(uint16_t WordAddress)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b084      	sub	sp, #16
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	80fb      	strh	r3, [r7, #6]
	uint8_t Address = (0xA0);  //Control Code
 8000a88:	23a0      	movs	r3, #160	@ 0xa0
 8000a8a:	73fb      	strb	r3, [r7, #15]
	Address += (WordAddress/256);  //Block select
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	4413      	add	r3, r2
 8000a98:	73fb      	strb	r3, [r7, #15]
	uint8_t DataBuffer = (WordAddress % 256);
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	73bb      	strb	r3, [r7, #14]

	EEPROM_24FC_I2C_Write(&DataBuffer, Address, 1); //Selects address
 8000aa0:	7bf9      	ldrb	r1, [r7, #15]
 8000aa2:	f107 030e 	add.w	r3, r7, #14
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff73 	bl	8000994 <EEPROM_24FC_I2C_Write>
	EEPROM_24FC_I2C_Read(&DataBuffer, Address, 1); //Reads address
 8000aae:	7bf9      	ldrb	r1, [r7, #15]
 8000ab0:	f107 030e 	add.w	r3, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff86 	bl	80009c8 <EEPROM_24FC_I2C_Read>

	return DataBuffer;
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <TickerAttach>:
#include "Ticker.h"

TickerInfo_t Ticker = {-1, 0, 0, NULL};

void TickerAttach(TickerInfo_t* Ticker, fpointer FunctionCallback, uint32_t interval)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
    if (Ticker->tickers == MAX_NUMBER_OF_TICKERS - 1) return; //Check if max number of tickers have been reached.
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b09      	cmp	r3, #9
 8000ad8:	d016      	beq.n	8000b08 <TickerAttach+0x42>

    Ticker->tickers++;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	701a      	strb	r2, [r3, #0]
    Ticker->intervals[Ticker->tickers] = interval;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	330a      	adds	r3, #10
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	605a      	str	r2, [r3, #4]
    Ticker->callbackFunctions[Ticker->tickers] = FunctionCallback;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	3314      	adds	r3, #20
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	e000      	b.n	8000b0a <TickerAttach+0x44>
    if (Ticker->tickers == MAX_NUMBER_OF_TICKERS - 1) return; //Check if max number of tickers have been reached.
 8000b08:	bf00      	nop
}
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <TickerHandler>:

void TickerHandler(TickerInfo_t* Ticker)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b084      	sub	sp, #16
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < Ticker->tickers + 1; i++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	e027      	b.n	8000b70 <TickerHandler+0x5e>
    {
        Ticker->counter[i]++;
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	440b      	add	r3, r1
 8000b34:	605a      	str	r2, [r3, #4]

        if (Ticker->counter[i]/ Ticker->intervals[i] >= 1)
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	330a      	adds	r3, #10
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d30c      	bcc.n	8000b6a <TickerHandler+0x58>
        {
            Ticker->counter[i] = 0;
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
            Ticker->callbackFunctions[i]();
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	3314      	adds	r3, #20
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	4798      	blx	r3
    for (int i = 0; i < Ticker->tickers + 1; i++)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	ddd1      	ble.n	8000b20 <TickerHandler+0xe>
        }
    }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <CheckReceivedCAN>:
uint16_t ThermistorResistance;
CAN_RxHeaderTypeDef   RxHeader;
uint8_t               RxData[8];

void CheckReceivedCAN()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf8 <CheckReceivedCAN+0x170>)
 8000b90:	4a5a      	ldr	r2, [pc, #360]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000b92:	2100      	movs	r1, #0
 8000b94:	485a      	ldr	r0, [pc, #360]	@ (8000d00 <CheckReceivedCAN+0x178>)
 8000b96:	f001 fd9e 	bl	80026d6 <HAL_CAN_GetRxMessage>

	if ((RxHeader.StdId == (UCM_EEPROM_RECEIVE_1_ID + UCM.Number)) && (RxHeader.DLC == 5))
 8000b9a:	4b58      	ldr	r3, [pc, #352]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a59      	ldr	r2, [pc, #356]	@ (8000d04 <CheckReceivedCAN+0x17c>)
 8000ba0:	f892 21f0 	ldrb.w	r2, [r2, #496]	@ 0x1f0
 8000ba4:	f502 6286 	add.w	r2, r2, #1072	@ 0x430
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d12e      	bne.n	8000c0a <CheckReceivedCAN+0x82>
 8000bac:	4b53      	ldr	r3, [pc, #332]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	2b05      	cmp	r3, #5
 8000bb2:	d12a      	bne.n	8000c0a <CheckReceivedCAN+0x82>
	{
		  EEPROM_24FC_ByteWrite(0, RxData[0]);
 8000bb4:	4b50      	ldr	r3, [pc, #320]	@ (8000cf8 <CheckReceivedCAN+0x170>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ff34 	bl	8000a28 <EEPROM_24FC_ByteWrite>

		  //3.3V calibration
		  EEPROM_24FC_ByteWrite(1, RxData[2]);
 8000bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf8 <CheckReceivedCAN+0x170>)
 8000bc2:	789b      	ldrb	r3, [r3, #2]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff ff2e 	bl	8000a28 <EEPROM_24FC_ByteWrite>
		  EEPROM_24FC_ByteWrite(2, RxData[1]);
 8000bcc:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf8 <CheckReceivedCAN+0x170>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff ff28 	bl	8000a28 <EEPROM_24FC_ByteWrite>

		  //5.0V calibration
		  EEPROM_24FC_ByteWrite(3, RxData[4]);
 8000bd8:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <CheckReceivedCAN+0x170>)
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2003      	movs	r0, #3
 8000be0:	f7ff ff22 	bl	8000a28 <EEPROM_24FC_ByteWrite>
		  EEPROM_24FC_ByteWrite(4, RxData[3]);
 8000be4:	4b44      	ldr	r3, [pc, #272]	@ (8000cf8 <CheckReceivedCAN+0x170>)
 8000be6:	78db      	ldrb	r3, [r3, #3]
 8000be8:	4619      	mov	r1, r3
 8000bea:	2004      	movs	r0, #4
 8000bec:	f7ff ff1c 	bl	8000a28 <EEPROM_24FC_ByteWrite>

		  ReadEEPROMconfig();
 8000bf0:	f000 f88a 	bl	8000d08 <ReadEEPROMconfig>
		  ConfigurePullUpDownResistors();
 8000bf4:	f000 f928 	bl	8000e48 <ConfigurePullUpDownResistors>
		  ConfigureDigitalOutputs();
 8000bf8:	f000 f9aa 	bl	8000f50 <ConfigureDigitalOutputs>
		  canFramesDefine();
 8000bfc:	f000 fc72 	bl	80014e4 <canFramesDefine>
		  ConfigureReceiveFilter();
 8000c00:	f000 f8e6 	bl	8000dd0 <ConfigureReceiveFilter>

		  RxHeader.StdId = 0;
 8000c04:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
	}

	if ((RxHeader.StdId == (UCM_EEPROM_RECEIVE_2_ID + UCM.Number)) && (RxHeader.DLC == 8))
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d04 <CheckReceivedCAN+0x17c>)
 8000c10:	f892 21f0 	ldrb.w	r2, [r2, #496]	@ 0x1f0
 8000c14:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d13a      	bne.n	8000c92 <CheckReceivedCAN+0x10a>
 8000c1c:	4b37      	ldr	r3, [pc, #220]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	2b08      	cmp	r3, #8
 8000c22:	d136      	bne.n	8000c92 <CheckReceivedCAN+0x10a>
	{
		  //IO bias
		  for(int i = 0; i < 4; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e00e      	b.n	8000c48 <CheckReceivedCAN+0xc0>
		  {
			  EEPROM_24FC_ByteWrite(0x05 + i, RxData[i]);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	3305      	adds	r3, #5
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4931      	ldr	r1, [pc, #196]	@ (8000cf8 <CheckReceivedCAN+0x170>)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	440b      	add	r3, r1
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	f7ff fef3 	bl	8000a28 <EEPROM_24FC_ByteWrite>
		  for(int i = 0; i < 4; i++)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	dded      	ble.n	8000c2a <CheckReceivedCAN+0xa2>
		  }

		  //IO config
		  for(int i = 0; i < 4; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	e00e      	b.n	8000c72 <CheckReceivedCAN+0xea>
		  {
			  EEPROM_24FC_ByteWrite(0x09 + i, RxData[4 + i]);
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3309      	adds	r3, #9
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	3304      	adds	r3, #4
 8000c60:	4925      	ldr	r1, [pc, #148]	@ (8000cf8 <CheckReceivedCAN+0x170>)
 8000c62:	5ccb      	ldrb	r3, [r1, r3]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4610      	mov	r0, r2
 8000c68:	f7ff fede 	bl	8000a28 <EEPROM_24FC_ByteWrite>
		  for(int i = 0; i < 4; i++)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	dded      	ble.n	8000c54 <CheckReceivedCAN+0xcc>
		  }

		  ReadEEPROMconfig();
 8000c78:	f000 f846 	bl	8000d08 <ReadEEPROMconfig>
		  ConfigurePullUpDownResistors();
 8000c7c:	f000 f8e4 	bl	8000e48 <ConfigurePullUpDownResistors>
		  ConfigureDigitalOutputs();
 8000c80:	f000 f966 	bl	8000f50 <ConfigureDigitalOutputs>
		  canFramesDefine();
 8000c84:	f000 fc2e 	bl	80014e4 <canFramesDefine>
		  ConfigureReceiveFilter();
 8000c88:	f000 f8a2 	bl	8000dd0 <ConfigureReceiveFilter>

		  RxHeader.StdId = 0;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
	}

	if ((RxHeader.StdId == (UCM_EEPROM_RECEIVE_3_ID + UCM.Number)) && (RxHeader.DLC == 4))
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a1b      	ldr	r2, [pc, #108]	@ (8000d04 <CheckReceivedCAN+0x17c>)
 8000c98:	f892 21f0 	ldrb.w	r2, [r2, #496]	@ 0x1f0
 8000c9c:	f502 628a 	add.w	r2, r2, #1104	@ 0x450
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d125      	bne.n	8000cf0 <CheckReceivedCAN+0x168>
 8000ca4:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d121      	bne.n	8000cf0 <CheckReceivedCAN+0x168>
	{
		  for(int i = 0; i < 4; i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	e00e      	b.n	8000cd0 <CheckReceivedCAN+0x148>
		  {
			  EEPROM_24FC_ByteWrite(i + 13, RxData[i]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	330d      	adds	r3, #13
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	490f      	ldr	r1, [pc, #60]	@ (8000cf8 <CheckReceivedCAN+0x170>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	440b      	add	r3, r1
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	f7ff feaf 	bl	8000a28 <EEPROM_24FC_ByteWrite>
		  for(int i = 0; i < 4; i++)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	dded      	ble.n	8000cb2 <CheckReceivedCAN+0x12a>
		  }

		  ReadEEPROMconfig();
 8000cd6:	f000 f817 	bl	8000d08 <ReadEEPROMconfig>
		  ConfigurePullUpDownResistors();
 8000cda:	f000 f8b5 	bl	8000e48 <ConfigurePullUpDownResistors>
		  ConfigureDigitalOutputs();
 8000cde:	f000 f937 	bl	8000f50 <ConfigureDigitalOutputs>
		  canFramesDefine();
 8000ce2:	f000 fbff 	bl	80014e4 <canFramesDefine>
		  ConfigureReceiveFilter();
 8000ce6:	f000 f873 	bl	8000dd0 <ConfigureReceiveFilter>

		  RxHeader.StdId = 0;
 8000cea:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <CheckReceivedCAN+0x174>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000318 	.word	0x20000318
 8000cfc:	200002fc 	.word	0x200002fc
 8000d00:	20000328 	.word	0x20000328
 8000d04:	200000a8 	.word	0x200000a8

08000d08 <ReadEEPROMconfig>:

void ReadEEPROMconfig()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
	uint8_t EEPROM_data[17];

	for(int i = 0; i < 16; i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e00e      	b.n	8000d32 <ReadEEPROMconfig+0x2a>
	{
		EEPROM_data[i] = EEPROM_24FC_ByteRead(i);
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff feb0 	bl	8000a7e <EEPROM_24FC_ByteRead>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4619      	mov	r1, r3
 8000d22:	463a      	mov	r2, r7
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	4413      	add	r3, r2
 8000d28:	460a      	mov	r2, r1
 8000d2a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 16; i++)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	dded      	ble.n	8000d14 <ReadEEPROMconfig+0xc>
	}

	UCM.Number = EEPROM_data[0];
 8000d38:	783a      	ldrb	r2, [r7, #0]
 8000d3a:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <ReadEEPROMconfig+0xc4>)
 8000d3c:	f883 21f0 	strb.w	r2, [r3, #496]	@ 0x1f0

	UCM.Voltage3V3 = (256*EEPROM_data[2] + EEPROM_data[1]);
 8000d40:	78bb      	ldrb	r3, [r7, #2]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	787a      	ldrb	r2, [r7, #1]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <ReadEEPROMconfig+0xc4>)
 8000d4e:	f8a3 21f2 	strh.w	r2, [r3, #498]	@ 0x1f2

	UCM.Voltage5V = (256*EEPROM_data[4] + EEPROM_data[3]);
 8000d52:	793b      	ldrb	r3, [r7, #4]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <ReadEEPROMconfig+0xc4>)
 8000d60:	f8a3 21f4 	strh.w	r2, [r3, #500]	@ 0x1f4

	for(uint8_t i = 0; i < 4; i++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	74fb      	strb	r3, [r7, #19]
 8000d68:	e01b      	b.n	8000da2 <ReadEEPROMconfig+0x9a>
	{
		UCM.IObias[i] = EEPROM_data[5 + i];
 8000d6a:	7cfb      	ldrb	r3, [r7, #19]
 8000d6c:	1d5a      	adds	r2, r3, #5
 8000d6e:	7cfb      	ldrb	r3, [r7, #19]
 8000d70:	3218      	adds	r2, #24
 8000d72:	443a      	add	r2, r7
 8000d74:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8000d78:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <ReadEEPROMconfig+0xc4>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	f883 21f6 	strb.w	r2, [r3, #502]	@ 0x1f6
		UCM.IOconfig[i] = EEPROM_data[9 + i];
 8000d82:	7cfb      	ldrb	r3, [r7, #19]
 8000d84:	f103 0209 	add.w	r2, r3, #9
 8000d88:	7cfb      	ldrb	r3, [r7, #19]
 8000d8a:	3218      	adds	r2, #24
 8000d8c:	443a      	add	r2, r7
 8000d8e:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8000d92:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <ReadEEPROMconfig+0xc4>)
 8000d94:	4413      	add	r3, r2
 8000d96:	460a      	mov	r2, r1
 8000d98:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
	for(uint8_t i = 0; i < 4; i++)
 8000d9c:	7cfb      	ldrb	r3, [r7, #19]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	74fb      	strb	r3, [r7, #19]
 8000da2:	7cfb      	ldrb	r3, [r7, #19]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d9e0      	bls.n	8000d6a <ReadEEPROMconfig+0x62>
	}

	UCM.DiffVoltageEnabled[0] = EEPROM_data[13];
 8000da8:	7b7a      	ldrb	r2, [r7, #13]
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <ReadEEPROMconfig+0xc4>)
 8000dac:	779a      	strb	r2, [r3, #30]
	UCM.DiffVoltageEnabled[1] = EEPROM_data[14];
 8000dae:	7bba      	ldrb	r2, [r7, #14]
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <ReadEEPROMconfig+0xc4>)
 8000db2:	77da      	strb	r2, [r3, #31]

	UCM.DiffVoltageMux[0] = EEPROM_data[15];
 8000db4:	7bfa      	ldrb	r2, [r7, #15]
 8000db6:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <ReadEEPROMconfig+0xc4>)
 8000db8:	f883 2020 	strb.w	r2, [r3, #32]
	UCM.DiffVoltageMux[1] = EEPROM_data[16];
 8000dbc:	7c3a      	ldrb	r2, [r7, #16]
 8000dbe:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <ReadEEPROMconfig+0xc4>)
 8000dc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000a8 	.word	0x200000a8

08000dd0 <ConfigureReceiveFilter>:

void ConfigureReceiveFilter()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	@ 0x30
 8000dd4:	af00      	add	r7, sp, #0
	  CAN_FilterTypeDef canfilterconfig;

	  uint32_t filter_mask = 0x1FFFFF0F;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <ConfigureReceiveFilter+0x6c>)
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  uint32_t filter_id = 0x440 + UCM.Number;
 8000dda:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <ConfigureReceiveFilter+0x70>)
 8000ddc:	f893 31f0 	ldrb.w	r3, [r3, #496]	@ 0x1f0
 8000de0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28

	  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
	  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000dea:	230e      	movs	r3, #14
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
	  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
	  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
	  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
	  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
	  canfilterconfig.FilterIdHigh = ((filter_id << 5)  | (filter_id >> (32 - 5))) & 0xFFFF;//0x446<<5;
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	603b      	str	r3, [r7, #0]
	  canfilterconfig.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8;//0;
 8000e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e0a:	0a1a      	lsrs	r2, r3, #8
 8000e0c:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000e10:	4013      	ands	r3, r2
 8000e12:	607b      	str	r3, [r7, #4]
	  canfilterconfig.FilterMaskIdHigh = ((filter_mask << 5)  | (filter_mask >> (32 - 5))) & 0xFFFF;//0x446<<5;
 8000e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e16:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	60bb      	str	r3, [r7, #8]
	  canfilterconfig.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;//0x0000;
 8000e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e20:	0a1a      	lsrs	r2, r3, #8
 8000e22:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000e26:	4013      	ands	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]

	  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <ConfigureReceiveFilter+0x74>)
 8000e30:	f001 fa75 	bl	800231e <HAL_CAN_ConfigFilter>
}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	@ 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	1fffff0f 	.word	0x1fffff0f
 8000e40:	200000a8 	.word	0x200000a8
 8000e44:	20000328 	.word	0x20000328

08000e48 <ConfigurePullUpDownResistors>:

void ConfigurePullUpDownResistors()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]

	for(uint8_t i = 0; i < 4; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75fb      	strb	r3, [r7, #23]
 8000e5e:	e06d      	b.n	8000f3c <ConfigurePullUpDownResistors+0xf4>
	{
		GPIO_InitStruct.Pin = UCM.IOBiasPin[i];
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	4a3a      	ldr	r2, [pc, #232]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000e64:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	889b      	ldrh	r3, [r3, #4]
 8000e6e:	607b      	str	r3, [r7, #4]

		if(UCM.IObias[i] == 1) //Pull-up
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	4a36      	ldr	r2, [pc, #216]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000e74:	4413      	add	r3, r2
 8000e76:	f893 31f6 	ldrb.w	r3, [r3, #502]	@ 0x1f6
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d122      	bne.n	8000ec4 <ConfigurePullUpDownResistors+0x7c>
		{
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2302      	movs	r3, #2
 8000e88:	613b      	str	r3, [r7, #16]
			HAL_GPIO_Init(UCM.IOBiasPort[i], &GPIO_InitStruct);
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
 8000e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000e8e:	338e      	adds	r3, #142	@ 0x8e
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	1d3a      	adds	r2, r7, #4
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 f86e 	bl	8002f7c <HAL_GPIO_Init>

			HAL_GPIO_WritePin(UCM.IOBiasPort[i], UCM.IOBiasPin[i], GPIO_PIN_SET);
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000ea4:	338e      	adds	r3, #142	@ 0x8e
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	6858      	ldr	r0, [r3, #4]
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	4a27      	ldr	r2, [pc, #156]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000eb0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	889b      	ldrh	r3, [r3, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f002 f9e1 	bl	8003284 <HAL_GPIO_WritePin>
 8000ec2:	e038      	b.n	8000f36 <ConfigurePullUpDownResistors+0xee>
		}
		else if(UCM.IObias[i] == 2) //Pull-down
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	4a21      	ldr	r2, [pc, #132]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	f893 31f6 	ldrb.w	r3, [r3, #502]	@ 0x1f6
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d122      	bne.n	8000f18 <ConfigurePullUpDownResistors+0xd0>
		{
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2302      	movs	r3, #2
 8000edc:	613b      	str	r3, [r7, #16]
			HAL_GPIO_Init(UCM.IOBiasPort[i], &GPIO_InitStruct);
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000ee2:	338e      	adds	r3, #142	@ 0x8e
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 f844 	bl	8002f7c <HAL_GPIO_Init>

			HAL_GPIO_WritePin(UCM.IOBiasPort[i], UCM.IOBiasPin[i], GPIO_PIN_RESET);
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	4a15      	ldr	r2, [pc, #84]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000ef8:	338e      	adds	r3, #142	@ 0x8e
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	6858      	ldr	r0, [r3, #4]
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000f04:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	889b      	ldrh	r3, [r3, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	f002 f9b7 	bl	8003284 <HAL_GPIO_WritePin>
 8000f16:	e00e      	b.n	8000f36 <ConfigurePullUpDownResistors+0xee>
		}
		else //Floating
		{
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(UCM.IOBiasPort[i], &GPIO_InitStruct);
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <ConfigurePullUpDownResistors+0x104>)
 8000f24:	338e      	adds	r3, #142	@ 0x8e
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	1d3a      	adds	r2, r7, #4
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 f823 	bl	8002f7c <HAL_GPIO_Init>
	for(uint8_t i = 0; i < 4; i++)
 8000f36:	7dfb      	ldrb	r3, [r7, #23]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	75fb      	strb	r3, [r7, #23]
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d98e      	bls.n	8000e60 <ConfigurePullUpDownResistors+0x18>
		}
	}
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000a8 	.word	0x200000a8

08000f50 <ConfigureDigitalOutputs>:

void ConfigureDigitalOutputs()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b090      	sub	sp, #64	@ 0x40
 8000f54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
	uint16_t TimerChannelMapping[4] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 8000f64:	4a48      	ldr	r2, [pc, #288]	@ (8001088 <ConfigureDigitalOutputs+0x138>)
 8000f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t OutputMicroPinMapping[4] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_3, GPIO_PIN_2};
 8000f72:	4a46      	ldr	r2, [pc, #280]	@ (800108c <ConfigureDigitalOutputs+0x13c>)
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7c:	e883 0003 	stmia.w	r3, {r0, r1}

	for(uint8_t i = 0; i < 4; i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000f86:	e075      	b.n	8001074 <ConfigureDigitalOutputs+0x124>
	{
		if(UCM.IOconfig[i] == 0x04)
 8000f88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f8c:	4a40      	ldr	r2, [pc, #256]	@ (8001090 <ConfigureDigitalOutputs+0x140>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d149      	bne.n	800102c <ConfigureDigitalOutputs+0xdc>
		{
			GPIO_InitStruct.Pin = OutputMicroPinMapping[i];
 8000f98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	3340      	adds	r3, #64	@ 0x40
 8000fa0:	443b      	add	r3, r7
 8000fa2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4836      	ldr	r0, [pc, #216]	@ (8001094 <ConfigureDigitalOutputs+0x144>)
 8000fbc:	f001 ffde 	bl	8002f7c <HAL_GPIO_Init>

			HAL_TIM_PWM_Init(&htim2);
 8000fc0:	4835      	ldr	r0, [pc, #212]	@ (8001098 <ConfigureDigitalOutputs+0x148>)
 8000fc2:	f003 ff91 	bl	8004ee8 <HAL_TIM_PWM_Init>

			TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]
			sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd8:	2360      	movs	r3, #96	@ 0x60
 8000fda:	603b      	str	r3, [r7, #0]
			sConfigOC.Pulse = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
			sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
			sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
			HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TimerChannelMapping[i]);
 8000fe8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	3340      	adds	r3, #64	@ 0x40
 8000ff0:	443b      	add	r3, r7
 8000ff2:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4826      	ldr	r0, [pc, #152]	@ (8001098 <ConfigureDigitalOutputs+0x148>)
 8000ffe:	f004 f9d9 	bl	80053b4 <HAL_TIM_PWM_ConfigChannel>

			if(htim2.State == HAL_TIM_STATE_READY)
 8001002:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <ConfigureDigitalOutputs+0x148>)
 8001004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d102      	bne.n	8001014 <ConfigureDigitalOutputs+0xc4>
			{
				HAL_TIM_Base_Start_IT(&htim2);
 800100e:	4822      	ldr	r0, [pc, #136]	@ (8001098 <ConfigureDigitalOutputs+0x148>)
 8001010:	f003 ff18 	bl	8004e44 <HAL_TIM_Base_Start_IT>
			}

			HAL_TIM_PWM_Start(&htim2, TimerChannelMapping[i]);
 8001014:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	3340      	adds	r3, #64	@ 0x40
 800101c:	443b      	add	r3, r7
 800101e:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001022:	4619      	mov	r1, r3
 8001024:	481c      	ldr	r0, [pc, #112]	@ (8001098 <ConfigureDigitalOutputs+0x148>)
 8001026:	f003 ffb7 	bl	8004f98 <HAL_TIM_PWM_Start>
 800102a:	e01e      	b.n	800106a <ConfigureDigitalOutputs+0x11a>
		}
		else
		{
			HAL_TIM_PWM_Stop(&htim2, TimerChannelMapping[i]);
 800102c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	3340      	adds	r3, #64	@ 0x40
 8001034:	443b      	add	r3, r7
 8001036:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800103a:	4619      	mov	r1, r3
 800103c:	4816      	ldr	r0, [pc, #88]	@ (8001098 <ConfigureDigitalOutputs+0x148>)
 800103e:	f004 f84d 	bl	80050dc <HAL_TIM_PWM_Stop>

			GPIO_InitStruct.Pin = OutputMicroPinMapping[i];
 8001042:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	3340      	adds	r3, #64	@ 0x40
 800104a:	443b      	add	r3, r7
 800104c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2302      	movs	r3, #2
 800105c:	63bb      	str	r3, [r7, #56]	@ 0x38
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001062:	4619      	mov	r1, r3
 8001064:	480b      	ldr	r0, [pc, #44]	@ (8001094 <ConfigureDigitalOutputs+0x144>)
 8001066:	f001 ff89 	bl	8002f7c <HAL_GPIO_Init>
	for(uint8_t i = 0; i < 4; i++)
 800106a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800106e:	3301      	adds	r3, #1
 8001070:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001074:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001078:	2b03      	cmp	r3, #3
 800107a:	d985      	bls.n	8000f88 <ConfigureDigitalOutputs+0x38>
		}
	}
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3740      	adds	r7, #64	@ 0x40
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	08005da8 	.word	0x08005da8
 800108c:	08005db0 	.word	0x08005db0
 8001090:	200000a8 	.word	0x200000a8
 8001094:	40010800 	.word	0x40010800
 8001098:	200003a4 	.word	0x200003a4

0800109c <ReadSingleEndedVoltage>:

void ReadSingleEndedVoltage()
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e05f      	b.n	8001168 <ReadSingleEndedVoltage+0xcc>
	{
		if(UCM.IOconfig[i] == 0x05)
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4a33      	ldr	r2, [pc, #204]	@ (8001178 <ReadSingleEndedVoltage+0xdc>)
 80010ac:	4413      	add	r3, r2
 80010ae:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d155      	bne.n	8001162 <ReadSingleEndedVoltage+0xc6>
		{
			//Mapping from i to MUX selection
			uint8_t MuxSelection[4] = {ADS122C04_MUX_AIN3_AVSS,
 80010b6:	4b31      	ldr	r3, [pc, #196]	@ (800117c <ReadSingleEndedVoltage+0xe0>)
 80010b8:	607b      	str	r3, [r7, #4]
									   ADS122C04_MUX_AIN2_AVSS,
									   ADS122C04_MUX_AIN1_AVSS,
									   ADS122C04_MUX_AIN0_AVSS};

			ADS122C04Reg_t ADS122C04_Config;
			ADS122C04_Config = ADS122C04_DefaultConfig;
 80010ba:	4a31      	ldr	r2, [pc, #196]	@ (8001180 <ReadSingleEndedVoltage+0xe4>)
 80010bc:	463b      	mov	r3, r7
 80010be:	6810      	ldr	r0, [r2, #0]
 80010c0:	6018      	str	r0, [r3, #0]

			ADS122C04_Config.reg0.bit.GAIN = ADS122C04_GAIN_1;
 80010c2:	783b      	ldrb	r3, [r7, #0]
 80010c4:	f36f 0343 	bfc	r3, #1, #3
 80010c8:	703b      	strb	r3, [r7, #0]
			ADS122C04_Config.reg1.bit.VREF = ADS122C04_VREF_EXT_REF_PINS;
 80010ca:	787b      	ldrb	r3, [r7, #1]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f362 0342 	bfi	r3, r2, #1, #2
 80010d2:	707b      	strb	r3, [r7, #1]
			ADS122C04_Config.reg1.bit.MODE = ADS122C04_OP_MODE_TURBO;
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	707b      	strb	r3, [r7, #1]
			ADS122C04_Config.reg1.bit.DR = ADS122C04_DATA_RATE_1000SPS;
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2206      	movs	r2, #6
 80010e0:	f362 1347 	bfi	r3, r2, #5, #3
 80010e4:	707b      	strb	r3, [r7, #1]
			ADS122C04_Config.reg0.bit.MUX = MuxSelection[i];
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	3310      	adds	r3, #16
 80010ea:	443b      	add	r3, r7
 80010ec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	783b      	ldrb	r3, [r7, #0]
 80010f8:	f362 1307 	bfi	r3, r2, #4, #4
 80010fc:	703b      	strb	r3, [r7, #0]

			ADS122C04_Configurate(&ADS122C04_Config);
 80010fe:	463b      	mov	r3, r7
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fbd5 	bl	80018b0 <ADS122C04_Configurate>

			ADS122C04_WriteStartSync();
 8001106:	f000 fb85 	bl	8001814 <ADS122C04_WriteStartSync>
			HAL_Delay(100);
 800110a:	2064      	movs	r0, #100	@ 0x64
 800110c:	f000 ffe8 	bl	80020e0 <HAL_Delay>
			uint32_t ADCcount = ADS122C04_ReadData();
 8001110:	f000 fb91 	bl	8001836 <ADS122C04_ReadData>
 8001114:	60b8      	str	r0, [r7, #8]
			UCM.SingleEndedVoltage[i] = UCM.Voltage5V*(ADCcount/8388608.0);
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <ReadSingleEndedVoltage+0xdc>)
 8001118:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f967 	bl	80003f0 <__aeabi_i2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f7ff f952 	bl	80003d0 <__aeabi_ui2d>
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <ReadSingleEndedVoltage+0xe8>)
 8001132:	f7ff faf1 	bl	8000718 <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4620      	mov	r0, r4
 800113c:	4629      	mov	r1, r5
 800113e:	f7ff f9c1 	bl	80004c4 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	7bfc      	ldrb	r4, [r7, #15]
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fbf4 	bl	8000938 <__aeabi_d2uiz>
 8001150:	4603      	mov	r3, r0
 8001152:	b299      	uxth	r1, r3
 8001154:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <ReadSingleEndedVoltage+0xdc>)
 8001156:	f104 0308 	add.w	r3, r4, #8
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	460a      	mov	r2, r1
 8001160:	805a      	strh	r2, [r3, #2]
	for(uint8_t i = 0; i < 4; i++)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	3301      	adds	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d99c      	bls.n	80010a8 <ReadSingleEndedVoltage+0xc>
		}
	}
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	200000a8 	.word	0x200000a8
 800117c:	08090a0b 	.word	0x08090a0b
 8001180:	20000320 	.word	0x20000320
 8001184:	41600000 	.word	0x41600000

08001188 <ReadDiffVoltage>:

void ReadDiffVoltage()
{
 8001188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 2; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e0ae      	b.n	80012f4 <ReadDiffVoltage+0x16c>
	{
		if(UCM.DiffVoltageEnabled[i] == 0x01)
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	4a5b      	ldr	r2, [pc, #364]	@ (8001308 <ReadDiffVoltage+0x180>)
 800119a:	4413      	add	r3, r2
 800119c:	7f9b      	ldrb	r3, [r3, #30]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	f040 80a5 	bne.w	80012ee <ReadDiffVoltage+0x166>
		{
			ADS122C04Reg_t ADS122C04_Config;
			ADS122C04_Config = ADS122C04_DefaultConfig;
 80011a4:	4a59      	ldr	r2, [pc, #356]	@ (800130c <ReadDiffVoltage+0x184>)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	6810      	ldr	r0, [r2, #0]
 80011aa:	6018      	str	r0, [r3, #0]

			ADS122C04_Config.reg0.bit.GAIN = ADS122C04_GAIN_128;
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	f043 030e 	orr.w	r3, r3, #14
 80011b2:	713b      	strb	r3, [r7, #4]
			ADS122C04_Config.reg1.bit.VREF = ADS122C04_VREF_EXT_REF_PINS;
 80011b4:	797b      	ldrb	r3, [r7, #5]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f362 0342 	bfi	r3, r2, #1, #2
 80011bc:	717b      	strb	r3, [r7, #5]
			ADS122C04_Config.reg1.bit.MODE = ADS122C04_OP_MODE_TURBO;
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	717b      	strb	r3, [r7, #5]
			ADS122C04_Config.reg1.bit.DR = ADS122C04_DATA_RATE_20SPS;
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	f36f 1347 	bfc	r3, #5, #3
 80011cc:	717b      	strb	r3, [r7, #5]

			ADS122C04_Config.reg0.bit.MUX = UCM.DiffVoltageMux[i];
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001308 <ReadDiffVoltage+0x180>)
 80011d2:	4413      	add	r3, r2
 80011d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	793b      	ldrb	r3, [r7, #4]
 80011e0:	f362 1307 	bfi	r3, r2, #4, #4
 80011e4:	713b      	strb	r3, [r7, #4]

			ADS122C04_Configurate(&ADS122C04_Config);
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fb61 	bl	80018b0 <ADS122C04_Configurate>

			ADS122C04_WriteStartSync();
 80011ee:	f000 fb11 	bl	8001814 <ADS122C04_WriteStartSync>
			HAL_Delay(100);
 80011f2:	2064      	movs	r0, #100	@ 0x64
 80011f4:	f000 ff74 	bl	80020e0 <HAL_Delay>
			uint32_t ADCcount = ADS122C04_ReadData();
 80011f8:	f000 fb1d 	bl	8001836 <ADS122C04_ReadData>
 80011fc:	60b8      	str	r0, [r7, #8]

			if(ADCcount > 8388608)
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001204:	d93c      	bls.n	8001280 <ReadDiffVoltage+0xf8>
			{
				ADCcount = 16777216 - ADCcount;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800120c:	60bb      	str	r3, [r7, #8]
				UCM.DiffEndedVoltage[i] = -(UCM.Voltage5V*1000.0)*((ADCcount)/8388608.0)*(1/128.0);
 800120e:	4b3e      	ldr	r3, [pc, #248]	@ (8001308 <ReadDiffVoltage+0x180>)
 8001210:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f8eb 	bl	80003f0 <__aeabi_i2d>
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b3c      	ldr	r3, [pc, #240]	@ (8001310 <ReadDiffVoltage+0x188>)
 8001220:	f7ff f950 	bl	80004c4 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800122e:	68b8      	ldr	r0, [r7, #8]
 8001230:	f7ff f8ce 	bl	80003d0 <__aeabi_ui2d>
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b36      	ldr	r3, [pc, #216]	@ (8001314 <ReadDiffVoltage+0x18c>)
 800123a:	f7ff fa6d 	bl	8000718 <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4620      	mov	r0, r4
 8001244:	4629      	mov	r1, r5
 8001246:	f7ff f93d 	bl	80004c4 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800125a:	f7ff f933 	bl	80004c4 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	7bfe      	ldrb	r6, [r7, #15]
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fb3e 	bl	80008e8 <__aeabi_d2iz>
 800126c:	4603      	mov	r3, r0
 800126e:	b219      	sxth	r1, r3
 8001270:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <ReadDiffVoltage+0x180>)
 8001272:	f106 030c 	add.w	r3, r6, #12
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	460a      	mov	r2, r1
 800127c:	805a      	strh	r2, [r3, #2]
 800127e:	e036      	b.n	80012ee <ReadDiffVoltage+0x166>
			}
			else
			{
				UCM.DiffEndedVoltage[i] = (UCM.Voltage5V*1000.0)*((ADCcount)/8388608.0)*(1/128.0);
 8001280:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <ReadDiffVoltage+0x180>)
 8001282:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f8b2 	bl	80003f0 <__aeabi_i2d>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <ReadDiffVoltage+0x188>)
 8001292:	f7ff f917 	bl	80004c4 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4690      	mov	r8, r2
 800129c:	4699      	mov	r9, r3
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f7ff f896 	bl	80003d0 <__aeabi_ui2d>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <ReadDiffVoltage+0x18c>)
 80012aa:	f7ff fa35 	bl	8000718 <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4640      	mov	r0, r8
 80012b4:	4649      	mov	r1, r9
 80012b6:	f7ff f905 	bl	80004c4 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012ca:	f7ff f8fb 	bl	80004c4 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	7bfe      	ldrb	r6, [r7, #15]
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fb06 	bl	80008e8 <__aeabi_d2iz>
 80012dc:	4603      	mov	r3, r0
 80012de:	b219      	sxth	r1, r3
 80012e0:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <ReadDiffVoltage+0x180>)
 80012e2:	f106 030c 	add.w	r3, r6, #12
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	460a      	mov	r2, r1
 80012ec:	805a      	strh	r2, [r3, #2]
	for(uint8_t i = 0; i < 2; i++)
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	3301      	adds	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	f67f af4d 	bls.w	8001196 <ReadDiffVoltage+0xe>
			}
		}
	}
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001308:	200000a8 	.word	0x200000a8
 800130c:	20000320 	.word	0x20000320
 8001310:	408f4000 	.word	0x408f4000
 8001314:	41600000 	.word	0x41600000

08001318 <TransmitHeartBeat>:

void TransmitHeartBeat()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	//Increment counter by 1, if 255 force to 0
	if(UCM.HeartBeatCounter == 255)
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <TransmitHeartBeat+0x50>)
 800131e:	785b      	ldrb	r3, [r3, #1]
 8001320:	2bff      	cmp	r3, #255	@ 0xff
 8001322:	d103      	bne.n	800132c <TransmitHeartBeat+0x14>
	{
		UCM.HeartBeatCounter = 0;
 8001324:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <TransmitHeartBeat+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	705a      	strb	r2, [r3, #1]
 800132a:	e005      	b.n	8001338 <TransmitHeartBeat+0x20>
	}
	else
	{
		UCM.HeartBeatCounter++;
 800132c:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <TransmitHeartBeat+0x50>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <TransmitHeartBeat+0x50>)
 8001336:	705a      	strb	r2, [r3, #1]
	}
	UCM.canHeartBeat.TxData[1] = UCM.HeartBeatCounter;
 8001338:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <TransmitHeartBeat+0x50>)
 800133a:	785a      	ldrb	r2, [r3, #1]
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <TransmitHeartBeat+0x50>)
 800133e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

	//Toggle debug LED
	HAL_GPIO_TogglePin(UCM.dbgLedPort, UCM.dbgLedPin);
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <TransmitHeartBeat+0x50>)
 8001344:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001348:	4a07      	ldr	r2, [pc, #28]	@ (8001368 <TransmitHeartBeat+0x50>)
 800134a:	f8b2 2210 	ldrh.w	r2, [r2, #528]	@ 0x210
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f001 ffaf 	bl	80032b4 <HAL_GPIO_TogglePin>

	HAL_CAN_AddTxMessage(&hcan, &UCM.canHeartBeat.TxHeader, UCM.canHeartBeat.TxData, &UCM.canHeartBeat.TxMailbox);
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <TransmitHeartBeat+0x54>)
 8001358:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <TransmitHeartBeat+0x58>)
 800135a:	4906      	ldr	r1, [pc, #24]	@ (8001374 <TransmitHeartBeat+0x5c>)
 800135c:	4806      	ldr	r0, [pc, #24]	@ (8001378 <TransmitHeartBeat+0x60>)
 800135e:	f001 f8eb 	bl	8002538 <HAL_CAN_AddTxMessage>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000a8 	.word	0x200000a8
 800136c:	20000118 	.word	0x20000118
 8001370:	20000110 	.word	0x20000110
 8001374:	200000f8 	.word	0x200000f8
 8001378:	20000328 	.word	0x20000328

0800137c <OffsetCalibrationADC>:
	UCM.digitalIn3Read = HAL_GPIO_ReadPin(UCM.digitalIn3Port, UCM.digitalIn3Pin);
	UCM.digitalIn4Read = HAL_GPIO_ReadPin(UCM.digitalIn4Port, UCM.digitalIn4Pin);
}

void OffsetCalibrationADC()
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
	  ADS122C04Reg_t ADS122C04_Config;
	  ADS122C04_Config = ADS122C04_DefaultConfig;
 8001382:	4a16      	ldr	r2, [pc, #88]	@ (80013dc <OffsetCalibrationADC+0x60>)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	6810      	ldr	r0, [r2, #0]
 8001388:	6018      	str	r0, [r3, #0]
	  ADS122C04_Config.reg0.bit.MUX = ADS122C04_MUX_SHORTED;//ADS122C04_MUX_AIN3_AIN2;
 800138a:	793b      	ldrb	r3, [r7, #4]
 800138c:	220e      	movs	r2, #14
 800138e:	f362 1307 	bfi	r3, r2, #4, #4
 8001392:	713b      	strb	r3, [r7, #4]
	  ADS122C04_Config.reg0.bit.GAIN = ADS122C04_GAIN_128;
 8001394:	793b      	ldrb	r3, [r7, #4]
 8001396:	f043 030e 	orr.w	r3, r3, #14
 800139a:	713b      	strb	r3, [r7, #4]
	  ADS122C04_Config.reg1.bit.VREF = ADS122C04_VREF_EXT_REF_PINS;
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	2201      	movs	r2, #1
 80013a0:	f362 0342 	bfi	r3, r2, #1, #2
 80013a4:	717b      	strb	r3, [r7, #5]
	  ADS122C04_Config.reg1.bit.MODE = ADS122C04_OP_MODE_TURBO;
 80013a6:	797b      	ldrb	r3, [r7, #5]
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	717b      	strb	r3, [r7, #5]
	  ADS122C04_Config.reg1.bit.DR = ADS122C04_DATA_RATE_20SPS;
 80013ae:	797b      	ldrb	r3, [r7, #5]
 80013b0:	f36f 1347 	bfc	r3, #5, #3
 80013b4:	717b      	strb	r3, [r7, #5]

	  ADS122C04_Configurate(&ADS122C04_Config);
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fa79 	bl	80018b0 <ADS122C04_Configurate>

	  ADS122C04_WriteStartSync();
 80013be:	f000 fa29 	bl	8001814 <ADS122C04_WriteStartSync>
	  HAL_Delay(100);
 80013c2:	2064      	movs	r0, #100	@ 0x64
 80013c4:	f000 fe8c 	bl	80020e0 <HAL_Delay>
	  UCM.OffsetCalibration = ADS122C04_ReadData();
 80013c8:	f000 fa35 	bl	8001836 <ADS122C04_ReadData>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <OffsetCalibrationADC+0x64>)
 80013d0:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000320 	.word	0x20000320
 80013e0:	200000a8 	.word	0x200000a8

080013e4 <TransmitSingleEndedVoltage>:

	HAL_CAN_AddTxMessage(&hcan, &UCM.canBiasState.TxHeader, UCM.canBiasState.TxData, &UCM.canBiasState.TxMailbox);
}

void TransmitSingleEndedVoltage()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	UCM.canSingleEndedVoltage.TxData[0] = (UCM.SingleEndedVoltage[0] >> 8);
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 80013ea:	8a5b      	ldrh	r3, [r3, #18]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 80013f4:	f883 2198 	strb.w	r2, [r3, #408]	@ 0x198
	UCM.canSingleEndedVoltage.TxData[1] = (UCM.SingleEndedVoltage[0] & 0xFF);
 80013f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 80013fa:	8a5b      	ldrh	r3, [r3, #18]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 8001400:	f883 2199 	strb.w	r2, [r3, #409]	@ 0x199
	UCM.canSingleEndedVoltage.TxData[2] = (UCM.SingleEndedVoltage[1] >> 8);
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 8001406:	8a9b      	ldrh	r3, [r3, #20]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	b29b      	uxth	r3, r3
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 8001410:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
	UCM.canSingleEndedVoltage.TxData[3] = (UCM.SingleEndedVoltage[1] & 0xFF);
 8001414:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 8001416:	8a9b      	ldrh	r3, [r3, #20]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 800141c:	f883 219b 	strb.w	r2, [r3, #411]	@ 0x19b
	UCM.canSingleEndedVoltage.TxData[4] = (UCM.SingleEndedVoltage[2] >> 8);
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 8001422:	8adb      	ldrh	r3, [r3, #22]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 800142c:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
	UCM.canSingleEndedVoltage.TxData[5] = (UCM.SingleEndedVoltage[2] & 0xFF);
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 8001432:	8adb      	ldrh	r3, [r3, #22]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 8001438:	f883 219d 	strb.w	r2, [r3, #413]	@ 0x19d
	UCM.canSingleEndedVoltage.TxData[6] = (UCM.SingleEndedVoltage[3] >> 8);
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 800143e:	8b1b      	ldrh	r3, [r3, #24]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	b29b      	uxth	r3, r3
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 8001448:	f883 219e 	strb.w	r2, [r3, #414]	@ 0x19e
	UCM.canSingleEndedVoltage.TxData[7] = (UCM.SingleEndedVoltage[3] & 0xFF);
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 800144e:	8b1b      	ldrh	r3, [r3, #24]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <TransmitSingleEndedVoltage+0x84>)
 8001454:	f883 219f 	strb.w	r2, [r3, #415]	@ 0x19f

	HAL_CAN_AddTxMessage(&hcan, &UCM.canSingleEndedVoltage.TxHeader, UCM.canSingleEndedVoltage.TxData, &UCM.canSingleEndedVoltage.TxMailbox);
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <TransmitSingleEndedVoltage+0x88>)
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <TransmitSingleEndedVoltage+0x8c>)
 800145c:	4905      	ldr	r1, [pc, #20]	@ (8001474 <TransmitSingleEndedVoltage+0x90>)
 800145e:	4806      	ldr	r0, [pc, #24]	@ (8001478 <TransmitSingleEndedVoltage+0x94>)
 8001460:	f001 f86a 	bl	8002538 <HAL_CAN_AddTxMessage>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200000a8 	.word	0x200000a8
 800146c:	20000248 	.word	0x20000248
 8001470:	20000240 	.word	0x20000240
 8001474:	20000228 	.word	0x20000228
 8001478:	20000328 	.word	0x20000328

0800147c <TransmitDifferentialVoltage>:

void TransmitDifferentialVoltage()
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	UCM.canDifferentialVoltage.TxData[0] = (UCM.DiffEndedVoltage[0] >> 8);
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <TransmitDifferentialVoltage+0x54>)
 8001482:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001486:	121b      	asrs	r3, r3, #8
 8001488:	b21b      	sxth	r3, r3
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <TransmitDifferentialVoltage+0x54>)
 800148e:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	UCM.canDifferentialVoltage.TxData[1] = (UCM.DiffEndedVoltage[0] & 0xFF);
 8001492:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <TransmitDifferentialVoltage+0x54>)
 8001494:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <TransmitDifferentialVoltage+0x54>)
 800149c:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
	UCM.canDifferentialVoltage.TxData[2] = (UCM.DiffEndedVoltage[1] >> 8);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <TransmitDifferentialVoltage+0x54>)
 80014a2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80014a6:	121b      	asrs	r3, r3, #8
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <TransmitDifferentialVoltage+0x54>)
 80014ae:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
	UCM.canDifferentialVoltage.TxData[3] = (UCM.DiffEndedVoltage[1] & 0xFF);
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <TransmitDifferentialVoltage+0x54>)
 80014b4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <TransmitDifferentialVoltage+0x54>)
 80014bc:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7

	HAL_CAN_AddTxMessage(&hcan, &UCM.canDifferentialVoltage.TxHeader, UCM.canDifferentialVoltage.TxData, &UCM.canDifferentialVoltage.TxMailbox);
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <TransmitDifferentialVoltage+0x58>)
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <TransmitDifferentialVoltage+0x5c>)
 80014c4:	4905      	ldr	r1, [pc, #20]	@ (80014dc <TransmitDifferentialVoltage+0x60>)
 80014c6:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <TransmitDifferentialVoltage+0x64>)
 80014c8:	f001 f836 	bl	8002538 <HAL_CAN_AddTxMessage>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200000a8 	.word	0x200000a8
 80014d4:	20000294 	.word	0x20000294
 80014d8:	2000028c 	.word	0x2000028c
 80014dc:	20000274 	.word	0x20000274
 80014e0:	20000328 	.word	0x20000328

080014e4 <canFramesDefine>:
	  }
}
*/

void canFramesDefine()
{
 80014e4:	b4b0      	push	{r4, r5, r7}
 80014e6:	af00      	add	r7, sp, #0
	//Heartbeat
	UCM.canHeartBeat.canPeripheral = hcan;
 80014e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001624 <canFramesDefine+0x140>)
 80014ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001628 <canFramesDefine+0x144>)
 80014ec:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80014f0:	4615      	mov	r5, r2
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014fe:	e884 0003 	stmia.w	r4, {r0, r1}
	UCM.canHeartBeat.TxHeader.IDE = CAN_ID_STD;
 8001502:	4b48      	ldr	r3, [pc, #288]	@ (8001624 <canFramesDefine+0x140>)
 8001504:	2200      	movs	r2, #0
 8001506:	659a      	str	r2, [r3, #88]	@ 0x58
	UCM.canHeartBeat.TxHeader.StdId = (0x400 + UCM.Number);
 8001508:	4b46      	ldr	r3, [pc, #280]	@ (8001624 <canFramesDefine+0x140>)
 800150a:	f893 31f0 	ldrb.w	r3, [r3, #496]	@ 0x1f0
 800150e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001512:	461a      	mov	r2, r3
 8001514:	4b43      	ldr	r3, [pc, #268]	@ (8001624 <canFramesDefine+0x140>)
 8001516:	651a      	str	r2, [r3, #80]	@ 0x50
	UCM.canHeartBeat.TxHeader.RTR = CAN_RTR_DATA;
 8001518:	4b42      	ldr	r3, [pc, #264]	@ (8001624 <canFramesDefine+0x140>)
 800151a:	2200      	movs	r2, #0
 800151c:	65da      	str	r2, [r3, #92]	@ 0x5c
	UCM.canHeartBeat.TxHeader.DLC = 0x02;
 800151e:	4b41      	ldr	r3, [pc, #260]	@ (8001624 <canFramesDefine+0x140>)
 8001520:	2202      	movs	r2, #2
 8001522:	661a      	str	r2, [r3, #96]	@ 0x60
	UCM.canHeartBeat.TxData[0] = 0;
 8001524:	4b3f      	ldr	r3, [pc, #252]	@ (8001624 <canFramesDefine+0x140>)
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	UCM.canHeartBeat.TxData[1] = 0;
 800152c:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <canFramesDefine+0x140>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

	//Single-ended voltage
	UCM.canSingleEndedVoltage.canPeripheral = hcan;
 8001534:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <canFramesDefine+0x140>)
 8001536:	4a3c      	ldr	r2, [pc, #240]	@ (8001628 <canFramesDefine+0x144>)
 8001538:	f503 74ac 	add.w	r4, r3, #344	@ 0x158
 800153c:	4615      	mov	r5, r2
 800153e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	e895 0003 	ldmia.w	r5, {r0, r1}
 800154a:	e884 0003 	stmia.w	r4, {r0, r1}
	UCM.canSingleEndedVoltage.TxHeader.IDE = CAN_ID_STD;
 800154e:	4b35      	ldr	r3, [pc, #212]	@ (8001624 <canFramesDefine+0x140>)
 8001550:	2200      	movs	r2, #0
 8001552:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
	UCM.canSingleEndedVoltage.TxHeader.StdId = (0x410 + UCM.Number);
 8001556:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <canFramesDefine+0x140>)
 8001558:	f893 31f0 	ldrb.w	r3, [r3, #496]	@ 0x1f0
 800155c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8001560:	461a      	mov	r2, r3
 8001562:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <canFramesDefine+0x140>)
 8001564:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	UCM.canSingleEndedVoltage.TxHeader.RTR = CAN_RTR_DATA;
 8001568:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <canFramesDefine+0x140>)
 800156a:	2200      	movs	r2, #0
 800156c:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
	UCM.canSingleEndedVoltage.TxHeader.DLC = 0x08;
 8001570:	4b2c      	ldr	r3, [pc, #176]	@ (8001624 <canFramesDefine+0x140>)
 8001572:	2208      	movs	r2, #8
 8001574:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	UCM.canSingleEndedVoltage.TxData[0] = 0xAA;
 8001578:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <canFramesDefine+0x140>)
 800157a:	22aa      	movs	r2, #170	@ 0xaa
 800157c:	f883 2198 	strb.w	r2, [r3, #408]	@ 0x198
	UCM.canSingleEndedVoltage.TxData[1] = 0xAA;
 8001580:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <canFramesDefine+0x140>)
 8001582:	22aa      	movs	r2, #170	@ 0xaa
 8001584:	f883 2199 	strb.w	r2, [r3, #409]	@ 0x199
	UCM.canSingleEndedVoltage.TxData[2] = 0xAA;
 8001588:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <canFramesDefine+0x140>)
 800158a:	22aa      	movs	r2, #170	@ 0xaa
 800158c:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
	UCM.canSingleEndedVoltage.TxData[3] = 0xAA;
 8001590:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <canFramesDefine+0x140>)
 8001592:	22aa      	movs	r2, #170	@ 0xaa
 8001594:	f883 219b 	strb.w	r2, [r3, #411]	@ 0x19b
	UCM.canSingleEndedVoltage.TxData[4] = 0xAA;
 8001598:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <canFramesDefine+0x140>)
 800159a:	22aa      	movs	r2, #170	@ 0xaa
 800159c:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
	UCM.canSingleEndedVoltage.TxData[5] = 0xAA;
 80015a0:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <canFramesDefine+0x140>)
 80015a2:	22aa      	movs	r2, #170	@ 0xaa
 80015a4:	f883 219d 	strb.w	r2, [r3, #413]	@ 0x19d
	UCM.canSingleEndedVoltage.TxData[6] = 0xAA;
 80015a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <canFramesDefine+0x140>)
 80015aa:	22aa      	movs	r2, #170	@ 0xaa
 80015ac:	f883 219e 	strb.w	r2, [r3, #414]	@ 0x19e
	UCM.canSingleEndedVoltage.TxData[7] = 0xAA;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <canFramesDefine+0x140>)
 80015b2:	22aa      	movs	r2, #170	@ 0xaa
 80015b4:	f883 219f 	strb.w	r2, [r3, #415]	@ 0x19f

	//Differential voltage
	UCM.canDifferentialVoltage.canPeripheral = hcan;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <canFramesDefine+0x140>)
 80015ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <canFramesDefine+0x144>)
 80015bc:	f503 74d2 	add.w	r4, r3, #420	@ 0x1a4
 80015c0:	4615      	mov	r5, r2
 80015c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015ce:	e884 0003 	stmia.w	r4, {r0, r1}
	UCM.canDifferentialVoltage.TxHeader.IDE = CAN_ID_STD;
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <canFramesDefine+0x140>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	UCM.canDifferentialVoltage.TxHeader.StdId = (0x420 + UCM.Number);
 80015da:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <canFramesDefine+0x140>)
 80015dc:	f893 31f0 	ldrb.w	r3, [r3, #496]	@ 0x1f0
 80015e0:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <canFramesDefine+0x140>)
 80015e8:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
	UCM.canDifferentialVoltage.TxHeader.RTR = CAN_RTR_DATA;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <canFramesDefine+0x140>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
	UCM.canDifferentialVoltage.TxHeader.DLC = 0x04;
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <canFramesDefine+0x140>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
	UCM.canDifferentialVoltage.TxData[0] = 0xAA;
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <canFramesDefine+0x140>)
 80015fe:	22aa      	movs	r2, #170	@ 0xaa
 8001600:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	UCM.canDifferentialVoltage.TxData[1] = 0xAA;
 8001604:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <canFramesDefine+0x140>)
 8001606:	22aa      	movs	r2, #170	@ 0xaa
 8001608:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
	UCM.canDifferentialVoltage.TxData[2] = 0xAA;
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <canFramesDefine+0x140>)
 800160e:	22aa      	movs	r2, #170	@ 0xaa
 8001610:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
	UCM.canDifferentialVoltage.TxData[3] = 0xAA;
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <canFramesDefine+0x140>)
 8001616:	22aa      	movs	r2, #170	@ 0xaa
 8001618:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bcb0      	pop	{r4, r5, r7}
 8001622:	4770      	bx	lr
 8001624:	200000a8 	.word	0x200000a8
 8001628:	20000328 	.word	0x20000328

0800162c <ioAssign>:
{

}

void ioAssign()
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	//Outputs
	UCM.dbgLedPort = GPIOB;
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <ioAssign+0xb0>)
 8001632:	4a2b      	ldr	r2, [pc, #172]	@ (80016e0 <ioAssign+0xb4>)
 8001634:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	UCM.dbgLedPin = GPIO_PIN_1;
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <ioAssign+0xb0>)
 800163a:	2202      	movs	r2, #2
 800163c:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
	HAL_GPIO_WritePin(UCM.dbgLedPort, UCM.dbgLedPin, GPIO_PIN_RESET); //LED on (default)
 8001640:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <ioAssign+0xb0>)
 8001642:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001646:	4a25      	ldr	r2, [pc, #148]	@ (80016dc <ioAssign+0xb0>)
 8001648:	f8b2 1210 	ldrh.w	r1, [r2, #528]	@ 0x210
 800164c:	2200      	movs	r2, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fe18 	bl	8003284 <HAL_GPIO_WritePin>

	//Digital inputs
    UCM.digitalIn1Port = GPIOB;
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <ioAssign+0xb0>)
 8001656:	4a22      	ldr	r2, [pc, #136]	@ (80016e0 <ioAssign+0xb4>)
 8001658:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    UCM.digitalIn1Pin = GPIO_PIN_3;
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <ioAssign+0xb0>)
 800165e:	2208      	movs	r2, #8
 8001660:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
    UCM.digitalIn2Port = GPIOB;
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <ioAssign+0xb0>)
 8001666:	4a1e      	ldr	r2, [pc, #120]	@ (80016e0 <ioAssign+0xb4>)
 8001668:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
    UCM.digitalIn2Pin = GPIO_PIN_4;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <ioAssign+0xb0>)
 800166e:	2210      	movs	r2, #16
 8001670:	f8a3 2228 	strh.w	r2, [r3, #552]	@ 0x228
    UCM.digitalIn3Port = GPIOB;
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <ioAssign+0xb0>)
 8001676:	4a1a      	ldr	r2, [pc, #104]	@ (80016e0 <ioAssign+0xb4>)
 8001678:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
    UCM.digitalIn3Pin = GPIO_PIN_5;
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <ioAssign+0xb0>)
 800167e:	2220      	movs	r2, #32
 8001680:	f8a3 2230 	strh.w	r2, [r3, #560]	@ 0x230
    UCM.digitalIn4Port = GPIOA;
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <ioAssign+0xb0>)
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <ioAssign+0xb8>)
 8001688:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
    UCM.digitalIn4Pin = GPIO_PIN_15;
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <ioAssign+0xb0>)
 800168e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001692:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238

	//IO bias pins
    UCM.IOBiasPort[0] = GPIOA;
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <ioAssign+0xb0>)
 8001698:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <ioAssign+0xb8>)
 800169a:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
    UCM.IOBiasPin[0] = GPIO_PIN_5;
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <ioAssign+0xb0>)
 80016a0:	2220      	movs	r2, #32
 80016a2:	f8a3 224c 	strh.w	r2, [r3, #588]	@ 0x24c
    UCM.IOBiasPort[1] = GPIOA;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <ioAssign+0xb0>)
 80016a8:	4a0e      	ldr	r2, [pc, #56]	@ (80016e4 <ioAssign+0xb8>)
 80016aa:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
    UCM.IOBiasPin[1] = GPIO_PIN_6;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <ioAssign+0xb0>)
 80016b0:	2240      	movs	r2, #64	@ 0x40
 80016b2:	f8a3 224e 	strh.w	r2, [r3, #590]	@ 0x24e
    UCM.IOBiasPort[2] = GPIOA;
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <ioAssign+0xb0>)
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <ioAssign+0xb8>)
 80016ba:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
    UCM.IOBiasPin[2] = GPIO_PIN_7;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <ioAssign+0xb0>)
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	f8a3 2250 	strh.w	r2, [r3, #592]	@ 0x250
    UCM.IOBiasPort[3] = GPIOA;
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <ioAssign+0xb0>)
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <ioAssign+0xb8>)
 80016ca:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248
    UCM.IOBiasPin[3] = GPIO_PIN_4;
 80016ce:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <ioAssign+0xb0>)
 80016d0:	2210      	movs	r2, #16
 80016d2:	f8a3 2252 	strh.w	r2, [r3, #594]	@ 0x252
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200000a8 	.word	0x200000a8
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	40010800 	.word	0x40010800

080016e8 <ADS122C04_Init>:
ADS122C04Reg_t ADS122C04_DefaultConfig;

static I2C_HandleTypeDef* ADS122C04_24FC_I2C_Handle; //i2c handle

void ADS122C04_Init(I2C_HandleTypeDef *Handle)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	//Create default config
	ADS122C04_DefaultConfig.reg0.bit.GAIN = 0;
 80016f0:	4a2b      	ldr	r2, [pc, #172]	@ (80017a0 <ADS122C04_Init+0xb8>)
 80016f2:	7813      	ldrb	r3, [r2, #0]
 80016f4:	f36f 0343 	bfc	r3, #1, #3
 80016f8:	7013      	strb	r3, [r2, #0]
	ADS122C04_DefaultConfig.reg0.bit.MUX = 0;
 80016fa:	4a29      	ldr	r2, [pc, #164]	@ (80017a0 <ADS122C04_Init+0xb8>)
 80016fc:	7813      	ldrb	r3, [r2, #0]
 80016fe:	f36f 1307 	bfc	r3, #4, #4
 8001702:	7013      	strb	r3, [r2, #0]
	ADS122C04_DefaultConfig.reg0.bit.PGA_BYPASS = 0;
 8001704:	4a26      	ldr	r2, [pc, #152]	@ (80017a0 <ADS122C04_Init+0xb8>)
 8001706:	7813      	ldrb	r3, [r2, #0]
 8001708:	f36f 0300 	bfc	r3, #0, #1
 800170c:	7013      	strb	r3, [r2, #0]

	ADS122C04_DefaultConfig.reg1.bit.DR = 0;
 800170e:	4a24      	ldr	r2, [pc, #144]	@ (80017a0 <ADS122C04_Init+0xb8>)
 8001710:	7853      	ldrb	r3, [r2, #1]
 8001712:	f36f 1347 	bfc	r3, #5, #3
 8001716:	7053      	strb	r3, [r2, #1]
	ADS122C04_DefaultConfig.reg1.bit.MODE = 0;
 8001718:	4a21      	ldr	r2, [pc, #132]	@ (80017a0 <ADS122C04_Init+0xb8>)
 800171a:	7853      	ldrb	r3, [r2, #1]
 800171c:	f36f 1304 	bfc	r3, #4, #1
 8001720:	7053      	strb	r3, [r2, #1]
	ADS122C04_DefaultConfig.reg1.bit.CMBIT = 0;
 8001722:	4a1f      	ldr	r2, [pc, #124]	@ (80017a0 <ADS122C04_Init+0xb8>)
 8001724:	7853      	ldrb	r3, [r2, #1]
 8001726:	f36f 03c3 	bfc	r3, #3, #1
 800172a:	7053      	strb	r3, [r2, #1]
	ADS122C04_DefaultConfig.reg1.bit.VREF = 0;
 800172c:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <ADS122C04_Init+0xb8>)
 800172e:	7853      	ldrb	r3, [r2, #1]
 8001730:	f36f 0342 	bfc	r3, #1, #2
 8001734:	7053      	strb	r3, [r2, #1]
	ADS122C04_DefaultConfig.reg1.bit.TS = 0;
 8001736:	4a1a      	ldr	r2, [pc, #104]	@ (80017a0 <ADS122C04_Init+0xb8>)
 8001738:	7853      	ldrb	r3, [r2, #1]
 800173a:	f36f 0300 	bfc	r3, #0, #1
 800173e:	7053      	strb	r3, [r2, #1]

	ADS122C04_DefaultConfig.reg2.bit.DRDY = 0;
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <ADS122C04_Init+0xb8>)
 8001742:	7893      	ldrb	r3, [r2, #2]
 8001744:	f36f 13c7 	bfc	r3, #7, #1
 8001748:	7093      	strb	r3, [r2, #2]
	ADS122C04_DefaultConfig.reg2.bit.DCNT = 0;
 800174a:	4a15      	ldr	r2, [pc, #84]	@ (80017a0 <ADS122C04_Init+0xb8>)
 800174c:	7893      	ldrb	r3, [r2, #2]
 800174e:	f36f 1386 	bfc	r3, #6, #1
 8001752:	7093      	strb	r3, [r2, #2]
	ADS122C04_DefaultConfig.reg2.bit.CRCbits = 0;
 8001754:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <ADS122C04_Init+0xb8>)
 8001756:	7893      	ldrb	r3, [r2, #2]
 8001758:	f36f 1305 	bfc	r3, #4, #2
 800175c:	7093      	strb	r3, [r2, #2]
	ADS122C04_DefaultConfig.reg2.bit.BCS = 0;
 800175e:	4a10      	ldr	r2, [pc, #64]	@ (80017a0 <ADS122C04_Init+0xb8>)
 8001760:	7893      	ldrb	r3, [r2, #2]
 8001762:	f36f 03c3 	bfc	r3, #3, #1
 8001766:	7093      	strb	r3, [r2, #2]
	ADS122C04_DefaultConfig.reg2.bit.IDAC = 0;
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <ADS122C04_Init+0xb8>)
 800176a:	7893      	ldrb	r3, [r2, #2]
 800176c:	f36f 0302 	bfc	r3, #0, #3
 8001770:	7093      	strb	r3, [r2, #2]

	ADS122C04_DefaultConfig.reg3.bit.I1MUX = 0;
 8001772:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <ADS122C04_Init+0xb8>)
 8001774:	78d3      	ldrb	r3, [r2, #3]
 8001776:	f36f 1347 	bfc	r3, #5, #3
 800177a:	70d3      	strb	r3, [r2, #3]
	ADS122C04_DefaultConfig.reg3.bit.I2MUX = 0;
 800177c:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <ADS122C04_Init+0xb8>)
 800177e:	78d3      	ldrb	r3, [r2, #3]
 8001780:	f36f 0384 	bfc	r3, #2, #3
 8001784:	70d3      	strb	r3, [r2, #3]
	ADS122C04_DefaultConfig.reg3.bit.RESERVED = 0;
 8001786:	4a06      	ldr	r2, [pc, #24]	@ (80017a0 <ADS122C04_Init+0xb8>)
 8001788:	78d3      	ldrb	r3, [r2, #3]
 800178a:	f36f 0301 	bfc	r3, #0, #2
 800178e:	70d3      	strb	r3, [r2, #3]

	ADS122C04_24FC_I2C_Handle = Handle;
 8001790:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <ADS122C04_Init+0xbc>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000320 	.word	0x20000320
 80017a4:	20000324 	.word	0x20000324

080017a8 <ADS122C04_I2C_Write>:

//Framework neutral I2C write
static void ADS122C04_I2C_Write(uint8_t *DataBuffer, uint8_t i2cAddress, uint8_t DataLength)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
 80017b4:	4613      	mov	r3, r2
 80017b6:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Master_Transmit(ADS122C04_24FC_I2C_Handle, i2cAddress, DataBuffer, DataLength, ADS122C04_I2C_TIMEOUT);
 80017b8:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <ADS122C04_I2C_Write+0x30>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	b299      	uxth	r1, r3
 80017c0:	78bb      	ldrb	r3, [r7, #2]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	220a      	movs	r2, #10
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	f001 fed1 	bl	8003570 <HAL_I2C_Master_Transmit>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000324 	.word	0x20000324

080017dc <ADS122C04_I2C_Read>:

//Framework neutral I2C read
static void ADS122C04_I2C_Read(uint8_t *DataBuffer, uint8_t i2cAddress, uint8_t DataLength)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
 80017e8:	4613      	mov	r3, r2
 80017ea:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Master_Receive(ADS122C04_24FC_I2C_Handle, i2cAddress | 0x01, DataBuffer, DataLength, ADS122C04_I2C_TIMEOUT);
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <ADS122C04_I2C_Read+0x34>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	78bb      	ldrb	r3, [r7, #2]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	220a      	movs	r2, #10
 8001800:	9200      	str	r2, [sp, #0]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	f001 ffb2 	bl	800376c <HAL_I2C_Master_Receive>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000324 	.word	0x20000324

08001814 <ADS122C04_WriteStartSync>:

void ADS122C04_WriteStartSync()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
	uint8_t DataBuffer;

	uint8_t address = 0x80;
 800181a:	2380      	movs	r3, #128	@ 0x80
 800181c:	71fb      	strb	r3, [r7, #7]

	DataBuffer = ADS122C04_START_CMD;
 800181e:	2308      	movs	r3, #8
 8001820:	71bb      	strb	r3, [r7, #6]

	ADS122C04_I2C_Write(&DataBuffer, address, 1);
 8001822:	79f9      	ldrb	r1, [r7, #7]
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	2201      	movs	r2, #1
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffbd 	bl	80017a8 <ADS122C04_I2C_Write>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <ADS122C04_ReadData>:

uint32_t ADS122C04_ReadData()
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
	uint8_t DataBuffer;
	uint8_t Response[3];

	uint8_t address = 0x80;
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	71fb      	strb	r3, [r7, #7]

	DataBuffer = ADS122C04_RDATA_CMD;
 8001840:	2310      	movs	r3, #16
 8001842:	71bb      	strb	r3, [r7, #6]

	ADS122C04_I2C_Write(&DataBuffer, address, 1);
 8001844:	79f9      	ldrb	r1, [r7, #7]
 8001846:	1dbb      	adds	r3, r7, #6
 8001848:	2201      	movs	r2, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ffac 	bl	80017a8 <ADS122C04_I2C_Write>

	ADS122C04_I2C_Read(&Response, address, 3);
 8001850:	79f9      	ldrb	r1, [r7, #7]
 8001852:	463b      	mov	r3, r7
 8001854:	2203      	movs	r2, #3
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ffc0 	bl	80017dc <ADS122C04_I2C_Read>

	return (Response[0] << 16) + (Response[1] << 8) + (Response[2] << 0);
 800185c:	783b      	ldrb	r3, [r7, #0]
 800185e:	041a      	lsls	r2, r3, #16
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	4413      	add	r3, r2
 8001866:	78ba      	ldrb	r2, [r7, #2]
 8001868:	4413      	add	r3, r2
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <ADS122C04_WriteRegister>:

	return Response;
}

void ADS122C04_WriteRegister(uint8_t RegisterAddress, uint8_t Data)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	460a      	mov	r2, r1
 800187c:	71fb      	strb	r3, [r7, #7]
 800187e:	4613      	mov	r3, r2
 8001880:	71bb      	strb	r3, [r7, #6]
	uint8_t DataBuffer[2];

	uint8_t address = 0x80;
 8001882:	2380      	movs	r3, #128	@ 0x80
 8001884:	73fb      	strb	r3, [r7, #15]

	DataBuffer[0] = ADS122C04_WREG_CMD | (RegisterAddress << 2);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	b25b      	sxtb	r3, r3
 800188c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001890:	b25b      	sxtb	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	733b      	strb	r3, [r7, #12]

	DataBuffer[1] = Data;
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	737b      	strb	r3, [r7, #13]

	ADS122C04_I2C_Write(DataBuffer, address, 2);
 800189a:	7bf9      	ldrb	r1, [r7, #15]
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2202      	movs	r2, #2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff80 	bl	80017a8 <ADS122C04_I2C_Write>
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <ADS122C04_Configurate>:

void ADS122C04_Configurate(ADS122C04Reg_t *Config)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	ADS122C04_WriteRegister(ADS122C04_CONFIG_0_REG, Config->reg0.all);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff ffd7 	bl	8001872 <ADS122C04_WriteRegister>
	ADS122C04_WriteRegister(ADS122C04_CONFIG_1_REG, Config->reg1.all);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	4619      	mov	r1, r3
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff ffd1 	bl	8001872 <ADS122C04_WriteRegister>
	ADS122C04_WriteRegister(ADS122C04_CONFIG_2_REG, Config->reg2.all);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	789b      	ldrb	r3, [r3, #2]
 80018d4:	4619      	mov	r1, r3
 80018d6:	2002      	movs	r0, #2
 80018d8:	f7ff ffcb 	bl	8001872 <ADS122C04_WriteRegister>
	ADS122C04_WriteRegister(ADS122C04_CONFIG_3_REG, Config->reg3.all);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	78db      	ldrb	r3, [r3, #3]
 80018e0:	4619      	mov	r1, r3
 80018e2:	2003      	movs	r0, #3
 80018e4:	f7ff ffc5 	bl	8001872 <ADS122C04_WriteRegister>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f4:	f000 fb92 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f8:	f000 f854 	bl	80019a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_CAN_MspInit(&hcan);
 80018fc:	4821      	ldr	r0, [pc, #132]	@ (8001984 <main+0x94>)
 80018fe:	f000 fa45 	bl	8001d8c <HAL_CAN_MspInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001902:	f000 f991 	bl	8001c28 <MX_GPIO_Init>
  MX_CAN_Init();
 8001906:	f000 f88f 	bl	8001a28 <MX_CAN_Init>
  MX_TIM2_Init();
 800190a:	f000 f8f3 	bl	8001af4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800190e:	f000 f93d 	bl	8001b8c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001912:	f000 f8c1 	bl	8001a98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ioAssign();
 8001916:	f7ff fe89 	bl	800162c <ioAssign>

  EEPROM_24FC_Init(&hi2c1);
 800191a:	481b      	ldr	r0, [pc, #108]	@ (8001988 <main+0x98>)
 800191c:	f7ff f82c 	bl	8000978 <EEPROM_24FC_Init>
  ReadEEPROMconfig();
 8001920:	f7ff f9f2 	bl	8000d08 <ReadEEPROMconfig>

  canFramesDefine();
 8001924:	f7ff fdde 	bl	80014e4 <canFramesDefine>

  ConfigurePullUpDownResistors();
 8001928:	f7ff fa8e 	bl	8000e48 <ConfigurePullUpDownResistors>

  TickerAttach(&Ticker, &TransmitHeartBeat, CAN_RATE_1000MS);
 800192c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001930:	4916      	ldr	r1, [pc, #88]	@ (800198c <main+0x9c>)
 8001932:	4817      	ldr	r0, [pc, #92]	@ (8001990 <main+0xa0>)
 8001934:	f7ff f8c7 	bl	8000ac6 <TickerAttach>
  TickerAttach(&Ticker, &TransmitSingleEndedVoltage, CAN_RATE_1000MS);
 8001938:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800193c:	4915      	ldr	r1, [pc, #84]	@ (8001994 <main+0xa4>)
 800193e:	4814      	ldr	r0, [pc, #80]	@ (8001990 <main+0xa0>)
 8001940:	f7ff f8c1 	bl	8000ac6 <TickerAttach>
  TickerAttach(&Ticker, &TransmitDifferentialVoltage, CAN_RATE_1000MS);
 8001944:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001948:	4913      	ldr	r1, [pc, #76]	@ (8001998 <main+0xa8>)
 800194a:	4811      	ldr	r0, [pc, #68]	@ (8001990 <main+0xa0>)
 800194c:	f7ff f8bb 	bl	8000ac6 <TickerAttach>

  HAL_CAN_Start(&hcan);
 8001950:	480c      	ldr	r0, [pc, #48]	@ (8001984 <main+0x94>)
 8001952:	f000 fdad 	bl	80024b0 <HAL_CAN_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8001956:	4811      	ldr	r0, [pc, #68]	@ (800199c <main+0xac>)
 8001958:	f003 fa74 	bl	8004e44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //Start timer for ticker
 800195c:	4810      	ldr	r0, [pc, #64]	@ (80019a0 <main+0xb0>)
 800195e:	f003 fa71 	bl	8004e44 <HAL_TIM_Base_Start_IT>

  ADS122C04_Init(&hi2c1);
 8001962:	4809      	ldr	r0, [pc, #36]	@ (8001988 <main+0x98>)
 8001964:	f7ff fec0 	bl	80016e8 <ADS122C04_Init>

  ConfigureReceiveFilter();
 8001968:	f7ff fa32 	bl	8000dd0 <ConfigureReceiveFilter>

  OffsetCalibrationADC();
 800196c:	f7ff fd06 	bl	800137c <OffsetCalibrationADC>
  EEPROM_24FC_ByteWrite(14, 0);
  EEPROM_24FC_ByteWrite(15, 7);
  EEPROM_24FC_ByteWrite(16, 7);
  */

  ConfigureDigitalOutputs();
 8001970:	f7ff faee 	bl	8000f50 <ConfigureDigitalOutputs>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CheckReceivedCAN();
 8001974:	f7ff f908 	bl	8000b88 <CheckReceivedCAN>
	  ReadSingleEndedVoltage();
 8001978:	f7ff fb90 	bl	800109c <ReadSingleEndedVoltage>
	  ReadDiffVoltage();
 800197c:	f7ff fc04 	bl	8001188 <ReadDiffVoltage>
	  CheckReceivedCAN();
 8001980:	bf00      	nop
 8001982:	e7f7      	b.n	8001974 <main+0x84>
 8001984:	20000328 	.word	0x20000328
 8001988:	20000350 	.word	0x20000350
 800198c:	08001319 	.word	0x08001319
 8001990:	20000000 	.word	0x20000000
 8001994:	080013e5 	.word	0x080013e5
 8001998:	0800147d 	.word	0x0800147d
 800199c:	200003a4 	.word	0x200003a4
 80019a0:	200003ec 	.word	0x200003ec

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	@ 0x40
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	2228      	movs	r2, #40	@ 0x28
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 f9c0 	bl	8005d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ca:	2301      	movs	r3, #1
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ce:	2310      	movs	r3, #16
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d2:	2302      	movs	r3, #2
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019d6:	2300      	movs	r3, #0
 80019d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019da:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80019de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fde1 	bl	80045ac <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80019f0:	f000 f991 	bl	8001d16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 f84e 	bl	8004ab0 <HAL_RCC_ClockConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a1a:	f000 f97c 	bl	8001d16 <Error_Handler>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3740      	adds	r7, #64	@ 0x40
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a2e:	4a19      	ldr	r2, [pc, #100]	@ (8001a94 <MX_CAN_Init+0x6c>)
 8001a30:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a34:	2204      	movs	r2, #4
 8001a36:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a40:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8001a44:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a48:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001a4c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a50:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001a54:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <MX_CAN_Init+0x68>)
 8001a7c:	f000 fb54 	bl	8002128 <HAL_CAN_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001a86:	f000 f946 	bl	8001d16 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000328 	.word	0x20000328
 8001a94:	40006400 	.word	0x40006400

08001a98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001a9e:	4a13      	ldr	r2, [pc, #76]	@ (8001aec <MX_I2C1_Init+0x54>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001aa4:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <MX_I2C1_Init+0x58>)
 8001aa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001ab6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <MX_I2C1_Init+0x50>)
 8001ad6:	f001 fc07 	bl	80032e8 <HAL_I2C_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae0:	f000 f919 	bl	8001d16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000350 	.word	0x20000350
 8001aec:	40005400 	.word	0x40005400
 8001af0:	000186a0 	.word	0x000186a0

08001af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <MX_TIM2_Init+0x94>)
 8001b12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <MX_TIM2_Init+0x94>)
 8001b1a:	2263      	movs	r2, #99	@ 0x63
 8001b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <MX_TIM2_Init+0x94>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2599;
 8001b24:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <MX_TIM2_Init+0x94>)
 8001b26:	f640 2227 	movw	r2, #2599	@ 0xa27
 8001b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <MX_TIM2_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <MX_TIM2_Init+0x94>)
 8001b34:	2280      	movs	r2, #128	@ 0x80
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b38:	4813      	ldr	r0, [pc, #76]	@ (8001b88 <MX_TIM2_Init+0x94>)
 8001b3a:	f003 f933 	bl	8004da4 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b44:	f000 f8e7 	bl	8001d16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	4619      	mov	r1, r3
 8001b54:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <MX_TIM2_Init+0x94>)
 8001b56:	f003 fcef 	bl	8005538 <HAL_TIM_ConfigClockSource>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b60:	f000 f8d9 	bl	8001d16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <MX_TIM2_Init+0x94>)
 8001b72:	f004 f871 	bl	8005c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b7c:	f000 f8cb 	bl	8001d16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200003a4 	.word	0x200003a4

08001b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <MX_TIM3_Init+0x94>)
 8001baa:	4a1e      	ldr	r2, [pc, #120]	@ (8001c24 <MX_TIM3_Init+0x98>)
 8001bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_TIM3_Init+0x94>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_TIM3_Init+0x94>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <MX_TIM3_Init+0x94>)
 8001bbc:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001bc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <MX_TIM3_Init+0x94>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <MX_TIM3_Init+0x94>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bce:	4814      	ldr	r0, [pc, #80]	@ (8001c20 <MX_TIM3_Init+0x94>)
 8001bd0:	f003 f8e8 	bl	8004da4 <HAL_TIM_Base_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001bda:	f000 f89c 	bl	8001d16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	4619      	mov	r1, r3
 8001bea:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <MX_TIM3_Init+0x94>)
 8001bec:	f003 fca4 	bl	8005538 <HAL_TIM_ConfigClockSource>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001bf6:	f000 f88e 	bl	8001d16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	@ (8001c20 <MX_TIM3_Init+0x94>)
 8001c08:	f004 f826 	bl	8005c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c12:	f000 f880 	bl	8001d16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200003ec 	.word	0x200003ec
 8001c24:	40000400 	.word	0x40000400

08001c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <MX_GPIO_Init+0xa4>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a22      	ldr	r2, [pc, #136]	@ (8001ccc <MX_GPIO_Init+0xa4>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <MX_GPIO_Init+0xa4>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <MX_GPIO_Init+0xa4>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a1c      	ldr	r2, [pc, #112]	@ (8001ccc <MX_GPIO_Init+0xa4>)
 8001c5a:	f043 0308 	orr.w	r3, r3, #8
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <MX_GPIO_Init+0xa4>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4817      	ldr	r0, [pc, #92]	@ (8001cd0 <MX_GPIO_Init+0xa8>)
 8001c72:	f001 fb07 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c76:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8001c7a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4812      	ldr	r0, [pc, #72]	@ (8001cd4 <MX_GPIO_Init+0xac>)
 8001c8c:	f001 f976 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c90:	2302      	movs	r3, #2
 8001c92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480a      	ldr	r0, [pc, #40]	@ (8001cd0 <MX_GPIO_Init+0xa8>)
 8001ca8:	f001 f968 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cac:	2338      	movs	r3, #56	@ 0x38
 8001cae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <MX_GPIO_Init+0xa8>)
 8001cc0:	f001 f95c 	bl	8002f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010c00 	.word	0x40010c00
 8001cd4:	40010800 	.word	0x40010800

08001cd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d102      	bne.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		TickerHandler(&Ticker);
 8001cea:	4804      	ldr	r0, [pc, #16]	@ (8001cfc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001cec:	f7fe ff11 	bl	8000b12 <TickerHandler>
	}
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]


  HAL_CAN_IRQHandler(hcan);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fe05 	bl	8002918 <HAL_CAN_IRQHandler>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1a:	b672      	cpsid	i
}
 8001d1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  return;
 8001d1e:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6193      	str	r3, [r2, #24]
 8001d3a:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	61d3      	str	r3, [r2, #28]
 8001d52:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <HAL_MspInit+0x5c>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_MspInit+0x60>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_MspInit+0x60>)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000

08001d8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <HAL_CAN_MspInit+0x9c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d139      	bne.n	8001e20 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <HAL_CAN_MspInit+0xa0>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <HAL_CAN_MspInit+0xa0>)
 8001db2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	61d3      	str	r3, [r2, #28]
 8001db8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <HAL_CAN_MspInit+0xa0>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_CAN_MspInit+0xa0>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a18      	ldr	r2, [pc, #96]	@ (8001e2c <HAL_CAN_MspInit+0xa0>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <HAL_CAN_MspInit+0xa0>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ddc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	480f      	ldr	r0, [pc, #60]	@ (8001e30 <HAL_CAN_MspInit+0xa4>)
 8001df2:	f001 f8c3 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4809      	ldr	r0, [pc, #36]	@ (8001e30 <HAL_CAN_MspInit+0xa4>)
 8001e0c:	f001 f8b6 	bl	8002f7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2014      	movs	r0, #20
 8001e16:	f001 f87a 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f001 f893 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40006400 	.word	0x40006400
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010800 	.word	0x40010800

08001e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ea4 <HAL_I2C_MspInit+0x70>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d123      	bne.n	8001e9c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <HAL_I2C_MspInit+0x74>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	4a13      	ldr	r2, [pc, #76]	@ (8001ea8 <HAL_I2C_MspInit+0x74>)
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	6193      	str	r3, [r2, #24]
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <HAL_I2C_MspInit+0x74>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e6c:	23c0      	movs	r3, #192	@ 0xc0
 8001e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e70:	2312      	movs	r3, #18
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480b      	ldr	r0, [pc, #44]	@ (8001eac <HAL_I2C_MspInit+0x78>)
 8001e80:	f001 f87c 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <HAL_I2C_MspInit+0x74>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <HAL_I2C_MspInit+0x74>)
 8001e8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e8e:	61d3      	str	r3, [r2, #28]
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_I2C_MspInit+0x74>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010c00 	.word	0x40010c00

08001eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec0:	d114      	bne.n	8001eec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ec2:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <HAL_TIM_Base_MspInit+0x78>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a18      	ldr	r2, [pc, #96]	@ (8001f28 <HAL_TIM_Base_MspInit+0x78>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <HAL_TIM_Base_MspInit+0x78>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	201c      	movs	r0, #28
 8001ee0:	f001 f815 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ee4:	201c      	movs	r0, #28
 8001ee6:	f001 f82e 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eea:	e018      	b.n	8001f1e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8001f2c <HAL_TIM_Base_MspInit+0x7c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d113      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <HAL_TIM_Base_MspInit+0x78>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a0b      	ldr	r2, [pc, #44]	@ (8001f28 <HAL_TIM_Base_MspInit+0x78>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	61d3      	str	r3, [r2, #28]
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <HAL_TIM_Base_MspInit+0x78>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	201d      	movs	r0, #29
 8001f14:	f000 fffb 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f18:	201d      	movs	r0, #29
 8001f1a:	f001 f814 	bl	8002f46 <HAL_NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40000400 	.word	0x40000400

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <NMI_Handler+0x4>

08001f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <MemManage_Handler+0x4>

08001f48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <BusFault_Handler+0x4>

08001f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <UsageFault_Handler+0x4>

08001f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f892 	bl	80020a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f8e:	f000 fcc3 	bl	8002918 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000328 	.word	0x20000328

08001f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <TIM2_IRQHandler+0x10>)
 8001fa2:	f003 f8ff 	bl	80051a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200003a4 	.word	0x200003a4

08001fb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <TIM3_IRQHandler+0x10>)
 8001fb6:	f003 f8f5 	bl	80051a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200003ec 	.word	0x200003ec

08001fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd0:	f7ff fff8 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd4:	480b      	ldr	r0, [pc, #44]	@ (8002004 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fd6:	490c      	ldr	r1, [pc, #48]	@ (8002008 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a09      	ldr	r2, [pc, #36]	@ (8002010 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fec:	4c09      	ldr	r4, [pc, #36]	@ (8002014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f003 fea5 	bl	8005d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7ff fc77 	bl	80018f0 <main>
  bx lr
 8002002:	4770      	bx	lr
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800200c:	08005dec 	.word	0x08005dec
  ldr r2, =_sbss
 8002010:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002014:	20000438 	.word	0x20000438

08002018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC1_2_IRQHandler>
	...

0800201c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <HAL_Init+0x28>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a07      	ldr	r2, [pc, #28]	@ (8002044 <HAL_Init+0x28>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202c:	2003      	movs	r0, #3
 800202e:	f000 ff63 	bl	8002ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002032:	200f      	movs	r0, #15
 8002034:	f000 f808 	bl	8002048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002038:	f7ff fe76 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_InitTick+0x54>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <HAL_InitTick+0x58>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f000 ff7b 	bl	8002f62 <HAL_SYSTICK_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00e      	b.n	8002094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d80a      	bhi.n	8002092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207c:	2200      	movs	r2, #0
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f000 ff43 	bl	8002f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002088:	4a06      	ldr	r2, [pc, #24]	@ (80020a4 <HAL_InitTick+0x5c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e000      	b.n	8002094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	2000007c 	.word	0x2000007c
 80020a0:	20000084 	.word	0x20000084
 80020a4:	20000080 	.word	0x20000080

080020a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_IncTick+0x1c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_IncTick+0x20>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a03      	ldr	r2, [pc, #12]	@ (80020c8 <HAL_IncTick+0x20>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	20000084 	.word	0x20000084
 80020c8:	20000434 	.word	0x20000434

080020cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b02      	ldr	r3, [pc, #8]	@ (80020dc <HAL_GetTick+0x10>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	20000434 	.word	0x20000434

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff fff0 	bl	80020cc <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffe0 	bl	80020cc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000084 	.word	0x20000084

08002128 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0ed      	b.n	8002316 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fe20 	bl	8001d8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800215c:	f7ff ffb6 	bl	80020cc <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002162:	e012      	b.n	800218a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002164:	f7ff ffb2 	bl	80020cc <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b0a      	cmp	r3, #10
 8002170:	d90b      	bls.n	800218a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2205      	movs	r2, #5
 8002182:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0c5      	b.n	8002316 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0e5      	beq.n	8002164 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0202 	bic.w	r2, r2, #2
 80021a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021a8:	f7ff ff90 	bl	80020cc <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ae:	e012      	b.n	80021d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021b0:	f7ff ff8c 	bl	80020cc <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b0a      	cmp	r3, #10
 80021bc:	d90b      	bls.n	80021d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2205      	movs	r2, #5
 80021ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e09f      	b.n	8002316 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e5      	bne.n	80021b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7e1b      	ldrb	r3, [r3, #24]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d108      	bne.n	80021fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e007      	b.n	800220e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7e5b      	ldrb	r3, [r3, #25]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e007      	b.n	8002238 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002236:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e9b      	ldrb	r3, [r3, #26]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d108      	bne.n	8002252 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0220 	orr.w	r2, r2, #32
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e007      	b.n	8002262 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0220 	bic.w	r2, r2, #32
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7edb      	ldrb	r3, [r3, #27]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0210 	bic.w	r2, r2, #16
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e007      	b.n	800228c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0210 	orr.w	r2, r2, #16
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7f1b      	ldrb	r3, [r3, #28]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d108      	bne.n	80022a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0208 	orr.w	r2, r2, #8
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e007      	b.n	80022b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0208 	bic.w	r2, r2, #8
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7f5b      	ldrb	r3, [r3, #29]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d108      	bne.n	80022d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0204 	orr.w	r2, r2, #4
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e007      	b.n	80022e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0204 	bic.w	r2, r2, #4
 80022de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	ea42 0103 	orr.w	r1, r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800231e:	b480      	push	{r7}
 8002320:	b087      	sub	sp, #28
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002334:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d003      	beq.n	8002344 <HAL_CAN_ConfigFilter+0x26>
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b02      	cmp	r3, #2
 8002340:	f040 80aa 	bne.w	8002498 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2201      	movs	r2, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d123      	bne.n	80023c6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	401a      	ands	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3248      	adds	r2, #72	@ 0x48
 80023a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023bc:	6979      	ldr	r1, [r7, #20]
 80023be:	3348      	adds	r3, #72	@ 0x48
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d122      	bne.n	8002414 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3248      	adds	r2, #72	@ 0x48
 80023f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002408:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800240a:	6979      	ldr	r1, [r7, #20]
 800240c:	3348      	adds	r3, #72	@ 0x48
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800242e:	e007      	b.n	8002440 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	431a      	orrs	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	43db      	mvns	r3, r3
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800245a:	e007      	b.n	800246c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	431a      	orrs	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800248a:	f023 0201 	bic.w	r2, r3, #1
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e006      	b.n	80024a6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d12e      	bne.n	8002522 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024dc:	f7ff fdf6 	bl	80020cc <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024e2:	e012      	b.n	800250a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024e4:	f7ff fdf2 	bl	80020cc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b0a      	cmp	r3, #10
 80024f0:	d90b      	bls.n	800250a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2205      	movs	r2, #5
 8002502:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e012      	b.n	8002530 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1e5      	bne.n	80024e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e006      	b.n	8002530 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002556:	7ffb      	ldrb	r3, [r7, #31]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d003      	beq.n	8002564 <HAL_CAN_AddTxMessage+0x2c>
 800255c:	7ffb      	ldrb	r3, [r7, #31]
 800255e:	2b02      	cmp	r3, #2
 8002560:	f040 80ad 	bne.w	80026be <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10a      	bne.n	8002584 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8095 	beq.w	80026ae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	0e1b      	lsrs	r3, r3, #24
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800258e:	2201      	movs	r2, #1
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	6809      	ldr	r1, [r1, #0]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3318      	adds	r3, #24
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	440b      	add	r3, r1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e00f      	b.n	80025dc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025c6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025d0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3318      	adds	r3, #24
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	440b      	add	r3, r1
 80025da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3318      	adds	r3, #24
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	440b      	add	r3, r1
 80025ec:	3304      	adds	r3, #4
 80025ee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	7d1b      	ldrb	r3, [r3, #20]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d111      	bne.n	800261c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3318      	adds	r3, #24
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	4413      	add	r3, r2
 8002604:	3304      	adds	r3, #4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	6811      	ldr	r1, [r2, #0]
 800260c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3318      	adds	r3, #24
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	440b      	add	r3, r1
 8002618:	3304      	adds	r3, #4
 800261a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3307      	adds	r3, #7
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	061a      	lsls	r2, r3, #24
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3306      	adds	r3, #6
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3305      	adds	r3, #5
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	4313      	orrs	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	3204      	adds	r2, #4
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	4610      	mov	r0, r2
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	6811      	ldr	r1, [r2, #0]
 8002644:	ea43 0200 	orr.w	r2, r3, r0
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002652:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3303      	adds	r3, #3
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	061a      	lsls	r2, r3, #24
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3302      	adds	r3, #2
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3301      	adds	r3, #1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	4313      	orrs	r3, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	4610      	mov	r0, r2
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6811      	ldr	r1, [r2, #0]
 800267a:	ea43 0200 	orr.w	r2, r3, r0
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	440b      	add	r3, r1
 8002684:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002688:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3318      	adds	r3, #24
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	4413      	add	r3, r2
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	6811      	ldr	r1, [r2, #0]
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3318      	adds	r3, #24
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	440b      	add	r3, r1
 80026a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e00e      	b.n	80026cc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e006      	b.n	80026cc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3724      	adds	r7, #36	@ 0x24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026d6:	b480      	push	{r7}
 80026d8:	b087      	sub	sp, #28
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d003      	beq.n	80026fa <HAL_CAN_GetRxMessage+0x24>
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	f040 8103 	bne.w	8002900 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10e      	bne.n	800271e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0f7      	b.n	800290e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0e8      	b.n	800290e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	331b      	adds	r3, #27
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	4413      	add	r3, r2
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0204 	and.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	331b      	adds	r3, #27
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	4413      	add	r3, r2
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0d5b      	lsrs	r3, r3, #21
 800276a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e00b      	b.n	800278c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	331b      	adds	r3, #27
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4413      	add	r3, r2
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	08db      	lsrs	r3, r3, #3
 8002784:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	331b      	adds	r3, #27
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0202 	and.w	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	331b      	adds	r3, #27
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2208      	movs	r2, #8
 80027be:	611a      	str	r2, [r3, #16]
 80027c0:	e00b      	b.n	80027da <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	331b      	adds	r3, #27
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 020f 	and.w	r2, r3, #15
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	331b      	adds	r3, #27
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	4413      	add	r3, r2
 80027e6:	3304      	adds	r3, #4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	331b      	adds	r3, #27
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	4413      	add	r3, r2
 80027fe:	3304      	adds	r3, #4
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0c1b      	lsrs	r3, r3, #16
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	4413      	add	r3, r2
 8002814:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	4413      	add	r3, r2
 800282a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0a1a      	lsrs	r2, r3, #8
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	4413      	add	r3, r2
 8002844:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	0c1a      	lsrs	r2, r3, #16
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	3302      	adds	r3, #2
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	4413      	add	r3, r2
 800285e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e1a      	lsrs	r2, r3, #24
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3303      	adds	r3, #3
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	4413      	add	r3, r2
 8002878:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3304      	adds	r3, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	4413      	add	r3, r2
 8002890:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0a1a      	lsrs	r2, r3, #8
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	3305      	adds	r3, #5
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0c1a      	lsrs	r2, r3, #16
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3306      	adds	r3, #6
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0e1a      	lsrs	r2, r3, #24
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	3307      	adds	r3, #7
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d108      	bne.n	80028ec <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0220 	orr.w	r2, r2, #32
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	e007      	b.n	80028fc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e006      	b.n	800290e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d07c      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d023      	beq.n	80029b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2201      	movs	r2, #1
 800296e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f983 	bl	8002c86 <HAL_CAN_TxMailbox0CompleteCallback>
 8002980:	e016      	b.n	80029b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
 8002994:	e00c      	b.n	80029b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a8:	e002      	b.n	80029b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f986 	bl	8002cbc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d024      	beq.n	8002a04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f962 	bl	8002c98 <HAL_CAN_TxMailbox1CompleteCallback>
 80029d4:	e016      	b.n	8002a04 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e8:	e00c      	b.n	8002a04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fc:	e002      	b.n	8002a04 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f965 	bl	8002cce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d024      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f941 	bl	8002caa <HAL_CAN_TxMailbox2CompleteCallback>
 8002a28:	e016      	b.n	8002a58 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3c:	e00c      	b.n	8002a58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a50:	e002      	b.n	8002a58 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f944 	bl	8002ce0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00c      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2210      	movs	r2, #16
 8002a7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f92a 	bl	8002cf2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d009      	beq.n	8002abc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff f922 	bl	8001d00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2210      	movs	r2, #16
 8002ade:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2208      	movs	r2, #8
 8002afa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f90a 	bl	8002d16 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8f2 	bl	8002d04 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f8f3 	bl	8002d28 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8eb 	bl	8002d3a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d07b      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d072      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d043      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d03e      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002be6:	2b60      	cmp	r3, #96	@ 0x60
 8002be8:	d02b      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x32a>
 8002bea:	2b60      	cmp	r3, #96	@ 0x60
 8002bec:	d82e      	bhi.n	8002c4c <HAL_CAN_IRQHandler+0x334>
 8002bee:	2b50      	cmp	r3, #80	@ 0x50
 8002bf0:	d022      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x320>
 8002bf2:	2b50      	cmp	r3, #80	@ 0x50
 8002bf4:	d82a      	bhi.n	8002c4c <HAL_CAN_IRQHandler+0x334>
 8002bf6:	2b40      	cmp	r3, #64	@ 0x40
 8002bf8:	d019      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x316>
 8002bfa:	2b40      	cmp	r3, #64	@ 0x40
 8002bfc:	d826      	bhi.n	8002c4c <HAL_CAN_IRQHandler+0x334>
 8002bfe:	2b30      	cmp	r3, #48	@ 0x30
 8002c00:	d010      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x30c>
 8002c02:	2b30      	cmp	r3, #48	@ 0x30
 8002c04:	d822      	bhi.n	8002c4c <HAL_CAN_IRQHandler+0x334>
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d002      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x2f8>
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d005      	beq.n	8002c1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c0e:	e01d      	b.n	8002c4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	f043 0308 	orr.w	r3, r3, #8
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c18:	e019      	b.n	8002c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	f043 0310 	orr.w	r3, r3, #16
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c22:	e014      	b.n	8002c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	f043 0320 	orr.w	r3, r3, #32
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c2c:	e00f      	b.n	8002c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c36:	e00a      	b.n	8002c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c40:	e005      	b.n	8002c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c4a:	e000      	b.n	8002c4e <HAL_CAN_IRQHandler+0x336>
            break;
 8002c4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002c5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2204      	movs	r2, #4
 8002c64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f867 	bl	8002d4c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c7e:	bf00      	nop
 8002c80:	3728      	adds	r7, #40	@ 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
	...

08002d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d92:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	60d3      	str	r3, [r2, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 0307 	and.w	r3, r3, #7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db0b      	blt.n	8002dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4906      	ldr	r1, [pc, #24]	@ (8002df8 <__NVIC_EnableIRQ+0x34>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2001      	movs	r0, #1
 8002de6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	@ (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	@ (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	@ 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f1c3 0307 	rsb	r3, r3, #7
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf28      	it	cs
 8002e6e:	2304      	movcs	r3, #4
 8002e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d902      	bls.n	8002e80 <NVIC_EncodePriority+0x30>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3b03      	subs	r3, #3
 8002e7e:	e000      	b.n	8002e82 <NVIC_EncodePriority+0x32>
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	4313      	orrs	r3, r2
         );
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	@ 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ec4:	d301      	bcc.n	8002eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00f      	b.n	8002eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <SysTick_Config+0x40>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed2:	210f      	movs	r1, #15
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	f7ff ff90 	bl	8002dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <SysTick_Config+0x40>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee2:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <SysTick_Config+0x40>)
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	e000e010 	.word	0xe000e010

08002ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff2d 	bl	8002d60 <__NVIC_SetPriorityGrouping>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f20:	f7ff ff42 	bl	8002da8 <__NVIC_GetPriorityGrouping>
 8002f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	6978      	ldr	r0, [r7, #20]
 8002f2c:	f7ff ff90 	bl	8002e50 <NVIC_EncodePriority>
 8002f30:	4602      	mov	r2, r0
 8002f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff5f 	bl	8002dfc <__NVIC_SetPriority>
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff35 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ffa2 	bl	8002eb4 <SysTick_Config>
 8002f70:	4603      	mov	r3, r0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b08b      	sub	sp, #44	@ 0x2c
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8e:	e169      	b.n	8003264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f90:	2201      	movs	r2, #1
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 8158 	bne.w	800325e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4a9a      	ldr	r2, [pc, #616]	@ (800321c <HAL_GPIO_Init+0x2a0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d05e      	beq.n	8003076 <HAL_GPIO_Init+0xfa>
 8002fb8:	4a98      	ldr	r2, [pc, #608]	@ (800321c <HAL_GPIO_Init+0x2a0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d875      	bhi.n	80030aa <HAL_GPIO_Init+0x12e>
 8002fbe:	4a98      	ldr	r2, [pc, #608]	@ (8003220 <HAL_GPIO_Init+0x2a4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d058      	beq.n	8003076 <HAL_GPIO_Init+0xfa>
 8002fc4:	4a96      	ldr	r2, [pc, #600]	@ (8003220 <HAL_GPIO_Init+0x2a4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d86f      	bhi.n	80030aa <HAL_GPIO_Init+0x12e>
 8002fca:	4a96      	ldr	r2, [pc, #600]	@ (8003224 <HAL_GPIO_Init+0x2a8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d052      	beq.n	8003076 <HAL_GPIO_Init+0xfa>
 8002fd0:	4a94      	ldr	r2, [pc, #592]	@ (8003224 <HAL_GPIO_Init+0x2a8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d869      	bhi.n	80030aa <HAL_GPIO_Init+0x12e>
 8002fd6:	4a94      	ldr	r2, [pc, #592]	@ (8003228 <HAL_GPIO_Init+0x2ac>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d04c      	beq.n	8003076 <HAL_GPIO_Init+0xfa>
 8002fdc:	4a92      	ldr	r2, [pc, #584]	@ (8003228 <HAL_GPIO_Init+0x2ac>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d863      	bhi.n	80030aa <HAL_GPIO_Init+0x12e>
 8002fe2:	4a92      	ldr	r2, [pc, #584]	@ (800322c <HAL_GPIO_Init+0x2b0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d046      	beq.n	8003076 <HAL_GPIO_Init+0xfa>
 8002fe8:	4a90      	ldr	r2, [pc, #576]	@ (800322c <HAL_GPIO_Init+0x2b0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d85d      	bhi.n	80030aa <HAL_GPIO_Init+0x12e>
 8002fee:	2b12      	cmp	r3, #18
 8002ff0:	d82a      	bhi.n	8003048 <HAL_GPIO_Init+0xcc>
 8002ff2:	2b12      	cmp	r3, #18
 8002ff4:	d859      	bhi.n	80030aa <HAL_GPIO_Init+0x12e>
 8002ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ffc <HAL_GPIO_Init+0x80>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003077 	.word	0x08003077
 8003000:	08003051 	.word	0x08003051
 8003004:	08003063 	.word	0x08003063
 8003008:	080030a5 	.word	0x080030a5
 800300c:	080030ab 	.word	0x080030ab
 8003010:	080030ab 	.word	0x080030ab
 8003014:	080030ab 	.word	0x080030ab
 8003018:	080030ab 	.word	0x080030ab
 800301c:	080030ab 	.word	0x080030ab
 8003020:	080030ab 	.word	0x080030ab
 8003024:	080030ab 	.word	0x080030ab
 8003028:	080030ab 	.word	0x080030ab
 800302c:	080030ab 	.word	0x080030ab
 8003030:	080030ab 	.word	0x080030ab
 8003034:	080030ab 	.word	0x080030ab
 8003038:	080030ab 	.word	0x080030ab
 800303c:	080030ab 	.word	0x080030ab
 8003040:	08003059 	.word	0x08003059
 8003044:	0800306d 	.word	0x0800306d
 8003048:	4a79      	ldr	r2, [pc, #484]	@ (8003230 <HAL_GPIO_Init+0x2b4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800304e:	e02c      	b.n	80030aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	623b      	str	r3, [r7, #32]
          break;
 8003056:	e029      	b.n	80030ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	3304      	adds	r3, #4
 800305e:	623b      	str	r3, [r7, #32]
          break;
 8003060:	e024      	b.n	80030ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	3308      	adds	r3, #8
 8003068:	623b      	str	r3, [r7, #32]
          break;
 800306a:	e01f      	b.n	80030ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	330c      	adds	r3, #12
 8003072:	623b      	str	r3, [r7, #32]
          break;
 8003074:	e01a      	b.n	80030ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800307e:	2304      	movs	r3, #4
 8003080:	623b      	str	r3, [r7, #32]
          break;
 8003082:	e013      	b.n	80030ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800308c:	2308      	movs	r3, #8
 800308e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	611a      	str	r2, [r3, #16]
          break;
 8003096:	e009      	b.n	80030ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003098:	2308      	movs	r3, #8
 800309a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	615a      	str	r2, [r3, #20]
          break;
 80030a2:	e003      	b.n	80030ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030a4:	2300      	movs	r3, #0
 80030a6:	623b      	str	r3, [r7, #32]
          break;
 80030a8:	e000      	b.n	80030ac <HAL_GPIO_Init+0x130>
          break;
 80030aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2bff      	cmp	r3, #255	@ 0xff
 80030b0:	d801      	bhi.n	80030b6 <HAL_GPIO_Init+0x13a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	e001      	b.n	80030ba <HAL_GPIO_Init+0x13e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2bff      	cmp	r3, #255	@ 0xff
 80030c0:	d802      	bhi.n	80030c8 <HAL_GPIO_Init+0x14c>
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	e002      	b.n	80030ce <HAL_GPIO_Init+0x152>
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	3b08      	subs	r3, #8
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	210f      	movs	r1, #15
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	401a      	ands	r2, r3
 80030e0:	6a39      	ldr	r1, [r7, #32]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	431a      	orrs	r2, r3
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80b1 	beq.w	800325e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003234 <HAL_GPIO_Init+0x2b8>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	4a4c      	ldr	r2, [pc, #304]	@ (8003234 <HAL_GPIO_Init+0x2b8>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6193      	str	r3, [r2, #24]
 8003108:	4b4a      	ldr	r3, [pc, #296]	@ (8003234 <HAL_GPIO_Init+0x2b8>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003114:	4a48      	ldr	r2, [pc, #288]	@ (8003238 <HAL_GPIO_Init+0x2bc>)
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a40      	ldr	r2, [pc, #256]	@ (800323c <HAL_GPIO_Init+0x2c0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <HAL_GPIO_Init+0x1ec>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a3f      	ldr	r2, [pc, #252]	@ (8003240 <HAL_GPIO_Init+0x2c4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00d      	beq.n	8003164 <HAL_GPIO_Init+0x1e8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3e      	ldr	r2, [pc, #248]	@ (8003244 <HAL_GPIO_Init+0x2c8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <HAL_GPIO_Init+0x1e4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3d      	ldr	r2, [pc, #244]	@ (8003248 <HAL_GPIO_Init+0x2cc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_GPIO_Init+0x1e0>
 8003158:	2303      	movs	r3, #3
 800315a:	e006      	b.n	800316a <HAL_GPIO_Init+0x1ee>
 800315c:	2304      	movs	r3, #4
 800315e:	e004      	b.n	800316a <HAL_GPIO_Init+0x1ee>
 8003160:	2302      	movs	r3, #2
 8003162:	e002      	b.n	800316a <HAL_GPIO_Init+0x1ee>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_GPIO_Init+0x1ee>
 8003168:	2300      	movs	r3, #0
 800316a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316c:	f002 0203 	and.w	r2, r2, #3
 8003170:	0092      	lsls	r2, r2, #2
 8003172:	4093      	lsls	r3, r2
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800317a:	492f      	ldr	r1, [pc, #188]	@ (8003238 <HAL_GPIO_Init+0x2bc>)
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	3302      	adds	r3, #2
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d006      	beq.n	80031a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003194:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	492c      	ldr	r1, [pc, #176]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031a2:	4b2a      	ldr	r3, [pc, #168]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	4928      	ldr	r1, [pc, #160]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031bc:	4b23      	ldr	r3, [pc, #140]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	4922      	ldr	r1, [pc, #136]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60cb      	str	r3, [r1, #12]
 80031c8:	e006      	b.n	80031d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031ca:	4b20      	ldr	r3, [pc, #128]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	491e      	ldr	r1, [pc, #120]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031e4:	4b19      	ldr	r3, [pc, #100]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4918      	ldr	r1, [pc, #96]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
 80031f0:	e006      	b.n	8003200 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031f2:	4b16      	ldr	r3, [pc, #88]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	4914      	ldr	r1, [pc, #80]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d021      	beq.n	8003250 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800320c:	4b0f      	ldr	r3, [pc, #60]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	490e      	ldr	r1, [pc, #56]	@ (800324c <HAL_GPIO_Init+0x2d0>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e021      	b.n	800325e <HAL_GPIO_Init+0x2e2>
 800321a:	bf00      	nop
 800321c:	10320000 	.word	0x10320000
 8003220:	10310000 	.word	0x10310000
 8003224:	10220000 	.word	0x10220000
 8003228:	10210000 	.word	0x10210000
 800322c:	10120000 	.word	0x10120000
 8003230:	10110000 	.word	0x10110000
 8003234:	40021000 	.word	0x40021000
 8003238:	40010000 	.word	0x40010000
 800323c:	40010800 	.word	0x40010800
 8003240:	40010c00 	.word	0x40010c00
 8003244:	40011000 	.word	0x40011000
 8003248:	40011400 	.word	0x40011400
 800324c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_GPIO_Init+0x304>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	43db      	mvns	r3, r3
 8003258:	4909      	ldr	r1, [pc, #36]	@ (8003280 <HAL_GPIO_Init+0x304>)
 800325a:	4013      	ands	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	3301      	adds	r3, #1
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	f47f ae8e 	bne.w	8002f90 <HAL_GPIO_Init+0x14>
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	372c      	adds	r7, #44	@ 0x2c
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40010400 	.word	0x40010400

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003294:	787b      	ldrb	r3, [r7, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032a0:	e003      	b.n	80032aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	041a      	lsls	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	611a      	str	r2, [r3, #16]
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	041a      	lsls	r2, r3, #16
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43d9      	mvns	r1, r3
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	400b      	ands	r3, r1
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	611a      	str	r2, [r3, #16]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e12b      	b.n	8003552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe fd90 	bl	8001e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	@ 0x24
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800333a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800334a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800334c:	f001 fcf8 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8003350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4a81      	ldr	r2, [pc, #516]	@ (800355c <HAL_I2C_Init+0x274>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d807      	bhi.n	800336c <HAL_I2C_Init+0x84>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a80      	ldr	r2, [pc, #512]	@ (8003560 <HAL_I2C_Init+0x278>)
 8003360:	4293      	cmp	r3, r2
 8003362:	bf94      	ite	ls
 8003364:	2301      	movls	r3, #1
 8003366:	2300      	movhi	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e006      	b.n	800337a <HAL_I2C_Init+0x92>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a7d      	ldr	r2, [pc, #500]	@ (8003564 <HAL_I2C_Init+0x27c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	bf94      	ite	ls
 8003374:	2301      	movls	r3, #1
 8003376:	2300      	movhi	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0e7      	b.n	8003552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4a78      	ldr	r2, [pc, #480]	@ (8003568 <HAL_I2C_Init+0x280>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0c9b      	lsrs	r3, r3, #18
 800338c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a6a      	ldr	r2, [pc, #424]	@ (800355c <HAL_I2C_Init+0x274>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d802      	bhi.n	80033bc <HAL_I2C_Init+0xd4>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3301      	adds	r3, #1
 80033ba:	e009      	b.n	80033d0 <HAL_I2C_Init+0xe8>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	4a69      	ldr	r2, [pc, #420]	@ (800356c <HAL_I2C_Init+0x284>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	3301      	adds	r3, #1
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	495c      	ldr	r1, [pc, #368]	@ (800355c <HAL_I2C_Init+0x274>)
 80033ec:	428b      	cmp	r3, r1
 80033ee:	d819      	bhi.n	8003424 <HAL_I2C_Init+0x13c>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e59      	subs	r1, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003404:	400b      	ands	r3, r1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_I2C_Init+0x138>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1e59      	subs	r1, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fbb1 f3f3 	udiv	r3, r1, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341e:	e051      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 8003420:	2304      	movs	r3, #4
 8003422:	e04f      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d111      	bne.n	8003450 <HAL_I2C_Init+0x168>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1e58      	subs	r0, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	440b      	add	r3, r1
 800343a:	fbb0 f3f3 	udiv	r3, r0, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	e012      	b.n	8003476 <HAL_I2C_Init+0x18e>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Init+0x196>
 800347a:	2301      	movs	r3, #1
 800347c:	e022      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10e      	bne.n	80034a4 <HAL_I2C_Init+0x1bc>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1e58      	subs	r0, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	440b      	add	r3, r1
 8003494:	fbb0 f3f3 	udiv	r3, r0, r3
 8003498:	3301      	adds	r3, #1
 800349a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a2:	e00f      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1e58      	subs	r0, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	0099      	lsls	r1, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	6809      	ldr	r1, [r1, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6911      	ldr	r1, [r2, #16]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	4311      	orrs	r1, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	430b      	orrs	r3, r1
 8003506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	000186a0 	.word	0x000186a0
 8003560:	001e847f 	.word	0x001e847f
 8003564:	003d08ff 	.word	0x003d08ff
 8003568:	431bde83 	.word	0x431bde83
 800356c:	10624dd3 	.word	0x10624dd3

08003570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	460b      	mov	r3, r1
 800357e:	817b      	strh	r3, [r7, #10]
 8003580:	4613      	mov	r3, r2
 8003582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7fe fda2 	bl	80020cc <HAL_GetTick>
 8003588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	f040 80e0 	bne.w	8003758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2319      	movs	r3, #25
 800359e:	2201      	movs	r2, #1
 80035a0:	4970      	ldr	r1, [pc, #448]	@ (8003764 <HAL_I2C_Master_Transmit+0x1f4>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fdcc 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0d3      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_I2C_Master_Transmit+0x50>
 80035bc:	2302      	movs	r3, #2
 80035be:	e0cc      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d007      	beq.n	80035e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2221      	movs	r2, #33	@ 0x21
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2210      	movs	r2, #16
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a50      	ldr	r2, [pc, #320]	@ (8003768 <HAL_I2C_Master_Transmit+0x1f8>)
 8003626:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003628:	8979      	ldrh	r1, [r7, #10]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fc36 	bl	8003ea0 <I2C_MasterRequestWrite>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e08d      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003654:	e066      	b.n	8003724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fe8a 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	2b04      	cmp	r3, #4
 800366c:	d107      	bne.n	800367e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800367c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06b      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d11b      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0x188>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	6a39      	ldr	r1, [r7, #32]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fe81 	bl	8004404 <I2C_WaitOnBTFFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	2b04      	cmp	r3, #4
 800370e:	d107      	bne.n	8003720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e01a      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	d194      	bne.n	8003656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	00100002 	.word	0x00100002
 8003768:	ffff0000 	.word	0xffff0000

0800376c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	@ 0x30
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	461a      	mov	r2, r3
 8003778:	460b      	mov	r3, r1
 800377a:	817b      	strh	r3, [r7, #10]
 800377c:	4613      	mov	r3, r2
 800377e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003784:	f7fe fca2 	bl	80020cc <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	f040 824b 	bne.w	8003c2e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2319      	movs	r3, #25
 800379e:	2201      	movs	r2, #1
 80037a0:	497f      	ldr	r1, [pc, #508]	@ (80039a0 <HAL_I2C_Master_Receive+0x234>)
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fccc 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	e23e      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_I2C_Master_Receive+0x54>
 80037bc:	2302      	movs	r3, #2
 80037be:	e237      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d007      	beq.n	80037e6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2222      	movs	r2, #34	@ 0x22
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2210      	movs	r2, #16
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	893a      	ldrh	r2, [r7, #8]
 8003816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a5f      	ldr	r2, [pc, #380]	@ (80039a4 <HAL_I2C_Master_Receive+0x238>)
 8003826:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003828:	8979      	ldrh	r1, [r7, #10]
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fbb8 	bl	8003fa4 <I2C_MasterRequestRead>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e1f8      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d113      	bne.n	800386e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e1cc      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	2b01      	cmp	r3, #1
 8003874:	d11e      	bne.n	80038b4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003884:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003886:	b672      	cpsid	i
}
 8003888:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038b0:	b662      	cpsie	i
}
 80038b2:	e035      	b.n	8003920 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d11e      	bne.n	80038fa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038cc:	b672      	cpsid	i
}
 80038ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038f6:	b662      	cpsie	i
}
 80038f8:	e012      	b.n	8003920 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003920:	e172      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003926:	2b03      	cmp	r3, #3
 8003928:	f200 811f 	bhi.w	8003b6a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003930:	2b01      	cmp	r3, #1
 8003932:	d123      	bne.n	800397c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003936:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fdab 	bl	8004494 <I2C_WaitOnRXNEFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e173      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800397a:	e145      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	2b02      	cmp	r3, #2
 8003982:	d152      	bne.n	8003a2a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398a:	2200      	movs	r2, #0
 800398c:	4906      	ldr	r1, [pc, #24]	@ (80039a8 <HAL_I2C_Master_Receive+0x23c>)
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fbd6 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e148      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
 800399e:	bf00      	nop
 80039a0:	00100002 	.word	0x00100002
 80039a4:	ffff0000 	.word	0xffff0000
 80039a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039ac:	b672      	cpsid	i
}
 80039ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039f2:	b662      	cpsie	i
}
 80039f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a28:	e0ee      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a30:	2200      	movs	r2, #0
 8003a32:	4981      	ldr	r1, [pc, #516]	@ (8003c38 <HAL_I2C_Master_Receive+0x4cc>)
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fb83 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0f5      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a54:	b672      	cpsid	i
}
 8003a56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8003c3c <HAL_I2C_Master_Receive+0x4d0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	08db      	lsrs	r3, r3, #3
 8003a90:	4a6b      	ldr	r2, [pc, #428]	@ (8003c40 <HAL_I2C_Master_Receive+0x4d4>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0a1a      	lsrs	r2, r3, #8
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00da      	lsls	r2, r3, #3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d118      	bne.n	8003ae2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ad2:	b662      	cpsie	i
}
 8003ad4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0a6      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d1d9      	bne.n	8003aa4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b32:	b662      	cpsie	i
}
 8003b34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b68:	e04e      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fc90 	bl	8004494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e058      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d124      	bne.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d107      	bne.n	8003bd6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f47f ae88 	bne.w	8003922 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	@ 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00010004 	.word	0x00010004
 8003c3c:	2000007c 	.word	0x2000007c
 8003c40:	14f8b589 	.word	0x14f8b589

08003c44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	460b      	mov	r3, r1
 8003c52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c54:	f7fe fa3a 	bl	80020cc <HAL_GetTick>
 8003c58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	f040 8111 	bne.w	8003e8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2319      	movs	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	4988      	ldr	r1, [pc, #544]	@ (8003e98 <HAL_I2C_IsDeviceReady+0x254>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fa62 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	e104      	b.n	8003e90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2C_IsDeviceReady+0x50>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e0fd      	b.n	8003e90 <HAL_I2C_IsDeviceReady+0x24c>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d007      	beq.n	8003cba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2224      	movs	r2, #36	@ 0x24
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a70      	ldr	r2, [pc, #448]	@ (8003e9c <HAL_I2C_IsDeviceReady+0x258>)
 8003cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fa20 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d14:	d103      	bne.n	8003d1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d1c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e0b6      	b.n	8003e90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d22:	897b      	ldrh	r3, [r7, #10]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d32:	f7fe f9cb 	bl	80020cc <HAL_GetTick>
 8003d36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2300      	movne	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d66:	e025      	b.n	8003db4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d68:	f7fe f9b0 	bl	80020cc <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d302      	bcc.n	8003d7e <HAL_I2C_IsDeviceReady+0x13a>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	22a0      	movs	r2, #160	@ 0xa0
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2ba0      	cmp	r3, #160	@ 0xa0
 8003dbe:	d005      	beq.n	8003dcc <HAL_I2C_IsDeviceReady+0x188>
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_I2C_IsDeviceReady+0x188>
 8003dc6:	7dbb      	ldrb	r3, [r7, #22]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0cd      	beq.n	8003d68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d129      	bne.n	8003e36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2319      	movs	r3, #25
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4921      	ldr	r1, [pc, #132]	@ (8003e98 <HAL_I2C_IsDeviceReady+0x254>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f994 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e036      	b.n	8003e90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e02c      	b.n	8003e90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2319      	movs	r3, #25
 8003e56:	2201      	movs	r2, #1
 8003e58:	490f      	ldr	r1, [pc, #60]	@ (8003e98 <HAL_I2C_IsDeviceReady+0x254>)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f970 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e012      	b.n	8003e90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	f4ff af32 	bcc.w	8003cde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	00100002 	.word	0x00100002
 8003e9c:	ffff0000 	.word	0xffff0000

08003ea0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	460b      	mov	r3, r1
 8003eae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d006      	beq.n	8003eca <I2C_MasterRequestWrite+0x2a>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d003      	beq.n	8003eca <I2C_MasterRequestWrite+0x2a>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ec8:	d108      	bne.n	8003edc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e00b      	b.n	8003ef4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	2b12      	cmp	r3, #18
 8003ee2:	d107      	bne.n	8003ef4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f91d 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f1a:	d103      	bne.n	8003f24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e035      	b.n	8003f94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f30:	d108      	bne.n	8003f44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f40:	611a      	str	r2, [r3, #16]
 8003f42:	e01b      	b.n	8003f7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f44:	897b      	ldrh	r3, [r7, #10]
 8003f46:	11db      	asrs	r3, r3, #7
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f003 0306 	and.w	r3, r3, #6
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f063 030f 	orn	r3, r3, #15
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	490e      	ldr	r1, [pc, #56]	@ (8003f9c <I2C_MasterRequestWrite+0xfc>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f966 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e010      	b.n	8003f94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f72:	897b      	ldrh	r3, [r7, #10]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4907      	ldr	r1, [pc, #28]	@ (8003fa0 <I2C_MasterRequestWrite+0x100>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f956 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	00010008 	.word	0x00010008
 8003fa0:	00010002 	.word	0x00010002

08003fa4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d006      	beq.n	8003fde <I2C_MasterRequestRead+0x3a>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d003      	beq.n	8003fde <I2C_MasterRequestRead+0x3a>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fdc:	d108      	bne.n	8003ff0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e00b      	b.n	8004008 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	2b11      	cmp	r3, #17
 8003ff6:	d107      	bne.n	8004008 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f893 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800402e:	d103      	bne.n	8004038 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004036:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e079      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004044:	d108      	bne.n	8004058 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004046:	897b      	ldrh	r3, [r7, #10]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	611a      	str	r2, [r3, #16]
 8004056:	e05f      	b.n	8004118 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004058:	897b      	ldrh	r3, [r7, #10]
 800405a:	11db      	asrs	r3, r3, #7
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 0306 	and.w	r3, r3, #6
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f063 030f 	orn	r3, r3, #15
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4930      	ldr	r1, [pc, #192]	@ (8004138 <I2C_MasterRequestRead+0x194>)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f8dc 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e054      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004086:	897b      	ldrh	r3, [r7, #10]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4929      	ldr	r1, [pc, #164]	@ (800413c <I2C_MasterRequestRead+0x198>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f8cc 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e044      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f831 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f2:	d103      	bne.n	80040fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040fa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e017      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004100:	897b      	ldrh	r3, [r7, #10]
 8004102:	11db      	asrs	r3, r3, #7
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 0306 	and.w	r3, r3, #6
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f063 030e 	orn	r3, r3, #14
 8004110:	b2da      	uxtb	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4907      	ldr	r1, [pc, #28]	@ (800413c <I2C_MasterRequestRead+0x198>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f888 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	00010008 	.word	0x00010008
 800413c:	00010002 	.word	0x00010002

08004140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004150:	e048      	b.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d044      	beq.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fd ffb7 	bl	80020cc <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d139      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10d      	bne.n	8004196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	43da      	mvns	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	e00c      	b.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	43da      	mvns	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d116      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e023      	b.n	800422c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10d      	bne.n	800420a <I2C_WaitOnFlagUntilTimeout+0xca>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	e00c      	b.n	8004224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	43da      	mvns	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	429a      	cmp	r2, r3
 8004228:	d093      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004242:	e071      	b.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004252:	d123      	bne.n	800429c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800426c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e067      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d041      	beq.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fd ff12 	bl	80020cc <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d136      	bne.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10c      	bne.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	43da      	mvns	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e00b      	b.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	43da      	mvns	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e021      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10c      	bne.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	43da      	mvns	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e00b      	b.n	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	f47f af6d 	bne.w	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004380:	e034      	b.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f8e3 	bl	800454e <I2C_IsAcknowledgeFailed>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e034      	b.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d028      	beq.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fd fe97 	bl	80020cc <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11d      	bne.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b80      	cmp	r3, #128	@ 0x80
 80043bc:	d016      	beq.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e007      	b.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f6:	2b80      	cmp	r3, #128	@ 0x80
 80043f8:	d1c3      	bne.n	8004382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004410:	e034      	b.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f89b 	bl	800454e <I2C_IsAcknowledgeFailed>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e034      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d028      	beq.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fd fe4f 	bl	80020cc <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11d      	bne.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d016      	beq.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e007      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d1c3      	bne.n	8004412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a0:	e049      	b.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d119      	bne.n	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0210 	mvn.w	r2, #16
 80044b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e030      	b.n	8004546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7fd fdf2 	bl	80020cc <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d11d      	bne.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b40      	cmp	r3, #64	@ 0x40
 8004506:	d016      	beq.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e007      	b.n	8004546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004540:	2b40      	cmp	r3, #64	@ 0x40
 8004542:	d1ae      	bne.n	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004564:	d11b      	bne.n	800459e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800456e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	f043 0204 	orr.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e272      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8087 	beq.w	80046da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045cc:	4b92      	ldr	r3, [pc, #584]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d00c      	beq.n	80045f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d112      	bne.n	800460a <HAL_RCC_OscConfig+0x5e>
 80045e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f0:	d10b      	bne.n	800460a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f2:	4b89      	ldr	r3, [pc, #548]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d06c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x12c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d168      	bne.n	80046d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e24c      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x76>
 8004614:	4b80      	ldr	r3, [pc, #512]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a7f      	ldr	r2, [pc, #508]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e02e      	b.n	8004680 <HAL_RCC_OscConfig+0xd4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x98>
 800462a:	4b7b      	ldr	r3, [pc, #492]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7a      	ldr	r2, [pc, #488]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b78      	ldr	r3, [pc, #480]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a77      	ldr	r2, [pc, #476]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800463c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e01d      	b.n	8004680 <HAL_RCC_OscConfig+0xd4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0xbc>
 800464e:	4b72      	ldr	r3, [pc, #456]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a71      	ldr	r2, [pc, #452]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b6f      	ldr	r3, [pc, #444]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6e      	ldr	r2, [pc, #440]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0xd4>
 8004668:	4b6b      	ldr	r3, [pc, #428]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6a      	ldr	r2, [pc, #424]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b68      	ldr	r3, [pc, #416]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a67      	ldr	r2, [pc, #412]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800467a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800467e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fd fd20 	bl	80020cc <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fd fd1c 	bl	80020cc <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	@ 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e200      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0xe4>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fd fd0c 	bl	80020cc <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fd fd08 	bl	80020cc <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	@ 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1ec      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	4b53      	ldr	r3, [pc, #332]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x10c>
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d063      	beq.n	80047ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046f2:	4b49      	ldr	r3, [pc, #292]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11c      	bne.n	8004738 <HAL_RCC_OscConfig+0x18c>
 80046fe:	4b46      	ldr	r3, [pc, #280]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	4b43      	ldr	r3, [pc, #268]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_RCC_OscConfig+0x176>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e1c0      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004722:	4b3d      	ldr	r3, [pc, #244]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4939      	ldr	r1, [pc, #228]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	e03a      	b.n	80047ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004740:	4b36      	ldr	r3, [pc, #216]	@ (800481c <HAL_RCC_OscConfig+0x270>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fd fcc1 	bl	80020cc <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474e:	f7fd fcbd 	bl	80020cc <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e1a1      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004760:	4b2d      	ldr	r3, [pc, #180]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476c:	4b2a      	ldr	r3, [pc, #168]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4927      	ldr	r1, [pc, #156]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]
 8004780:	e015      	b.n	80047ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004782:	4b26      	ldr	r3, [pc, #152]	@ (800481c <HAL_RCC_OscConfig+0x270>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fd fca0 	bl	80020cc <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004790:	f7fd fc9c 	bl	80020cc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e180      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d03a      	beq.n	8004830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d019      	beq.n	80047f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c2:	4b17      	ldr	r3, [pc, #92]	@ (8004820 <HAL_RCC_OscConfig+0x274>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c8:	f7fd fc80 	bl	80020cc <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fd fc7c 	bl	80020cc <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e160      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004818 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047ee:	2001      	movs	r0, #1
 80047f0:	f000 faba 	bl	8004d68 <RCC_Delay>
 80047f4:	e01c      	b.n	8004830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004820 <HAL_RCC_OscConfig+0x274>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fc:	f7fd fc66 	bl	80020cc <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004802:	e00f      	b.n	8004824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004804:	f7fd fc62 	bl	80020cc <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d908      	bls.n	8004824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e146      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	42420000 	.word	0x42420000
 8004820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	4b92      	ldr	r3, [pc, #584]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e9      	bne.n	8004804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a6 	beq.w	800498a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004842:	4b8b      	ldr	r3, [pc, #556]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	4b88      	ldr	r3, [pc, #544]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4a87      	ldr	r2, [pc, #540]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004858:	61d3      	str	r3, [r2, #28]
 800485a:	4b85      	ldr	r3, [pc, #532]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486a:	4b82      	ldr	r3, [pc, #520]	@ (8004a74 <HAL_RCC_OscConfig+0x4c8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d118      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004876:	4b7f      	ldr	r3, [pc, #508]	@ (8004a74 <HAL_RCC_OscConfig+0x4c8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a74 <HAL_RCC_OscConfig+0x4c8>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004882:	f7fd fc23 	bl	80020cc <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fd fc1f 	bl	80020cc <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b64      	cmp	r3, #100	@ 0x64
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e103      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	4b75      	ldr	r3, [pc, #468]	@ (8004a74 <HAL_RCC_OscConfig+0x4c8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x312>
 80048b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6213      	str	r3, [r2, #32]
 80048bc:	e02d      	b.n	800491a <HAL_RCC_OscConfig+0x36e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x334>
 80048c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	4a69      	ldr	r2, [pc, #420]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6213      	str	r3, [r2, #32]
 80048d2:	4b67      	ldr	r3, [pc, #412]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4a66      	ldr	r2, [pc, #408]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048d8:	f023 0304 	bic.w	r3, r3, #4
 80048dc:	6213      	str	r3, [r2, #32]
 80048de:	e01c      	b.n	800491a <HAL_RCC_OscConfig+0x36e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x356>
 80048e8:	4b61      	ldr	r3, [pc, #388]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4a60      	ldr	r2, [pc, #384]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6213      	str	r3, [r2, #32]
 80048f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6213      	str	r3, [r2, #32]
 8004900:	e00b      	b.n	800491a <HAL_RCC_OscConfig+0x36e>
 8004902:	4b5b      	ldr	r3, [pc, #364]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4a5a      	ldr	r2, [pc, #360]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6213      	str	r3, [r2, #32]
 800490e:	4b58      	ldr	r3, [pc, #352]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	4a57      	ldr	r2, [pc, #348]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d015      	beq.n	800494e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004922:	f7fd fbd3 	bl	80020cc <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fd fbcf 	bl	80020cc <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0b1      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	4b4b      	ldr	r3, [pc, #300]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ee      	beq.n	800492a <HAL_RCC_OscConfig+0x37e>
 800494c:	e014      	b.n	8004978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fd fbbd 	bl	80020cc <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fd fbb9 	bl	80020cc <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e09b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496c:	4b40      	ldr	r3, [pc, #256]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ee      	bne.n	8004956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4a3b      	ldr	r2, [pc, #236]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8087 	beq.w	8004aa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004994:	4b36      	ldr	r3, [pc, #216]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d061      	beq.n	8004a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d146      	bne.n	8004a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b33      	ldr	r3, [pc, #204]	@ (8004a78 <HAL_RCC_OscConfig+0x4cc>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fd fb8d 	bl	80020cc <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fd fb89 	bl	80020cc <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e06d      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c8:	4b29      	ldr	r3, [pc, #164]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049dc:	d108      	bne.n	80049f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049de:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4921      	ldr	r1, [pc, #132]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a19      	ldr	r1, [r3, #32]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	430b      	orrs	r3, r1
 8004a02:	491b      	ldr	r1, [pc, #108]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a08:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <HAL_RCC_OscConfig+0x4cc>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fd fb5d 	bl	80020cc <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fd fb59 	bl	80020cc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e03d      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a28:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x46a>
 8004a34:	e035      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b10      	ldr	r3, [pc, #64]	@ (8004a78 <HAL_RCC_OscConfig+0x4cc>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fb46 	bl	80020cc <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fd fb42 	bl	80020cc <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e026      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a56:	4b06      	ldr	r3, [pc, #24]	@ (8004a70 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x498>
 8004a62:	e01e      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e019      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40007000 	.word	0x40007000
 8004a78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <HAL_RCC_OscConfig+0x500>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d001      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40021000 	.word	0x40021000

08004ab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0d0      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b6a      	ldr	r3, [pc, #424]	@ (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d910      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b67      	ldr	r3, [pc, #412]	@ (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 0207 	bic.w	r2, r3, #7
 8004ada:	4965      	ldr	r1, [pc, #404]	@ (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae2:	4b63      	ldr	r3, [pc, #396]	@ (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0b8      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d020      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b0c:	4b59      	ldr	r3, [pc, #356]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a58      	ldr	r2, [pc, #352]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b24:	4b53      	ldr	r3, [pc, #332]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4a52      	ldr	r2, [pc, #328]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b30:	4b50      	ldr	r3, [pc, #320]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	494d      	ldr	r1, [pc, #308]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d040      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d107      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	4b47      	ldr	r3, [pc, #284]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d115      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e07f      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6e:	4b41      	ldr	r3, [pc, #260]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e073      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06b      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8e:	4b39      	ldr	r3, [pc, #228]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f023 0203 	bic.w	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4936      	ldr	r1, [pc, #216]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba0:	f7fd fa94 	bl	80020cc <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba8:	f7fd fa90 	bl	80020cc <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e053      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 020c 	and.w	r2, r3, #12
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d1eb      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b27      	ldr	r3, [pc, #156]	@ (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d210      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b24      	ldr	r3, [pc, #144]	@ (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0207 	bic.w	r2, r3, #7
 8004be6:	4922      	ldr	r1, [pc, #136]	@ (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b20      	ldr	r3, [pc, #128]	@ (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e032      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0c:	4b19      	ldr	r3, [pc, #100]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4916      	ldr	r1, [pc, #88]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c2a:	4b12      	ldr	r3, [pc, #72]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	490e      	ldr	r1, [pc, #56]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c3e:	f000 f821 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	490a      	ldr	r1, [pc, #40]	@ (8004c78 <HAL_RCC_ClockConfig+0x1c8>)
 8004c50:	5ccb      	ldrb	r3, [r1, r3]
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	4a09      	ldr	r2, [pc, #36]	@ (8004c7c <HAL_RCC_ClockConfig+0x1cc>)
 8004c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c5a:	4b09      	ldr	r3, [pc, #36]	@ (8004c80 <HAL_RCC_ClockConfig+0x1d0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fd f9f2 	bl	8002048 <HAL_InitTick>

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40022000 	.word	0x40022000
 8004c74:	40021000 	.word	0x40021000
 8004c78:	08005db8 	.word	0x08005db8
 8004c7c:	2000007c 	.word	0x2000007c
 8004c80:	20000080 	.word	0x20000080

08004c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	2300      	movs	r3, #0
 8004c98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d002      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d003      	beq.n	8004cba <HAL_RCC_GetSysClockFreq+0x36>
 8004cb2:	e027      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cb4:	4b19      	ldr	r3, [pc, #100]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004cb6:	613b      	str	r3, [r7, #16]
      break;
 8004cb8:	e027      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	0c9b      	lsrs	r3, r3, #18
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	4a17      	ldr	r2, [pc, #92]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004cc4:	5cd3      	ldrb	r3, [r2, r3]
 8004cc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d010      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cd2:	4b11      	ldr	r3, [pc, #68]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	0c5b      	lsrs	r3, r3, #17
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	4a11      	ldr	r2, [pc, #68]	@ (8004d24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004cde:	5cd3      	ldrb	r3, [r2, r3]
 8004ce0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ce6:	fb03 f202 	mul.w	r2, r3, r2
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	e004      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	613b      	str	r3, [r7, #16]
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d06:	613b      	str	r3, [r7, #16]
      break;
 8004d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d0a:	693b      	ldr	r3, [r7, #16]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	007a1200 	.word	0x007a1200
 8004d20:	08005dd0 	.word	0x08005dd0
 8004d24:	08005de0 	.word	0x08005de0
 8004d28:	003d0900 	.word	0x003d0900

08004d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d30:	4b02      	ldr	r3, [pc, #8]	@ (8004d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	2000007c 	.word	0x2000007c

08004d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d44:	f7ff fff2 	bl	8004d2c <HAL_RCC_GetHCLKFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4903      	ldr	r1, [pc, #12]	@ (8004d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	08005dc8 	.word	0x08005dc8

08004d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d70:	4b0a      	ldr	r3, [pc, #40]	@ (8004d9c <RCC_Delay+0x34>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0a      	ldr	r2, [pc, #40]	@ (8004da0 <RCC_Delay+0x38>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	0a5b      	lsrs	r3, r3, #9
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d84:	bf00      	nop
  }
  while (Delay --);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1e5a      	subs	r2, r3, #1
 8004d8a:	60fa      	str	r2, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f9      	bne.n	8004d84 <RCC_Delay+0x1c>
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	2000007c 	.word	0x2000007c
 8004da0:	10624dd3 	.word	0x10624dd3

08004da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e041      	b.n	8004e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fd f870 	bl	8001eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f000 fc94 	bl	8005710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d001      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e03a      	b.n	8004ed2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a18      	ldr	r2, [pc, #96]	@ (8004edc <HAL_TIM_Base_Start_IT+0x98>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00e      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x58>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e86:	d009      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x58>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ee0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x58>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a13      	ldr	r2, [pc, #76]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d111      	bne.n	8004ec0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d010      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebe:	e007      	b.n	8004ed0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800

08004ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e041      	b.n	8004f7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f839 	bl	8004f86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f000 fbf2 	bl	8005710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <HAL_TIM_PWM_Start+0x24>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e022      	b.n	8005002 <HAL_TIM_PWM_Start+0x6a>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d109      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0x3e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	bf14      	ite	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	2300      	moveq	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	e015      	b.n	8005002 <HAL_TIM_PWM_Start+0x6a>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d109      	bne.n	8004ff0 <HAL_TIM_PWM_Start+0x58>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	e008      	b.n	8005002 <HAL_TIM_PWM_Start+0x6a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	bf14      	ite	ne
 8004ffc:	2301      	movne	r3, #1
 8004ffe:	2300      	moveq	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e05e      	b.n	80050c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start+0x82>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005018:	e013      	b.n	8005042 <HAL_TIM_PWM_Start+0xaa>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b04      	cmp	r3, #4
 800501e:	d104      	bne.n	800502a <HAL_TIM_PWM_Start+0x92>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005028:	e00b      	b.n	8005042 <HAL_TIM_PWM_Start+0xaa>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d104      	bne.n	800503a <HAL_TIM_PWM_Start+0xa2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005038:	e003      	b.n	8005042 <HAL_TIM_PWM_Start+0xaa>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2201      	movs	r2, #1
 8005048:	6839      	ldr	r1, [r7, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fde0 	bl	8005c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1e      	ldr	r2, [pc, #120]	@ (80050d0 <HAL_TIM_PWM_Start+0x138>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d107      	bne.n	800506a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a18      	ldr	r2, [pc, #96]	@ (80050d0 <HAL_TIM_PWM_Start+0x138>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_TIM_PWM_Start+0xfa>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507c:	d009      	beq.n	8005092 <HAL_TIM_PWM_Start+0xfa>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a14      	ldr	r2, [pc, #80]	@ (80050d4 <HAL_TIM_PWM_Start+0x13c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_TIM_PWM_Start+0xfa>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a12      	ldr	r2, [pc, #72]	@ (80050d8 <HAL_TIM_PWM_Start+0x140>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d111      	bne.n	80050b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b06      	cmp	r3, #6
 80050a2:	d010      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b4:	e007      	b.n	80050c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800

080050dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fd8e 	bl	8005c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a29      	ldr	r2, [pc, #164]	@ (80051a0 <HAL_TIM_PWM_Stop+0xc4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d117      	bne.n	800512e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <HAL_TIM_PWM_Stop+0x52>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	f240 4344 	movw	r3, #1092	@ 0x444
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d107      	bne.n	800512e <HAL_TIM_PWM_Stop+0x52>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10f      	bne.n	800515e <HAL_TIM_PWM_Stop+0x82>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	f240 4344 	movw	r3, #1092	@ 0x444
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d107      	bne.n	800515e <HAL_TIM_PWM_Stop+0x82>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Stop+0x92>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800516c:	e013      	b.n	8005196 <HAL_TIM_PWM_Stop+0xba>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d104      	bne.n	800517e <HAL_TIM_PWM_Stop+0xa2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800517c:	e00b      	b.n	8005196 <HAL_TIM_PWM_Stop+0xba>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d104      	bne.n	800518e <HAL_TIM_PWM_Stop+0xb2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800518c:	e003      	b.n	8005196 <HAL_TIM_PWM_Stop+0xba>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40012c00 	.word	0x40012c00

080051a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d122      	bne.n	8005200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d11b      	bne.n	8005200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0202 	mvn.w	r2, #2
 80051d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa76 	bl	80056d8 <HAL_TIM_IC_CaptureCallback>
 80051ec:	e005      	b.n	80051fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa69 	bl	80056c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fa78 	bl	80056ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b04      	cmp	r3, #4
 800520c:	d122      	bne.n	8005254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b04      	cmp	r3, #4
 800521a:	d11b      	bne.n	8005254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0204 	mvn.w	r2, #4
 8005224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa4c 	bl	80056d8 <HAL_TIM_IC_CaptureCallback>
 8005240:	e005      	b.n	800524e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa3f 	bl	80056c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fa4e 	bl	80056ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b08      	cmp	r3, #8
 8005260:	d122      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b08      	cmp	r3, #8
 800526e:	d11b      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0208 	mvn.w	r2, #8
 8005278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2204      	movs	r2, #4
 800527e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa22 	bl	80056d8 <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa15 	bl	80056c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fa24 	bl	80056ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0310 	and.w	r3, r3, #16
 80052b2:	2b10      	cmp	r3, #16
 80052b4:	d122      	bne.n	80052fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d11b      	bne.n	80052fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0210 	mvn.w	r2, #16
 80052cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2208      	movs	r2, #8
 80052d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f9f8 	bl	80056d8 <HAL_TIM_IC_CaptureCallback>
 80052e8:	e005      	b.n	80052f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9eb 	bl	80056c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f9fa 	bl	80056ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b01      	cmp	r3, #1
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d107      	bne.n	8005328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0201 	mvn.w	r2, #1
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc fcd8 	bl	8001cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005332:	2b80      	cmp	r3, #128	@ 0x80
 8005334:	d10e      	bne.n	8005354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005340:	2b80      	cmp	r3, #128	@ 0x80
 8005342:	d107      	bne.n	8005354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fce9 	bl	8005d26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535e:	2b40      	cmp	r3, #64	@ 0x40
 8005360:	d10e      	bne.n	8005380 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536c:	2b40      	cmp	r3, #64	@ 0x40
 800536e:	d107      	bne.n	8005380 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f9be 	bl	80056fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b20      	cmp	r3, #32
 800538c:	d10e      	bne.n	80053ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b20      	cmp	r3, #32
 800539a:	d107      	bne.n	80053ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0220 	mvn.w	r2, #32
 80053a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fcb4 	bl	8005d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e0ae      	b.n	8005530 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b0c      	cmp	r3, #12
 80053de:	f200 809f 	bhi.w	8005520 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053e2:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	0800541d 	.word	0x0800541d
 80053ec:	08005521 	.word	0x08005521
 80053f0:	08005521 	.word	0x08005521
 80053f4:	08005521 	.word	0x08005521
 80053f8:	0800545d 	.word	0x0800545d
 80053fc:	08005521 	.word	0x08005521
 8005400:	08005521 	.word	0x08005521
 8005404:	08005521 	.word	0x08005521
 8005408:	0800549f 	.word	0x0800549f
 800540c:	08005521 	.word	0x08005521
 8005410:	08005521 	.word	0x08005521
 8005414:	08005521 	.word	0x08005521
 8005418:	080054df 	.word	0x080054df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f9d6 	bl	80057d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0208 	orr.w	r2, r2, #8
 8005436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0204 	bic.w	r2, r2, #4
 8005446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6999      	ldr	r1, [r3, #24]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	619a      	str	r2, [r3, #24]
      break;
 800545a:	e064      	b.n	8005526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fa1c 	bl	80058a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6999      	ldr	r1, [r3, #24]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	021a      	lsls	r2, r3, #8
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	619a      	str	r2, [r3, #24]
      break;
 800549c:	e043      	b.n	8005526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fa65 	bl	8005974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0208 	orr.w	r2, r2, #8
 80054b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0204 	bic.w	r2, r2, #4
 80054c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69d9      	ldr	r1, [r3, #28]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	61da      	str	r2, [r3, #28]
      break;
 80054dc:	e023      	b.n	8005526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 faaf 	bl	8005a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69d9      	ldr	r1, [r3, #28]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	021a      	lsls	r2, r3, #8
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	61da      	str	r2, [r3, #28]
      break;
 800551e:	e002      	b.n	8005526 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	75fb      	strb	r3, [r7, #23]
      break;
 8005524:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800552e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_TIM_ConfigClockSource+0x1c>
 8005550:	2302      	movs	r3, #2
 8005552:	e0b4      	b.n	80056be <HAL_TIM_ConfigClockSource+0x186>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800557a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800558c:	d03e      	beq.n	800560c <HAL_TIM_ConfigClockSource+0xd4>
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005592:	f200 8087 	bhi.w	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800559a:	f000 8086 	beq.w	80056aa <HAL_TIM_ConfigClockSource+0x172>
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a2:	d87f      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055a4:	2b70      	cmp	r3, #112	@ 0x70
 80055a6:	d01a      	beq.n	80055de <HAL_TIM_ConfigClockSource+0xa6>
 80055a8:	2b70      	cmp	r3, #112	@ 0x70
 80055aa:	d87b      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055ac:	2b60      	cmp	r3, #96	@ 0x60
 80055ae:	d050      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x11a>
 80055b0:	2b60      	cmp	r3, #96	@ 0x60
 80055b2:	d877      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055b4:	2b50      	cmp	r3, #80	@ 0x50
 80055b6:	d03c      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0xfa>
 80055b8:	2b50      	cmp	r3, #80	@ 0x50
 80055ba:	d873      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055bc:	2b40      	cmp	r3, #64	@ 0x40
 80055be:	d058      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x13a>
 80055c0:	2b40      	cmp	r3, #64	@ 0x40
 80055c2:	d86f      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055c4:	2b30      	cmp	r3, #48	@ 0x30
 80055c6:	d064      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15a>
 80055c8:	2b30      	cmp	r3, #48	@ 0x30
 80055ca:	d86b      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d060      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15a>
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d867      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d05c      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15a>
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d05a      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	e062      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ee:	f000 faf0 	bl	8005bd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	609a      	str	r2, [r3, #8]
      break;
 800560a:	e04f      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800561c:	f000 fad9 	bl	8005bd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800562e:	609a      	str	r2, [r3, #8]
      break;
 8005630:	e03c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	461a      	mov	r2, r3
 8005640:	f000 fa50 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2150      	movs	r1, #80	@ 0x50
 800564a:	4618      	mov	r0, r3
 800564c:	f000 faa7 	bl	8005b9e <TIM_ITRx_SetConfig>
      break;
 8005650:	e02c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800565e:	461a      	mov	r2, r3
 8005660:	f000 fa6e 	bl	8005b40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2160      	movs	r1, #96	@ 0x60
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fa97 	bl	8005b9e <TIM_ITRx_SetConfig>
      break;
 8005670:	e01c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	461a      	mov	r2, r3
 8005680:	f000 fa30 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2140      	movs	r1, #64	@ 0x40
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fa87 	bl	8005b9e <TIM_ITRx_SetConfig>
      break;
 8005690:	e00c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f000 fa7e 	bl	8005b9e <TIM_ITRx_SetConfig>
      break;
 80056a2:	e003      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
      break;
 80056a8:	e000      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
	...

08005710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a29      	ldr	r2, [pc, #164]	@ (80057c8 <TIM_Base_SetConfig+0xb8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00b      	beq.n	8005740 <TIM_Base_SetConfig+0x30>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572e:	d007      	beq.n	8005740 <TIM_Base_SetConfig+0x30>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a26      	ldr	r2, [pc, #152]	@ (80057cc <TIM_Base_SetConfig+0xbc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0x30>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a25      	ldr	r2, [pc, #148]	@ (80057d0 <TIM_Base_SetConfig+0xc0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d108      	bne.n	8005752 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1c      	ldr	r2, [pc, #112]	@ (80057c8 <TIM_Base_SetConfig+0xb8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x62>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a19      	ldr	r2, [pc, #100]	@ (80057cc <TIM_Base_SetConfig+0xbc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x62>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a18      	ldr	r2, [pc, #96]	@ (80057d0 <TIM_Base_SetConfig+0xc0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a07      	ldr	r2, [pc, #28]	@ (80057c8 <TIM_Base_SetConfig+0xb8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d103      	bne.n	80057b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	615a      	str	r2, [r3, #20]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40000400 	.word	0x40000400
 80057d0:	40000800 	.word	0x40000800

080057d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f023 0201 	bic.w	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0303 	bic.w	r3, r3, #3
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 0302 	bic.w	r3, r3, #2
 800581c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1c      	ldr	r2, [pc, #112]	@ (800589c <TIM_OC1_SetConfig+0xc8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10c      	bne.n	800584a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0308 	bic.w	r3, r3, #8
 8005836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 0304 	bic.w	r3, r3, #4
 8005848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a13      	ldr	r2, [pc, #76]	@ (800589c <TIM_OC1_SetConfig+0xc8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d111      	bne.n	8005876 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	621a      	str	r2, [r3, #32]
}
 8005890:	bf00      	nop
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40012c00 	.word	0x40012c00

080058a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f023 0210 	bic.w	r2, r3, #16
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0320 	bic.w	r3, r3, #32
 80058ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005970 <TIM_OC2_SetConfig+0xd0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10d      	bne.n	800591c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800591a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a14      	ldr	r2, [pc, #80]	@ (8005970 <TIM_OC2_SetConfig+0xd0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d113      	bne.n	800594c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800592a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr
 8005970:	40012c00 	.word	0x40012c00

08005974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0303 	bic.w	r3, r3, #3
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a44 <TIM_OC3_SetConfig+0xd0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d10d      	bne.n	80059ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a14      	ldr	r2, [pc, #80]	@ (8005a44 <TIM_OC3_SetConfig+0xd0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d113      	bne.n	8005a1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40012c00 	.word	0x40012c00

08005a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	031b      	lsls	r3, r3, #12
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8005ae0 <TIM_OC4_SetConfig+0x98>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d109      	bne.n	8005abc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	019b      	lsls	r3, r3, #6
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr
 8005ae0:	40012c00 	.word	0x40012c00

08005ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 030a 	bic.w	r3, r3, #10
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0210 	bic.w	r2, r3, #16
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	031b      	lsls	r3, r3, #12
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	621a      	str	r2, [r3, #32]
}
 8005b94:	bf00      	nop
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr

08005b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f043 0307 	orr.w	r3, r3, #7
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	609a      	str	r2, [r3, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr

08005bd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b087      	sub	sp, #28
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
 8005bde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	021a      	lsls	r2, r3, #8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	609a      	str	r2, [r3, #8]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2201      	movs	r2, #1
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	401a      	ands	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1a      	ldr	r2, [r3, #32]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e046      	b.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a16      	ldr	r2, [pc, #88]	@ (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cbc:	d009      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a12      	ldr	r2, [pc, #72]	@ (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a10      	ldr	r2, [pc, #64]	@ (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10c      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800

08005d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr

08005d26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <memset>:
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4402      	add	r2, r0
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d100      	bne.n	8005d42 <memset+0xa>
 8005d40:	4770      	bx	lr
 8005d42:	f803 1b01 	strb.w	r1, [r3], #1
 8005d46:	e7f9      	b.n	8005d3c <memset+0x4>

08005d48 <__libc_init_array>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	4d0c      	ldr	r5, [pc, #48]	@ (8005d80 <__libc_init_array+0x38>)
 8005d4e:	4c0d      	ldr	r4, [pc, #52]	@ (8005d84 <__libc_init_array+0x3c>)
 8005d50:	1b64      	subs	r4, r4, r5
 8005d52:	10a4      	asrs	r4, r4, #2
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	d109      	bne.n	8005d6c <__libc_init_array+0x24>
 8005d58:	f000 f81a 	bl	8005d90 <_init>
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	4d0a      	ldr	r5, [pc, #40]	@ (8005d88 <__libc_init_array+0x40>)
 8005d60:	4c0a      	ldr	r4, [pc, #40]	@ (8005d8c <__libc_init_array+0x44>)
 8005d62:	1b64      	subs	r4, r4, r5
 8005d64:	10a4      	asrs	r4, r4, #2
 8005d66:	42a6      	cmp	r6, r4
 8005d68:	d105      	bne.n	8005d76 <__libc_init_array+0x2e>
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d70:	4798      	blx	r3
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7ee      	b.n	8005d54 <__libc_init_array+0xc>
 8005d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7a:	4798      	blx	r3
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7f2      	b.n	8005d66 <__libc_init_array+0x1e>
 8005d80:	08005de4 	.word	0x08005de4
 8005d84:	08005de4 	.word	0x08005de4
 8005d88:	08005de4 	.word	0x08005de4
 8005d8c:	08005de8 	.word	0x08005de8

08005d90 <_init>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	bf00      	nop
 8005d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d96:	bc08      	pop	{r3}
 8005d98:	469e      	mov	lr, r3
 8005d9a:	4770      	bx	lr

08005d9c <_fini>:
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9e:	bf00      	nop
 8005da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da2:	bc08      	pop	{r3}
 8005da4:	469e      	mov	lr, r3
 8005da6:	4770      	bx	lr
