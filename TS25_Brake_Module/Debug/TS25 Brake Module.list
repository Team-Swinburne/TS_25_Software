
TS25 Brake Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080091b0  080091b0  0000a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009390  08009390  0000b0e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009390  08009390  0000b0e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009390  08009390  0000b0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009394  08009394  0000a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08009398  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  200000e4  0800947c  0000b0e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20000854  0800947c  0000b854  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b0e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015576  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c9  00000000  00000000  00020682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00023750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9c  00000000  00000000  00024b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc15  00000000  00000000  00025b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017372  00000000  00000000  00045749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9800  00000000  00000000  0005cabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001262bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  00126300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012b634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000e4 	.word	0x200000e4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009198 	.word	0x08009198

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000e8 	.word	0x200000e8
 8000100:	08009198 	.word	0x08009198

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_f2iz>:
 8000230:	0241      	lsls	r1, r0, #9
 8000232:	0042      	lsls	r2, r0, #1
 8000234:	0fc3      	lsrs	r3, r0, #31
 8000236:	0a49      	lsrs	r1, r1, #9
 8000238:	2000      	movs	r0, #0
 800023a:	0e12      	lsrs	r2, r2, #24
 800023c:	2a7e      	cmp	r2, #126	@ 0x7e
 800023e:	dd03      	ble.n	8000248 <__aeabi_f2iz+0x18>
 8000240:	2a9d      	cmp	r2, #157	@ 0x9d
 8000242:	dd02      	ble.n	800024a <__aeabi_f2iz+0x1a>
 8000244:	4a09      	ldr	r2, [pc, #36]	@ (800026c <__aeabi_f2iz+0x3c>)
 8000246:	1898      	adds	r0, r3, r2
 8000248:	4770      	bx	lr
 800024a:	2080      	movs	r0, #128	@ 0x80
 800024c:	0400      	lsls	r0, r0, #16
 800024e:	4301      	orrs	r1, r0
 8000250:	2a95      	cmp	r2, #149	@ 0x95
 8000252:	dc07      	bgt.n	8000264 <__aeabi_f2iz+0x34>
 8000254:	2096      	movs	r0, #150	@ 0x96
 8000256:	1a82      	subs	r2, r0, r2
 8000258:	40d1      	lsrs	r1, r2
 800025a:	4248      	negs	r0, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1f3      	bne.n	8000248 <__aeabi_f2iz+0x18>
 8000260:	0008      	movs	r0, r1
 8000262:	e7f1      	b.n	8000248 <__aeabi_f2iz+0x18>
 8000264:	3a96      	subs	r2, #150	@ 0x96
 8000266:	4091      	lsls	r1, r2
 8000268:	e7f7      	b.n	800025a <__aeabi_f2iz+0x2a>
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	7fffffff 	.word	0x7fffffff

08000270 <__aeabi_ddiv>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46de      	mov	lr, fp
 8000274:	4645      	mov	r5, r8
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	b087      	sub	sp, #28
 800027e:	9200      	str	r2, [sp, #0]
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	030b      	lsls	r3, r1, #12
 8000284:	0b1b      	lsrs	r3, r3, #12
 8000286:	469b      	mov	fp, r3
 8000288:	0fca      	lsrs	r2, r1, #31
 800028a:	004b      	lsls	r3, r1, #1
 800028c:	0004      	movs	r4, r0
 800028e:	4680      	mov	r8, r0
 8000290:	0d5b      	lsrs	r3, r3, #21
 8000292:	9202      	str	r2, [sp, #8]
 8000294:	d100      	bne.n	8000298 <__aeabi_ddiv+0x28>
 8000296:	e098      	b.n	80003ca <__aeabi_ddiv+0x15a>
 8000298:	4a7c      	ldr	r2, [pc, #496]	@ (800048c <__aeabi_ddiv+0x21c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d037      	beq.n	800030e <__aeabi_ddiv+0x9e>
 800029e:	4659      	mov	r1, fp
 80002a0:	0f42      	lsrs	r2, r0, #29
 80002a2:	00c9      	lsls	r1, r1, #3
 80002a4:	430a      	orrs	r2, r1
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	0409      	lsls	r1, r1, #16
 80002aa:	4311      	orrs	r1, r2
 80002ac:	00c2      	lsls	r2, r0, #3
 80002ae:	4690      	mov	r8, r2
 80002b0:	4a77      	ldr	r2, [pc, #476]	@ (8000490 <__aeabi_ddiv+0x220>)
 80002b2:	4689      	mov	r9, r1
 80002b4:	4692      	mov	sl, r2
 80002b6:	449a      	add	sl, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	2400      	movs	r4, #0
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	9e00      	ldr	r6, [sp, #0]
 80002c0:	9f01      	ldr	r7, [sp, #4]
 80002c2:	033b      	lsls	r3, r7, #12
 80002c4:	0b1b      	lsrs	r3, r3, #12
 80002c6:	469b      	mov	fp, r3
 80002c8:	007b      	lsls	r3, r7, #1
 80002ca:	0030      	movs	r0, r6
 80002cc:	0d5b      	lsrs	r3, r3, #21
 80002ce:	0ffd      	lsrs	r5, r7, #31
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d059      	beq.n	8000388 <__aeabi_ddiv+0x118>
 80002d4:	4a6d      	ldr	r2, [pc, #436]	@ (800048c <__aeabi_ddiv+0x21c>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d048      	beq.n	800036c <__aeabi_ddiv+0xfc>
 80002da:	4659      	mov	r1, fp
 80002dc:	0f72      	lsrs	r2, r6, #29
 80002de:	00c9      	lsls	r1, r1, #3
 80002e0:	430a      	orrs	r2, r1
 80002e2:	2180      	movs	r1, #128	@ 0x80
 80002e4:	0409      	lsls	r1, r1, #16
 80002e6:	4311      	orrs	r1, r2
 80002e8:	468b      	mov	fp, r1
 80002ea:	4969      	ldr	r1, [pc, #420]	@ (8000490 <__aeabi_ddiv+0x220>)
 80002ec:	00f2      	lsls	r2, r6, #3
 80002ee:	468c      	mov	ip, r1
 80002f0:	4651      	mov	r1, sl
 80002f2:	4463      	add	r3, ip
 80002f4:	1acb      	subs	r3, r1, r3
 80002f6:	469a      	mov	sl, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	9e02      	ldr	r6, [sp, #8]
 80002fc:	406e      	eors	r6, r5
 80002fe:	b2f6      	uxtb	r6, r6
 8000300:	2c0f      	cmp	r4, #15
 8000302:	d900      	bls.n	8000306 <__aeabi_ddiv+0x96>
 8000304:	e0ce      	b.n	80004a4 <__aeabi_ddiv+0x234>
 8000306:	4b63      	ldr	r3, [pc, #396]	@ (8000494 <__aeabi_ddiv+0x224>)
 8000308:	00a4      	lsls	r4, r4, #2
 800030a:	591b      	ldr	r3, [r3, r4]
 800030c:	469f      	mov	pc, r3
 800030e:	465a      	mov	r2, fp
 8000310:	4302      	orrs	r2, r0
 8000312:	4691      	mov	r9, r2
 8000314:	d000      	beq.n	8000318 <__aeabi_ddiv+0xa8>
 8000316:	e090      	b.n	800043a <__aeabi_ddiv+0x1ca>
 8000318:	469a      	mov	sl, r3
 800031a:	2302      	movs	r3, #2
 800031c:	4690      	mov	r8, r2
 800031e:	2408      	movs	r4, #8
 8000320:	9303      	str	r3, [sp, #12]
 8000322:	e7cc      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000324:	46cb      	mov	fp, r9
 8000326:	4642      	mov	r2, r8
 8000328:	9d02      	ldr	r5, [sp, #8]
 800032a:	9903      	ldr	r1, [sp, #12]
 800032c:	2902      	cmp	r1, #2
 800032e:	d100      	bne.n	8000332 <__aeabi_ddiv+0xc2>
 8000330:	e1de      	b.n	80006f0 <__aeabi_ddiv+0x480>
 8000332:	2903      	cmp	r1, #3
 8000334:	d100      	bne.n	8000338 <__aeabi_ddiv+0xc8>
 8000336:	e08d      	b.n	8000454 <__aeabi_ddiv+0x1e4>
 8000338:	2901      	cmp	r1, #1
 800033a:	d000      	beq.n	800033e <__aeabi_ddiv+0xce>
 800033c:	e179      	b.n	8000632 <__aeabi_ddiv+0x3c2>
 800033e:	002e      	movs	r6, r5
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	2400      	movs	r4, #0
 8000346:	4690      	mov	r8, r2
 8000348:	051b      	lsls	r3, r3, #20
 800034a:	4323      	orrs	r3, r4
 800034c:	07f6      	lsls	r6, r6, #31
 800034e:	4333      	orrs	r3, r6
 8000350:	4640      	mov	r0, r8
 8000352:	0019      	movs	r1, r3
 8000354:	b007      	add	sp, #28
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	46bb      	mov	fp, r7
 800035a:	46b2      	mov	sl, r6
 800035c:	46a9      	mov	r9, r5
 800035e:	46a0      	mov	r8, r4
 8000360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000362:	2200      	movs	r2, #0
 8000364:	2400      	movs	r4, #0
 8000366:	4690      	mov	r8, r2
 8000368:	4b48      	ldr	r3, [pc, #288]	@ (800048c <__aeabi_ddiv+0x21c>)
 800036a:	e7ed      	b.n	8000348 <__aeabi_ddiv+0xd8>
 800036c:	465a      	mov	r2, fp
 800036e:	9b00      	ldr	r3, [sp, #0]
 8000370:	431a      	orrs	r2, r3
 8000372:	4b49      	ldr	r3, [pc, #292]	@ (8000498 <__aeabi_ddiv+0x228>)
 8000374:	469c      	mov	ip, r3
 8000376:	44e2      	add	sl, ip
 8000378:	2a00      	cmp	r2, #0
 800037a:	d159      	bne.n	8000430 <__aeabi_ddiv+0x1c0>
 800037c:	2302      	movs	r3, #2
 800037e:	431c      	orrs	r4, r3
 8000380:	2300      	movs	r3, #0
 8000382:	2102      	movs	r1, #2
 8000384:	469b      	mov	fp, r3
 8000386:	e7b8      	b.n	80002fa <__aeabi_ddiv+0x8a>
 8000388:	465a      	mov	r2, fp
 800038a:	9b00      	ldr	r3, [sp, #0]
 800038c:	431a      	orrs	r2, r3
 800038e:	d049      	beq.n	8000424 <__aeabi_ddiv+0x1b4>
 8000390:	465b      	mov	r3, fp
 8000392:	2b00      	cmp	r3, #0
 8000394:	d100      	bne.n	8000398 <__aeabi_ddiv+0x128>
 8000396:	e19c      	b.n	80006d2 <__aeabi_ddiv+0x462>
 8000398:	4658      	mov	r0, fp
 800039a:	f000 fe53 	bl	8001044 <__clzsi2>
 800039e:	0002      	movs	r2, r0
 80003a0:	0003      	movs	r3, r0
 80003a2:	3a0b      	subs	r2, #11
 80003a4:	271d      	movs	r7, #29
 80003a6:	9e00      	ldr	r6, [sp, #0]
 80003a8:	1aba      	subs	r2, r7, r2
 80003aa:	0019      	movs	r1, r3
 80003ac:	4658      	mov	r0, fp
 80003ae:	40d6      	lsrs	r6, r2
 80003b0:	3908      	subs	r1, #8
 80003b2:	4088      	lsls	r0, r1
 80003b4:	0032      	movs	r2, r6
 80003b6:	4302      	orrs	r2, r0
 80003b8:	4693      	mov	fp, r2
 80003ba:	9a00      	ldr	r2, [sp, #0]
 80003bc:	408a      	lsls	r2, r1
 80003be:	4937      	ldr	r1, [pc, #220]	@ (800049c <__aeabi_ddiv+0x22c>)
 80003c0:	4453      	add	r3, sl
 80003c2:	468a      	mov	sl, r1
 80003c4:	2100      	movs	r1, #0
 80003c6:	449a      	add	sl, r3
 80003c8:	e797      	b.n	80002fa <__aeabi_ddiv+0x8a>
 80003ca:	465b      	mov	r3, fp
 80003cc:	4303      	orrs	r3, r0
 80003ce:	4699      	mov	r9, r3
 80003d0:	d021      	beq.n	8000416 <__aeabi_ddiv+0x1a6>
 80003d2:	465b      	mov	r3, fp
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d100      	bne.n	80003da <__aeabi_ddiv+0x16a>
 80003d8:	e169      	b.n	80006ae <__aeabi_ddiv+0x43e>
 80003da:	4658      	mov	r0, fp
 80003dc:	f000 fe32 	bl	8001044 <__clzsi2>
 80003e0:	230b      	movs	r3, #11
 80003e2:	425b      	negs	r3, r3
 80003e4:	469c      	mov	ip, r3
 80003e6:	0002      	movs	r2, r0
 80003e8:	4484      	add	ip, r0
 80003ea:	4666      	mov	r6, ip
 80003ec:	231d      	movs	r3, #29
 80003ee:	1b9b      	subs	r3, r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	0011      	movs	r1, r2
 80003f4:	4658      	mov	r0, fp
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	3908      	subs	r1, #8
 80003fa:	4088      	lsls	r0, r1
 80003fc:	0033      	movs	r3, r6
 80003fe:	4303      	orrs	r3, r0
 8000400:	4699      	mov	r9, r3
 8000402:	0023      	movs	r3, r4
 8000404:	408b      	lsls	r3, r1
 8000406:	4698      	mov	r8, r3
 8000408:	4b25      	ldr	r3, [pc, #148]	@ (80004a0 <__aeabi_ddiv+0x230>)
 800040a:	2400      	movs	r4, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	469a      	mov	sl, r3
 8000410:	2300      	movs	r3, #0
 8000412:	9303      	str	r3, [sp, #12]
 8000414:	e753      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000416:	2300      	movs	r3, #0
 8000418:	4698      	mov	r8, r3
 800041a:	469a      	mov	sl, r3
 800041c:	3301      	adds	r3, #1
 800041e:	2404      	movs	r4, #4
 8000420:	9303      	str	r3, [sp, #12]
 8000422:	e74c      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000424:	2301      	movs	r3, #1
 8000426:	431c      	orrs	r4, r3
 8000428:	2300      	movs	r3, #0
 800042a:	2101      	movs	r1, #1
 800042c:	469b      	mov	fp, r3
 800042e:	e764      	b.n	80002fa <__aeabi_ddiv+0x8a>
 8000430:	2303      	movs	r3, #3
 8000432:	0032      	movs	r2, r6
 8000434:	2103      	movs	r1, #3
 8000436:	431c      	orrs	r4, r3
 8000438:	e75f      	b.n	80002fa <__aeabi_ddiv+0x8a>
 800043a:	469a      	mov	sl, r3
 800043c:	2303      	movs	r3, #3
 800043e:	46d9      	mov	r9, fp
 8000440:	240c      	movs	r4, #12
 8000442:	9303      	str	r3, [sp, #12]
 8000444:	e73b      	b.n	80002be <__aeabi_ddiv+0x4e>
 8000446:	2300      	movs	r3, #0
 8000448:	2480      	movs	r4, #128	@ 0x80
 800044a:	4698      	mov	r8, r3
 800044c:	2600      	movs	r6, #0
 800044e:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <__aeabi_ddiv+0x21c>)
 8000450:	0324      	lsls	r4, r4, #12
 8000452:	e779      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000454:	2480      	movs	r4, #128	@ 0x80
 8000456:	465b      	mov	r3, fp
 8000458:	0324      	lsls	r4, r4, #12
 800045a:	431c      	orrs	r4, r3
 800045c:	0324      	lsls	r4, r4, #12
 800045e:	002e      	movs	r6, r5
 8000460:	4690      	mov	r8, r2
 8000462:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <__aeabi_ddiv+0x21c>)
 8000464:	0b24      	lsrs	r4, r4, #12
 8000466:	e76f      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000468:	2480      	movs	r4, #128	@ 0x80
 800046a:	464b      	mov	r3, r9
 800046c:	0324      	lsls	r4, r4, #12
 800046e:	4223      	tst	r3, r4
 8000470:	d002      	beq.n	8000478 <__aeabi_ddiv+0x208>
 8000472:	465b      	mov	r3, fp
 8000474:	4223      	tst	r3, r4
 8000476:	d0f0      	beq.n	800045a <__aeabi_ddiv+0x1ea>
 8000478:	2480      	movs	r4, #128	@ 0x80
 800047a:	464b      	mov	r3, r9
 800047c:	0324      	lsls	r4, r4, #12
 800047e:	431c      	orrs	r4, r3
 8000480:	0324      	lsls	r4, r4, #12
 8000482:	9e02      	ldr	r6, [sp, #8]
 8000484:	4b01      	ldr	r3, [pc, #4]	@ (800048c <__aeabi_ddiv+0x21c>)
 8000486:	0b24      	lsrs	r4, r4, #12
 8000488:	e75e      	b.n	8000348 <__aeabi_ddiv+0xd8>
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	000007ff 	.word	0x000007ff
 8000490:	fffffc01 	.word	0xfffffc01
 8000494:	08009220 	.word	0x08009220
 8000498:	fffff801 	.word	0xfffff801
 800049c:	000003f3 	.word	0x000003f3
 80004a0:	fffffc0d 	.word	0xfffffc0d
 80004a4:	45cb      	cmp	fp, r9
 80004a6:	d200      	bcs.n	80004aa <__aeabi_ddiv+0x23a>
 80004a8:	e0f8      	b.n	800069c <__aeabi_ddiv+0x42c>
 80004aa:	d100      	bne.n	80004ae <__aeabi_ddiv+0x23e>
 80004ac:	e0f3      	b.n	8000696 <__aeabi_ddiv+0x426>
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	469c      	mov	ip, r3
 80004b4:	4644      	mov	r4, r8
 80004b6:	4648      	mov	r0, r9
 80004b8:	2500      	movs	r5, #0
 80004ba:	44e2      	add	sl, ip
 80004bc:	465b      	mov	r3, fp
 80004be:	0e17      	lsrs	r7, r2, #24
 80004c0:	021b      	lsls	r3, r3, #8
 80004c2:	431f      	orrs	r7, r3
 80004c4:	0c19      	lsrs	r1, r3, #16
 80004c6:	043b      	lsls	r3, r7, #16
 80004c8:	0212      	lsls	r2, r2, #8
 80004ca:	9700      	str	r7, [sp, #0]
 80004cc:	0c1f      	lsrs	r7, r3, #16
 80004ce:	4691      	mov	r9, r2
 80004d0:	9102      	str	r1, [sp, #8]
 80004d2:	9703      	str	r7, [sp, #12]
 80004d4:	f7ff fea6 	bl	8000224 <__aeabi_uidivmod>
 80004d8:	0002      	movs	r2, r0
 80004da:	437a      	muls	r2, r7
 80004dc:	040b      	lsls	r3, r1, #16
 80004de:	0c21      	lsrs	r1, r4, #16
 80004e0:	4680      	mov	r8, r0
 80004e2:	4319      	orrs	r1, r3
 80004e4:	428a      	cmp	r2, r1
 80004e6:	d909      	bls.n	80004fc <__aeabi_ddiv+0x28c>
 80004e8:	9f00      	ldr	r7, [sp, #0]
 80004ea:	2301      	movs	r3, #1
 80004ec:	46bc      	mov	ip, r7
 80004ee:	425b      	negs	r3, r3
 80004f0:	4461      	add	r1, ip
 80004f2:	469c      	mov	ip, r3
 80004f4:	44e0      	add	r8, ip
 80004f6:	428f      	cmp	r7, r1
 80004f8:	d800      	bhi.n	80004fc <__aeabi_ddiv+0x28c>
 80004fa:	e15c      	b.n	80007b6 <__aeabi_ddiv+0x546>
 80004fc:	1a88      	subs	r0, r1, r2
 80004fe:	9902      	ldr	r1, [sp, #8]
 8000500:	f7ff fe90 	bl	8000224 <__aeabi_uidivmod>
 8000504:	9a03      	ldr	r2, [sp, #12]
 8000506:	0424      	lsls	r4, r4, #16
 8000508:	4342      	muls	r2, r0
 800050a:	0409      	lsls	r1, r1, #16
 800050c:	0c24      	lsrs	r4, r4, #16
 800050e:	0003      	movs	r3, r0
 8000510:	430c      	orrs	r4, r1
 8000512:	42a2      	cmp	r2, r4
 8000514:	d906      	bls.n	8000524 <__aeabi_ddiv+0x2b4>
 8000516:	9900      	ldr	r1, [sp, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	468c      	mov	ip, r1
 800051c:	4464      	add	r4, ip
 800051e:	42a1      	cmp	r1, r4
 8000520:	d800      	bhi.n	8000524 <__aeabi_ddiv+0x2b4>
 8000522:	e142      	b.n	80007aa <__aeabi_ddiv+0x53a>
 8000524:	1aa0      	subs	r0, r4, r2
 8000526:	4642      	mov	r2, r8
 8000528:	0412      	lsls	r2, r2, #16
 800052a:	431a      	orrs	r2, r3
 800052c:	4693      	mov	fp, r2
 800052e:	464b      	mov	r3, r9
 8000530:	4659      	mov	r1, fp
 8000532:	0c1b      	lsrs	r3, r3, #16
 8000534:	001f      	movs	r7, r3
 8000536:	9304      	str	r3, [sp, #16]
 8000538:	040b      	lsls	r3, r1, #16
 800053a:	4649      	mov	r1, r9
 800053c:	0409      	lsls	r1, r1, #16
 800053e:	0c09      	lsrs	r1, r1, #16
 8000540:	000c      	movs	r4, r1
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	435c      	muls	r4, r3
 8000546:	0c12      	lsrs	r2, r2, #16
 8000548:	437b      	muls	r3, r7
 800054a:	4688      	mov	r8, r1
 800054c:	4351      	muls	r1, r2
 800054e:	437a      	muls	r2, r7
 8000550:	0c27      	lsrs	r7, r4, #16
 8000552:	46bc      	mov	ip, r7
 8000554:	185b      	adds	r3, r3, r1
 8000556:	4463      	add	r3, ip
 8000558:	4299      	cmp	r1, r3
 800055a:	d903      	bls.n	8000564 <__aeabi_ddiv+0x2f4>
 800055c:	2180      	movs	r1, #128	@ 0x80
 800055e:	0249      	lsls	r1, r1, #9
 8000560:	468c      	mov	ip, r1
 8000562:	4462      	add	r2, ip
 8000564:	0c19      	lsrs	r1, r3, #16
 8000566:	0424      	lsls	r4, r4, #16
 8000568:	041b      	lsls	r3, r3, #16
 800056a:	0c24      	lsrs	r4, r4, #16
 800056c:	188a      	adds	r2, r1, r2
 800056e:	191c      	adds	r4, r3, r4
 8000570:	4290      	cmp	r0, r2
 8000572:	d302      	bcc.n	800057a <__aeabi_ddiv+0x30a>
 8000574:	d116      	bne.n	80005a4 <__aeabi_ddiv+0x334>
 8000576:	42a5      	cmp	r5, r4
 8000578:	d214      	bcs.n	80005a4 <__aeabi_ddiv+0x334>
 800057a:	465b      	mov	r3, fp
 800057c:	9f00      	ldr	r7, [sp, #0]
 800057e:	3b01      	subs	r3, #1
 8000580:	444d      	add	r5, r9
 8000582:	9305      	str	r3, [sp, #20]
 8000584:	454d      	cmp	r5, r9
 8000586:	419b      	sbcs	r3, r3
 8000588:	46bc      	mov	ip, r7
 800058a:	425b      	negs	r3, r3
 800058c:	4463      	add	r3, ip
 800058e:	18c0      	adds	r0, r0, r3
 8000590:	4287      	cmp	r7, r0
 8000592:	d300      	bcc.n	8000596 <__aeabi_ddiv+0x326>
 8000594:	e102      	b.n	800079c <__aeabi_ddiv+0x52c>
 8000596:	4282      	cmp	r2, r0
 8000598:	d900      	bls.n	800059c <__aeabi_ddiv+0x32c>
 800059a:	e129      	b.n	80007f0 <__aeabi_ddiv+0x580>
 800059c:	d100      	bne.n	80005a0 <__aeabi_ddiv+0x330>
 800059e:	e124      	b.n	80007ea <__aeabi_ddiv+0x57a>
 80005a0:	9b05      	ldr	r3, [sp, #20]
 80005a2:	469b      	mov	fp, r3
 80005a4:	1b2c      	subs	r4, r5, r4
 80005a6:	42a5      	cmp	r5, r4
 80005a8:	41ad      	sbcs	r5, r5
 80005aa:	9b00      	ldr	r3, [sp, #0]
 80005ac:	1a80      	subs	r0, r0, r2
 80005ae:	426d      	negs	r5, r5
 80005b0:	1b40      	subs	r0, r0, r5
 80005b2:	4283      	cmp	r3, r0
 80005b4:	d100      	bne.n	80005b8 <__aeabi_ddiv+0x348>
 80005b6:	e10f      	b.n	80007d8 <__aeabi_ddiv+0x568>
 80005b8:	9902      	ldr	r1, [sp, #8]
 80005ba:	f7ff fe33 	bl	8000224 <__aeabi_uidivmod>
 80005be:	9a03      	ldr	r2, [sp, #12]
 80005c0:	040b      	lsls	r3, r1, #16
 80005c2:	4342      	muls	r2, r0
 80005c4:	0c21      	lsrs	r1, r4, #16
 80005c6:	0005      	movs	r5, r0
 80005c8:	4319      	orrs	r1, r3
 80005ca:	428a      	cmp	r2, r1
 80005cc:	d900      	bls.n	80005d0 <__aeabi_ddiv+0x360>
 80005ce:	e0cb      	b.n	8000768 <__aeabi_ddiv+0x4f8>
 80005d0:	1a88      	subs	r0, r1, r2
 80005d2:	9902      	ldr	r1, [sp, #8]
 80005d4:	f7ff fe26 	bl	8000224 <__aeabi_uidivmod>
 80005d8:	9a03      	ldr	r2, [sp, #12]
 80005da:	0424      	lsls	r4, r4, #16
 80005dc:	4342      	muls	r2, r0
 80005de:	0409      	lsls	r1, r1, #16
 80005e0:	0c24      	lsrs	r4, r4, #16
 80005e2:	0003      	movs	r3, r0
 80005e4:	430c      	orrs	r4, r1
 80005e6:	42a2      	cmp	r2, r4
 80005e8:	d900      	bls.n	80005ec <__aeabi_ddiv+0x37c>
 80005ea:	e0ca      	b.n	8000782 <__aeabi_ddiv+0x512>
 80005ec:	4641      	mov	r1, r8
 80005ee:	1aa4      	subs	r4, r4, r2
 80005f0:	042a      	lsls	r2, r5, #16
 80005f2:	431a      	orrs	r2, r3
 80005f4:	9f04      	ldr	r7, [sp, #16]
 80005f6:	0413      	lsls	r3, r2, #16
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	4359      	muls	r1, r3
 80005fc:	4640      	mov	r0, r8
 80005fe:	437b      	muls	r3, r7
 8000600:	469c      	mov	ip, r3
 8000602:	0c15      	lsrs	r5, r2, #16
 8000604:	4368      	muls	r0, r5
 8000606:	0c0b      	lsrs	r3, r1, #16
 8000608:	4484      	add	ip, r0
 800060a:	4463      	add	r3, ip
 800060c:	437d      	muls	r5, r7
 800060e:	4298      	cmp	r0, r3
 8000610:	d903      	bls.n	800061a <__aeabi_ddiv+0x3aa>
 8000612:	2080      	movs	r0, #128	@ 0x80
 8000614:	0240      	lsls	r0, r0, #9
 8000616:	4684      	mov	ip, r0
 8000618:	4465      	add	r5, ip
 800061a:	0c18      	lsrs	r0, r3, #16
 800061c:	0409      	lsls	r1, r1, #16
 800061e:	041b      	lsls	r3, r3, #16
 8000620:	0c09      	lsrs	r1, r1, #16
 8000622:	1940      	adds	r0, r0, r5
 8000624:	185b      	adds	r3, r3, r1
 8000626:	4284      	cmp	r4, r0
 8000628:	d327      	bcc.n	800067a <__aeabi_ddiv+0x40a>
 800062a:	d023      	beq.n	8000674 <__aeabi_ddiv+0x404>
 800062c:	2301      	movs	r3, #1
 800062e:	0035      	movs	r5, r6
 8000630:	431a      	orrs	r2, r3
 8000632:	4b94      	ldr	r3, [pc, #592]	@ (8000884 <__aeabi_ddiv+0x614>)
 8000634:	4453      	add	r3, sl
 8000636:	2b00      	cmp	r3, #0
 8000638:	dd60      	ble.n	80006fc <__aeabi_ddiv+0x48c>
 800063a:	0751      	lsls	r1, r2, #29
 800063c:	d000      	beq.n	8000640 <__aeabi_ddiv+0x3d0>
 800063e:	e086      	b.n	800074e <__aeabi_ddiv+0x4de>
 8000640:	002e      	movs	r6, r5
 8000642:	08d1      	lsrs	r1, r2, #3
 8000644:	465a      	mov	r2, fp
 8000646:	01d2      	lsls	r2, r2, #7
 8000648:	d506      	bpl.n	8000658 <__aeabi_ddiv+0x3e8>
 800064a:	465a      	mov	r2, fp
 800064c:	4b8e      	ldr	r3, [pc, #568]	@ (8000888 <__aeabi_ddiv+0x618>)
 800064e:	401a      	ands	r2, r3
 8000650:	2380      	movs	r3, #128	@ 0x80
 8000652:	4693      	mov	fp, r2
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	4453      	add	r3, sl
 8000658:	4a8c      	ldr	r2, [pc, #560]	@ (800088c <__aeabi_ddiv+0x61c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	dd00      	ble.n	8000660 <__aeabi_ddiv+0x3f0>
 800065e:	e680      	b.n	8000362 <__aeabi_ddiv+0xf2>
 8000660:	465a      	mov	r2, fp
 8000662:	0752      	lsls	r2, r2, #29
 8000664:	430a      	orrs	r2, r1
 8000666:	4690      	mov	r8, r2
 8000668:	465a      	mov	r2, fp
 800066a:	055b      	lsls	r3, r3, #21
 800066c:	0254      	lsls	r4, r2, #9
 800066e:	0b24      	lsrs	r4, r4, #12
 8000670:	0d5b      	lsrs	r3, r3, #21
 8000672:	e669      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000674:	0035      	movs	r5, r6
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0db      	beq.n	8000632 <__aeabi_ddiv+0x3c2>
 800067a:	9d00      	ldr	r5, [sp, #0]
 800067c:	1e51      	subs	r1, r2, #1
 800067e:	46ac      	mov	ip, r5
 8000680:	4464      	add	r4, ip
 8000682:	42ac      	cmp	r4, r5
 8000684:	d200      	bcs.n	8000688 <__aeabi_ddiv+0x418>
 8000686:	e09e      	b.n	80007c6 <__aeabi_ddiv+0x556>
 8000688:	4284      	cmp	r4, r0
 800068a:	d200      	bcs.n	800068e <__aeabi_ddiv+0x41e>
 800068c:	e0e1      	b.n	8000852 <__aeabi_ddiv+0x5e2>
 800068e:	d100      	bne.n	8000692 <__aeabi_ddiv+0x422>
 8000690:	e0ee      	b.n	8000870 <__aeabi_ddiv+0x600>
 8000692:	000a      	movs	r2, r1
 8000694:	e7ca      	b.n	800062c <__aeabi_ddiv+0x3bc>
 8000696:	4542      	cmp	r2, r8
 8000698:	d900      	bls.n	800069c <__aeabi_ddiv+0x42c>
 800069a:	e708      	b.n	80004ae <__aeabi_ddiv+0x23e>
 800069c:	464b      	mov	r3, r9
 800069e:	07dc      	lsls	r4, r3, #31
 80006a0:	0858      	lsrs	r0, r3, #1
 80006a2:	4643      	mov	r3, r8
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	431c      	orrs	r4, r3
 80006a8:	4643      	mov	r3, r8
 80006aa:	07dd      	lsls	r5, r3, #31
 80006ac:	e706      	b.n	80004bc <__aeabi_ddiv+0x24c>
 80006ae:	f000 fcc9 	bl	8001044 <__clzsi2>
 80006b2:	2315      	movs	r3, #21
 80006b4:	469c      	mov	ip, r3
 80006b6:	4484      	add	ip, r0
 80006b8:	0002      	movs	r2, r0
 80006ba:	4663      	mov	r3, ip
 80006bc:	3220      	adds	r2, #32
 80006be:	2b1c      	cmp	r3, #28
 80006c0:	dc00      	bgt.n	80006c4 <__aeabi_ddiv+0x454>
 80006c2:	e692      	b.n	80003ea <__aeabi_ddiv+0x17a>
 80006c4:	0023      	movs	r3, r4
 80006c6:	3808      	subs	r0, #8
 80006c8:	4083      	lsls	r3, r0
 80006ca:	4699      	mov	r9, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	4698      	mov	r8, r3
 80006d0:	e69a      	b.n	8000408 <__aeabi_ddiv+0x198>
 80006d2:	f000 fcb7 	bl	8001044 <__clzsi2>
 80006d6:	0002      	movs	r2, r0
 80006d8:	0003      	movs	r3, r0
 80006da:	3215      	adds	r2, #21
 80006dc:	3320      	adds	r3, #32
 80006de:	2a1c      	cmp	r2, #28
 80006e0:	dc00      	bgt.n	80006e4 <__aeabi_ddiv+0x474>
 80006e2:	e65f      	b.n	80003a4 <__aeabi_ddiv+0x134>
 80006e4:	9900      	ldr	r1, [sp, #0]
 80006e6:	3808      	subs	r0, #8
 80006e8:	4081      	lsls	r1, r0
 80006ea:	2200      	movs	r2, #0
 80006ec:	468b      	mov	fp, r1
 80006ee:	e666      	b.n	80003be <__aeabi_ddiv+0x14e>
 80006f0:	2200      	movs	r2, #0
 80006f2:	002e      	movs	r6, r5
 80006f4:	2400      	movs	r4, #0
 80006f6:	4690      	mov	r8, r2
 80006f8:	4b65      	ldr	r3, [pc, #404]	@ (8000890 <__aeabi_ddiv+0x620>)
 80006fa:	e625      	b.n	8000348 <__aeabi_ddiv+0xd8>
 80006fc:	002e      	movs	r6, r5
 80006fe:	2101      	movs	r1, #1
 8000700:	1ac9      	subs	r1, r1, r3
 8000702:	2938      	cmp	r1, #56	@ 0x38
 8000704:	dd00      	ble.n	8000708 <__aeabi_ddiv+0x498>
 8000706:	e61b      	b.n	8000340 <__aeabi_ddiv+0xd0>
 8000708:	291f      	cmp	r1, #31
 800070a:	dc7e      	bgt.n	800080a <__aeabi_ddiv+0x59a>
 800070c:	4861      	ldr	r0, [pc, #388]	@ (8000894 <__aeabi_ddiv+0x624>)
 800070e:	0014      	movs	r4, r2
 8000710:	4450      	add	r0, sl
 8000712:	465b      	mov	r3, fp
 8000714:	4082      	lsls	r2, r0
 8000716:	4083      	lsls	r3, r0
 8000718:	40cc      	lsrs	r4, r1
 800071a:	1e50      	subs	r0, r2, #1
 800071c:	4182      	sbcs	r2, r0
 800071e:	4323      	orrs	r3, r4
 8000720:	431a      	orrs	r2, r3
 8000722:	465b      	mov	r3, fp
 8000724:	40cb      	lsrs	r3, r1
 8000726:	0751      	lsls	r1, r2, #29
 8000728:	d009      	beq.n	800073e <__aeabi_ddiv+0x4ce>
 800072a:	210f      	movs	r1, #15
 800072c:	4011      	ands	r1, r2
 800072e:	2904      	cmp	r1, #4
 8000730:	d005      	beq.n	800073e <__aeabi_ddiv+0x4ce>
 8000732:	1d11      	adds	r1, r2, #4
 8000734:	4291      	cmp	r1, r2
 8000736:	4192      	sbcs	r2, r2
 8000738:	4252      	negs	r2, r2
 800073a:	189b      	adds	r3, r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	0219      	lsls	r1, r3, #8
 8000740:	d400      	bmi.n	8000744 <__aeabi_ddiv+0x4d4>
 8000742:	e09b      	b.n	800087c <__aeabi_ddiv+0x60c>
 8000744:	2200      	movs	r2, #0
 8000746:	2301      	movs	r3, #1
 8000748:	2400      	movs	r4, #0
 800074a:	4690      	mov	r8, r2
 800074c:	e5fc      	b.n	8000348 <__aeabi_ddiv+0xd8>
 800074e:	210f      	movs	r1, #15
 8000750:	4011      	ands	r1, r2
 8000752:	2904      	cmp	r1, #4
 8000754:	d100      	bne.n	8000758 <__aeabi_ddiv+0x4e8>
 8000756:	e773      	b.n	8000640 <__aeabi_ddiv+0x3d0>
 8000758:	1d11      	adds	r1, r2, #4
 800075a:	4291      	cmp	r1, r2
 800075c:	4192      	sbcs	r2, r2
 800075e:	4252      	negs	r2, r2
 8000760:	002e      	movs	r6, r5
 8000762:	08c9      	lsrs	r1, r1, #3
 8000764:	4493      	add	fp, r2
 8000766:	e76d      	b.n	8000644 <__aeabi_ddiv+0x3d4>
 8000768:	9b00      	ldr	r3, [sp, #0]
 800076a:	3d01      	subs	r5, #1
 800076c:	469c      	mov	ip, r3
 800076e:	4461      	add	r1, ip
 8000770:	428b      	cmp	r3, r1
 8000772:	d900      	bls.n	8000776 <__aeabi_ddiv+0x506>
 8000774:	e72c      	b.n	80005d0 <__aeabi_ddiv+0x360>
 8000776:	428a      	cmp	r2, r1
 8000778:	d800      	bhi.n	800077c <__aeabi_ddiv+0x50c>
 800077a:	e729      	b.n	80005d0 <__aeabi_ddiv+0x360>
 800077c:	1e85      	subs	r5, r0, #2
 800077e:	4461      	add	r1, ip
 8000780:	e726      	b.n	80005d0 <__aeabi_ddiv+0x360>
 8000782:	9900      	ldr	r1, [sp, #0]
 8000784:	3b01      	subs	r3, #1
 8000786:	468c      	mov	ip, r1
 8000788:	4464      	add	r4, ip
 800078a:	42a1      	cmp	r1, r4
 800078c:	d900      	bls.n	8000790 <__aeabi_ddiv+0x520>
 800078e:	e72d      	b.n	80005ec <__aeabi_ddiv+0x37c>
 8000790:	42a2      	cmp	r2, r4
 8000792:	d800      	bhi.n	8000796 <__aeabi_ddiv+0x526>
 8000794:	e72a      	b.n	80005ec <__aeabi_ddiv+0x37c>
 8000796:	1e83      	subs	r3, r0, #2
 8000798:	4464      	add	r4, ip
 800079a:	e727      	b.n	80005ec <__aeabi_ddiv+0x37c>
 800079c:	4287      	cmp	r7, r0
 800079e:	d000      	beq.n	80007a2 <__aeabi_ddiv+0x532>
 80007a0:	e6fe      	b.n	80005a0 <__aeabi_ddiv+0x330>
 80007a2:	45a9      	cmp	r9, r5
 80007a4:	d900      	bls.n	80007a8 <__aeabi_ddiv+0x538>
 80007a6:	e6fb      	b.n	80005a0 <__aeabi_ddiv+0x330>
 80007a8:	e6f5      	b.n	8000596 <__aeabi_ddiv+0x326>
 80007aa:	42a2      	cmp	r2, r4
 80007ac:	d800      	bhi.n	80007b0 <__aeabi_ddiv+0x540>
 80007ae:	e6b9      	b.n	8000524 <__aeabi_ddiv+0x2b4>
 80007b0:	1e83      	subs	r3, r0, #2
 80007b2:	4464      	add	r4, ip
 80007b4:	e6b6      	b.n	8000524 <__aeabi_ddiv+0x2b4>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	d800      	bhi.n	80007bc <__aeabi_ddiv+0x54c>
 80007ba:	e69f      	b.n	80004fc <__aeabi_ddiv+0x28c>
 80007bc:	46bc      	mov	ip, r7
 80007be:	1e83      	subs	r3, r0, #2
 80007c0:	4698      	mov	r8, r3
 80007c2:	4461      	add	r1, ip
 80007c4:	e69a      	b.n	80004fc <__aeabi_ddiv+0x28c>
 80007c6:	000a      	movs	r2, r1
 80007c8:	4284      	cmp	r4, r0
 80007ca:	d000      	beq.n	80007ce <__aeabi_ddiv+0x55e>
 80007cc:	e72e      	b.n	800062c <__aeabi_ddiv+0x3bc>
 80007ce:	454b      	cmp	r3, r9
 80007d0:	d000      	beq.n	80007d4 <__aeabi_ddiv+0x564>
 80007d2:	e72b      	b.n	800062c <__aeabi_ddiv+0x3bc>
 80007d4:	0035      	movs	r5, r6
 80007d6:	e72c      	b.n	8000632 <__aeabi_ddiv+0x3c2>
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <__aeabi_ddiv+0x614>)
 80007da:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <__aeabi_ddiv+0x628>)
 80007dc:	4453      	add	r3, sl
 80007de:	4592      	cmp	sl, r2
 80007e0:	db43      	blt.n	800086a <__aeabi_ddiv+0x5fa>
 80007e2:	2201      	movs	r2, #1
 80007e4:	2100      	movs	r1, #0
 80007e6:	4493      	add	fp, r2
 80007e8:	e72c      	b.n	8000644 <__aeabi_ddiv+0x3d4>
 80007ea:	42ac      	cmp	r4, r5
 80007ec:	d800      	bhi.n	80007f0 <__aeabi_ddiv+0x580>
 80007ee:	e6d7      	b.n	80005a0 <__aeabi_ddiv+0x330>
 80007f0:	2302      	movs	r3, #2
 80007f2:	425b      	negs	r3, r3
 80007f4:	469c      	mov	ip, r3
 80007f6:	9900      	ldr	r1, [sp, #0]
 80007f8:	444d      	add	r5, r9
 80007fa:	454d      	cmp	r5, r9
 80007fc:	419b      	sbcs	r3, r3
 80007fe:	44e3      	add	fp, ip
 8000800:	468c      	mov	ip, r1
 8000802:	425b      	negs	r3, r3
 8000804:	4463      	add	r3, ip
 8000806:	18c0      	adds	r0, r0, r3
 8000808:	e6cc      	b.n	80005a4 <__aeabi_ddiv+0x334>
 800080a:	201f      	movs	r0, #31
 800080c:	4240      	negs	r0, r0
 800080e:	1ac3      	subs	r3, r0, r3
 8000810:	4658      	mov	r0, fp
 8000812:	40d8      	lsrs	r0, r3
 8000814:	2920      	cmp	r1, #32
 8000816:	d004      	beq.n	8000822 <__aeabi_ddiv+0x5b2>
 8000818:	4659      	mov	r1, fp
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <__aeabi_ddiv+0x62c>)
 800081c:	4453      	add	r3, sl
 800081e:	4099      	lsls	r1, r3
 8000820:	430a      	orrs	r2, r1
 8000822:	1e53      	subs	r3, r2, #1
 8000824:	419a      	sbcs	r2, r3
 8000826:	2307      	movs	r3, #7
 8000828:	0019      	movs	r1, r3
 800082a:	4302      	orrs	r2, r0
 800082c:	2400      	movs	r4, #0
 800082e:	4011      	ands	r1, r2
 8000830:	4213      	tst	r3, r2
 8000832:	d009      	beq.n	8000848 <__aeabi_ddiv+0x5d8>
 8000834:	3308      	adds	r3, #8
 8000836:	4013      	ands	r3, r2
 8000838:	2b04      	cmp	r3, #4
 800083a:	d01d      	beq.n	8000878 <__aeabi_ddiv+0x608>
 800083c:	1d13      	adds	r3, r2, #4
 800083e:	4293      	cmp	r3, r2
 8000840:	4189      	sbcs	r1, r1
 8000842:	001a      	movs	r2, r3
 8000844:	4249      	negs	r1, r1
 8000846:	0749      	lsls	r1, r1, #29
 8000848:	08d2      	lsrs	r2, r2, #3
 800084a:	430a      	orrs	r2, r1
 800084c:	4690      	mov	r8, r2
 800084e:	2300      	movs	r3, #0
 8000850:	e57a      	b.n	8000348 <__aeabi_ddiv+0xd8>
 8000852:	4649      	mov	r1, r9
 8000854:	9f00      	ldr	r7, [sp, #0]
 8000856:	004d      	lsls	r5, r1, #1
 8000858:	454d      	cmp	r5, r9
 800085a:	4189      	sbcs	r1, r1
 800085c:	46bc      	mov	ip, r7
 800085e:	4249      	negs	r1, r1
 8000860:	4461      	add	r1, ip
 8000862:	46a9      	mov	r9, r5
 8000864:	3a02      	subs	r2, #2
 8000866:	1864      	adds	r4, r4, r1
 8000868:	e7ae      	b.n	80007c8 <__aeabi_ddiv+0x558>
 800086a:	2201      	movs	r2, #1
 800086c:	4252      	negs	r2, r2
 800086e:	e746      	b.n	80006fe <__aeabi_ddiv+0x48e>
 8000870:	4599      	cmp	r9, r3
 8000872:	d3ee      	bcc.n	8000852 <__aeabi_ddiv+0x5e2>
 8000874:	000a      	movs	r2, r1
 8000876:	e7aa      	b.n	80007ce <__aeabi_ddiv+0x55e>
 8000878:	2100      	movs	r1, #0
 800087a:	e7e5      	b.n	8000848 <__aeabi_ddiv+0x5d8>
 800087c:	0759      	lsls	r1, r3, #29
 800087e:	025b      	lsls	r3, r3, #9
 8000880:	0b1c      	lsrs	r4, r3, #12
 8000882:	e7e1      	b.n	8000848 <__aeabi_ddiv+0x5d8>
 8000884:	000003ff 	.word	0x000003ff
 8000888:	feffffff 	.word	0xfeffffff
 800088c:	000007fe 	.word	0x000007fe
 8000890:	000007ff 	.word	0x000007ff
 8000894:	0000041e 	.word	0x0000041e
 8000898:	fffffc02 	.word	0xfffffc02
 800089c:	0000043e 	.word	0x0000043e

080008a0 <__aeabi_dmul>:
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a2:	4657      	mov	r7, sl
 80008a4:	464e      	mov	r6, r9
 80008a6:	46de      	mov	lr, fp
 80008a8:	4645      	mov	r5, r8
 80008aa:	b5e0      	push	{r5, r6, r7, lr}
 80008ac:	001f      	movs	r7, r3
 80008ae:	030b      	lsls	r3, r1, #12
 80008b0:	0b1b      	lsrs	r3, r3, #12
 80008b2:	0016      	movs	r6, r2
 80008b4:	469a      	mov	sl, r3
 80008b6:	0fca      	lsrs	r2, r1, #31
 80008b8:	004b      	lsls	r3, r1, #1
 80008ba:	0004      	movs	r4, r0
 80008bc:	4691      	mov	r9, r2
 80008be:	b085      	sub	sp, #20
 80008c0:	0d5b      	lsrs	r3, r3, #21
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dmul+0x26>
 80008c4:	e1cf      	b.n	8000c66 <__aeabi_dmul+0x3c6>
 80008c6:	4acd      	ldr	r2, [pc, #820]	@ (8000bfc <__aeabi_dmul+0x35c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d055      	beq.n	8000978 <__aeabi_dmul+0xd8>
 80008cc:	4651      	mov	r1, sl
 80008ce:	0f42      	lsrs	r2, r0, #29
 80008d0:	00c9      	lsls	r1, r1, #3
 80008d2:	430a      	orrs	r2, r1
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	0409      	lsls	r1, r1, #16
 80008d8:	4311      	orrs	r1, r2
 80008da:	00c2      	lsls	r2, r0, #3
 80008dc:	4690      	mov	r8, r2
 80008de:	4ac8      	ldr	r2, [pc, #800]	@ (8000c00 <__aeabi_dmul+0x360>)
 80008e0:	468a      	mov	sl, r1
 80008e2:	4693      	mov	fp, r2
 80008e4:	449b      	add	fp, r3
 80008e6:	2300      	movs	r3, #0
 80008e8:	2500      	movs	r5, #0
 80008ea:	9302      	str	r3, [sp, #8]
 80008ec:	033c      	lsls	r4, r7, #12
 80008ee:	007b      	lsls	r3, r7, #1
 80008f0:	0ffa      	lsrs	r2, r7, #31
 80008f2:	9601      	str	r6, [sp, #4]
 80008f4:	0b24      	lsrs	r4, r4, #12
 80008f6:	0d5b      	lsrs	r3, r3, #21
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	d100      	bne.n	80008fe <__aeabi_dmul+0x5e>
 80008fc:	e188      	b.n	8000c10 <__aeabi_dmul+0x370>
 80008fe:	4abf      	ldr	r2, [pc, #764]	@ (8000bfc <__aeabi_dmul+0x35c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d100      	bne.n	8000906 <__aeabi_dmul+0x66>
 8000904:	e092      	b.n	8000a2c <__aeabi_dmul+0x18c>
 8000906:	4abe      	ldr	r2, [pc, #760]	@ (8000c00 <__aeabi_dmul+0x360>)
 8000908:	4694      	mov	ip, r2
 800090a:	4463      	add	r3, ip
 800090c:	449b      	add	fp, r3
 800090e:	2d0a      	cmp	r5, #10
 8000910:	dc42      	bgt.n	8000998 <__aeabi_dmul+0xf8>
 8000912:	00e4      	lsls	r4, r4, #3
 8000914:	0f73      	lsrs	r3, r6, #29
 8000916:	4323      	orrs	r3, r4
 8000918:	2480      	movs	r4, #128	@ 0x80
 800091a:	4649      	mov	r1, r9
 800091c:	0424      	lsls	r4, r4, #16
 800091e:	431c      	orrs	r4, r3
 8000920:	00f3      	lsls	r3, r6, #3
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	9b00      	ldr	r3, [sp, #0]
 8000926:	2000      	movs	r0, #0
 8000928:	4059      	eors	r1, r3
 800092a:	b2cb      	uxtb	r3, r1
 800092c:	9303      	str	r3, [sp, #12]
 800092e:	2d02      	cmp	r5, #2
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dmul+0x94>
 8000932:	e094      	b.n	8000a5e <__aeabi_dmul+0x1be>
 8000934:	2301      	movs	r3, #1
 8000936:	40ab      	lsls	r3, r5
 8000938:	001d      	movs	r5, r3
 800093a:	23a6      	movs	r3, #166	@ 0xa6
 800093c:	002a      	movs	r2, r5
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	401a      	ands	r2, r3
 8000942:	421d      	tst	r5, r3
 8000944:	d000      	beq.n	8000948 <__aeabi_dmul+0xa8>
 8000946:	e229      	b.n	8000d9c <__aeabi_dmul+0x4fc>
 8000948:	2390      	movs	r3, #144	@ 0x90
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	421d      	tst	r5, r3
 800094e:	d100      	bne.n	8000952 <__aeabi_dmul+0xb2>
 8000950:	e24d      	b.n	8000dee <__aeabi_dmul+0x54e>
 8000952:	2300      	movs	r3, #0
 8000954:	2480      	movs	r4, #128	@ 0x80
 8000956:	4699      	mov	r9, r3
 8000958:	0324      	lsls	r4, r4, #12
 800095a:	4ba8      	ldr	r3, [pc, #672]	@ (8000bfc <__aeabi_dmul+0x35c>)
 800095c:	0010      	movs	r0, r2
 800095e:	464a      	mov	r2, r9
 8000960:	051b      	lsls	r3, r3, #20
 8000962:	4323      	orrs	r3, r4
 8000964:	07d2      	lsls	r2, r2, #31
 8000966:	4313      	orrs	r3, r2
 8000968:	0019      	movs	r1, r3
 800096a:	b005      	add	sp, #20
 800096c:	bcf0      	pop	{r4, r5, r6, r7}
 800096e:	46bb      	mov	fp, r7
 8000970:	46b2      	mov	sl, r6
 8000972:	46a9      	mov	r9, r5
 8000974:	46a0      	mov	r8, r4
 8000976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000978:	4652      	mov	r2, sl
 800097a:	4302      	orrs	r2, r0
 800097c:	4690      	mov	r8, r2
 800097e:	d000      	beq.n	8000982 <__aeabi_dmul+0xe2>
 8000980:	e1ac      	b.n	8000cdc <__aeabi_dmul+0x43c>
 8000982:	469b      	mov	fp, r3
 8000984:	2302      	movs	r3, #2
 8000986:	4692      	mov	sl, r2
 8000988:	2508      	movs	r5, #8
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	e7ae      	b.n	80008ec <__aeabi_dmul+0x4c>
 800098e:	9b00      	ldr	r3, [sp, #0]
 8000990:	46a2      	mov	sl, r4
 8000992:	4699      	mov	r9, r3
 8000994:	9b01      	ldr	r3, [sp, #4]
 8000996:	4698      	mov	r8, r3
 8000998:	9b02      	ldr	r3, [sp, #8]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d100      	bne.n	80009a0 <__aeabi_dmul+0x100>
 800099e:	e1ca      	b.n	8000d36 <__aeabi_dmul+0x496>
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dmul+0x106>
 80009a4:	e192      	b.n	8000ccc <__aeabi_dmul+0x42c>
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d110      	bne.n	80009cc <__aeabi_dmul+0x12c>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2400      	movs	r4, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	e7d4      	b.n	800095c <__aeabi_dmul+0xbc>
 80009b2:	2201      	movs	r2, #1
 80009b4:	087b      	lsrs	r3, r7, #1
 80009b6:	403a      	ands	r2, r7
 80009b8:	4313      	orrs	r3, r2
 80009ba:	4652      	mov	r2, sl
 80009bc:	07d2      	lsls	r2, r2, #31
 80009be:	4313      	orrs	r3, r2
 80009c0:	4698      	mov	r8, r3
 80009c2:	4653      	mov	r3, sl
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	469a      	mov	sl, r3
 80009c8:	9b03      	ldr	r3, [sp, #12]
 80009ca:	4699      	mov	r9, r3
 80009cc:	465b      	mov	r3, fp
 80009ce:	1c58      	adds	r0, r3, #1
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	445b      	add	r3, fp
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dc00      	bgt.n	80009dc <__aeabi_dmul+0x13c>
 80009da:	e1b1      	b.n	8000d40 <__aeabi_dmul+0x4a0>
 80009dc:	4642      	mov	r2, r8
 80009de:	0752      	lsls	r2, r2, #29
 80009e0:	d00b      	beq.n	80009fa <__aeabi_dmul+0x15a>
 80009e2:	220f      	movs	r2, #15
 80009e4:	4641      	mov	r1, r8
 80009e6:	400a      	ands	r2, r1
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d006      	beq.n	80009fa <__aeabi_dmul+0x15a>
 80009ec:	4642      	mov	r2, r8
 80009ee:	1d11      	adds	r1, r2, #4
 80009f0:	4541      	cmp	r1, r8
 80009f2:	4192      	sbcs	r2, r2
 80009f4:	4688      	mov	r8, r1
 80009f6:	4252      	negs	r2, r2
 80009f8:	4492      	add	sl, r2
 80009fa:	4652      	mov	r2, sl
 80009fc:	01d2      	lsls	r2, r2, #7
 80009fe:	d506      	bpl.n	8000a0e <__aeabi_dmul+0x16e>
 8000a00:	4652      	mov	r2, sl
 8000a02:	4b80      	ldr	r3, [pc, #512]	@ (8000c04 <__aeabi_dmul+0x364>)
 8000a04:	401a      	ands	r2, r3
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	4692      	mov	sl, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	18c3      	adds	r3, r0, r3
 8000a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8000c08 <__aeabi_dmul+0x368>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dmul+0x176>
 8000a14:	e18f      	b.n	8000d36 <__aeabi_dmul+0x496>
 8000a16:	4642      	mov	r2, r8
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4652      	mov	r2, sl
 8000a1c:	0752      	lsls	r2, r2, #29
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	4651      	mov	r1, sl
 8000a22:	055b      	lsls	r3, r3, #21
 8000a24:	024c      	lsls	r4, r1, #9
 8000a26:	0b24      	lsrs	r4, r4, #12
 8000a28:	0d5b      	lsrs	r3, r3, #21
 8000a2a:	e797      	b.n	800095c <__aeabi_dmul+0xbc>
 8000a2c:	4b73      	ldr	r3, [pc, #460]	@ (8000bfc <__aeabi_dmul+0x35c>)
 8000a2e:	4326      	orrs	r6, r4
 8000a30:	469c      	mov	ip, r3
 8000a32:	44e3      	add	fp, ip
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dmul+0x19a>
 8000a38:	e16f      	b.n	8000d1a <__aeabi_dmul+0x47a>
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	431d      	orrs	r5, r3
 8000a40:	9b00      	ldr	r3, [sp, #0]
 8000a42:	4059      	eors	r1, r3
 8000a44:	b2cb      	uxtb	r3, r1
 8000a46:	9303      	str	r3, [sp, #12]
 8000a48:	2d0a      	cmp	r5, #10
 8000a4a:	dd00      	ble.n	8000a4e <__aeabi_dmul+0x1ae>
 8000a4c:	e133      	b.n	8000cb6 <__aeabi_dmul+0x416>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	40ab      	lsls	r3, r5
 8000a52:	001d      	movs	r5, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	9302      	str	r3, [sp, #8]
 8000a58:	2288      	movs	r2, #136	@ 0x88
 8000a5a:	422a      	tst	r2, r5
 8000a5c:	d197      	bne.n	800098e <__aeabi_dmul+0xee>
 8000a5e:	4642      	mov	r2, r8
 8000a60:	4643      	mov	r3, r8
 8000a62:	0412      	lsls	r2, r2, #16
 8000a64:	0c12      	lsrs	r2, r2, #16
 8000a66:	0016      	movs	r6, r2
 8000a68:	9801      	ldr	r0, [sp, #4]
 8000a6a:	0c1d      	lsrs	r5, r3, #16
 8000a6c:	0c03      	lsrs	r3, r0, #16
 8000a6e:	0400      	lsls	r0, r0, #16
 8000a70:	0c00      	lsrs	r0, r0, #16
 8000a72:	4346      	muls	r6, r0
 8000a74:	46b4      	mov	ip, r6
 8000a76:	001e      	movs	r6, r3
 8000a78:	436e      	muls	r6, r5
 8000a7a:	9600      	str	r6, [sp, #0]
 8000a7c:	0016      	movs	r6, r2
 8000a7e:	0007      	movs	r7, r0
 8000a80:	435e      	muls	r6, r3
 8000a82:	4661      	mov	r1, ip
 8000a84:	46b0      	mov	r8, r6
 8000a86:	436f      	muls	r7, r5
 8000a88:	0c0e      	lsrs	r6, r1, #16
 8000a8a:	44b8      	add	r8, r7
 8000a8c:	4446      	add	r6, r8
 8000a8e:	42b7      	cmp	r7, r6
 8000a90:	d905      	bls.n	8000a9e <__aeabi_dmul+0x1fe>
 8000a92:	2180      	movs	r1, #128	@ 0x80
 8000a94:	0249      	lsls	r1, r1, #9
 8000a96:	4688      	mov	r8, r1
 8000a98:	9f00      	ldr	r7, [sp, #0]
 8000a9a:	4447      	add	r7, r8
 8000a9c:	9700      	str	r7, [sp, #0]
 8000a9e:	4661      	mov	r1, ip
 8000aa0:	0409      	lsls	r1, r1, #16
 8000aa2:	0c09      	lsrs	r1, r1, #16
 8000aa4:	0c37      	lsrs	r7, r6, #16
 8000aa6:	0436      	lsls	r6, r6, #16
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	0031      	movs	r1, r6
 8000aac:	4461      	add	r1, ip
 8000aae:	9101      	str	r1, [sp, #4]
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0c26      	lsrs	r6, r4, #16
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	0c24      	lsrs	r4, r4, #16
 8000ab8:	4361      	muls	r1, r4
 8000aba:	468c      	mov	ip, r1
 8000abc:	0021      	movs	r1, r4
 8000abe:	4369      	muls	r1, r5
 8000ac0:	4689      	mov	r9, r1
 8000ac2:	4661      	mov	r1, ip
 8000ac4:	0c09      	lsrs	r1, r1, #16
 8000ac6:	4688      	mov	r8, r1
 8000ac8:	4372      	muls	r2, r6
 8000aca:	444a      	add	r2, r9
 8000acc:	4442      	add	r2, r8
 8000ace:	4375      	muls	r5, r6
 8000ad0:	4591      	cmp	r9, r2
 8000ad2:	d903      	bls.n	8000adc <__aeabi_dmul+0x23c>
 8000ad4:	2180      	movs	r1, #128	@ 0x80
 8000ad6:	0249      	lsls	r1, r1, #9
 8000ad8:	4688      	mov	r8, r1
 8000ada:	4445      	add	r5, r8
 8000adc:	0c11      	lsrs	r1, r2, #16
 8000ade:	4688      	mov	r8, r1
 8000ae0:	4661      	mov	r1, ip
 8000ae2:	0409      	lsls	r1, r1, #16
 8000ae4:	0c09      	lsrs	r1, r1, #16
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	0412      	lsls	r2, r2, #16
 8000aea:	4462      	add	r2, ip
 8000aec:	18b9      	adds	r1, r7, r2
 8000aee:	9102      	str	r1, [sp, #8]
 8000af0:	4651      	mov	r1, sl
 8000af2:	0c09      	lsrs	r1, r1, #16
 8000af4:	468c      	mov	ip, r1
 8000af6:	4651      	mov	r1, sl
 8000af8:	040f      	lsls	r7, r1, #16
 8000afa:	0c3f      	lsrs	r7, r7, #16
 8000afc:	0039      	movs	r1, r7
 8000afe:	4341      	muls	r1, r0
 8000b00:	4445      	add	r5, r8
 8000b02:	4688      	mov	r8, r1
 8000b04:	4661      	mov	r1, ip
 8000b06:	4341      	muls	r1, r0
 8000b08:	468a      	mov	sl, r1
 8000b0a:	4641      	mov	r1, r8
 8000b0c:	4660      	mov	r0, ip
 8000b0e:	0c09      	lsrs	r1, r1, #16
 8000b10:	4689      	mov	r9, r1
 8000b12:	4358      	muls	r0, r3
 8000b14:	437b      	muls	r3, r7
 8000b16:	4453      	add	r3, sl
 8000b18:	444b      	add	r3, r9
 8000b1a:	459a      	cmp	sl, r3
 8000b1c:	d903      	bls.n	8000b26 <__aeabi_dmul+0x286>
 8000b1e:	2180      	movs	r1, #128	@ 0x80
 8000b20:	0249      	lsls	r1, r1, #9
 8000b22:	4689      	mov	r9, r1
 8000b24:	4448      	add	r0, r9
 8000b26:	0c19      	lsrs	r1, r3, #16
 8000b28:	4689      	mov	r9, r1
 8000b2a:	4641      	mov	r1, r8
 8000b2c:	0409      	lsls	r1, r1, #16
 8000b2e:	0c09      	lsrs	r1, r1, #16
 8000b30:	4688      	mov	r8, r1
 8000b32:	0039      	movs	r1, r7
 8000b34:	4361      	muls	r1, r4
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	4443      	add	r3, r8
 8000b3a:	4688      	mov	r8, r1
 8000b3c:	4661      	mov	r1, ip
 8000b3e:	434c      	muls	r4, r1
 8000b40:	4371      	muls	r1, r6
 8000b42:	468c      	mov	ip, r1
 8000b44:	4641      	mov	r1, r8
 8000b46:	4377      	muls	r7, r6
 8000b48:	0c0e      	lsrs	r6, r1, #16
 8000b4a:	193f      	adds	r7, r7, r4
 8000b4c:	19f6      	adds	r6, r6, r7
 8000b4e:	4448      	add	r0, r9
 8000b50:	42b4      	cmp	r4, r6
 8000b52:	d903      	bls.n	8000b5c <__aeabi_dmul+0x2bc>
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	0249      	lsls	r1, r1, #9
 8000b58:	4689      	mov	r9, r1
 8000b5a:	44cc      	add	ip, r9
 8000b5c:	9902      	ldr	r1, [sp, #8]
 8000b5e:	9f00      	ldr	r7, [sp, #0]
 8000b60:	4689      	mov	r9, r1
 8000b62:	0431      	lsls	r1, r6, #16
 8000b64:	444f      	add	r7, r9
 8000b66:	4689      	mov	r9, r1
 8000b68:	4641      	mov	r1, r8
 8000b6a:	4297      	cmp	r7, r2
 8000b6c:	4192      	sbcs	r2, r2
 8000b6e:	040c      	lsls	r4, r1, #16
 8000b70:	0c24      	lsrs	r4, r4, #16
 8000b72:	444c      	add	r4, r9
 8000b74:	18ff      	adds	r7, r7, r3
 8000b76:	4252      	negs	r2, r2
 8000b78:	1964      	adds	r4, r4, r5
 8000b7a:	18a1      	adds	r1, r4, r2
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	419b      	sbcs	r3, r3
 8000b80:	4688      	mov	r8, r1
 8000b82:	4682      	mov	sl, r0
 8000b84:	425b      	negs	r3, r3
 8000b86:	4699      	mov	r9, r3
 8000b88:	4590      	cmp	r8, r2
 8000b8a:	4192      	sbcs	r2, r2
 8000b8c:	42ac      	cmp	r4, r5
 8000b8e:	41a4      	sbcs	r4, r4
 8000b90:	44c2      	add	sl, r8
 8000b92:	44d1      	add	r9, sl
 8000b94:	4252      	negs	r2, r2
 8000b96:	4264      	negs	r4, r4
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	4599      	cmp	r9, r3
 8000b9c:	419b      	sbcs	r3, r3
 8000b9e:	4582      	cmp	sl, r0
 8000ba0:	4192      	sbcs	r2, r2
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	464a      	mov	r2, r9
 8000baa:	0c36      	lsrs	r6, r6, #16
 8000bac:	19a4      	adds	r4, r4, r6
 8000bae:	18e3      	adds	r3, r4, r3
 8000bb0:	4463      	add	r3, ip
 8000bb2:	025b      	lsls	r3, r3, #9
 8000bb4:	0dd2      	lsrs	r2, r2, #23
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	9901      	ldr	r1, [sp, #4]
 8000bba:	4692      	mov	sl, r2
 8000bbc:	027a      	lsls	r2, r7, #9
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	1e50      	subs	r0, r2, #1
 8000bc2:	4182      	sbcs	r2, r0
 8000bc4:	0dff      	lsrs	r7, r7, #23
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	464a      	mov	r2, r9
 8000bca:	0252      	lsls	r2, r2, #9
 8000bcc:	4317      	orrs	r7, r2
 8000bce:	46b8      	mov	r8, r7
 8000bd0:	01db      	lsls	r3, r3, #7
 8000bd2:	d500      	bpl.n	8000bd6 <__aeabi_dmul+0x336>
 8000bd4:	e6ed      	b.n	80009b2 <__aeabi_dmul+0x112>
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <__aeabi_dmul+0x36c>)
 8000bd8:	9a03      	ldr	r2, [sp, #12]
 8000bda:	445b      	add	r3, fp
 8000bdc:	4691      	mov	r9, r2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dc00      	bgt.n	8000be4 <__aeabi_dmul+0x344>
 8000be2:	e0ac      	b.n	8000d3e <__aeabi_dmul+0x49e>
 8000be4:	003a      	movs	r2, r7
 8000be6:	0752      	lsls	r2, r2, #29
 8000be8:	d100      	bne.n	8000bec <__aeabi_dmul+0x34c>
 8000bea:	e710      	b.n	8000a0e <__aeabi_dmul+0x16e>
 8000bec:	220f      	movs	r2, #15
 8000bee:	4658      	mov	r0, fp
 8000bf0:	403a      	ands	r2, r7
 8000bf2:	2a04      	cmp	r2, #4
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_dmul+0x358>
 8000bf6:	e6f9      	b.n	80009ec <__aeabi_dmul+0x14c>
 8000bf8:	e709      	b.n	8000a0e <__aeabi_dmul+0x16e>
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	000007ff 	.word	0x000007ff
 8000c00:	fffffc01 	.word	0xfffffc01
 8000c04:	feffffff 	.word	0xfeffffff
 8000c08:	000007fe 	.word	0x000007fe
 8000c0c:	000003ff 	.word	0x000003ff
 8000c10:	0022      	movs	r2, r4
 8000c12:	4332      	orrs	r2, r6
 8000c14:	d06f      	beq.n	8000cf6 <__aeabi_dmul+0x456>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dmul+0x37c>
 8000c1a:	e0c2      	b.n	8000da2 <__aeabi_dmul+0x502>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f000 fa11 	bl	8001044 <__clzsi2>
 8000c22:	0002      	movs	r2, r0
 8000c24:	0003      	movs	r3, r0
 8000c26:	3a0b      	subs	r2, #11
 8000c28:	201d      	movs	r0, #29
 8000c2a:	1a82      	subs	r2, r0, r2
 8000c2c:	0030      	movs	r0, r6
 8000c2e:	0019      	movs	r1, r3
 8000c30:	40d0      	lsrs	r0, r2
 8000c32:	3908      	subs	r1, #8
 8000c34:	408c      	lsls	r4, r1
 8000c36:	0002      	movs	r2, r0
 8000c38:	4322      	orrs	r2, r4
 8000c3a:	0034      	movs	r4, r6
 8000c3c:	408c      	lsls	r4, r1
 8000c3e:	4659      	mov	r1, fp
 8000c40:	1acb      	subs	r3, r1, r3
 8000c42:	4986      	ldr	r1, [pc, #536]	@ (8000e5c <__aeabi_dmul+0x5bc>)
 8000c44:	468b      	mov	fp, r1
 8000c46:	449b      	add	fp, r3
 8000c48:	2d0a      	cmp	r5, #10
 8000c4a:	dd00      	ble.n	8000c4e <__aeabi_dmul+0x3ae>
 8000c4c:	e6a4      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000c4e:	4649      	mov	r1, r9
 8000c50:	9b00      	ldr	r3, [sp, #0]
 8000c52:	9401      	str	r4, [sp, #4]
 8000c54:	4059      	eors	r1, r3
 8000c56:	b2cb      	uxtb	r3, r1
 8000c58:	0014      	movs	r4, r2
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	9303      	str	r3, [sp, #12]
 8000c5e:	2d02      	cmp	r5, #2
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_dmul+0x3c4>
 8000c62:	e667      	b.n	8000934 <__aeabi_dmul+0x94>
 8000c64:	e6fb      	b.n	8000a5e <__aeabi_dmul+0x1be>
 8000c66:	4653      	mov	r3, sl
 8000c68:	4303      	orrs	r3, r0
 8000c6a:	4698      	mov	r8, r3
 8000c6c:	d03c      	beq.n	8000ce8 <__aeabi_dmul+0x448>
 8000c6e:	4653      	mov	r3, sl
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dmul+0x3d6>
 8000c74:	e0a3      	b.n	8000dbe <__aeabi_dmul+0x51e>
 8000c76:	4650      	mov	r0, sl
 8000c78:	f000 f9e4 	bl	8001044 <__clzsi2>
 8000c7c:	230b      	movs	r3, #11
 8000c7e:	425b      	negs	r3, r3
 8000c80:	469c      	mov	ip, r3
 8000c82:	0002      	movs	r2, r0
 8000c84:	4484      	add	ip, r0
 8000c86:	0011      	movs	r1, r2
 8000c88:	4650      	mov	r0, sl
 8000c8a:	3908      	subs	r1, #8
 8000c8c:	4088      	lsls	r0, r1
 8000c8e:	231d      	movs	r3, #29
 8000c90:	4680      	mov	r8, r0
 8000c92:	4660      	mov	r0, ip
 8000c94:	1a1b      	subs	r3, r3, r0
 8000c96:	0020      	movs	r0, r4
 8000c98:	40d8      	lsrs	r0, r3
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	4303      	orrs	r3, r0
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	0023      	movs	r3, r4
 8000ca4:	408b      	lsls	r3, r1
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8000e5c <__aeabi_dmul+0x5bc>)
 8000caa:	2500      	movs	r5, #0
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	469b      	mov	fp, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	e61a      	b.n	80008ec <__aeabi_dmul+0x4c>
 8000cb6:	2d0f      	cmp	r5, #15
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_dmul+0x41c>
 8000cba:	e0c9      	b.n	8000e50 <__aeabi_dmul+0x5b0>
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	4652      	mov	r2, sl
 8000cc0:	031b      	lsls	r3, r3, #12
 8000cc2:	421a      	tst	r2, r3
 8000cc4:	d002      	beq.n	8000ccc <__aeabi_dmul+0x42c>
 8000cc6:	421c      	tst	r4, r3
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dmul+0x42c>
 8000cca:	e092      	b.n	8000df2 <__aeabi_dmul+0x552>
 8000ccc:	2480      	movs	r4, #128	@ 0x80
 8000cce:	4653      	mov	r3, sl
 8000cd0:	0324      	lsls	r4, r4, #12
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	0324      	lsls	r4, r4, #12
 8000cd6:	4642      	mov	r2, r8
 8000cd8:	0b24      	lsrs	r4, r4, #12
 8000cda:	e63e      	b.n	800095a <__aeabi_dmul+0xba>
 8000cdc:	469b      	mov	fp, r3
 8000cde:	2303      	movs	r3, #3
 8000ce0:	4680      	mov	r8, r0
 8000ce2:	250c      	movs	r5, #12
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	e601      	b.n	80008ec <__aeabi_dmul+0x4c>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	469a      	mov	sl, r3
 8000cec:	469b      	mov	fp, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	2504      	movs	r5, #4
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	e5fa      	b.n	80008ec <__aeabi_dmul+0x4c>
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	430d      	orrs	r5, r1
 8000cfa:	2d0a      	cmp	r5, #10
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_dmul+0x460>
 8000cfe:	e64b      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000d00:	4649      	mov	r1, r9
 8000d02:	9800      	ldr	r0, [sp, #0]
 8000d04:	4041      	eors	r1, r0
 8000d06:	b2c9      	uxtb	r1, r1
 8000d08:	9103      	str	r1, [sp, #12]
 8000d0a:	2d02      	cmp	r5, #2
 8000d0c:	dc00      	bgt.n	8000d10 <__aeabi_dmul+0x470>
 8000d0e:	e096      	b.n	8000e3e <__aeabi_dmul+0x59e>
 8000d10:	2300      	movs	r3, #0
 8000d12:	2400      	movs	r4, #0
 8000d14:	2001      	movs	r0, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	e60c      	b.n	8000934 <__aeabi_dmul+0x94>
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	9a00      	ldr	r2, [sp, #0]
 8000d20:	432b      	orrs	r3, r5
 8000d22:	4051      	eors	r1, r2
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	9203      	str	r2, [sp, #12]
 8000d28:	2b0a      	cmp	r3, #10
 8000d2a:	dd00      	ble.n	8000d2e <__aeabi_dmul+0x48e>
 8000d2c:	e634      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d157      	bne.n	8000de2 <__aeabi_dmul+0x542>
 8000d32:	9b03      	ldr	r3, [sp, #12]
 8000d34:	4699      	mov	r9, r3
 8000d36:	2400      	movs	r4, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4b49      	ldr	r3, [pc, #292]	@ (8000e60 <__aeabi_dmul+0x5c0>)
 8000d3c:	e60e      	b.n	800095c <__aeabi_dmul+0xbc>
 8000d3e:	4658      	mov	r0, fp
 8000d40:	2101      	movs	r1, #1
 8000d42:	1ac9      	subs	r1, r1, r3
 8000d44:	2938      	cmp	r1, #56	@ 0x38
 8000d46:	dd00      	ble.n	8000d4a <__aeabi_dmul+0x4aa>
 8000d48:	e62f      	b.n	80009aa <__aeabi_dmul+0x10a>
 8000d4a:	291f      	cmp	r1, #31
 8000d4c:	dd56      	ble.n	8000dfc <__aeabi_dmul+0x55c>
 8000d4e:	221f      	movs	r2, #31
 8000d50:	4654      	mov	r4, sl
 8000d52:	4252      	negs	r2, r2
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	40dc      	lsrs	r4, r3
 8000d58:	2920      	cmp	r1, #32
 8000d5a:	d007      	beq.n	8000d6c <__aeabi_dmul+0x4cc>
 8000d5c:	4b41      	ldr	r3, [pc, #260]	@ (8000e64 <__aeabi_dmul+0x5c4>)
 8000d5e:	4642      	mov	r2, r8
 8000d60:	469c      	mov	ip, r3
 8000d62:	4653      	mov	r3, sl
 8000d64:	4460      	add	r0, ip
 8000d66:	4083      	lsls	r3, r0
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	4690      	mov	r8, r2
 8000d6c:	4642      	mov	r2, r8
 8000d6e:	2107      	movs	r1, #7
 8000d70:	1e53      	subs	r3, r2, #1
 8000d72:	419a      	sbcs	r2, r3
 8000d74:	000b      	movs	r3, r1
 8000d76:	4322      	orrs	r2, r4
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2400      	movs	r4, #0
 8000d7c:	4211      	tst	r1, r2
 8000d7e:	d009      	beq.n	8000d94 <__aeabi_dmul+0x4f4>
 8000d80:	230f      	movs	r3, #15
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d05d      	beq.n	8000e44 <__aeabi_dmul+0x5a4>
 8000d88:	1d11      	adds	r1, r2, #4
 8000d8a:	4291      	cmp	r1, r2
 8000d8c:	419b      	sbcs	r3, r3
 8000d8e:	000a      	movs	r2, r1
 8000d90:	425b      	negs	r3, r3
 8000d92:	075b      	lsls	r3, r3, #29
 8000d94:	08d2      	lsrs	r2, r2, #3
 8000d96:	431a      	orrs	r2, r3
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e5df      	b.n	800095c <__aeabi_dmul+0xbc>
 8000d9c:	9b03      	ldr	r3, [sp, #12]
 8000d9e:	4699      	mov	r9, r3
 8000da0:	e5fa      	b.n	8000998 <__aeabi_dmul+0xf8>
 8000da2:	9801      	ldr	r0, [sp, #4]
 8000da4:	f000 f94e 	bl	8001044 <__clzsi2>
 8000da8:	0002      	movs	r2, r0
 8000daa:	0003      	movs	r3, r0
 8000dac:	3215      	adds	r2, #21
 8000dae:	3320      	adds	r3, #32
 8000db0:	2a1c      	cmp	r2, #28
 8000db2:	dc00      	bgt.n	8000db6 <__aeabi_dmul+0x516>
 8000db4:	e738      	b.n	8000c28 <__aeabi_dmul+0x388>
 8000db6:	9a01      	ldr	r2, [sp, #4]
 8000db8:	3808      	subs	r0, #8
 8000dba:	4082      	lsls	r2, r0
 8000dbc:	e73f      	b.n	8000c3e <__aeabi_dmul+0x39e>
 8000dbe:	f000 f941 	bl	8001044 <__clzsi2>
 8000dc2:	2315      	movs	r3, #21
 8000dc4:	469c      	mov	ip, r3
 8000dc6:	4484      	add	ip, r0
 8000dc8:	0002      	movs	r2, r0
 8000dca:	4663      	mov	r3, ip
 8000dcc:	3220      	adds	r2, #32
 8000dce:	2b1c      	cmp	r3, #28
 8000dd0:	dc00      	bgt.n	8000dd4 <__aeabi_dmul+0x534>
 8000dd2:	e758      	b.n	8000c86 <__aeabi_dmul+0x3e6>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	0023      	movs	r3, r4
 8000dda:	3808      	subs	r0, #8
 8000ddc:	4083      	lsls	r3, r0
 8000dde:	469a      	mov	sl, r3
 8000de0:	e762      	b.n	8000ca8 <__aeabi_dmul+0x408>
 8000de2:	001d      	movs	r5, r3
 8000de4:	2300      	movs	r3, #0
 8000de6:	2400      	movs	r4, #0
 8000de8:	2002      	movs	r0, #2
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	e5a2      	b.n	8000934 <__aeabi_dmul+0x94>
 8000dee:	9002      	str	r0, [sp, #8]
 8000df0:	e632      	b.n	8000a58 <__aeabi_dmul+0x1b8>
 8000df2:	431c      	orrs	r4, r3
 8000df4:	9b00      	ldr	r3, [sp, #0]
 8000df6:	9a01      	ldr	r2, [sp, #4]
 8000df8:	4699      	mov	r9, r3
 8000dfa:	e5ae      	b.n	800095a <__aeabi_dmul+0xba>
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <__aeabi_dmul+0x5c8>)
 8000dfe:	4652      	mov	r2, sl
 8000e00:	18c3      	adds	r3, r0, r3
 8000e02:	4640      	mov	r0, r8
 8000e04:	409a      	lsls	r2, r3
 8000e06:	40c8      	lsrs	r0, r1
 8000e08:	4302      	orrs	r2, r0
 8000e0a:	4640      	mov	r0, r8
 8000e0c:	4098      	lsls	r0, r3
 8000e0e:	0003      	movs	r3, r0
 8000e10:	1e58      	subs	r0, r3, #1
 8000e12:	4183      	sbcs	r3, r0
 8000e14:	4654      	mov	r4, sl
 8000e16:	431a      	orrs	r2, r3
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	0753      	lsls	r3, r2, #29
 8000e1c:	d009      	beq.n	8000e32 <__aeabi_dmul+0x592>
 8000e1e:	230f      	movs	r3, #15
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d005      	beq.n	8000e32 <__aeabi_dmul+0x592>
 8000e26:	1d13      	adds	r3, r2, #4
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	4192      	sbcs	r2, r2
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	18a4      	adds	r4, r4, r2
 8000e30:	001a      	movs	r2, r3
 8000e32:	0223      	lsls	r3, r4, #8
 8000e34:	d508      	bpl.n	8000e48 <__aeabi_dmul+0x5a8>
 8000e36:	2301      	movs	r3, #1
 8000e38:	2400      	movs	r4, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	e58e      	b.n	800095c <__aeabi_dmul+0xbc>
 8000e3e:	4689      	mov	r9, r1
 8000e40:	2400      	movs	r4, #0
 8000e42:	e58b      	b.n	800095c <__aeabi_dmul+0xbc>
 8000e44:	2300      	movs	r3, #0
 8000e46:	e7a5      	b.n	8000d94 <__aeabi_dmul+0x4f4>
 8000e48:	0763      	lsls	r3, r4, #29
 8000e4a:	0264      	lsls	r4, r4, #9
 8000e4c:	0b24      	lsrs	r4, r4, #12
 8000e4e:	e7a1      	b.n	8000d94 <__aeabi_dmul+0x4f4>
 8000e50:	9b00      	ldr	r3, [sp, #0]
 8000e52:	46a2      	mov	sl, r4
 8000e54:	4699      	mov	r9, r3
 8000e56:	9b01      	ldr	r3, [sp, #4]
 8000e58:	4698      	mov	r8, r3
 8000e5a:	e737      	b.n	8000ccc <__aeabi_dmul+0x42c>
 8000e5c:	fffffc0d 	.word	0xfffffc0d
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	0000043e 	.word	0x0000043e
 8000e68:	0000041e 	.word	0x0000041e

08000e6c <__aeabi_d2iz>:
 8000e6c:	000b      	movs	r3, r1
 8000e6e:	0002      	movs	r2, r0
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	4d16      	ldr	r5, [pc, #88]	@ (8000ecc <__aeabi_d2iz+0x60>)
 8000e74:	030c      	lsls	r4, r1, #12
 8000e76:	b082      	sub	sp, #8
 8000e78:	0049      	lsls	r1, r1, #1
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	9200      	str	r2, [sp, #0]
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	0b24      	lsrs	r4, r4, #12
 8000e82:	0d49      	lsrs	r1, r1, #21
 8000e84:	0fde      	lsrs	r6, r3, #31
 8000e86:	42a9      	cmp	r1, r5
 8000e88:	dd04      	ble.n	8000e94 <__aeabi_d2iz+0x28>
 8000e8a:	4811      	ldr	r0, [pc, #68]	@ (8000ed0 <__aeabi_d2iz+0x64>)
 8000e8c:	4281      	cmp	r1, r0
 8000e8e:	dd03      	ble.n	8000e98 <__aeabi_d2iz+0x2c>
 8000e90:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <__aeabi_d2iz+0x68>)
 8000e92:	18f0      	adds	r0, r6, r3
 8000e94:	b002      	add	sp, #8
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
 8000e98:	2080      	movs	r0, #128	@ 0x80
 8000e9a:	0340      	lsls	r0, r0, #13
 8000e9c:	4320      	orrs	r0, r4
 8000e9e:	4c0e      	ldr	r4, [pc, #56]	@ (8000ed8 <__aeabi_d2iz+0x6c>)
 8000ea0:	1a64      	subs	r4, r4, r1
 8000ea2:	2c1f      	cmp	r4, #31
 8000ea4:	dd08      	ble.n	8000eb8 <__aeabi_d2iz+0x4c>
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <__aeabi_d2iz+0x70>)
 8000ea8:	1a5b      	subs	r3, r3, r1
 8000eaa:	40d8      	lsrs	r0, r3
 8000eac:	0003      	movs	r3, r0
 8000eae:	4258      	negs	r0, r3
 8000eb0:	2e00      	cmp	r6, #0
 8000eb2:	d1ef      	bne.n	8000e94 <__aeabi_d2iz+0x28>
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	e7ed      	b.n	8000e94 <__aeabi_d2iz+0x28>
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <__aeabi_d2iz+0x74>)
 8000eba:	9a00      	ldr	r2, [sp, #0]
 8000ebc:	469c      	mov	ip, r3
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	4461      	add	r1, ip
 8000ec2:	408b      	lsls	r3, r1
 8000ec4:	40e2      	lsrs	r2, r4
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	e7f1      	b.n	8000eae <__aeabi_d2iz+0x42>
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	000003fe 	.word	0x000003fe
 8000ed0:	0000041d 	.word	0x0000041d
 8000ed4:	7fffffff 	.word	0x7fffffff
 8000ed8:	00000433 	.word	0x00000433
 8000edc:	00000413 	.word	0x00000413
 8000ee0:	fffffbed 	.word	0xfffffbed

08000ee4 <__aeabi_i2d>:
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	d016      	beq.n	8000f18 <__aeabi_i2d+0x34>
 8000eea:	17c3      	asrs	r3, r0, #31
 8000eec:	18c5      	adds	r5, r0, r3
 8000eee:	405d      	eors	r5, r3
 8000ef0:	0fc4      	lsrs	r4, r0, #31
 8000ef2:	0028      	movs	r0, r5
 8000ef4:	f000 f8a6 	bl	8001044 <__clzsi2>
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <__aeabi_i2d+0x58>)
 8000efa:	1a1b      	subs	r3, r3, r0
 8000efc:	055b      	lsls	r3, r3, #21
 8000efe:	0d5b      	lsrs	r3, r3, #21
 8000f00:	280a      	cmp	r0, #10
 8000f02:	dc14      	bgt.n	8000f2e <__aeabi_i2d+0x4a>
 8000f04:	0002      	movs	r2, r0
 8000f06:	002e      	movs	r6, r5
 8000f08:	3215      	adds	r2, #21
 8000f0a:	4096      	lsls	r6, r2
 8000f0c:	220b      	movs	r2, #11
 8000f0e:	1a12      	subs	r2, r2, r0
 8000f10:	40d5      	lsrs	r5, r2
 8000f12:	032d      	lsls	r5, r5, #12
 8000f14:	0b2d      	lsrs	r5, r5, #12
 8000f16:	e003      	b.n	8000f20 <__aeabi_i2d+0x3c>
 8000f18:	2400      	movs	r4, #0
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	2600      	movs	r6, #0
 8000f20:	051b      	lsls	r3, r3, #20
 8000f22:	432b      	orrs	r3, r5
 8000f24:	07e4      	lsls	r4, r4, #31
 8000f26:	4323      	orrs	r3, r4
 8000f28:	0030      	movs	r0, r6
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	bd70      	pop	{r4, r5, r6, pc}
 8000f2e:	380b      	subs	r0, #11
 8000f30:	4085      	lsls	r5, r0
 8000f32:	032d      	lsls	r5, r5, #12
 8000f34:	2600      	movs	r6, #0
 8000f36:	0b2d      	lsrs	r5, r5, #12
 8000f38:	e7f2      	b.n	8000f20 <__aeabi_i2d+0x3c>
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	0000041e 	.word	0x0000041e

08000f40 <__aeabi_d2f>:
 8000f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f42:	004b      	lsls	r3, r1, #1
 8000f44:	030f      	lsls	r7, r1, #12
 8000f46:	0d5b      	lsrs	r3, r3, #21
 8000f48:	4c3a      	ldr	r4, [pc, #232]	@ (8001034 <__aeabi_d2f+0xf4>)
 8000f4a:	0f45      	lsrs	r5, r0, #29
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	0a7f      	lsrs	r7, r7, #9
 8000f50:	1c5e      	adds	r6, r3, #1
 8000f52:	432f      	orrs	r7, r5
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	9101      	str	r1, [sp, #4]
 8000f58:	0fca      	lsrs	r2, r1, #31
 8000f5a:	00c5      	lsls	r5, r0, #3
 8000f5c:	4226      	tst	r6, r4
 8000f5e:	d00b      	beq.n	8000f78 <__aeabi_d2f+0x38>
 8000f60:	4935      	ldr	r1, [pc, #212]	@ (8001038 <__aeabi_d2f+0xf8>)
 8000f62:	185c      	adds	r4, r3, r1
 8000f64:	2cfe      	cmp	r4, #254	@ 0xfe
 8000f66:	dd13      	ble.n	8000f90 <__aeabi_d2f+0x50>
 8000f68:	20ff      	movs	r0, #255	@ 0xff
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	05c0      	lsls	r0, r0, #23
 8000f6e:	4318      	orrs	r0, r3
 8000f70:	07d2      	lsls	r2, r2, #31
 8000f72:	4310      	orrs	r0, r2
 8000f74:	b003      	add	sp, #12
 8000f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f78:	433d      	orrs	r5, r7
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <__aeabi_d2f+0x42>
 8000f7e:	2000      	movs	r0, #0
 8000f80:	e7f4      	b.n	8000f6c <__aeabi_d2f+0x2c>
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	d0f0      	beq.n	8000f68 <__aeabi_d2f+0x28>
 8000f86:	2380      	movs	r3, #128	@ 0x80
 8000f88:	03db      	lsls	r3, r3, #15
 8000f8a:	20ff      	movs	r0, #255	@ 0xff
 8000f8c:	433b      	orrs	r3, r7
 8000f8e:	e7ed      	b.n	8000f6c <__aeabi_d2f+0x2c>
 8000f90:	2c00      	cmp	r4, #0
 8000f92:	dd0c      	ble.n	8000fae <__aeabi_d2f+0x6e>
 8000f94:	9b00      	ldr	r3, [sp, #0]
 8000f96:	00ff      	lsls	r7, r7, #3
 8000f98:	019b      	lsls	r3, r3, #6
 8000f9a:	1e58      	subs	r0, r3, #1
 8000f9c:	4183      	sbcs	r3, r0
 8000f9e:	0f69      	lsrs	r1, r5, #29
 8000fa0:	433b      	orrs	r3, r7
 8000fa2:	430b      	orrs	r3, r1
 8000fa4:	0759      	lsls	r1, r3, #29
 8000fa6:	d127      	bne.n	8000ff8 <__aeabi_d2f+0xb8>
 8000fa8:	08db      	lsrs	r3, r3, #3
 8000faa:	b2e0      	uxtb	r0, r4
 8000fac:	e7de      	b.n	8000f6c <__aeabi_d2f+0x2c>
 8000fae:	0021      	movs	r1, r4
 8000fb0:	3117      	adds	r1, #23
 8000fb2:	db31      	blt.n	8001018 <__aeabi_d2f+0xd8>
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	201e      	movs	r0, #30
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	4339      	orrs	r1, r7
 8000fbc:	1b00      	subs	r0, r0, r4
 8000fbe:	281f      	cmp	r0, #31
 8000fc0:	dd2d      	ble.n	800101e <__aeabi_d2f+0xde>
 8000fc2:	2602      	movs	r6, #2
 8000fc4:	4276      	negs	r6, r6
 8000fc6:	1b34      	subs	r4, r6, r4
 8000fc8:	000e      	movs	r6, r1
 8000fca:	40e6      	lsrs	r6, r4
 8000fcc:	0034      	movs	r4, r6
 8000fce:	2820      	cmp	r0, #32
 8000fd0:	d004      	beq.n	8000fdc <__aeabi_d2f+0x9c>
 8000fd2:	481a      	ldr	r0, [pc, #104]	@ (800103c <__aeabi_d2f+0xfc>)
 8000fd4:	4684      	mov	ip, r0
 8000fd6:	4463      	add	r3, ip
 8000fd8:	4099      	lsls	r1, r3
 8000fda:	430d      	orrs	r5, r1
 8000fdc:	002b      	movs	r3, r5
 8000fde:	1e59      	subs	r1, r3, #1
 8000fe0:	418b      	sbcs	r3, r1
 8000fe2:	4323      	orrs	r3, r4
 8000fe4:	0759      	lsls	r1, r3, #29
 8000fe6:	d003      	beq.n	8000ff0 <__aeabi_d2f+0xb0>
 8000fe8:	210f      	movs	r1, #15
 8000fea:	4019      	ands	r1, r3
 8000fec:	2904      	cmp	r1, #4
 8000fee:	d10b      	bne.n	8001008 <__aeabi_d2f+0xc8>
 8000ff0:	019b      	lsls	r3, r3, #6
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	0a5b      	lsrs	r3, r3, #9
 8000ff6:	e7b9      	b.n	8000f6c <__aeabi_d2f+0x2c>
 8000ff8:	210f      	movs	r1, #15
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	2904      	cmp	r1, #4
 8000ffe:	d104      	bne.n	800100a <__aeabi_d2f+0xca>
 8001000:	019b      	lsls	r3, r3, #6
 8001002:	0a5b      	lsrs	r3, r3, #9
 8001004:	b2e0      	uxtb	r0, r4
 8001006:	e7b1      	b.n	8000f6c <__aeabi_d2f+0x2c>
 8001008:	2400      	movs	r4, #0
 800100a:	3304      	adds	r3, #4
 800100c:	0159      	lsls	r1, r3, #5
 800100e:	d5f7      	bpl.n	8001000 <__aeabi_d2f+0xc0>
 8001010:	3401      	adds	r4, #1
 8001012:	2300      	movs	r3, #0
 8001014:	b2e0      	uxtb	r0, r4
 8001016:	e7a9      	b.n	8000f6c <__aeabi_d2f+0x2c>
 8001018:	2000      	movs	r0, #0
 800101a:	2300      	movs	r3, #0
 800101c:	e7a6      	b.n	8000f6c <__aeabi_d2f+0x2c>
 800101e:	4c08      	ldr	r4, [pc, #32]	@ (8001040 <__aeabi_d2f+0x100>)
 8001020:	191c      	adds	r4, r3, r4
 8001022:	002b      	movs	r3, r5
 8001024:	40a5      	lsls	r5, r4
 8001026:	40c3      	lsrs	r3, r0
 8001028:	40a1      	lsls	r1, r4
 800102a:	1e68      	subs	r0, r5, #1
 800102c:	4185      	sbcs	r5, r0
 800102e:	4329      	orrs	r1, r5
 8001030:	430b      	orrs	r3, r1
 8001032:	e7d7      	b.n	8000fe4 <__aeabi_d2f+0xa4>
 8001034:	000007fe 	.word	0x000007fe
 8001038:	fffffc80 	.word	0xfffffc80
 800103c:	fffffca2 	.word	0xfffffca2
 8001040:	fffffc82 	.word	0xfffffc82

08001044 <__clzsi2>:
 8001044:	211c      	movs	r1, #28
 8001046:	2301      	movs	r3, #1
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	4298      	cmp	r0, r3
 800104c:	d301      	bcc.n	8001052 <__clzsi2+0xe>
 800104e:	0c00      	lsrs	r0, r0, #16
 8001050:	3910      	subs	r1, #16
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	4298      	cmp	r0, r3
 8001056:	d301      	bcc.n	800105c <__clzsi2+0x18>
 8001058:	0a00      	lsrs	r0, r0, #8
 800105a:	3908      	subs	r1, #8
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	4298      	cmp	r0, r3
 8001060:	d301      	bcc.n	8001066 <__clzsi2+0x22>
 8001062:	0900      	lsrs	r0, r0, #4
 8001064:	3904      	subs	r1, #4
 8001066:	a202      	add	r2, pc, #8	@ (adr r2, 8001070 <__clzsi2+0x2c>)
 8001068:	5c10      	ldrb	r0, [r2, r0]
 800106a:	1840      	adds	r0, r0, r1
 800106c:	4770      	bx	lr
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	02020304 	.word	0x02020304
 8001074:	01010101 	.word	0x01010101
	...

08001080 <TickerAttach>:
#include "Ticker.h"

TickerInfo_t Ticker = {-1, 0, 0, NULL};

void TickerAttach(TickerInfo_t* Ticker, fpointer FunctionCallback, uint32_t interval)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
    if (Ticker->tickers == MAX_NUMBER_OF_TICKERS - 1) return; //Check if max number of tickers have been reached.
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b09      	cmp	r3, #9
 8001092:	d018      	beq.n	80010c6 <TickerAttach+0x46>

    Ticker->tickers++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	701a      	strb	r2, [r3, #0]
    Ticker->intervals[Ticker->tickers] = interval;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	330a      	adds	r3, #10
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	18d3      	adds	r3, r2, r3
 80010ac:	3304      	adds	r3, #4
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
    Ticker->callbackFunctions[Ticker->tickers] = FunctionCallback;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	3314      	adds	r3, #20
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	18d3      	adds	r3, r2, r3
 80010be:	3304      	adds	r3, #4
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e000      	b.n	80010c8 <TickerAttach+0x48>
    if (Ticker->tickers == MAX_NUMBER_OF_TICKERS - 1) return; //Check if max number of tickers have been reached.
 80010c6:	46c0      	nop			@ (mov r8, r8)
}
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b004      	add	sp, #16
 80010cc:	bd80      	pop	{r7, pc}

080010ce <TickerHandler>:

void TickerHandler(TickerInfo_t* Ticker)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < Ticker->tickers + 1; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e02d      	b.n	8001138 <TickerHandler+0x6a>
    {
        Ticker->counter[i]++;
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	18d3      	adds	r3, r2, r3
 80010e4:	3304      	adds	r3, #4
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	18cb      	adds	r3, r1, r3
 80010f2:	3304      	adds	r3, #4
 80010f4:	601a      	str	r2, [r3, #0]

        if (Ticker->counter[i]/ Ticker->intervals[i] >= 1)
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	3304      	adds	r3, #4
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	330a      	adds	r3, #10
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	18cb      	adds	r3, r1, r3
 800110c:	3304      	adds	r3, #4
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d30e      	bcc.n	8001132 <TickerHandler+0x64>
        {
            Ticker->counter[i] = 0;
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	18d3      	adds	r3, r2, r3
 800111c:	3304      	adds	r3, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
            Ticker->callbackFunctions[i]();
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3314      	adds	r3, #20
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	3304      	adds	r3, #4
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4798      	blx	r3
    for (int i = 0; i < Ticker->tickers + 1; i++)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3301      	adds	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	001a      	movs	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4293      	cmp	r3, r2
 8001142:	ddcb      	ble.n	80010dc <TickerHandler+0xe>
        }
    }
}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b004      	add	sp, #16
 800114c:	bd80      	pop	{r7, pc}

0800114e <setCS>:

/* -------------------------------------------------------------------------- */
/*                 Other functions added in to help this works                */
/* -------------------------------------------------------------------------- */
void setCS(ADS7028_HandleTypeDef *ADC_handle, uint8_t state)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	000a      	movs	r2, r1
 8001158:	1cfb      	adds	r3, r7, #3
 800115a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ADC_handle->CS_Port, ADC_handle->CS_Pin, state);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6858      	ldr	r0, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	8919      	ldrh	r1, [r3, #8]
 8001164:	1cfb      	adds	r3, r7, #3
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	f002 fb40 	bl	80037ee <HAL_GPIO_WritePin>
};
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b002      	add	sp, #8
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <spiSendReceiveArray>:

void spiSendReceiveArray(ADS7028_HandleTypeDef *ADC_handle, uint8_t *dataTx, uint8_t *dataRx, uint8_t numberOfBytes)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b087      	sub	sp, #28
 800117c:	af02      	add	r7, sp, #8
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	001a      	movs	r2, r3
 8001186:	1cfb      	adds	r3, r7, #3
 8001188:	701a      	strb	r2, [r3, #0]
    // Require that dataTx and dataRx are not NULL pointers
    assert(dataTx && dataRx);
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <spiSendReceiveArray+0x1e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <spiSendReceiveArray+0x2a>
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <spiSendReceiveArray+0x5c>)
 8001198:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <spiSendReceiveArray+0x60>)
 800119a:	4810      	ldr	r0, [pc, #64]	@ (80011dc <spiSendReceiveArray+0x64>)
 800119c:	2131      	movs	r1, #49	@ 0x31
 800119e:	f007 f82d 	bl	80081fc <__assert_func>
    // Set the nCS pin LOW

    setCS(ADC_handle, 0);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2100      	movs	r1, #0
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff ffd1 	bl	800114e <setCS>
    //HAL_Delay(1);

    HAL_SPI_TransmitReceive(ADC_handle->SPI_Handle, dataTx, dataRx, numberOfBytes, 100);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	1cfb      	adds	r3, r7, #3
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	2464      	movs	r4, #100	@ 0x64
 80011bc:	9400      	str	r4, [sp, #0]
 80011be:	f004 feab 	bl	8005f18 <HAL_SPI_TransmitReceive>

    //HAL_Delay(1);
    setCS(ADC_handle, 1);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2101      	movs	r1, #1
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7ff ffc1 	bl	800114e <setCS>
};
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b005      	add	sp, #20
 80011d2:	bd90      	pop	{r4, r7, pc}
 80011d4:	080091b0 	.word	0x080091b0
 80011d8:	08009260 	.word	0x08009260
 80011dc:	080091c4 	.word	0x080091c4

080011e0 <initADS7028>:
//!
//! \return None.
//
//*****************************************************************************
void initADS7028(ADS7028_HandleTypeDef *ADC_handle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    // (OPTIONAL) Provide additional delay time for power supply settling
    HAL_Delay(50);
 80011e8:	2032      	movs	r0, #50	@ 0x32
 80011ea:	f001 fda5 	bl	8002d38 <HAL_Delay>

    // Reset device
    resetDevice(ADC_handle);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f000 f80a 	bl	800120a <resetDevice>

    // Clear BOR flag
    setRegisterBits(ADC_handle, SYSTEM_STATUS_ADDRESS, SYSTEM_STATUS_BOR_MASK);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	2100      	movs	r1, #0
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 f981 	bl	8001504 <setRegisterBits>

    // (RECOMMENDED) If you plan to modify the CRC_EN or CPOL_CPHA bits,
    // do so here (and only here) to be simplify the code implementation.
    // (OPTIONAL) Read back registers and check STATUS register for faults

}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}

0800120a <resetDevice>:
//!
//! \return None
//
//*****************************************************************************
void resetDevice(ADS7028_HandleTypeDef *ADC_handle)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
    // Set the RST bit high to reset the device
    setRegisterBits(ADC_handle, GENERAL_CFG_ADDRESS, GENERAL_CFG_RST_MASK);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	2101      	movs	r1, #1
 8001218:	0018      	movs	r0, r3
 800121a:	f000 f973 	bl	8001504 <setRegisterBits>

    // Update internal register map array
    restoreRegisterDefaults();
 800121e:	f000 fa49 	bl	80016b4 <restoreRegisterDefaults>
}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <readSingleRegister>:
//!
//! \return Returns the 8-bit register read result.
//
//*****************************************************************************
uint8_t readSingleRegister(ADS7028_HandleTypeDef *ADC_handle, uint8_t address)
{
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	000a      	movs	r2, r1
 8001236:	1cfb      	adds	r3, r7, #3
 8001238:	701a      	strb	r2, [r3, #0]
    // Check that the register address is in range
    assert(address <= MAX_REGISTER_ADDRESS);
 800123a:	1cfb      	adds	r3, r7, #3
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2beb      	cmp	r3, #235	@ 0xeb
 8001240:	d905      	bls.n	800124e <readSingleRegister+0x22>
 8001242:	4b4f      	ldr	r3, [pc, #316]	@ (8001380 <readSingleRegister+0x154>)
 8001244:	4a4f      	ldr	r2, [pc, #316]	@ (8001384 <readSingleRegister+0x158>)
 8001246:	4850      	ldr	r0, [pc, #320]	@ (8001388 <readSingleRegister+0x15c>)
 8001248:	21e2      	movs	r1, #226	@ 0xe2
 800124a:	f006 ffd7 	bl	80081fc <__assert_func>

    uint8_t dataTx[4] = {0};
 800124e:	2310      	movs	r3, #16
 8001250:	18fb      	adds	r3, r7, r3
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
    uint8_t dataRx[4] = {0};
 8001256:	230c      	movs	r3, #12
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    uint8_t numberOfBytes = SPI_CRC_ENABLED ? 4 : 3;
 800125e:	2001      	movs	r0, #1
 8001260:	f000 f896 	bl	8001390 <getRegisterValue>
 8001264:	0003      	movs	r3, r0
 8001266:	001a      	movs	r2, r3
 8001268:	2340      	movs	r3, #64	@ 0x40
 800126a:	4013      	ands	r3, r2
 800126c:	d001      	beq.n	8001272 <readSingleRegister+0x46>
 800126e:	2204      	movs	r2, #4
 8001270:	e000      	b.n	8001274 <readSingleRegister+0x48>
 8001272:	2203      	movs	r2, #3
 8001274:	2516      	movs	r5, #22
 8001276:	197b      	adds	r3, r7, r5
 8001278:	701a      	strb	r2, [r3, #0]
    bool crcError = false;
 800127a:	2317      	movs	r3, #23
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]

    //
    // [FRAME 1] RREG command
    //
    dataTx[0] = OPCODE_RREG;
 8001282:	2410      	movs	r4, #16
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2210      	movs	r2, #16
 8001288:	701a      	strb	r2, [r3, #0]
    dataTx[1] = address;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	1cfa      	adds	r2, r7, #3
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	705a      	strb	r2, [r3, #1]
    dataTx[2] = OPCODE_NULL;
 8001292:	193b      	adds	r3, r7, r4
 8001294:	2200      	movs	r2, #0
 8001296:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 8001298:	2001      	movs	r0, #1
 800129a:	f000 f879 	bl	8001390 <getRegisterValue>
 800129e:	0003      	movs	r3, r0
 80012a0:	001a      	movs	r2, r3
 80012a2:	2340      	movs	r3, #64	@ 0x40
 80012a4:	4013      	ands	r3, r2
 80012a6:	d00c      	beq.n	80012c2 <readSingleRegister+0x96>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 80012a8:	197b      	adds	r3, r7, r5
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b2d9      	uxtb	r1, r3
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	2200      	movs	r2, #0
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 f995 	bl	80015e4 <calculateCRC>
 80012ba:	0003      	movs	r3, r0
 80012bc:	001a      	movs	r2, r3
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 80012c2:	2516      	movs	r5, #22
 80012c4:	197b      	adds	r3, r7, r5
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	220c      	movs	r2, #12
 80012ca:	18ba      	adds	r2, r7, r2
 80012cc:	2410      	movs	r4, #16
 80012ce:	1939      	adds	r1, r7, r4
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff51 	bl	8001178 <spiSendReceiveArray>

    //
    // [FRAME 2] NULL command
    //
    dataTx[0] = OPCODE_NULL;
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
    dataTx[1] = OPCODE_NULL;
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	2200      	movs	r2, #0
 80012e0:	705a      	strb	r2, [r3, #1]
    dataTx[2] = OPCODE_NULL;
 80012e2:	193b      	adds	r3, r7, r4
 80012e4:	2200      	movs	r2, #0
 80012e6:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 80012e8:	2001      	movs	r0, #1
 80012ea:	f000 f851 	bl	8001390 <getRegisterValue>
 80012ee:	0003      	movs	r3, r0
 80012f0:	001a      	movs	r2, r3
 80012f2:	2340      	movs	r3, #64	@ 0x40
 80012f4:	4013      	ands	r3, r2
 80012f6:	d00c      	beq.n	8001312 <readSingleRegister+0xe6>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 80012f8:	197b      	adds	r3, r7, r5
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b2d9      	uxtb	r1, r3
 8001300:	193b      	adds	r3, r7, r4
 8001302:	2200      	movs	r2, #0
 8001304:	0018      	movs	r0, r3
 8001306:	f000 f96d 	bl	80015e4 <calculateCRC>
 800130a:	0003      	movs	r3, r0
 800130c:	001a      	movs	r2, r3
 800130e:	193b      	adds	r3, r7, r4
 8001310:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 8001312:	2316      	movs	r3, #22
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	240c      	movs	r4, #12
 800131a:	193a      	adds	r2, r7, r4
 800131c:	2110      	movs	r1, #16
 800131e:	1879      	adds	r1, r7, r1
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff29 	bl	8001178 <spiSendReceiveArray>

    // Check for CRC error
    if (SPI_CRC_ENABLED)
 8001326:	2001      	movs	r0, #1
 8001328:	f000 f832 	bl	8001390 <getRegisterValue>
 800132c:	0003      	movs	r3, r0
 800132e:	001a      	movs	r2, r3
 8001330:	2340      	movs	r3, #64	@ 0x40
 8001332:	4013      	ands	r3, r2
 8001334:	d00c      	beq.n	8001350 <readSingleRegister+0x124>
    {
        // To check the CRC validity you can test either of the following conditions:
        // 1) "dataRx[1] == calculateCRC(dataRx, 1, CRC_INITIAL_SEED)" - true means no CRC error occurred.
        // 2) "0x00 == calculateCRC(dataRx, 2, CRC_INITIAL_SEED) - including the CRC byte in the calculation should return 0x00.
        crcError = (bool) calculateCRC(dataRx, 2, CRC_INITIAL_SEED);
 8001336:	193b      	adds	r3, r7, r4
 8001338:	2200      	movs	r2, #0
 800133a:	2102      	movs	r1, #2
 800133c:	0018      	movs	r0, r3
 800133e:	f000 f951 	bl	80015e4 <calculateCRC>
 8001342:	0003      	movs	r3, r0
 8001344:	001a      	movs	r2, r3
 8001346:	2317      	movs	r3, #23
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	1e51      	subs	r1, r2, #1
 800134c:	418a      	sbcs	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
    }
    if (crcError)
 8001350:	2317      	movs	r3, #23
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <readSingleRegister+0x136>
    {
        // Update internal register array
        registerMap[SYSTEM_STATUS_ADDRESS] = registerMap[SYSTEM_STATUS_ADDRESS] || SYSTEM_STATUS_CRCERR_IN_MASK;
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <readSingleRegister+0x160>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e006      	b.n	8001370 <readSingleRegister+0x144>

        // (OPTIONAL) Consider notifying the system of the error and repeating the previous command.
    }
    else
    {
        registerMap[address] = dataRx[0];
 8001362:	1cfb      	adds	r3, r7, #3
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	220c      	movs	r2, #12
 8001368:	18ba      	adds	r2, r7, r2
 800136a:	7811      	ldrb	r1, [r2, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	@ (800138c <readSingleRegister+0x160>)
 800136e:	54d1      	strb	r1, [r2, r3]
    }

    return registerMap[address];
 8001370:	1cfb      	adds	r3, r7, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4a05      	ldr	r2, [pc, #20]	@ (800138c <readSingleRegister+0x160>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b006      	add	sp, #24
 800137e:	bdb0      	pop	{r4, r5, r7, pc}
 8001380:	080091dc 	.word	0x080091dc
 8001384:	08009274 	.word	0x08009274
 8001388:	080091c4 	.word	0x080091c4
 800138c:	20000100 	.word	0x20000100

08001390 <getRegisterValue>:
//!
//! \return unsigned 8-bit register value.
//
//*****************************************************************************
uint8_t getRegisterValue(uint8_t address)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	0002      	movs	r2, r0
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	701a      	strb	r2, [r3, #0]
    assert(address <= MAX_REGISTER_ADDRESS);
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2beb      	cmp	r3, #235	@ 0xeb
 80013a2:	d906      	bls.n	80013b2 <getRegisterValue+0x22>
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <getRegisterValue+0x34>)
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <getRegisterValue+0x38>)
 80013a8:	212c      	movs	r1, #44	@ 0x2c
 80013aa:	31ff      	adds	r1, #255	@ 0xff
 80013ac:	4807      	ldr	r0, [pc, #28]	@ (80013cc <getRegisterValue+0x3c>)
 80013ae:	f006 ff25 	bl	80081fc <__assert_func>
    return registerMap[address];
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4a06      	ldr	r2, [pc, #24]	@ (80013d0 <getRegisterValue+0x40>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	080091dc 	.word	0x080091dc
 80013c8:	08009288 	.word	0x08009288
 80013cc:	080091c4 	.word	0x080091c4
 80013d0:	20000100 	.word	0x20000100

080013d4 <writeSingleRegister>:
//!
//! \return None.
//
//*****************************************************************************
void writeSingleRegister(ADS7028_HandleTypeDef *ADC_handle, uint8_t address, uint8_t data)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	0008      	movs	r0, r1
 80013de:	0011      	movs	r1, r2
 80013e0:	1cfb      	adds	r3, r7, #3
 80013e2:	1c02      	adds	r2, r0, #0
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	1cbb      	adds	r3, r7, #2
 80013e8:	1c0a      	adds	r2, r1, #0
 80013ea:	701a      	strb	r2, [r3, #0]
    // Check that the register address is in range
    assert(address <= MAX_REGISTER_ADDRESS);
 80013ec:	1cfb      	adds	r3, r7, #3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2beb      	cmp	r3, #235	@ 0xeb
 80013f2:	d906      	bls.n	8001402 <writeSingleRegister+0x2e>
 80013f4:	4b3f      	ldr	r3, [pc, #252]	@ (80014f4 <writeSingleRegister+0x120>)
 80013f6:	4a40      	ldr	r2, [pc, #256]	@ (80014f8 <writeSingleRegister+0x124>)
 80013f8:	2140      	movs	r1, #64	@ 0x40
 80013fa:	31ff      	adds	r1, #255	@ 0xff
 80013fc:	483f      	ldr	r0, [pc, #252]	@ (80014fc <writeSingleRegister+0x128>)
 80013fe:	f006 fefd 	bl	80081fc <__assert_func>

    uint8_t dataTx[4] = { 0 };
 8001402:	2310      	movs	r3, #16
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
    uint8_t dataRx[4] = { 0 };
 800140a:	230c      	movs	r3, #12
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
    uint8_t numberOfBytes = SPI_CRC_ENABLED ? 4 : 3;
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff ffbc 	bl	8001390 <getRegisterValue>
 8001418:	0003      	movs	r3, r0
 800141a:	001a      	movs	r2, r3
 800141c:	2340      	movs	r3, #64	@ 0x40
 800141e:	4013      	ands	r3, r2
 8001420:	d001      	beq.n	8001426 <writeSingleRegister+0x52>
 8001422:	2204      	movs	r2, #4
 8001424:	e000      	b.n	8001428 <writeSingleRegister+0x54>
 8001426:	2203      	movs	r2, #3
 8001428:	2317      	movs	r3, #23
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	701a      	strb	r2, [r3, #0]

    // (OPTIONAL) Check for and clear CRC error to proceed with register write.
    // Once a CRC error has occurred, writes are only allowed to the SYSTEM_STATUS and GENERAL_CFG registers
    if (SPI_CRC_ENABLED && (address > GENERAL_CFG_ADDRESS))
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff ffae 	bl	8001390 <getRegisterValue>
 8001434:	0003      	movs	r3, r0
 8001436:	001a      	movs	r2, r3
 8001438:	2340      	movs	r3, #64	@ 0x40
 800143a:	4013      	ands	r3, r2
 800143c:	d016      	beq.n	800146c <writeSingleRegister+0x98>
 800143e:	1cfb      	adds	r3, r7, #3
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d912      	bls.n	800146c <writeSingleRegister+0x98>
    {
        // Read STATUS register to check whether CRC error has occurred or not.
        readSingleRegister(ADC_handle, SYSTEM_STATUS_ADDRESS);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2100      	movs	r1, #0
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff feee 	bl	800122c <readSingleRegister>
        if (SPI_CRCERR_IN)
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff ff9d 	bl	8001390 <getRegisterValue>
 8001456:	0003      	movs	r3, r0
 8001458:	001a      	movs	r2, r3
 800145a:	2302      	movs	r3, #2
 800145c:	4013      	ands	r3, r2
 800145e:	d005      	beq.n	800146c <writeSingleRegister+0x98>
        {
            // (OPTIONAL) Clear the CRC error by writing 1b to CRCERR_IN bit
            setRegisterBits(ADC_handle, SYSTEM_STATUS_ADDRESS, SYSTEM_STATUS_CRCERR_IN_MASK);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2202      	movs	r2, #2
 8001464:	2100      	movs	r1, #0
 8001466:	0018      	movs	r0, r3
 8001468:	f000 f84c 	bl	8001504 <setRegisterBits>
            // (OPTIONAL) Consider notifying the system of the error and repeating the previous command.
        }
    }

    // WREG command
    dataTx[0] = OPCODE_WREG;
 800146c:	2410      	movs	r4, #16
 800146e:	193b      	adds	r3, r7, r4
 8001470:	2208      	movs	r2, #8
 8001472:	701a      	strb	r2, [r3, #0]
    dataTx[1] = address;
 8001474:	193b      	adds	r3, r7, r4
 8001476:	1cfa      	adds	r2, r7, #3
 8001478:	7812      	ldrb	r2, [r2, #0]
 800147a:	705a      	strb	r2, [r3, #1]
    dataTx[2] = data;
 800147c:	193b      	adds	r3, r7, r4
 800147e:	1cba      	adds	r2, r7, #2
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff ff83 	bl	8001390 <getRegisterValue>
 800148a:	0003      	movs	r3, r0
 800148c:	001a      	movs	r2, r3
 800148e:	2340      	movs	r3, #64	@ 0x40
 8001490:	4013      	ands	r3, r2
 8001492:	d00d      	beq.n	80014b0 <writeSingleRegister+0xdc>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 8001494:	2317      	movs	r3, #23
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3b01      	subs	r3, #1
 800149c:	b2d9      	uxtb	r1, r3
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	2200      	movs	r2, #0
 80014a2:	0018      	movs	r0, r3
 80014a4:	f000 f89e 	bl	80015e4 <calculateCRC>
 80014a8:	0003      	movs	r3, r0
 80014aa:	001a      	movs	r2, r3
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 80014b0:	2317      	movs	r3, #23
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	220c      	movs	r2, #12
 80014b8:	18ba      	adds	r2, r7, r2
 80014ba:	2110      	movs	r1, #16
 80014bc:	1879      	adds	r1, r7, r1
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fe5a 	bl	8001178 <spiSendReceiveArray>

    // Update internal register map array (assume command was successful).
    // NOTE: This is required for writing to the CRC_EN bit to ensure read back uses the correct mode.
    registerMap[address] = data;
 80014c4:	1cfb      	adds	r3, r7, #3
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <writeSingleRegister+0x12c>)
 80014ca:	1cb9      	adds	r1, r7, #2
 80014cc:	7809      	ldrb	r1, [r1, #0]
 80014ce:	54d1      	strb	r1, [r2, r3]

    // NOTE: If you modify the CPOL_CPHA bits in the DATA_CFG register, the SPI perhiperal will need to be reconfigured here.

    // (RECOMMENDED) Read back register to confirm register write was successful
    registerMap[address] = readSingleRegister(ADC_handle, address);
 80014d0:	1cfb      	adds	r3, r7, #3
 80014d2:	781c      	ldrb	r4, [r3, #0]
 80014d4:	1cfb      	adds	r3, r7, #3
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0011      	movs	r1, r2
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff fea5 	bl	800122c <readSingleRegister>
 80014e2:	0003      	movs	r3, r0
 80014e4:	001a      	movs	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <writeSingleRegister+0x12c>)
 80014e8:	551a      	strb	r2, [r3, r4]
}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b007      	add	sp, #28
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	080091dc 	.word	0x080091dc
 80014f8:	0800929c 	.word	0x0800929c
 80014fc:	080091c4 	.word	0x080091c4
 8001500:	20000100 	.word	0x20000100

08001504 <setRegisterBits>:
//!
//! \return None.
//
//*****************************************************************************
void setRegisterBits(ADS7028_HandleTypeDef *ADC_handle, uint8_t address, uint8_t bitMask)
{
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	0008      	movs	r0, r1
 800150e:	0011      	movs	r1, r2
 8001510:	1cfb      	adds	r3, r7, #3
 8001512:	1c02      	adds	r2, r0, #0
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	1cbb      	adds	r3, r7, #2
 8001518:	1c0a      	adds	r2, r1, #0
 800151a:	701a      	strb	r2, [r3, #0]
    // Check that the register address is in range
    assert(address <= MAX_REGISTER_ADDRESS);
 800151c:	1cfb      	adds	r3, r7, #3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2beb      	cmp	r3, #235	@ 0xeb
 8001522:	d906      	bls.n	8001532 <setRegisterBits+0x2e>
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <setRegisterBits+0xd0>)
 8001526:	4a2c      	ldr	r2, [pc, #176]	@ (80015d8 <setRegisterBits+0xd4>)
 8001528:	21bc      	movs	r1, #188	@ 0xbc
 800152a:	0049      	lsls	r1, r1, #1
 800152c:	482b      	ldr	r0, [pc, #172]	@ (80015dc <setRegisterBits+0xd8>)
 800152e:	f006 fe65 	bl	80081fc <__assert_func>

    uint8_t dataTx[4] = {0};
 8001532:	2310      	movs	r3, #16
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    uint8_t dataRx[4] = {0};
 800153a:	230c      	movs	r3, #12
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
    uint8_t numberOfBytes = SPI_CRC_ENABLED ? 4 : 3;
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff ff24 	bl	8001390 <getRegisterValue>
 8001548:	0003      	movs	r3, r0
 800154a:	001a      	movs	r2, r3
 800154c:	2340      	movs	r3, #64	@ 0x40
 800154e:	4013      	ands	r3, r2
 8001550:	d001      	beq.n	8001556 <setRegisterBits+0x52>
 8001552:	2204      	movs	r2, #4
 8001554:	e000      	b.n	8001558 <setRegisterBits+0x54>
 8001556:	2203      	movs	r2, #3
 8001558:	2517      	movs	r5, #23
 800155a:	197b      	adds	r3, r7, r5
 800155c:	701a      	strb	r2, [r3, #0]

    // SETBIT command
    dataTx[0] = OPCODE_SETBIT;
 800155e:	2410      	movs	r4, #16
 8001560:	193b      	adds	r3, r7, r4
 8001562:	2218      	movs	r2, #24
 8001564:	701a      	strb	r2, [r3, #0]
    dataTx[1] = address;
 8001566:	193b      	adds	r3, r7, r4
 8001568:	1cfa      	adds	r2, r7, #3
 800156a:	7812      	ldrb	r2, [r2, #0]
 800156c:	705a      	strb	r2, [r3, #1]
    dataTx[2] = bitMask;
 800156e:	193b      	adds	r3, r7, r4
 8001570:	1cba      	adds	r2, r7, #2
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff ff0a 	bl	8001390 <getRegisterValue>
 800157c:	0003      	movs	r3, r0
 800157e:	001a      	movs	r2, r3
 8001580:	2340      	movs	r3, #64	@ 0x40
 8001582:	4013      	ands	r3, r2
 8001584:	d00c      	beq.n	80015a0 <setRegisterBits+0x9c>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 8001586:	197b      	adds	r3, r7, r5
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	3b01      	subs	r3, #1
 800158c:	b2d9      	uxtb	r1, r3
 800158e:	193b      	adds	r3, r7, r4
 8001590:	2200      	movs	r2, #0
 8001592:	0018      	movs	r0, r3
 8001594:	f000 f826 	bl	80015e4 <calculateCRC>
 8001598:	0003      	movs	r3, r0
 800159a:	001a      	movs	r2, r3
 800159c:	193b      	adds	r3, r7, r4
 800159e:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 80015a0:	2317      	movs	r3, #23
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	220c      	movs	r2, #12
 80015a8:	18ba      	adds	r2, r7, r2
 80015aa:	2110      	movs	r1, #16
 80015ac:	1879      	adds	r1, r7, r1
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fde2 	bl	8001178 <spiSendReceiveArray>

    // Update internal register map array (assume command was successful).
    // NOTE: This is required for writing to the CRC_EN bit to ensure read back uses the correct mode.
    registerMap[address] = registerMap[address] | bitMask;
 80015b4:	1cfb      	adds	r3, r7, #3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <setRegisterBits+0xdc>)
 80015ba:	5cd1      	ldrb	r1, [r2, r3]
 80015bc:	1cfb      	adds	r3, r7, #3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	1cba      	adds	r2, r7, #2
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	b2d1      	uxtb	r1, r2
 80015c8:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <setRegisterBits+0xdc>)
 80015ca:	54d1      	strb	r1, [r2, r3]

    // (OPTIONAL) Check if a CRC error occurred
}
 80015cc:	46c0      	nop			@ (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b006      	add	sp, #24
 80015d2:	bdb0      	pop	{r4, r5, r7, pc}
 80015d4:	080091dc 	.word	0x080091dc
 80015d8:	080092b0 	.word	0x080092b0
 80015dc:	080091c4 	.word	0x080091c4
 80015e0:	20000100 	.word	0x20000100

080015e4 <calculateCRC>:
//!
//! \return 8-bit calculated CRC word
//
//*****************************************************************************
uint8_t calculateCRC(const uint8_t dataBytes[], uint8_t numberBytes, uint8_t initialValue)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	0008      	movs	r0, r1
 80015ee:	0011      	movs	r1, r2
 80015f0:	1cfb      	adds	r3, r7, #3
 80015f2:	1c02      	adds	r2, r0, #0
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	1cbb      	adds	r3, r7, #2
 80015f8:	1c0a      	adds	r2, r1, #0
 80015fa:	701a      	strb	r2, [r3, #0]
    // Check that "dataBytes" is not a null pointer
    assert(dataBytes != 0x00);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <calculateCRC+0x2c>
 8001602:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <calculateCRC+0xc4>)
 8001604:	4a29      	ldr	r2, [pc, #164]	@ (80016ac <calculateCRC+0xc8>)
 8001606:	21e5      	movs	r1, #229	@ 0xe5
 8001608:	0049      	lsls	r1, r1, #1
 800160a:	4829      	ldr	r0, [pc, #164]	@ (80016b0 <calculateCRC+0xcc>)
 800160c:	f006 fdf6 	bl	80081fc <__assert_func>
    bool        dataMSb;                        /* Most significant bit of data byte */
    bool        crcMSb;                         /* Most significant bit of crc byte  */

    // Initial value of crc register
    // Use 0x00 when starting a new computation OR provide result of previous CRC calculation when continuing an on-going calculation.
    uint8_t crc = initialValue;
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	1cba      	adds	r2, r7, #2
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	701a      	strb	r2, [r3, #0]

    // CRC polynomial = x^8 + x^2 + x^1 + 1
    const uint8_t poly = 0x07;
 800161a:	230e      	movs	r3, #14
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	2207      	movs	r2, #7
 8001620:	701a      	strb	r2, [r3, #0]

    /* CRC algorithm */

    // Loop through all bytes in the dataBytes[] array
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	e033      	b.n	8001690 <calculateCRC+0xac>
    {
        // Point to MSb in byte
        bitIndex = 0x80u;
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	617b      	str	r3, [r7, #20]

        // Loop through all bits in the current byte
        while (bitIndex > 0)
 800162c:	e02a      	b.n	8001684 <calculateCRC+0xa0>
        {
            // Check MSB's of data and crc
            dataMSb = (bool) (dataBytes[byteIndex] & bitIndex);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	18d3      	adds	r3, r2, r3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	001a      	movs	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	401a      	ands	r2, r3
 800163c:	200d      	movs	r0, #13
 800163e:	183b      	adds	r3, r7, r0
 8001640:	1e51      	subs	r1, r2, #1
 8001642:	418a      	sbcs	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
            crcMSb  = (bool) (crc & 0x80u);
 8001646:	210f      	movs	r1, #15
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2200      	movs	r2, #0
 800164c:	569a      	ldrsb	r2, [r3, r2]
 800164e:	240c      	movs	r4, #12
 8001650:	193b      	adds	r3, r7, r4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	09d2      	lsrs	r2, r2, #7
 8001656:	701a      	strb	r2, [r3, #0]

            // Update crc register
            crc <<= 1;
 8001658:	187a      	adds	r2, r7, r1
 800165a:	187b      	adds	r3, r7, r1
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	18db      	adds	r3, r3, r3
 8001660:	7013      	strb	r3, [r2, #0]
            if (dataMSb ^ crcMSb) { crc ^= poly; }
 8001662:	183a      	adds	r2, r7, r0
 8001664:	193b      	adds	r3, r7, r4
 8001666:	7812      	ldrb	r2, [r2, #0]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d007      	beq.n	800167e <calculateCRC+0x9a>
 800166e:	187b      	adds	r3, r7, r1
 8001670:	1879      	adds	r1, r7, r1
 8001672:	220e      	movs	r2, #14
 8001674:	18ba      	adds	r2, r7, r2
 8001676:	7809      	ldrb	r1, [r1, #0]
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	404a      	eors	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]

            // Shift MSb pointer to the next data bit
            bitIndex >>= 1;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	105b      	asrs	r3, r3, #1
 8001682:	617b      	str	r3, [r7, #20]
        while (bitIndex > 0)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b00      	cmp	r3, #0
 8001688:	dcd1      	bgt.n	800162e <calculateCRC+0x4a>
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	3301      	adds	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	1cfb      	adds	r3, r7, #3
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	429a      	cmp	r2, r3
 8001698:	dbc6      	blt.n	8001628 <calculateCRC+0x44>
        }
    }

    return crc;
 800169a:	230f      	movs	r3, #15
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	781b      	ldrb	r3, [r3, #0]
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b007      	add	sp, #28
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	080091fc 	.word	0x080091fc
 80016ac:	080092c0 	.word	0x080092c0
 80016b0:	080091c4 	.word	0x080091c4

080016b4 <restoreRegisterDefaults>:
//!
//! \return None.
//
//*****************************************************************************
static void restoreRegisterDefaults(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    registerMap[SYSTEM_STATUS_ADDRESS]          = SYSTEM_STATUS_DEFAULT;
 80016b8:	4bd3      	ldr	r3, [pc, #844]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016ba:	2281      	movs	r2, #129	@ 0x81
 80016bc:	701a      	strb	r2, [r3, #0]
    registerMap[GENERAL_CFG_ADDRESS]            = GENERAL_CFG_DEFAULT;
 80016be:	4bd2      	ldr	r3, [pc, #840]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	705a      	strb	r2, [r3, #1]

    registerMap[DATA_CFG_ADDRESS]               = DATA_CFG_DEFAULT;
 80016c4:	4bd0      	ldr	r3, [pc, #832]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	709a      	strb	r2, [r3, #2]
    registerMap[OSR_CFG_ADDRESS]                = OSR_CFG_DEFAULT;
 80016ca:	4bcf      	ldr	r3, [pc, #828]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	70da      	strb	r2, [r3, #3]
    registerMap[OPMODE_CFG_ADDRESS]             = OPMODE_CFG_DEFAULT;
 80016d0:	4bcd      	ldr	r3, [pc, #820]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	711a      	strb	r2, [r3, #4]
    registerMap[PIN_CFG_ADDRESS]                = PIN_CFG_DEFAULT;
 80016d6:	4bcc      	ldr	r3, [pc, #816]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016d8:	2200      	movs	r2, #0
 80016da:	715a      	strb	r2, [r3, #5]

    registerMap[GPIO_CFG_ADDRESS]               = GPIO_CFG_DEFAULT;
 80016dc:	4bca      	ldr	r3, [pc, #808]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016de:	2200      	movs	r2, #0
 80016e0:	71da      	strb	r2, [r3, #7]
    registerMap[GPO_DRIVE_CFG_ADDRESS]          = GPO_DRIVE_CFG_DEFAULT;
 80016e2:	4bc9      	ldr	r3, [pc, #804]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	725a      	strb	r2, [r3, #9]
    registerMap[GPO_OUTPUT_VALUE_ADDRESS]       = GPO_OUTPUT_VALUE_DEFAULT;
 80016e8:	4bc7      	ldr	r3, [pc, #796]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	72da      	strb	r2, [r3, #11]
    registerMap[GPI_VALUE_ADDRESS]              = GPI_VALUE_DEFAULT;
 80016ee:	4bc6      	ldr	r3, [pc, #792]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	735a      	strb	r2, [r3, #13]

    registerMap[SEQUENCE_CFG_ADDRESS]           = SEQUENCE_CFG_DEFAULT;
 80016f4:	4bc4      	ldr	r3, [pc, #784]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	741a      	strb	r2, [r3, #16]
    registerMap[CHANNEL_SEL_ADDRESS]            = CHANNEL_SEL_DEFAULT;
 80016fa:	4bc3      	ldr	r3, [pc, #780]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	745a      	strb	r2, [r3, #17]
    registerMap[AUTO_SEQ_CHSEL_ADDRESS]         = AUTO_SEQ_CHSEL_DEFAULT;
 8001700:	4bc1      	ldr	r3, [pc, #772]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001702:	2200      	movs	r2, #0
 8001704:	749a      	strb	r2, [r3, #18]

    registerMap[ALERT_CH_SEL_ADDRESS]           = ALERT_CH_SEL_DEFAULT;
 8001706:	4bc0      	ldr	r3, [pc, #768]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001708:	2200      	movs	r2, #0
 800170a:	751a      	strb	r2, [r3, #20]
    registerMap[ALERT_MAP_ADDRESS]              = ALERT_MAP_DEFAULT;
 800170c:	4bbe      	ldr	r3, [pc, #760]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800170e:	2200      	movs	r2, #0
 8001710:	759a      	strb	r2, [r3, #22]
    registerMap[ALERT_PIN_CFG_ADDRESS]          = ALERT_PIN_CFG_DEFAULT;
 8001712:	4bbd      	ldr	r3, [pc, #756]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001714:	2200      	movs	r2, #0
 8001716:	75da      	strb	r2, [r3, #23]

    registerMap[EVENT_FLAG_ADDRESS]             = EVENT_FLAG_DEFAULT;
 8001718:	4bbb      	ldr	r3, [pc, #748]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800171a:	2200      	movs	r2, #0
 800171c:	761a      	strb	r2, [r3, #24]
    registerMap[EVENT_HIGH_FLAG_ADDRESS]        = EVENT_HIGH_FLAG_DEFAULT;
 800171e:	4bba      	ldr	r3, [pc, #744]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001720:	2200      	movs	r2, #0
 8001722:	769a      	strb	r2, [r3, #26]
    registerMap[EVENT_LOW_FLAG_ADDRESS]         = EVENT_LOW_FLAG_DEFAULT;
 8001724:	4bb8      	ldr	r3, [pc, #736]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001726:	2200      	movs	r2, #0
 8001728:	771a      	strb	r2, [r3, #28]
    registerMap[EVENT_RGN_ADDRESS]              = EVENT_RGN_DEFAULT;
 800172a:	4bb7      	ldr	r3, [pc, #732]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800172c:	2200      	movs	r2, #0
 800172e:	779a      	strb	r2, [r3, #30]

    registerMap[HYSTERESIS_CH0_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8001730:	4bb5      	ldr	r3, [pc, #724]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001732:	2220      	movs	r2, #32
 8001734:	21f0      	movs	r1, #240	@ 0xf0
 8001736:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH1_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8001738:	4bb3      	ldr	r3, [pc, #716]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800173a:	2224      	movs	r2, #36	@ 0x24
 800173c:	21f0      	movs	r1, #240	@ 0xf0
 800173e:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH2_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8001740:	4bb1      	ldr	r3, [pc, #708]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001742:	2228      	movs	r2, #40	@ 0x28
 8001744:	21f0      	movs	r1, #240	@ 0xf0
 8001746:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH3_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8001748:	4baf      	ldr	r3, [pc, #700]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800174a:	222c      	movs	r2, #44	@ 0x2c
 800174c:	21f0      	movs	r1, #240	@ 0xf0
 800174e:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH4_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8001750:	4bad      	ldr	r3, [pc, #692]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001752:	2230      	movs	r2, #48	@ 0x30
 8001754:	21f0      	movs	r1, #240	@ 0xf0
 8001756:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH5_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8001758:	4bab      	ldr	r3, [pc, #684]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800175a:	2234      	movs	r2, #52	@ 0x34
 800175c:	21f0      	movs	r1, #240	@ 0xf0
 800175e:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH6_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8001760:	4ba9      	ldr	r3, [pc, #676]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001762:	2238      	movs	r2, #56	@ 0x38
 8001764:	21f0      	movs	r1, #240	@ 0xf0
 8001766:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH7_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8001768:	4ba7      	ldr	r3, [pc, #668]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800176a:	223c      	movs	r2, #60	@ 0x3c
 800176c:	21f0      	movs	r1, #240	@ 0xf0
 800176e:	5499      	strb	r1, [r3, r2]

    registerMap[EVENT_COUNT_CH0_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8001770:	4ba5      	ldr	r3, [pc, #660]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001772:	2222      	movs	r2, #34	@ 0x22
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH1_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8001778:	4ba3      	ldr	r3, [pc, #652]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800177a:	2226      	movs	r2, #38	@ 0x26
 800177c:	2100      	movs	r1, #0
 800177e:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH2_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8001780:	4ba1      	ldr	r3, [pc, #644]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001782:	222a      	movs	r2, #42	@ 0x2a
 8001784:	2100      	movs	r1, #0
 8001786:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH3_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8001788:	4b9f      	ldr	r3, [pc, #636]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800178a:	222e      	movs	r2, #46	@ 0x2e
 800178c:	2100      	movs	r1, #0
 800178e:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH4_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8001790:	4b9d      	ldr	r3, [pc, #628]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001792:	2232      	movs	r2, #50	@ 0x32
 8001794:	2100      	movs	r1, #0
 8001796:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH5_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8001798:	4b9b      	ldr	r3, [pc, #620]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800179a:	2236      	movs	r2, #54	@ 0x36
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH6_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 80017a0:	4b99      	ldr	r3, [pc, #612]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017a2:	223a      	movs	r2, #58	@ 0x3a
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH7_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 80017a8:	4b97      	ldr	r3, [pc, #604]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017aa:	223e      	movs	r2, #62	@ 0x3e
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]

    registerMap[HIGH_TH_CH0_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80017b0:	4b95      	ldr	r3, [pc, #596]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017b2:	2221      	movs	r2, #33	@ 0x21
 80017b4:	21ff      	movs	r1, #255	@ 0xff
 80017b6:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH1_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80017b8:	4b93      	ldr	r3, [pc, #588]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017ba:	2225      	movs	r2, #37	@ 0x25
 80017bc:	21ff      	movs	r1, #255	@ 0xff
 80017be:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH2_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80017c0:	4b91      	ldr	r3, [pc, #580]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017c2:	2229      	movs	r2, #41	@ 0x29
 80017c4:	21ff      	movs	r1, #255	@ 0xff
 80017c6:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH3_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80017c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017ca:	222d      	movs	r2, #45	@ 0x2d
 80017cc:	21ff      	movs	r1, #255	@ 0xff
 80017ce:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH4_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80017d0:	4b8d      	ldr	r3, [pc, #564]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017d2:	2231      	movs	r2, #49	@ 0x31
 80017d4:	21ff      	movs	r1, #255	@ 0xff
 80017d6:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH5_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80017d8:	4b8b      	ldr	r3, [pc, #556]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017da:	2235      	movs	r2, #53	@ 0x35
 80017dc:	21ff      	movs	r1, #255	@ 0xff
 80017de:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH6_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80017e0:	4b89      	ldr	r3, [pc, #548]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017e2:	2239      	movs	r2, #57	@ 0x39
 80017e4:	21ff      	movs	r1, #255	@ 0xff
 80017e6:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH7_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80017e8:	4b87      	ldr	r3, [pc, #540]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017ea:	223d      	movs	r2, #61	@ 0x3d
 80017ec:	21ff      	movs	r1, #255	@ 0xff
 80017ee:	5499      	strb	r1, [r3, r2]

    registerMap[LOW_TH_CH0_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80017f0:	4b85      	ldr	r3, [pc, #532]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017f2:	2223      	movs	r2, #35	@ 0x23
 80017f4:	2100      	movs	r1, #0
 80017f6:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH1_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80017f8:	4b83      	ldr	r3, [pc, #524]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80017fa:	2227      	movs	r2, #39	@ 0x27
 80017fc:	2100      	movs	r1, #0
 80017fe:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH2_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 8001800:	4b81      	ldr	r3, [pc, #516]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001802:	222b      	movs	r2, #43	@ 0x2b
 8001804:	2100      	movs	r1, #0
 8001806:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH3_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 8001808:	4b7f      	ldr	r3, [pc, #508]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800180a:	222f      	movs	r2, #47	@ 0x2f
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH4_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 8001810:	4b7d      	ldr	r3, [pc, #500]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001812:	2233      	movs	r2, #51	@ 0x33
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH5_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 8001818:	4b7b      	ldr	r3, [pc, #492]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800181a:	2237      	movs	r2, #55	@ 0x37
 800181c:	2100      	movs	r1, #0
 800181e:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH6_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 8001820:	4b79      	ldr	r3, [pc, #484]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001822:	223b      	movs	r2, #59	@ 0x3b
 8001824:	2100      	movs	r1, #0
 8001826:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH7_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 8001828:	4b77      	ldr	r3, [pc, #476]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800182a:	223f      	movs	r2, #63	@ 0x3f
 800182c:	2100      	movs	r1, #0
 800182e:	5499      	strb	r1, [r3, r2]

    registerMap[MAX_CH0_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8001830:	4b75      	ldr	r3, [pc, #468]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001832:	2260      	movs	r2, #96	@ 0x60
 8001834:	2100      	movs	r1, #0
 8001836:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH1_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8001838:	4b73      	ldr	r3, [pc, #460]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800183a:	2262      	movs	r2, #98	@ 0x62
 800183c:	2100      	movs	r1, #0
 800183e:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH2_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8001840:	4b71      	ldr	r3, [pc, #452]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001842:	2264      	movs	r2, #100	@ 0x64
 8001844:	2100      	movs	r1, #0
 8001846:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH3_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8001848:	4b6f      	ldr	r3, [pc, #444]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800184a:	2266      	movs	r2, #102	@ 0x66
 800184c:	2100      	movs	r1, #0
 800184e:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH4_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8001850:	4b6d      	ldr	r3, [pc, #436]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001852:	2268      	movs	r2, #104	@ 0x68
 8001854:	2100      	movs	r1, #0
 8001856:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH5_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8001858:	4b6b      	ldr	r3, [pc, #428]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800185a:	226a      	movs	r2, #106	@ 0x6a
 800185c:	2100      	movs	r1, #0
 800185e:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH6_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8001860:	4b69      	ldr	r3, [pc, #420]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001862:	226c      	movs	r2, #108	@ 0x6c
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH7_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8001868:	4b67      	ldr	r3, [pc, #412]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800186a:	226e      	movs	r2, #110	@ 0x6e
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]

    registerMap[MAX_CH0_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8001870:	4b65      	ldr	r3, [pc, #404]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001872:	2261      	movs	r2, #97	@ 0x61
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH1_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8001878:	4b63      	ldr	r3, [pc, #396]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800187a:	2263      	movs	r2, #99	@ 0x63
 800187c:	2100      	movs	r1, #0
 800187e:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH2_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8001880:	4b61      	ldr	r3, [pc, #388]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001882:	2265      	movs	r2, #101	@ 0x65
 8001884:	2100      	movs	r1, #0
 8001886:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH3_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8001888:	4b5f      	ldr	r3, [pc, #380]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800188a:	2267      	movs	r2, #103	@ 0x67
 800188c:	2100      	movs	r1, #0
 800188e:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH4_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8001890:	4b5d      	ldr	r3, [pc, #372]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001892:	2269      	movs	r2, #105	@ 0x69
 8001894:	2100      	movs	r1, #0
 8001896:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH5_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8001898:	4b5b      	ldr	r3, [pc, #364]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800189a:	226b      	movs	r2, #107	@ 0x6b
 800189c:	2100      	movs	r1, #0
 800189e:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH6_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 80018a0:	4b59      	ldr	r3, [pc, #356]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018a2:	226d      	movs	r2, #109	@ 0x6d
 80018a4:	2100      	movs	r1, #0
 80018a6:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH7_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 80018a8:	4b57      	ldr	r3, [pc, #348]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018aa:	226f      	movs	r2, #111	@ 0x6f
 80018ac:	2100      	movs	r1, #0
 80018ae:	5499      	strb	r1, [r3, r2]

    registerMap[MIN_CH0_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80018b0:	4b55      	ldr	r3, [pc, #340]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	21ff      	movs	r1, #255	@ 0xff
 80018b6:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH1_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80018b8:	4b53      	ldr	r3, [pc, #332]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018ba:	2282      	movs	r2, #130	@ 0x82
 80018bc:	21ff      	movs	r1, #255	@ 0xff
 80018be:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH2_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80018c0:	4b51      	ldr	r3, [pc, #324]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018c2:	2284      	movs	r2, #132	@ 0x84
 80018c4:	21ff      	movs	r1, #255	@ 0xff
 80018c6:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH3_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80018c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018ca:	2286      	movs	r2, #134	@ 0x86
 80018cc:	21ff      	movs	r1, #255	@ 0xff
 80018ce:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH4_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80018d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018d2:	2288      	movs	r2, #136	@ 0x88
 80018d4:	21ff      	movs	r1, #255	@ 0xff
 80018d6:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH5_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80018d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018da:	228a      	movs	r2, #138	@ 0x8a
 80018dc:	21ff      	movs	r1, #255	@ 0xff
 80018de:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH6_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80018e0:	4b49      	ldr	r3, [pc, #292]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018e2:	228c      	movs	r2, #140	@ 0x8c
 80018e4:	21ff      	movs	r1, #255	@ 0xff
 80018e6:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH7_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80018e8:	4b47      	ldr	r3, [pc, #284]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018ea:	228e      	movs	r2, #142	@ 0x8e
 80018ec:	21ff      	movs	r1, #255	@ 0xff
 80018ee:	5499      	strb	r1, [r3, r2]

    registerMap[MIN_CH0_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80018f0:	4b45      	ldr	r3, [pc, #276]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018f2:	2281      	movs	r2, #129	@ 0x81
 80018f4:	21ff      	movs	r1, #255	@ 0xff
 80018f6:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH1_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80018f8:	4b43      	ldr	r3, [pc, #268]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80018fa:	2283      	movs	r2, #131	@ 0x83
 80018fc:	21ff      	movs	r1, #255	@ 0xff
 80018fe:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH2_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 8001900:	4b41      	ldr	r3, [pc, #260]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001902:	2285      	movs	r2, #133	@ 0x85
 8001904:	21ff      	movs	r1, #255	@ 0xff
 8001906:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH3_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 8001908:	4b3f      	ldr	r3, [pc, #252]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800190a:	2287      	movs	r2, #135	@ 0x87
 800190c:	21ff      	movs	r1, #255	@ 0xff
 800190e:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH4_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 8001910:	4b3d      	ldr	r3, [pc, #244]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001912:	2289      	movs	r2, #137	@ 0x89
 8001914:	21ff      	movs	r1, #255	@ 0xff
 8001916:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH5_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 8001918:	4b3b      	ldr	r3, [pc, #236]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800191a:	228b      	movs	r2, #139	@ 0x8b
 800191c:	21ff      	movs	r1, #255	@ 0xff
 800191e:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH6_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 8001920:	4b39      	ldr	r3, [pc, #228]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001922:	228d      	movs	r2, #141	@ 0x8d
 8001924:	21ff      	movs	r1, #255	@ 0xff
 8001926:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH7_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 8001928:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800192a:	228f      	movs	r2, #143	@ 0x8f
 800192c:	21ff      	movs	r1, #255	@ 0xff
 800192e:	5499      	strb	r1, [r3, r2]

    registerMap[RECENT_CH0_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8001930:	4b35      	ldr	r3, [pc, #212]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001932:	22a0      	movs	r2, #160	@ 0xa0
 8001934:	2100      	movs	r1, #0
 8001936:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH1_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8001938:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800193a:	22a2      	movs	r2, #162	@ 0xa2
 800193c:	2100      	movs	r1, #0
 800193e:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH2_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8001940:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001942:	22a4      	movs	r2, #164	@ 0xa4
 8001944:	2100      	movs	r1, #0
 8001946:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH3_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8001948:	4b2f      	ldr	r3, [pc, #188]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800194a:	22a6      	movs	r2, #166	@ 0xa6
 800194c:	2100      	movs	r1, #0
 800194e:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH4_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8001950:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001952:	22a8      	movs	r2, #168	@ 0xa8
 8001954:	2100      	movs	r1, #0
 8001956:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH5_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800195a:	22aa      	movs	r2, #170	@ 0xaa
 800195c:	2100      	movs	r1, #0
 800195e:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH6_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8001960:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001962:	22ac      	movs	r2, #172	@ 0xac
 8001964:	2100      	movs	r1, #0
 8001966:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH7_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800196a:	22ae      	movs	r2, #174	@ 0xae
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]

    registerMap[RECENT_CH0_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8001970:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001972:	22a1      	movs	r2, #161	@ 0xa1
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH1_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8001978:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800197a:	22a3      	movs	r2, #163	@ 0xa3
 800197c:	2100      	movs	r1, #0
 800197e:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH2_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8001980:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001982:	22a5      	movs	r2, #165	@ 0xa5
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH3_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8001988:	4b1f      	ldr	r3, [pc, #124]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800198a:	22a7      	movs	r2, #167	@ 0xa7
 800198c:	2100      	movs	r1, #0
 800198e:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH4_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 8001992:	22a9      	movs	r2, #169	@ 0xa9
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH5_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 800199a:	22ab      	movs	r2, #171	@ 0xab
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH6_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019a2:	22ad      	movs	r2, #173	@ 0xad
 80019a4:	2100      	movs	r1, #0
 80019a6:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH7_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019aa:	22af      	movs	r2, #175	@ 0xaf
 80019ac:	2100      	movs	r1, #0
 80019ae:	5499      	strb	r1, [r3, r2]

    registerMap[GPO0_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019b2:	22c3      	movs	r2, #195	@ 0xc3
 80019b4:	2100      	movs	r1, #0
 80019b6:	5499      	strb	r1, [r3, r2]
    registerMap[GPO1_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019ba:	22c5      	movs	r2, #197	@ 0xc5
 80019bc:	2100      	movs	r1, #0
 80019be:	5499      	strb	r1, [r3, r2]
    registerMap[GPO2_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019c2:	22c7      	movs	r2, #199	@ 0xc7
 80019c4:	2100      	movs	r1, #0
 80019c6:	5499      	strb	r1, [r3, r2]
    registerMap[GPO3_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019ca:	22c9      	movs	r2, #201	@ 0xc9
 80019cc:	2100      	movs	r1, #0
 80019ce:	5499      	strb	r1, [r3, r2]
    registerMap[GPO4_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019d2:	22cb      	movs	r2, #203	@ 0xcb
 80019d4:	2100      	movs	r1, #0
 80019d6:	5499      	strb	r1, [r3, r2]
    registerMap[GPO5_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019da:	22cd      	movs	r2, #205	@ 0xcd
 80019dc:	2100      	movs	r1, #0
 80019de:	5499      	strb	r1, [r3, r2]
    registerMap[GPO6_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019e2:	22cf      	movs	r2, #207	@ 0xcf
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]
    registerMap[GPO7_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019ea:	22d1      	movs	r2, #209	@ 0xd1
 80019ec:	2100      	movs	r1, #0
 80019ee:	5499      	strb	r1, [r3, r2]

    registerMap[GPO_TRIGGER_CFG_ADDRESS]        = GPO_TRIGGER_CFG_DEFAULT;
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019f2:	22e9      	movs	r2, #233	@ 0xe9
 80019f4:	2100      	movs	r1, #0
 80019f6:	5499      	strb	r1, [r3, r2]
    registerMap[GPO_VALUE_TRIG_ADDRESS]         = GPO_VALUE_TRIG_DEFAULT;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <restoreRegisterDefaults+0x354>)
 80019fa:	22eb      	movs	r2, #235	@ 0xeb
 80019fc:	2100      	movs	r1, #0
 80019fe:	5499      	strb	r1, [r3, r2]
}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	20000100 	.word	0x20000100

08001a0c <TransmitHeartBeat>:
#include "brake_module.h"

BrakeModuleInfo_t BrakeModule;

void TransmitHeartBeat()
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	//Increment counter by 1, if 255 force to 0
	if(BrakeModule.HeartBeatCounter == 255)
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <TransmitHeartBeat+0x50>)
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	2bff      	cmp	r3, #255	@ 0xff
 8001a16:	d103      	bne.n	8001a20 <TransmitHeartBeat+0x14>
	{
		BrakeModule.HeartBeatCounter = 0;
 8001a18:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <TransmitHeartBeat+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	705a      	strb	r2, [r3, #1]
 8001a1e:	e005      	b.n	8001a2c <TransmitHeartBeat+0x20>
		//BrakeModule.HeartBeatState = !BrakeModule.HeartBeatState;
	}
	else
	{
		BrakeModule.HeartBeatCounter++;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <TransmitHeartBeat+0x50>)
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <TransmitHeartBeat+0x50>)
 8001a2a:	705a      	strb	r2, [r3, #1]
		//BrakeModule.HeartBeatState = !BrakeModule.HeartBeatState;
	}
	//BrakeModule.canHeartBeat.TxData[0] = BrakeModule.HeartBeatState;
	BrakeModule.canHeartBeat.TxData[1] = BrakeModule.HeartBeatCounter;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <TransmitHeartBeat+0x50>)
 8001a2e:	7859      	ldrb	r1, [r3, #1]
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <TransmitHeartBeat+0x50>)
 8001a32:	2255      	movs	r2, #85	@ 0x55
 8001a34:	5499      	strb	r1, [r3, r2]

	//Toggle debug LED
	HAL_GPIO_TogglePin(BrakeModule.dbgLedPort, BrakeModule.dbgLedPin);
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <TransmitHeartBeat+0x50>)
 8001a38:	22fc      	movs	r2, #252	@ 0xfc
 8001a3a:	5898      	ldr	r0, [r3, r2]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <TransmitHeartBeat+0x50>)
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	5ad3      	ldrh	r3, [r2, r3]
 8001a44:	0019      	movs	r1, r3
 8001a46:	f001 feef 	bl	8003828 <HAL_GPIO_TogglePin>

	// Adjust to “HAL_FDCAN_AddMessageToTxFifoQ” to match TS25_Temp_Module FDCAN function
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &BrakeModule.canHeartBeat.TxHeader, BrakeModule.canHeartBeat.TxData);
 8001a4a:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <TransmitHeartBeat+0x54>)
 8001a4c:	4905      	ldr	r1, [pc, #20]	@ (8001a64 <TransmitHeartBeat+0x58>)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <TransmitHeartBeat+0x5c>)
 8001a50:	0018      	movs	r0, r3
 8001a52:	f001 fc15 	bl	8003280 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200001ec 	.word	0x200001ec
 8001a60:	20000240 	.word	0x20000240
 8001a64:	2000021c 	.word	0x2000021c
 8001a68:	2000030c 	.word	0x2000030c

08001a6c <TransmitDigital>:

void TransmitDigital()
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	BrakeModule.canDigital.TxData[0] = BrakeModule.HighPressure;
 8001a70:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <TransmitDigital+0x60>)
 8001a72:	2225      	movs	r2, #37	@ 0x25
 8001a74:	5c99      	ldrb	r1, [r3, r2]
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <TransmitDigital+0x60>)
 8001a78:	22bc      	movs	r2, #188	@ 0xbc
 8001a7a:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[1] = BrakeModule.LowPressure;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <TransmitDigital+0x60>)
 8001a7e:	2224      	movs	r2, #36	@ 0x24
 8001a80:	5c99      	ldrb	r1, [r3, r2]
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <TransmitDigital+0x60>)
 8001a84:	22bd      	movs	r2, #189	@ 0xbd
 8001a86:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[2] = BrakeModule.FiveKW;
 8001a88:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <TransmitDigital+0x60>)
 8001a8a:	2228      	movs	r2, #40	@ 0x28
 8001a8c:	5c99      	ldrb	r1, [r3, r2]
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <TransmitDigital+0x60>)
 8001a90:	22be      	movs	r2, #190	@ 0xbe
 8001a92:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[3] = BrakeModule.BSPD_OK;
 8001a94:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <TransmitDigital+0x60>)
 8001a96:	2227      	movs	r2, #39	@ 0x27
 8001a98:	5c99      	ldrb	r1, [r3, r2]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <TransmitDigital+0x60>)
 8001a9c:	22bf      	movs	r2, #191	@ 0xbf
 8001a9e:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[4] = BrakeModule.BSPDLatch;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <TransmitDigital+0x60>)
 8001aa2:	2226      	movs	r2, #38	@ 0x26
 8001aa4:	5c99      	ldrb	r1, [r3, r2]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <TransmitDigital+0x60>)
 8001aa8:	22c0      	movs	r2, #192	@ 0xc0
 8001aaa:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[5] = BrakeModule.GL_InOK;
 8001aac:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <TransmitDigital+0x60>)
 8001aae:	2229      	movs	r2, #41	@ 0x29
 8001ab0:	5c99      	ldrb	r1, [r3, r2]
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <TransmitDigital+0x60>)
 8001ab4:	22c1      	movs	r2, #193	@ 0xc1
 8001ab6:	5499      	strb	r1, [r3, r2]

	// Adjust to “HAL_FDCAN_AddMessageToTxFifoQ” to match TS25_Temp_Module FDCAN function
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &BrakeModule.canDigital.TxHeader, BrakeModule.canDigital.TxData);
 8001ab8:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <TransmitDigital+0x64>)
 8001aba:	4906      	ldr	r1, [pc, #24]	@ (8001ad4 <TransmitDigital+0x68>)
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <TransmitDigital+0x6c>)
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f001 fbde 	bl	8003280 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	200001ec 	.word	0x200001ec
 8001ad0:	200002a8 	.word	0x200002a8
 8001ad4:	20000284 	.word	0x20000284
 8001ad8:	2000030c 	.word	0x2000030c

08001adc <UpdateDigital>:

void UpdateDigital()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	if (BrakeModule.LowPressureRaw >= 3300) {
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b98 <UpdateDigital+0xbc>)
 8001ae2:	8b9b      	ldrh	r3, [r3, #28]
 8001ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8001b9c <UpdateDigital+0xc0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d904      	bls.n	8001af4 <UpdateDigital+0x18>
		BrakeModule.LowPressure = 1;
 8001aea:	4b2b      	ldr	r3, [pc, #172]	@ (8001b98 <UpdateDigital+0xbc>)
 8001aec:	2224      	movs	r2, #36	@ 0x24
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]
 8001af2:	e003      	b.n	8001afc <UpdateDigital+0x20>
	} else {
		BrakeModule.LowPressure = 0;
 8001af4:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <UpdateDigital+0xbc>)
 8001af6:	2224      	movs	r2, #36	@ 0x24
 8001af8:	2100      	movs	r1, #0
 8001afa:	5499      	strb	r1, [r3, r2]
	}
	if (BrakeModule.HighPressureRaw >= 3300) {
 8001afc:	4b26      	ldr	r3, [pc, #152]	@ (8001b98 <UpdateDigital+0xbc>)
 8001afe:	8bdb      	ldrh	r3, [r3, #30]
 8001b00:	4a26      	ldr	r2, [pc, #152]	@ (8001b9c <UpdateDigital+0xc0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d904      	bls.n	8001b10 <UpdateDigital+0x34>
		BrakeModule.LowPressure = 1;
 8001b06:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b08:	2224      	movs	r2, #36	@ 0x24
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	5499      	strb	r1, [r3, r2]
 8001b0e:	e003      	b.n	8001b18 <UpdateDigital+0x3c>
	} else {
		BrakeModule.LowPressure = 0;
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b12:	2224      	movs	r2, #36	@ 0x24
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]
	}
	if (BrakeModule.BSPDLatchRaw >= 3300) {
 8001b18:	4b1f      	ldr	r3, [pc, #124]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b1a:	8c1b      	ldrh	r3, [r3, #32]
 8001b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <UpdateDigital+0xc0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d904      	bls.n	8001b2c <UpdateDigital+0x50>
		BrakeModule.BSPDLatch = 1;
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b24:	2226      	movs	r2, #38	@ 0x26
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]
 8001b2a:	e003      	b.n	8001b34 <UpdateDigital+0x58>
	} else {
		BrakeModule.BSPDLatch = 0;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b2e:	2226      	movs	r2, #38	@ 0x26
 8001b30:	2100      	movs	r1, #0
 8001b32:	5499      	strb	r1, [r3, r2]
	}
	if (BrakeModule.GL_InOKRaw >= 3300) {
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b36:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001b38:	4a18      	ldr	r2, [pc, #96]	@ (8001b9c <UpdateDigital+0xc0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d904      	bls.n	8001b48 <UpdateDigital+0x6c>
		BrakeModule.GL_InOK = 1;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b40:	2229      	movs	r2, #41	@ 0x29
 8001b42:	2101      	movs	r1, #1
 8001b44:	5499      	strb	r1, [r3, r2]
 8001b46:	e003      	b.n	8001b50 <UpdateDigital+0x74>
	} else {
		BrakeModule.GL_InOK = 0;
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b4a:	2229      	movs	r2, #41	@ 0x29
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	5499      	strb	r1, [r3, r2]
	}

	// FiveKW and BSPD_OK
	BrakeModule.FiveKW = HAL_GPIO_ReadPin(BrakeModule.FiveKWInPort, BrakeModule.FiveKWInPin);
 8001b50:	4a11      	ldr	r2, [pc, #68]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b52:	2386      	movs	r3, #134	@ 0x86
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	58d0      	ldr	r0, [r2, r3]
 8001b58:	4a0f      	ldr	r2, [pc, #60]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b5a:	2388      	movs	r3, #136	@ 0x88
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	5ad3      	ldrh	r3, [r2, r3]
 8001b60:	0019      	movs	r1, r3
 8001b62:	f001 fe27 	bl	80037b4 <HAL_GPIO_ReadPin>
 8001b66:	0003      	movs	r3, r0
 8001b68:	0019      	movs	r1, r3
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b6c:	2228      	movs	r2, #40	@ 0x28
 8001b6e:	5499      	strb	r1, [r3, r2]
	BrakeModule.BSPD_OK = HAL_GPIO_ReadPin(BrakeModule.BSPD_OK_InPort, BrakeModule.BSPD_OK_InPin);
 8001b70:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b72:	2382      	movs	r3, #130	@ 0x82
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	58d0      	ldr	r0, [r2, r3]
 8001b78:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b7a:	2384      	movs	r3, #132	@ 0x84
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	5ad3      	ldrh	r3, [r2, r3]
 8001b80:	0019      	movs	r1, r3
 8001b82:	f001 fe17 	bl	80037b4 <HAL_GPIO_ReadPin>
 8001b86:	0003      	movs	r3, r0
 8001b88:	0019      	movs	r1, r3
 8001b8a:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <UpdateDigital+0xbc>)
 8001b8c:	2227      	movs	r2, #39	@ 0x27
 8001b8e:	5499      	strb	r1, [r3, r2]
}
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	200001ec 	.word	0x200001ec
 8001b9c:	00000ce3 	.word	0x00000ce3

08001ba0 <TransmitDigitalRaw>:

// Save the raw data into CAN
void TransmitDigitalRaw()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	BrakeModule.canDigitalRaw.TxData[0] = (BrakeModule.LowPressureRaw >> 8);
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001ba6:	8b9b      	ldrh	r3, [r3, #28]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b2d9      	uxtb	r1, r3
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bb0:	22f0      	movs	r2, #240	@ 0xf0
 8001bb2:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigitalRaw.TxData[1] = (BrakeModule.LowPressureRaw & 0xFF);
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bb6:	8b9b      	ldrh	r3, [r3, #28]
 8001bb8:	b2d9      	uxtb	r1, r3
 8001bba:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bbc:	22f1      	movs	r2, #241	@ 0xf1
 8001bbe:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigitalRaw.TxData[2] = (BrakeModule.HighPressureRaw >> 8);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bc2:	8bdb      	ldrh	r3, [r3, #30]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	b2d9      	uxtb	r1, r3
 8001bca:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bcc:	22f2      	movs	r2, #242	@ 0xf2
 8001bce:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigitalRaw.TxData[3] = (BrakeModule.HighPressureRaw & 0xFF);
 8001bd0:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bd2:	8bdb      	ldrh	r3, [r3, #30]
 8001bd4:	b2d9      	uxtb	r1, r3
 8001bd6:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bd8:	22f3      	movs	r2, #243	@ 0xf3
 8001bda:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigitalRaw.TxData[4] = (BrakeModule.BSPDLatchRaw >> 8);
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bde:	8c1b      	ldrh	r3, [r3, #32]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b2d9      	uxtb	r1, r3
 8001be6:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001be8:	22f4      	movs	r2, #244	@ 0xf4
 8001bea:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigitalRaw.TxData[5] = (BrakeModule.BSPDLatchRaw & 0xFF);
 8001bec:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bee:	8c1b      	ldrh	r3, [r3, #32]
 8001bf0:	b2d9      	uxtb	r1, r3
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bf4:	22f5      	movs	r2, #245	@ 0xf5
 8001bf6:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigitalRaw.TxData[6] = (BrakeModule.GL_InOKRaw >> 8);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001bfa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b2d9      	uxtb	r1, r3
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001c04:	22f6      	movs	r2, #246	@ 0xf6
 8001c06:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigitalRaw.TxData[7] = (BrakeModule.GL_InOKRaw & 0xFF);
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001c0a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c0c:	b2d9      	uxtb	r1, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <TransmitDigitalRaw+0x88>)
 8001c10:	22f7      	movs	r2, #247	@ 0xf7
 8001c12:	5499      	strb	r1, [r3, r2]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &BrakeModule.canDigitalRaw.TxHeader, BrakeModule.canAnalogue.TxData);
 8001c14:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <TransmitDigitalRaw+0x8c>)
 8001c16:	4906      	ldr	r1, [pc, #24]	@ (8001c30 <TransmitDigitalRaw+0x90>)
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <TransmitDigitalRaw+0x94>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f001 fb30 	bl	8003280 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	200001ec 	.word	0x200001ec
 8001c2c:	20000274 	.word	0x20000274
 8001c30:	200002b8 	.word	0x200002b8
 8001c34:	2000030c 	.word	0x2000030c

08001c38 <UpdateDigitalRaw>:

// get data from real life
void UpdateDigitalRaw()
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
	//???
	uint8_t test[2] = { 0xAA, 0xAA};
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	4a5c      	ldr	r2, [pc, #368]	@ (8001db4 <UpdateDigitalRaw+0x17c>)
 8001c42:	801a      	strh	r2, [r3, #0]
	uint8_t testRX[2] = { 0, 0 };
 8001c44:	003b      	movs	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	801a      	strh	r2, [r3, #0]

	// Low Pressure
	writeSingleRegister(&BrakeModule.Brake_ADC1, CHANNEL_SEL_ADDRESS, 0);
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001db8 <UpdateDigitalRaw+0x180>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2111      	movs	r1, #17
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fbbf 	bl	80013d4 <writeSingleRegister>
	spiSendReceiveArray(&BrakeModule.Brake_ADC1, test, testRX, 2);
 8001c56:	003a      	movs	r2, r7
 8001c58:	1d39      	adds	r1, r7, #4
 8001c5a:	4857      	ldr	r0, [pc, #348]	@ (8001db8 <UpdateDigitalRaw+0x180>)
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f7ff fa8b 	bl	8001178 <spiSendReceiveArray>
	BrakeModule.LowPressureRaw = (int)(DIGITAL_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8001c62:	003b      	movs	r3, r7
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	003a      	movs	r2, r7
 8001c6a:	7852      	ldrb	r2, [r2, #1]
 8001c6c:	189b      	adds	r3, r3, r2
 8001c6e:	111b      	asrs	r3, r3, #4
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff f937 	bl	8000ee4 <__aeabi_i2d>
 8001c76:	2200      	movs	r2, #0
 8001c78:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <UpdateDigitalRaw+0x184>)
 8001c7a:	f7fe faf9 	bl	8000270 <__aeabi_ddiv>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	000b      	movs	r3, r1
 8001c82:	0010      	movs	r0, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	2200      	movs	r2, #0
 8001c88:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc0 <UpdateDigitalRaw+0x188>)
 8001c8a:	f7fe fe09 	bl	80008a0 <__aeabi_dmul>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	000b      	movs	r3, r1
 8001c92:	0010      	movs	r0, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	f7ff f8e9 	bl	8000e6c <__aeabi_d2iz>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b49      	ldr	r3, [pc, #292]	@ (8001dc4 <UpdateDigitalRaw+0x18c>)
 8001ca0:	839a      	strh	r2, [r3, #28]

	// High Pressure
	writeSingleRegister(&BrakeModule.Brake_ADC1, CHANNEL_SEL_ADDRESS, 1);
 8001ca2:	4b45      	ldr	r3, [pc, #276]	@ (8001db8 <UpdateDigitalRaw+0x180>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2111      	movs	r1, #17
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff fb93 	bl	80013d4 <writeSingleRegister>
	spiSendReceiveArray(&BrakeModule.Brake_ADC1, test, testRX, 2);
 8001cae:	003a      	movs	r2, r7
 8001cb0:	1d39      	adds	r1, r7, #4
 8001cb2:	4841      	ldr	r0, [pc, #260]	@ (8001db8 <UpdateDigitalRaw+0x180>)
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f7ff fa5f 	bl	8001178 <spiSendReceiveArray>
	BrakeModule.HighPressureRaw = (int)(DIGITAL_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8001cba:	003b      	movs	r3, r7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	003a      	movs	r2, r7
 8001cc2:	7852      	ldrb	r2, [r2, #1]
 8001cc4:	189b      	adds	r3, r3, r2
 8001cc6:	111b      	asrs	r3, r3, #4
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7ff f90b 	bl	8000ee4 <__aeabi_i2d>
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <UpdateDigitalRaw+0x184>)
 8001cd2:	f7fe facd 	bl	8000270 <__aeabi_ddiv>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	000b      	movs	r3, r1
 8001cda:	0010      	movs	r0, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4b37      	ldr	r3, [pc, #220]	@ (8001dc0 <UpdateDigitalRaw+0x188>)
 8001ce2:	f7fe fddd 	bl	80008a0 <__aeabi_dmul>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	000b      	movs	r3, r1
 8001cea:	0010      	movs	r0, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	f7ff f8bd 	bl	8000e6c <__aeabi_d2iz>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b33      	ldr	r3, [pc, #204]	@ (8001dc4 <UpdateDigitalRaw+0x18c>)
 8001cf8:	83da      	strh	r2, [r3, #30]

	// BSPDLatch
	writeSingleRegister(&BrakeModule.Brake_ADC1, CHANNEL_SEL_ADDRESS, 6);
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001db8 <UpdateDigitalRaw+0x180>)
 8001cfc:	2206      	movs	r2, #6
 8001cfe:	2111      	movs	r1, #17
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff fb67 	bl	80013d4 <writeSingleRegister>
	spiSendReceiveArray(&BrakeModule.Brake_ADC1, test, testRX, 2);
 8001d06:	003a      	movs	r2, r7
 8001d08:	1d39      	adds	r1, r7, #4
 8001d0a:	482b      	ldr	r0, [pc, #172]	@ (8001db8 <UpdateDigitalRaw+0x180>)
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f7ff fa33 	bl	8001178 <spiSendReceiveArray>
	BrakeModule.BSPDLatchRaw = (int)(DIGITAL_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8001d12:	003b      	movs	r3, r7
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	003a      	movs	r2, r7
 8001d1a:	7852      	ldrb	r2, [r2, #1]
 8001d1c:	189b      	adds	r3, r3, r2
 8001d1e:	111b      	asrs	r3, r3, #4
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff f8df 	bl	8000ee4 <__aeabi_i2d>
 8001d26:	2200      	movs	r2, #0
 8001d28:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <UpdateDigitalRaw+0x184>)
 8001d2a:	f7fe faa1 	bl	8000270 <__aeabi_ddiv>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	000b      	movs	r3, r1
 8001d32:	0010      	movs	r0, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	2200      	movs	r2, #0
 8001d38:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <UpdateDigitalRaw+0x188>)
 8001d3a:	f7fe fdb1 	bl	80008a0 <__aeabi_dmul>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	000b      	movs	r3, r1
 8001d42:	0010      	movs	r0, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	f7ff f891 	bl	8000e6c <__aeabi_d2iz>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <UpdateDigitalRaw+0x18c>)
 8001d50:	841a      	strh	r2, [r3, #32]

	// GL_InOK
	writeSingleRegister(&BrakeModule.Brake_ADC1, CHANNEL_SEL_ADDRESS, 7);
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <UpdateDigitalRaw+0x180>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	2111      	movs	r1, #17
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff fb3b 	bl	80013d4 <writeSingleRegister>
	spiSendReceiveArray(&BrakeModule.Brake_ADC1, test, testRX, 2);
 8001d5e:	003a      	movs	r2, r7
 8001d60:	1d39      	adds	r1, r7, #4
 8001d62:	4815      	ldr	r0, [pc, #84]	@ (8001db8 <UpdateDigitalRaw+0x180>)
 8001d64:	2302      	movs	r3, #2
 8001d66:	f7ff fa07 	bl	8001178 <spiSendReceiveArray>
	BrakeModule.GL_InOKRaw = (int)(DIGITAL_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8001d6a:	003b      	movs	r3, r7
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	003a      	movs	r2, r7
 8001d72:	7852      	ldrb	r2, [r2, #1]
 8001d74:	189b      	adds	r3, r3, r2
 8001d76:	111b      	asrs	r3, r3, #4
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff f8b3 	bl	8000ee4 <__aeabi_i2d>
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <UpdateDigitalRaw+0x184>)
 8001d82:	f7fe fa75 	bl	8000270 <__aeabi_ddiv>
 8001d86:	0002      	movs	r2, r0
 8001d88:	000b      	movs	r3, r1
 8001d8a:	0010      	movs	r0, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <UpdateDigitalRaw+0x188>)
 8001d92:	f7fe fd85 	bl	80008a0 <__aeabi_dmul>
 8001d96:	0002      	movs	r2, r0
 8001d98:	000b      	movs	r3, r1
 8001d9a:	0010      	movs	r0, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	f7ff f865 	bl	8000e6c <__aeabi_d2iz>
 8001da2:	0003      	movs	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <UpdateDigitalRaw+0x18c>)
 8001da8:	845a      	strh	r2, [r3, #34]	@ 0x22

}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	ffffaaaa 	.word	0xffffaaaa
 8001db8:	20000300 	.word	0x20000300
 8001dbc:	40b00000 	.word	0x40b00000
 8001dc0:	40b38800 	.word	0x40b38800
 8001dc4:	200001ec 	.word	0x200001ec

08001dc8 <TransmitAnalogue>:

void TransmitAnalogue()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	BrakeModule.canAnalogue.TxData[0] = (BrakeModule.Brake1_RawInt >> 8);
 8001dcc:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001dce:	8a9b      	ldrh	r3, [r3, #20]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	b2d9      	uxtb	r1, r3
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001dd8:	2288      	movs	r2, #136	@ 0x88
 8001dda:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[1] = (BrakeModule.Brake1_RawInt & 0xFF);
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001dde:	8a9b      	ldrh	r3, [r3, #20]
 8001de0:	b2d9      	uxtb	r1, r3
 8001de2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001de4:	2289      	movs	r2, #137	@ 0x89
 8001de6:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[2] = (BrakeModule.Brake2_RawInt >> 8);
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001dea:	8adb      	ldrh	r3, [r3, #22]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	b2d9      	uxtb	r1, r3
 8001df2:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001df4:	228a      	movs	r2, #138	@ 0x8a
 8001df6:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[3] = (BrakeModule.Brake2_RawInt & 0xFF);
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001dfa:	8adb      	ldrh	r3, [r3, #22]
 8001dfc:	b2d9      	uxtb	r1, r3
 8001dfe:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001e00:	228b      	movs	r2, #139	@ 0x8b
 8001e02:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[4] = (BrakeModule.LowRefInt >> 8);
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001e06:	8b1b      	ldrh	r3, [r3, #24]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001e10:	228c      	movs	r2, #140	@ 0x8c
 8001e12:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[5] = (BrakeModule.LowRefInt & 0xFF);
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001e16:	8b1b      	ldrh	r3, [r3, #24]
 8001e18:	b2d9      	uxtb	r1, r3
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001e1c:	228d      	movs	r2, #141	@ 0x8d
 8001e1e:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[6] = (BrakeModule.HighRef1Int >> 8);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001e22:	8b5b      	ldrh	r3, [r3, #26]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	b2d9      	uxtb	r1, r3
 8001e2a:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001e2c:	228e      	movs	r2, #142	@ 0x8e
 8001e2e:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[7] = (BrakeModule.HighRef1Int & 0xFF);
 8001e30:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001e32:	8b5b      	ldrh	r3, [r3, #26]
 8001e34:	b2d9      	uxtb	r1, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <TransmitAnalogue+0x88>)
 8001e38:	228f      	movs	r2, #143	@ 0x8f
 8001e3a:	5499      	strb	r1, [r3, r2]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &BrakeModule.canAnalogue.TxHeader, BrakeModule.canAnalogue.TxData);
 8001e3c:	4a05      	ldr	r2, [pc, #20]	@ (8001e54 <TransmitAnalogue+0x8c>)
 8001e3e:	4906      	ldr	r1, [pc, #24]	@ (8001e58 <TransmitAnalogue+0x90>)
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <TransmitAnalogue+0x94>)
 8001e42:	0018      	movs	r0, r3
 8001e44:	f001 fa1c 	bl	8003280 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001e48:	46c0      	nop			@ (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	200001ec 	.word	0x200001ec
 8001e54:	20000274 	.word	0x20000274
 8001e58:	20000250 	.word	0x20000250
 8001e5c:	2000030c 	.word	0x2000030c

08001e60 <UpdateAnalogue>:

void UpdateAnalogue() //analogue raw readings kinda whack
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
	//???
	uint8_t test[2] = { 0xAA, 0xAA};
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4a6c      	ldr	r2, [pc, #432]	@ (800201c <UpdateAnalogue+0x1bc>)
 8001e6a:	801a      	strh	r2, [r3, #0]
	uint8_t testRX[2] = { 0, 0 };
 8001e6c:	003b      	movs	r3, r7
 8001e6e:	2200      	movs	r2, #0
 8001e70:	801a      	strh	r2, [r3, #0]

	//read brake1 input
	writeSingleRegister(&BrakeModule.Brake_ADC1, CHANNEL_SEL_ADDRESS, 3);
 8001e72:	4b6b      	ldr	r3, [pc, #428]	@ (8002020 <UpdateAnalogue+0x1c0>)
 8001e74:	2203      	movs	r2, #3
 8001e76:	2111      	movs	r1, #17
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7ff faab 	bl	80013d4 <writeSingleRegister>
	spiSendReceiveArray(&BrakeModule.Brake_ADC1, test, testRX, 2);
 8001e7e:	003a      	movs	r2, r7
 8001e80:	1d39      	adds	r1, r7, #4
 8001e82:	4867      	ldr	r0, [pc, #412]	@ (8002020 <UpdateAnalogue+0x1c0>)
 8001e84:	2302      	movs	r3, #2
 8001e86:	f7ff f977 	bl	8001178 <spiSendReceiveArray>
	BrakeModule.Brake1_Raw = (BRAKE1_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8001e8a:	003b      	movs	r3, r7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	003a      	movs	r2, r7
 8001e92:	7852      	ldrb	r2, [r2, #1]
 8001e94:	189b      	adds	r3, r3, r2
 8001e96:	111b      	asrs	r3, r3, #4
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff f823 	bl	8000ee4 <__aeabi_i2d>
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4b60      	ldr	r3, [pc, #384]	@ (8002024 <UpdateAnalogue+0x1c4>)
 8001ea2:	f7fe f9e5 	bl	8000270 <__aeabi_ddiv>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	000b      	movs	r3, r1
 8001eaa:	0010      	movs	r0, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	2200      	movs	r2, #0
 8001eb0:	4b5d      	ldr	r3, [pc, #372]	@ (8002028 <UpdateAnalogue+0x1c8>)
 8001eb2:	f7fe fcf5 	bl	80008a0 <__aeabi_dmul>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	000b      	movs	r3, r1
 8001eba:	0010      	movs	r0, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	f7ff f83f 	bl	8000f40 <__aeabi_d2f>
 8001ec2:	1c02      	adds	r2, r0, #0
 8001ec4:	4b59      	ldr	r3, [pc, #356]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001ec6:	605a      	str	r2, [r3, #4]
	//BrakeModule.Brake1_Raw = BrakeModule.Brake1_Raw / (11.67 / (1 - (DEADZONE * 0.01)));
	BrakeModule.Brake1_RawInt = (int)BrakeModule.Brake1_Raw;// * 1000;
 8001ec8:	4b58      	ldr	r3, [pc, #352]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	1c18      	adds	r0, r3, #0
 8001ece:	f7fe f9af 	bl	8000230 <__aeabi_f2iz>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	4b55      	ldr	r3, [pc, #340]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001ed8:	829a      	strh	r2, [r3, #20]


	//read brake2 input
	writeSingleRegister(&BrakeModule.Brake_ADC1, CHANNEL_SEL_ADDRESS, 2);
 8001eda:	4b51      	ldr	r3, [pc, #324]	@ (8002020 <UpdateAnalogue+0x1c0>)
 8001edc:	2202      	movs	r2, #2
 8001ede:	2111      	movs	r1, #17
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fa77 	bl	80013d4 <writeSingleRegister>
	spiSendReceiveArray(&BrakeModule.Brake_ADC1, test, testRX, 2);
 8001ee6:	003a      	movs	r2, r7
 8001ee8:	1d39      	adds	r1, r7, #4
 8001eea:	484d      	ldr	r0, [pc, #308]	@ (8002020 <UpdateAnalogue+0x1c0>)
 8001eec:	2302      	movs	r3, #2
 8001eee:	f7ff f943 	bl	8001178 <spiSendReceiveArray>
	BrakeModule.Brake2_Raw = (BRAKE2_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8001ef2:	003b      	movs	r3, r7
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	003a      	movs	r2, r7
 8001efa:	7852      	ldrb	r2, [r2, #1]
 8001efc:	189b      	adds	r3, r3, r2
 8001efe:	111b      	asrs	r3, r3, #4
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7fe ffef 	bl	8000ee4 <__aeabi_i2d>
 8001f06:	2200      	movs	r2, #0
 8001f08:	4b46      	ldr	r3, [pc, #280]	@ (8002024 <UpdateAnalogue+0x1c4>)
 8001f0a:	f7fe f9b1 	bl	8000270 <__aeabi_ddiv>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	000b      	movs	r3, r1
 8001f12:	0010      	movs	r0, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	2200      	movs	r2, #0
 8001f18:	4b43      	ldr	r3, [pc, #268]	@ (8002028 <UpdateAnalogue+0x1c8>)
 8001f1a:	f7fe fcc1 	bl	80008a0 <__aeabi_dmul>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	000b      	movs	r3, r1
 8001f22:	0010      	movs	r0, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	f7ff f80b 	bl	8000f40 <__aeabi_d2f>
 8001f2a:	1c02      	adds	r2, r0, #0
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001f2e:	609a      	str	r2, [r3, #8]
	//BrakeModule.Brake2_Raw = BrakeModule.Brake2_Raw / (11.67 / (1 - (DEADZONE * 0.01)));
	BrakeModule.Brake2_RawInt = (int)BrakeModule.Brake2_Raw;
 8001f30:	4b3e      	ldr	r3, [pc, #248]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	1c18      	adds	r0, r3, #0
 8001f36:	f7fe f97b 	bl	8000230 <__aeabi_f2iz>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001f40:	82da      	strh	r2, [r3, #22]

	//read lowref input
	writeSingleRegister(&BrakeModule.Brake_ADC1, CHANNEL_SEL_ADDRESS, 4);
 8001f42:	4b37      	ldr	r3, [pc, #220]	@ (8002020 <UpdateAnalogue+0x1c0>)
 8001f44:	2204      	movs	r2, #4
 8001f46:	2111      	movs	r1, #17
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7ff fa43 	bl	80013d4 <writeSingleRegister>
	spiSendReceiveArray(&BrakeModule.Brake_ADC1, test, testRX, 2);
 8001f4e:	003a      	movs	r2, r7
 8001f50:	1d39      	adds	r1, r7, #4
 8001f52:	4833      	ldr	r0, [pc, #204]	@ (8002020 <UpdateAnalogue+0x1c0>)
 8001f54:	2302      	movs	r3, #2
 8001f56:	f7ff f90f 	bl	8001178 <spiSendReceiveArray>
	BrakeModule.LowRef = (LOWREF_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8001f5a:	003b      	movs	r3, r7
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	003a      	movs	r2, r7
 8001f62:	7852      	ldrb	r2, [r2, #1]
 8001f64:	189b      	adds	r3, r3, r2
 8001f66:	111b      	asrs	r3, r3, #4
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7fe ffbb 	bl	8000ee4 <__aeabi_i2d>
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <UpdateAnalogue+0x1c4>)
 8001f72:	f7fe f97d 	bl	8000270 <__aeabi_ddiv>
 8001f76:	0002      	movs	r2, r0
 8001f78:	000b      	movs	r3, r1
 8001f7a:	0010      	movs	r0, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4b29      	ldr	r3, [pc, #164]	@ (8002028 <UpdateAnalogue+0x1c8>)
 8001f82:	f7fe fc8d 	bl	80008a0 <__aeabi_dmul>
 8001f86:	0002      	movs	r2, r0
 8001f88:	000b      	movs	r3, r1
 8001f8a:	0010      	movs	r0, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	f7fe ffd7 	bl	8000f40 <__aeabi_d2f>
 8001f92:	1c02      	adds	r2, r0, #0
 8001f94:	4b25      	ldr	r3, [pc, #148]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001f96:	60da      	str	r2, [r3, #12]
	//BrakeModule.LowRefInt = ((int)BrakeModule.LowRef * 1000);
	//BrakeModule.LowRef = BrakeModule.LowRef * (1000);
	BrakeModule.LowRefInt = (int)BrakeModule.LowRef; //placeholder
 8001f98:	4b24      	ldr	r3, [pc, #144]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	1c18      	adds	r0, r3, #0
 8001f9e:	f7fe f947 	bl	8000230 <__aeabi_f2iz>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4b21      	ldr	r3, [pc, #132]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001fa8:	831a      	strh	r2, [r3, #24]

	//read highref input
	writeSingleRegister(&BrakeModule.Brake_ADC1, CHANNEL_SEL_ADDRESS, 5);
 8001faa:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <UpdateAnalogue+0x1c0>)
 8001fac:	2205      	movs	r2, #5
 8001fae:	2111      	movs	r1, #17
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff fa0f 	bl	80013d4 <writeSingleRegister>
	spiSendReceiveArray(&BrakeModule.Brake_ADC1, test, testRX, 2);
 8001fb6:	003a      	movs	r2, r7
 8001fb8:	1d39      	adds	r1, r7, #4
 8001fba:	4819      	ldr	r0, [pc, #100]	@ (8002020 <UpdateAnalogue+0x1c0>)
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f7ff f8db 	bl	8001178 <spiSendReceiveArray>
	BrakeModule.HighRef1 = (HIGHREF_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8001fc2:	003b      	movs	r3, r7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	003a      	movs	r2, r7
 8001fca:	7852      	ldrb	r2, [r2, #1]
 8001fcc:	189b      	adds	r3, r3, r2
 8001fce:	111b      	asrs	r3, r3, #4
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7fe ff87 	bl	8000ee4 <__aeabi_i2d>
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <UpdateAnalogue+0x1c4>)
 8001fda:	f7fe f949 	bl	8000270 <__aeabi_ddiv>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	000b      	movs	r3, r1
 8001fe2:	0010      	movs	r0, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <UpdateAnalogue+0x1c8>)
 8001fea:	f7fe fc59 	bl	80008a0 <__aeabi_dmul>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	000b      	movs	r3, r1
 8001ff2:	0010      	movs	r0, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	f7fe ffa3 	bl	8000f40 <__aeabi_d2f>
 8001ffa:	1c02      	adds	r2, r0, #0
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <UpdateAnalogue+0x1cc>)
 8001ffe:	611a      	str	r2, [r3, #16]
	//BrakeModule.HighRef1Int = ((int)BrakeModule.HighRef1 * 1000);
	//BrakeModule.HighRef1 = BrakeModule.HighRef1 * (1000);
	BrakeModule.HighRef1Int = (int)BrakeModule.HighRef1; //placeholder
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <UpdateAnalogue+0x1cc>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	1c18      	adds	r0, r3, #0
 8002006:	f7fe f913 	bl	8000230 <__aeabi_f2iz>
 800200a:	0003      	movs	r3, r0
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <UpdateAnalogue+0x1cc>)
 8002010:	835a      	strh	r2, [r3, #26]
}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b002      	add	sp, #8
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	ffffaaaa 	.word	0xffffaaaa
 8002020:	20000300 	.word	0x20000300
 8002024:	40b00000 	.word	0x40b00000
 8002028:	40b38800 	.word	0x40b38800
 800202c:	200001ec 	.word	0x200001ec

08002030 <canFramesDefine>:

void canFramesDefine()
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	//HeartBeat
	BrakeModule.canHeartBeat.canPeripheral = &hfdcan2;
 8002034:	4b53      	ldr	r3, [pc, #332]	@ (8002184 <canFramesDefine+0x154>)
 8002036:	4a54      	ldr	r2, [pc, #336]	@ (8002188 <canFramesDefine+0x158>)
 8002038:	62da      	str	r2, [r3, #44]	@ 0x2c
	BrakeModule.canHeartBeat.TxHeader.IdType = FDCAN_STANDARD_ID;
 800203a:	4b52      	ldr	r3, [pc, #328]	@ (8002184 <canFramesDefine+0x154>)
 800203c:	2200      	movs	r2, #0
 800203e:	635a      	str	r2, [r3, #52]	@ 0x34
	BrakeModule.canHeartBeat.TxHeader.Identifier = 0x150;
 8002040:	4b50      	ldr	r3, [pc, #320]	@ (8002184 <canFramesDefine+0x154>)
 8002042:	22a8      	movs	r2, #168	@ 0xa8
 8002044:	0052      	lsls	r2, r2, #1
 8002046:	631a      	str	r2, [r3, #48]	@ 0x30
	BrakeModule.canHeartBeat.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002048:	4b4e      	ldr	r3, [pc, #312]	@ (8002184 <canFramesDefine+0x154>)
 800204a:	2200      	movs	r2, #0
 800204c:	639a      	str	r2, [r3, #56]	@ 0x38
	BrakeModule.canHeartBeat.TxHeader.DataLength = 0x02;
 800204e:	4b4d      	ldr	r3, [pc, #308]	@ (8002184 <canFramesDefine+0x154>)
 8002050:	2202      	movs	r2, #2
 8002052:	63da      	str	r2, [r3, #60]	@ 0x3c
	BrakeModule.canHeartBeat.TxData[0] = 0;
 8002054:	4b4b      	ldr	r3, [pc, #300]	@ (8002184 <canFramesDefine+0x154>)
 8002056:	2254      	movs	r2, #84	@ 0x54
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]
	BrakeModule.canHeartBeat.TxData[1] = 0;
 800205c:	4b49      	ldr	r3, [pc, #292]	@ (8002184 <canFramesDefine+0x154>)
 800205e:	2255      	movs	r2, #85	@ 0x55
 8002060:	2100      	movs	r1, #0
 8002062:	5499      	strb	r1, [r3, r2]

	//Digital
	BrakeModule.canDigital.canPeripheral = &hfdcan2;
 8002064:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <canFramesDefine+0x154>)
 8002066:	2194      	movs	r1, #148	@ 0x94
 8002068:	4a47      	ldr	r2, [pc, #284]	@ (8002188 <canFramesDefine+0x158>)
 800206a:	505a      	str	r2, [r3, r1]
	BrakeModule.canDigital.TxHeader.IdType = FDCAN_STANDARD_ID;
 800206c:	4b45      	ldr	r3, [pc, #276]	@ (8002184 <canFramesDefine+0x154>)
 800206e:	229c      	movs	r2, #156	@ 0x9c
 8002070:	2100      	movs	r1, #0
 8002072:	5099      	str	r1, [r3, r2]
	BrakeModule.canDigital.TxHeader.Identifier = 0x152;
 8002074:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <canFramesDefine+0x154>)
 8002076:	2198      	movs	r1, #152	@ 0x98
 8002078:	22a9      	movs	r2, #169	@ 0xa9
 800207a:	0052      	lsls	r2, r2, #1
 800207c:	505a      	str	r2, [r3, r1]
	BrakeModule.canDigital.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800207e:	4b41      	ldr	r3, [pc, #260]	@ (8002184 <canFramesDefine+0x154>)
 8002080:	22a0      	movs	r2, #160	@ 0xa0
 8002082:	2100      	movs	r1, #0
 8002084:	5099      	str	r1, [r3, r2]
	BrakeModule.canDigital.TxHeader.DataLength = 0x06;
 8002086:	4b3f      	ldr	r3, [pc, #252]	@ (8002184 <canFramesDefine+0x154>)
 8002088:	22a4      	movs	r2, #164	@ 0xa4
 800208a:	2106      	movs	r1, #6
 800208c:	5099      	str	r1, [r3, r2]
	BrakeModule.canDigital.TxData[0] = 0;
 800208e:	4b3d      	ldr	r3, [pc, #244]	@ (8002184 <canFramesDefine+0x154>)
 8002090:	22bc      	movs	r2, #188	@ 0xbc
 8002092:	2100      	movs	r1, #0
 8002094:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[1] = 0;
 8002096:	4b3b      	ldr	r3, [pc, #236]	@ (8002184 <canFramesDefine+0x154>)
 8002098:	22bd      	movs	r2, #189	@ 0xbd
 800209a:	2100      	movs	r1, #0
 800209c:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[2] = 0;
 800209e:	4b39      	ldr	r3, [pc, #228]	@ (8002184 <canFramesDefine+0x154>)
 80020a0:	22be      	movs	r2, #190	@ 0xbe
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[3] = 0;
 80020a6:	4b37      	ldr	r3, [pc, #220]	@ (8002184 <canFramesDefine+0x154>)
 80020a8:	22bf      	movs	r2, #191	@ 0xbf
 80020aa:	2100      	movs	r1, #0
 80020ac:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[4] = 0;
 80020ae:	4b35      	ldr	r3, [pc, #212]	@ (8002184 <canFramesDefine+0x154>)
 80020b0:	22c0      	movs	r2, #192	@ 0xc0
 80020b2:	2100      	movs	r1, #0
 80020b4:	5499      	strb	r1, [r3, r2]
	BrakeModule.canDigital.TxData[5] = 0;
 80020b6:	4b33      	ldr	r3, [pc, #204]	@ (8002184 <canFramesDefine+0x154>)
 80020b8:	22c1      	movs	r2, #193	@ 0xc1
 80020ba:	2100      	movs	r1, #0
 80020bc:	5499      	strb	r1, [r3, r2]

	//Digital RAW
	BrakeModule.canAnalogue.canPeripheral = &hfdcan2;
 80020be:	4b31      	ldr	r3, [pc, #196]	@ (8002184 <canFramesDefine+0x154>)
 80020c0:	4a31      	ldr	r2, [pc, #196]	@ (8002188 <canFramesDefine+0x158>)
 80020c2:	661a      	str	r2, [r3, #96]	@ 0x60
	BrakeModule.canAnalogue.TxHeader.IdType = FDCAN_STANDARD_ID;
 80020c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002184 <canFramesDefine+0x154>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	669a      	str	r2, [r3, #104]	@ 0x68
	BrakeModule.canAnalogue.TxHeader.Identifier = 0x153;
 80020ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002184 <canFramesDefine+0x154>)
 80020cc:	2254      	movs	r2, #84	@ 0x54
 80020ce:	32ff      	adds	r2, #255	@ 0xff
 80020d0:	665a      	str	r2, [r3, #100]	@ 0x64
	BrakeModule.canAnalogue.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80020d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002184 <canFramesDefine+0x154>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	66da      	str	r2, [r3, #108]	@ 0x6c
	BrakeModule.canAnalogue.TxHeader.DataLength = 0x08;
 80020d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <canFramesDefine+0x154>)
 80020da:	2208      	movs	r2, #8
 80020dc:	671a      	str	r2, [r3, #112]	@ 0x70
	BrakeModule.canAnalogue.TxData[0] = 0;
 80020de:	4b29      	ldr	r3, [pc, #164]	@ (8002184 <canFramesDefine+0x154>)
 80020e0:	2288      	movs	r2, #136	@ 0x88
 80020e2:	2100      	movs	r1, #0
 80020e4:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[1] = 0;
 80020e6:	4b27      	ldr	r3, [pc, #156]	@ (8002184 <canFramesDefine+0x154>)
 80020e8:	2289      	movs	r2, #137	@ 0x89
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[2] = 0;
 80020ee:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <canFramesDefine+0x154>)
 80020f0:	228a      	movs	r2, #138	@ 0x8a
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[3] = 0;
 80020f6:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <canFramesDefine+0x154>)
 80020f8:	228b      	movs	r2, #139	@ 0x8b
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[4] = 0;
 80020fe:	4b21      	ldr	r3, [pc, #132]	@ (8002184 <canFramesDefine+0x154>)
 8002100:	228c      	movs	r2, #140	@ 0x8c
 8002102:	2100      	movs	r1, #0
 8002104:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[5] = 0;
 8002106:	4b1f      	ldr	r3, [pc, #124]	@ (8002184 <canFramesDefine+0x154>)
 8002108:	228d      	movs	r2, #141	@ 0x8d
 800210a:	2100      	movs	r1, #0
 800210c:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[6] = 0;
 800210e:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <canFramesDefine+0x154>)
 8002110:	228e      	movs	r2, #142	@ 0x8e
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[7] = 0;
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <canFramesDefine+0x154>)
 8002118:	228f      	movs	r2, #143	@ 0x8f
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]

	//Analogue
	BrakeModule.canAnalogue.canPeripheral = &hfdcan2;
 800211e:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <canFramesDefine+0x154>)
 8002120:	4a19      	ldr	r2, [pc, #100]	@ (8002188 <canFramesDefine+0x158>)
 8002122:	661a      	str	r2, [r3, #96]	@ 0x60
	BrakeModule.canAnalogue.TxHeader.IdType = FDCAN_STANDARD_ID;
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <canFramesDefine+0x154>)
 8002126:	2200      	movs	r2, #0
 8002128:	669a      	str	r2, [r3, #104]	@ 0x68
	BrakeModule.canAnalogue.TxHeader.Identifier = 0x154;
 800212a:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <canFramesDefine+0x154>)
 800212c:	22aa      	movs	r2, #170	@ 0xaa
 800212e:	0052      	lsls	r2, r2, #1
 8002130:	665a      	str	r2, [r3, #100]	@ 0x64
	BrakeModule.canAnalogue.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002132:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <canFramesDefine+0x154>)
 8002134:	2200      	movs	r2, #0
 8002136:	66da      	str	r2, [r3, #108]	@ 0x6c
	BrakeModule.canAnalogue.TxHeader.DataLength = 0x08;
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <canFramesDefine+0x154>)
 800213a:	2208      	movs	r2, #8
 800213c:	671a      	str	r2, [r3, #112]	@ 0x70
	BrakeModule.canAnalogue.TxData[0] = 0;
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <canFramesDefine+0x154>)
 8002140:	2288      	movs	r2, #136	@ 0x88
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[1] = 0;
 8002146:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <canFramesDefine+0x154>)
 8002148:	2289      	movs	r2, #137	@ 0x89
 800214a:	2100      	movs	r1, #0
 800214c:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[2] = 0;
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <canFramesDefine+0x154>)
 8002150:	228a      	movs	r2, #138	@ 0x8a
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[3] = 0;
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <canFramesDefine+0x154>)
 8002158:	228b      	movs	r2, #139	@ 0x8b
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[4] = 0;
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <canFramesDefine+0x154>)
 8002160:	228c      	movs	r2, #140	@ 0x8c
 8002162:	2100      	movs	r1, #0
 8002164:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[5] = 0;
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <canFramesDefine+0x154>)
 8002168:	228d      	movs	r2, #141	@ 0x8d
 800216a:	2100      	movs	r1, #0
 800216c:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[6] = 0;
 800216e:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <canFramesDefine+0x154>)
 8002170:	228e      	movs	r2, #142	@ 0x8e
 8002172:	2100      	movs	r1, #0
 8002174:	5499      	strb	r1, [r3, r2]
	BrakeModule.canAnalogue.TxData[7] = 0;
 8002176:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <canFramesDefine+0x154>)
 8002178:	228f      	movs	r2, #143	@ 0x8f
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]
}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200001ec 	.word	0x200001ec
 8002188:	2000030c 	.word	0x2000030c

0800218c <ioAssign>:

void ioAssign()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	//anything else needed here?
	//SPI
	BrakeModule.Brake_ADC1.SPI_Handle = &hspi1;
 8002190:	4a1d      	ldr	r2, [pc, #116]	@ (8002208 <ioAssign+0x7c>)
 8002192:	238a      	movs	r3, #138	@ 0x8a
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	491d      	ldr	r1, [pc, #116]	@ (800220c <ioAssign+0x80>)
 8002198:	50d1      	str	r1, [r2, r3]
	BrakeModule.Brake_ADC1.CS_Port = GPIOA;
 800219a:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <ioAssign+0x7c>)
 800219c:	238c      	movs	r3, #140	@ 0x8c
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	21a0      	movs	r1, #160	@ 0xa0
 80021a2:	05c9      	lsls	r1, r1, #23
 80021a4:	50d1      	str	r1, [r2, r3]
	BrakeModule.Brake_ADC1.CS_Pin = GPIO_PIN_4;
 80021a6:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <ioAssign+0x7c>)
 80021a8:	238e      	movs	r3, #142	@ 0x8e
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2110      	movs	r1, #16
 80021ae:	52d1      	strh	r1, [r2, r3]

	//outputs
	BrakeModule.dbgLedPort = GPIOB;
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <ioAssign+0x7c>)
 80021b2:	22fc      	movs	r2, #252	@ 0xfc
 80021b4:	4916      	ldr	r1, [pc, #88]	@ (8002210 <ioAssign+0x84>)
 80021b6:	5099      	str	r1, [r3, r2]
	BrakeModule.dbgLedPin = GPIO_PIN_5;
 80021b8:	4a13      	ldr	r2, [pc, #76]	@ (8002208 <ioAssign+0x7c>)
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2120      	movs	r1, #32
 80021c0:	52d1      	strh	r1, [r2, r3]
	HAL_GPIO_WritePin(BrakeModule.dbgLedPort, BrakeModule.dbgLedPin, GPIO_PIN_RESET); //LED on (default)
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <ioAssign+0x7c>)
 80021c4:	22fc      	movs	r2, #252	@ 0xfc
 80021c6:	5898      	ldr	r0, [r3, r2]
 80021c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002208 <ioAssign+0x7c>)
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	5ad3      	ldrh	r3, [r2, r3]
 80021d0:	2200      	movs	r2, #0
 80021d2:	0019      	movs	r1, r3
 80021d4:	f001 fb0b 	bl	80037ee <HAL_GPIO_WritePin>

	BrakeModule.GL_InOK_InPort = GPIOA;
	BrakeModule.GL_InOK_InPin = GPIO_PIN_8;
*/

	BrakeModule.BSPD_OK_InPort = GPIOB;
 80021d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002208 <ioAssign+0x7c>)
 80021da:	2382      	movs	r3, #130	@ 0x82
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	490c      	ldr	r1, [pc, #48]	@ (8002210 <ioAssign+0x84>)
 80021e0:	50d1      	str	r1, [r2, r3]
	BrakeModule.BSPD_OK_InPin = GPIO_PIN_2;
 80021e2:	4a09      	ldr	r2, [pc, #36]	@ (8002208 <ioAssign+0x7c>)
 80021e4:	2384      	movs	r3, #132	@ 0x84
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2104      	movs	r1, #4
 80021ea:	52d1      	strh	r1, [r2, r3]

	BrakeModule.FiveKWInPort = GPIOA;
 80021ec:	4a06      	ldr	r2, [pc, #24]	@ (8002208 <ioAssign+0x7c>)
 80021ee:	2386      	movs	r3, #134	@ 0x86
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	21a0      	movs	r1, #160	@ 0xa0
 80021f4:	05c9      	lsls	r1, r1, #23
 80021f6:	50d1      	str	r1, [r2, r3]
	BrakeModule.FiveKWInPin = GPIO_PIN_5;
 80021f8:	4a03      	ldr	r2, [pc, #12]	@ (8002208 <ioAssign+0x7c>)
 80021fa:	2388      	movs	r3, #136	@ 0x88
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2120      	movs	r1, #32
 8002200:	52d1      	strh	r1, [r2, r3]
}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200001ec 	.word	0x200001ec
 800220c:	20000370 	.word	0x20000370
 8002210:	50000400 	.word	0x50000400

08002214 <initialiseADC>:

void initialiseADC()
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8002218:	2032      	movs	r0, #50	@ 0x32
 800221a:	f000 fd8d 	bl	8002d38 <HAL_Delay>

	initADS7028(&BrakeModule.Brake_ADC1);
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <initialiseADC+0x24>)
 8002220:	0018      	movs	r0, r3
 8002222:	f7fe ffdd 	bl	80011e0 <initADS7028>

	HAL_Delay(1000);
 8002226:	23fa      	movs	r3, #250	@ 0xfa
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	0018      	movs	r0, r3
 800222c:	f000 fd84 	bl	8002d38 <HAL_Delay>
}
 8002230:	46c0      	nop			@ (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	20000300 	.word	0x20000300

0800223c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002240:	f000 fcf4 	bl	8002c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002244:	f000 f858 	bl	80022f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_FDCAN_MspInit(&hfdcan2);
 8002248:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <main+0x9c>)
 800224a:	0018      	movs	r0, r3
 800224c:	f000 fa88 	bl	8002760 <HAL_FDCAN_MspInit>
  HAL_SPI_MspInit(&hspi1);
 8002250:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <main+0xa0>)
 8002252:	0018      	movs	r0, r3
 8002254:	f000 fae6 	bl	8002824 <HAL_SPI_MspInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002258:	f000 f9c2 	bl	80025e0 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800225c:	f000 f8b0 	bl	80023c0 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8002260:	f000 f8f6 	bl	8002450 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002264:	f000 f932 	bl	80024cc <MX_TIM2_Init>
  MX_USB_DRD_FS_PCD_Init();
 8002268:	f000 f984 	bl	8002574 <MX_USB_DRD_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  canFramesDefine();
 800226c:	f7ff fee0 	bl	8002030 <canFramesDefine>
  ioAssign();
 8002270:	f7ff ff8c 	bl	800218c <ioAssign>
  initialiseADC();
 8002274:	f7ff ffce 	bl	8002214 <initialiseADC>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //LED on (default)
 8002278:	23a0      	movs	r3, #160	@ 0xa0
 800227a:	05db      	lsls	r3, r3, #23
 800227c:	2200      	movs	r2, #0
 800227e:	2120      	movs	r1, #32
 8002280:	0018      	movs	r0, r3
 8002282:	f001 fab4 	bl	80037ee <HAL_GPIO_WritePin>

  TickerAttach(&Ticker, &TransmitHeartBeat, BRAKE_MODULE_HEARTBEAT_CAN_RATE);
 8002286:	23fa      	movs	r3, #250	@ 0xfa
 8002288:	009a      	lsls	r2, r3, #2
 800228a:	4915      	ldr	r1, [pc, #84]	@ (80022e0 <main+0xa4>)
 800228c:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <main+0xa8>)
 800228e:	0018      	movs	r0, r3
 8002290:	f7fe fef6 	bl	8001080 <TickerAttach>
  TickerAttach(&Ticker, &TransmitDigital, BRAKE_MODULE_DIGITAL_CAN_RATE);
 8002294:	4914      	ldr	r1, [pc, #80]	@ (80022e8 <main+0xac>)
 8002296:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <main+0xa8>)
 8002298:	2232      	movs	r2, #50	@ 0x32
 800229a:	0018      	movs	r0, r3
 800229c:	f7fe fef0 	bl	8001080 <TickerAttach>
  TickerAttach(&Ticker, &TransmitDigitalRaw, BRAKE_MODULE_DIGITAL_CAN_RATE);
 80022a0:	4912      	ldr	r1, [pc, #72]	@ (80022ec <main+0xb0>)
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <main+0xa8>)
 80022a4:	2232      	movs	r2, #50	@ 0x32
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7fe feea 	bl	8001080 <TickerAttach>
  TickerAttach(&Ticker, &TransmitAnalogue, BRAKE_MODULE_ANALOGUE_CAN_RATE);
 80022ac:	4910      	ldr	r1, [pc, #64]	@ (80022f0 <main+0xb4>)
 80022ae:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <main+0xa8>)
 80022b0:	2232      	movs	r2, #50	@ 0x32
 80022b2:	0018      	movs	r0, r3
 80022b4:	f7fe fee4 	bl	8001080 <TickerAttach>

  HAL_FDCAN_Start(&hfdcan2);
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <main+0x9c>)
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 ffba 	bl	8003234 <HAL_FDCAN_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <main+0xb8>)
 80022c2:	0018      	movs	r0, r3
 80022c4:	f004 f9d8 	bl	8006678 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	UpdateDigital();
 80022c8:	f7ff fc08 	bl	8001adc <UpdateDigital>
	UpdateDigitalRaw();
 80022cc:	f7ff fcb4 	bl	8001c38 <UpdateDigitalRaw>
	UpdateAnalogue();
 80022d0:	f7ff fdc6 	bl	8001e60 <UpdateAnalogue>
	UpdateDigital();
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	e7f7      	b.n	80022c8 <main+0x8c>
 80022d8:	2000030c 	.word	0x2000030c
 80022dc:	20000370 	.word	0x20000370
 80022e0:	08001a0d 	.word	0x08001a0d
 80022e4:	20000000 	.word	0x20000000
 80022e8:	08001a6d 	.word	0x08001a6d
 80022ec:	08001ba1 	.word	0x08001ba1
 80022f0:	08001dc9 	.word	0x08001dc9
 80022f4:	200003d4 	.word	0x200003d4

080022f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b095      	sub	sp, #84	@ 0x54
 80022fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fe:	2414      	movs	r4, #20
 8002300:	193b      	adds	r3, r7, r4
 8002302:	0018      	movs	r0, r3
 8002304:	233c      	movs	r3, #60	@ 0x3c
 8002306:	001a      	movs	r2, r3
 8002308:	2100      	movs	r1, #0
 800230a:	f006 f8b5 	bl	8008478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	0018      	movs	r0, r3
 8002312:	2310      	movs	r3, #16
 8002314:	001a      	movs	r2, r3
 8002316:	2100      	movs	r1, #0
 8002318:	f006 f8ae 	bl	8008478 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	0018      	movs	r0, r3
 8002322:	f002 fddb 	bl	8004edc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002326:	193b      	adds	r3, r7, r4
 8002328:	2222      	movs	r2, #34	@ 0x22
 800232a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800232c:	193b      	adds	r3, r7, r4
 800232e:	2280      	movs	r2, #128	@ 0x80
 8002330:	0052      	lsls	r2, r2, #1
 8002332:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002334:	193b      	adds	r3, r7, r4
 8002336:	2280      	movs	r2, #128	@ 0x80
 8002338:	03d2      	lsls	r2, r2, #15
 800233a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800233c:	0021      	movs	r1, r4
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002344:	187b      	adds	r3, r7, r1
 8002346:	2240      	movs	r2, #64	@ 0x40
 8002348:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800234a:	187b      	adds	r3, r7, r1
 800234c:	2202      	movs	r2, #2
 800234e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002350:	187b      	adds	r3, r7, r1
 8002352:	2202      	movs	r2, #2
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002356:	187b      	adds	r3, r7, r1
 8002358:	2200      	movs	r2, #0
 800235a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800235c:	187b      	adds	r3, r7, r1
 800235e:	2208      	movs	r2, #8
 8002360:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002362:	187b      	adds	r3, r7, r1
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	0292      	lsls	r2, r2, #10
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2280      	movs	r2, #128	@ 0x80
 800236e:	0492      	lsls	r2, r2, #18
 8002370:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2280      	movs	r2, #128	@ 0x80
 8002376:	0592      	lsls	r2, r2, #22
 8002378:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237a:	187b      	adds	r3, r7, r1
 800237c:	0018      	movs	r0, r3
 800237e:	f002 fded 	bl	8004f5c <HAL_RCC_OscConfig>
 8002382:	1e03      	subs	r3, r0, #0
 8002384:	d001      	beq.n	800238a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002386:	f000 f9bd 	bl	8002704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2202      	movs	r2, #2
 8002394:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2280      	movs	r2, #128	@ 0x80
 80023a0:	01d2      	lsls	r2, r2, #7
 80023a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2102      	movs	r1, #2
 80023a8:	0018      	movs	r0, r3
 80023aa:	f003 f937 	bl	800561c <HAL_RCC_ClockConfig>
 80023ae:	1e03      	subs	r3, r0, #0
 80023b0:	d001      	beq.n	80023b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80023b2:	f000 f9a7 	bl	8002704 <Error_Handler>
  }
}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b015      	add	sp, #84	@ 0x54
 80023bc:	bd90      	pop	{r4, r7, pc}
	...

080023c0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80023c4:	4b20      	ldr	r3, [pc, #128]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023c6:	4a21      	ldr	r2, [pc, #132]	@ (800244c <MX_FDCAN2_Init+0x8c>)
 80023c8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80023ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80023d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80023d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80023dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023de:	2201      	movs	r2, #1
 80023e0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80023e8:	4b17      	ldr	r3, [pc, #92]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 4;
 80023ee:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023f0:	2204      	movs	r2, #4
 80023f2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 11;
 80023fa:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 80023fc:	220b      	movs	r2, #11
 80023fe:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 4;
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 8002402:	2204      	movs	r2, #4
 8002404:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 8002408:	2201      	movs	r2, #1
 800240a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800240c:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 800240e:	2201      	movs	r2, #1
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 8002414:	2201      	movs	r2, #1
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 800241a:	2201      	movs	r2, #1
 800241c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 8002420:	2200      	movs	r2, #0
 8002422:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002424:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 8002426:	2200      	movs	r2, #0
 8002428:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800242a:	4b07      	ldr	r3, [pc, #28]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 800242c:	2200      	movs	r2, #0
 800242e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <MX_FDCAN2_Init+0x88>)
 8002432:	0018      	movs	r0, r3
 8002434:	f000 fd98 	bl	8002f68 <HAL_FDCAN_Init>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d001      	beq.n	8002440 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800243c:	f000 f962 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002440:	46c0      	nop			@ (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	2000030c 	.word	0x2000030c
 800244c:	40006800 	.word	0x40006800

08002450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002454:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <MX_SPI1_Init+0x74>)
 8002456:	4a1c      	ldr	r2, [pc, #112]	@ (80024c8 <MX_SPI1_Init+0x78>)
 8002458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800245a:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <MX_SPI1_Init+0x74>)
 800245c:	2282      	movs	r2, #130	@ 0x82
 800245e:	0052      	lsls	r2, r2, #1
 8002460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002462:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <MX_SPI1_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002468:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <MX_SPI1_Init+0x74>)
 800246a:	22e0      	movs	r2, #224	@ 0xe0
 800246c:	00d2      	lsls	r2, r2, #3
 800246e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002470:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <MX_SPI1_Init+0x74>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002476:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <MX_SPI1_Init+0x74>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <MX_SPI1_Init+0x74>)
 800247e:	2280      	movs	r2, #128	@ 0x80
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002484:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <MX_SPI1_Init+0x74>)
 8002486:	2228      	movs	r2, #40	@ 0x28
 8002488:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <MX_SPI1_Init+0x74>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002490:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <MX_SPI1_Init+0x74>)
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002496:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <MX_SPI1_Init+0x74>)
 8002498:	2200      	movs	r2, #0
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800249c:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <MX_SPI1_Init+0x74>)
 800249e:	2207      	movs	r2, #7
 80024a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <MX_SPI1_Init+0x74>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <MX_SPI1_Init+0x74>)
 80024aa:	2208      	movs	r2, #8
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024ae:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <MX_SPI1_Init+0x74>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f003 fc79 	bl	8005da8 <HAL_SPI_Init>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d001      	beq.n	80024be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024ba:	f000 f923 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000370 	.word	0x20000370
 80024c8:	40013000 	.word	0x40013000

080024cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d2:	2310      	movs	r3, #16
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	0018      	movs	r0, r3
 80024d8:	2310      	movs	r3, #16
 80024da:	001a      	movs	r2, r3
 80024dc:	2100      	movs	r1, #0
 80024de:	f005 ffcb 	bl	8008478 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	0018      	movs	r0, r3
 80024e6:	230c      	movs	r3, #12
 80024e8:	001a      	movs	r2, r3
 80024ea:	2100      	movs	r1, #0
 80024ec:	f005 ffc4 	bl	8008478 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <MX_TIM2_Init+0xa4>)
 80024f2:	2280      	movs	r2, #128	@ 0x80
 80024f4:	05d2      	lsls	r2, r2, #23
 80024f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <MX_TIM2_Init+0xa4>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002570 <MX_TIM2_Init+0xa4>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <MX_TIM2_Init+0xa4>)
 8002506:	2201      	movs	r2, #1
 8002508:	4252      	negs	r2, r2
 800250a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250c:	4b18      	ldr	r3, [pc, #96]	@ (8002570 <MX_TIM2_Init+0xa4>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002512:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <MX_TIM2_Init+0xa4>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002518:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <MX_TIM2_Init+0xa4>)
 800251a:	0018      	movs	r0, r3
 800251c:	f004 f854 	bl	80065c8 <HAL_TIM_Base_Init>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002524:	f000 f8ee 	bl	8002704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002528:	2110      	movs	r1, #16
 800252a:	187b      	adds	r3, r7, r1
 800252c:	2280      	movs	r2, #128	@ 0x80
 800252e:	0152      	lsls	r2, r2, #5
 8002530:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002532:	187a      	adds	r2, r7, r1
 8002534:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <MX_TIM2_Init+0xa4>)
 8002536:	0011      	movs	r1, r2
 8002538:	0018      	movs	r0, r3
 800253a:	f004 fa07 	bl	800694c <HAL_TIM_ConfigClockSource>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002542:	f000 f8df 	bl	8002704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002552:	1d3a      	adds	r2, r7, #4
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <MX_TIM2_Init+0xa4>)
 8002556:	0011      	movs	r1, r2
 8002558:	0018      	movs	r0, r3
 800255a:	f004 fc21 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002562:	f000 f8cf 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b008      	add	sp, #32
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	200003d4 	.word	0x200003d4

08002574 <MX_USB_DRD_FS_PCD_Init>:
  * @brief USB_DRD_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_DRD_FS_PCD_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8002578:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800257a:	4a18      	ldr	r2, [pc, #96]	@ (80025dc <MX_USB_DRD_FS_PCD_Init+0x68>)
 800257c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8002580:	2208      	movs	r2, #8
 8002582:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 8002584:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8002586:	2208      	movs	r2, #8
 8002588:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 800258a:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800258c:	2202      	movs	r2, #2
 800258e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8002592:	2202      	movs	r2, #2
 8002594:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8002598:	2200      	movs	r2, #0
 800259a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800259c:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800259e:	2200      	movs	r2, #0
 80025a0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80025a8:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80025b4:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80025ba:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80025c2:	0018      	movs	r0, r3
 80025c4:	f001 f9b2 	bl	800392c <HAL_PCD_Init>
 80025c8:	1e03      	subs	r3, r0, #0
 80025ca:	d001      	beq.n	80025d0 <MX_USB_DRD_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 80025cc:	f000 f89a 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 80025d0:	46c0      	nop			@ (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	20000420 	.word	0x20000420
 80025dc:	40005c00 	.word	0x40005c00

080025e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e6:	240c      	movs	r4, #12
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	0018      	movs	r0, r3
 80025ec:	2314      	movs	r3, #20
 80025ee:	001a      	movs	r2, r3
 80025f0:	2100      	movs	r1, #0
 80025f2:	f005 ff41 	bl	8008478 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	4b3a      	ldr	r3, [pc, #232]	@ (80026e0 <MX_GPIO_Init+0x100>)
 80025f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025fa:	4b39      	ldr	r3, [pc, #228]	@ (80026e0 <MX_GPIO_Init+0x100>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	430a      	orrs	r2, r1
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34
 8002602:	4b37      	ldr	r3, [pc, #220]	@ (80026e0 <MX_GPIO_Init+0x100>)
 8002604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	4b34      	ldr	r3, [pc, #208]	@ (80026e0 <MX_GPIO_Init+0x100>)
 8002610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002612:	4b33      	ldr	r3, [pc, #204]	@ (80026e0 <MX_GPIO_Init+0x100>)
 8002614:	2102      	movs	r1, #2
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	@ 0x34
 800261a:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <MX_GPIO_Init+0x100>)
 800261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261e:	2202      	movs	r2, #2
 8002620:	4013      	ands	r3, r2
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	0219      	lsls	r1, r3, #8
 800262a:	23a0      	movs	r3, #160	@ 0xa0
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	2200      	movs	r2, #0
 8002630:	0018      	movs	r0, r3
 8002632:	f001 f8dc 	bl	80037ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8002636:	23a0      	movs	r3, #160	@ 0xa0
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	482a      	ldr	r0, [pc, #168]	@ (80026e4 <MX_GPIO_Init+0x104>)
 800263c:	2200      	movs	r2, #0
 800263e:	0019      	movs	r1, r3
 8002640:	f001 f8d5 	bl	80037ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002644:	193b      	adds	r3, r7, r4
 8002646:	2220      	movs	r2, #32
 8002648:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264a:	193b      	adds	r3, r7, r4
 800264c:	2200      	movs	r2, #0
 800264e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	193b      	adds	r3, r7, r4
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	193a      	adds	r2, r7, r4
 8002658:	23a0      	movs	r3, #160	@ 0xa0
 800265a:	05db      	lsls	r3, r3, #23
 800265c:	0011      	movs	r1, r2
 800265e:	0018      	movs	r0, r3
 8002660:	f000 ff3c 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002664:	193b      	adds	r3, r7, r4
 8002666:	2204      	movs	r2, #4
 8002668:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266a:	193b      	adds	r3, r7, r4
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	193b      	adds	r3, r7, r4
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	193b      	adds	r3, r7, r4
 8002678:	4a1a      	ldr	r2, [pc, #104]	@ (80026e4 <MX_GPIO_Init+0x104>)
 800267a:	0019      	movs	r1, r3
 800267c:	0010      	movs	r0, r2
 800267e:	f000 ff2d 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002682:	0021      	movs	r1, r4
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2280      	movs	r2, #128	@ 0x80
 8002688:	0212      	lsls	r2, r2, #8
 800268a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268c:	000c      	movs	r4, r1
 800268e:	193b      	adds	r3, r7, r4
 8002690:	2201      	movs	r2, #1
 8002692:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	193b      	adds	r3, r7, r4
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	193b      	adds	r3, r7, r4
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	193a      	adds	r2, r7, r4
 80026a2:	23a0      	movs	r3, #160	@ 0xa0
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 ff17 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80026ae:	0021      	movs	r1, r4
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	22a0      	movs	r2, #160	@ 0xa0
 80026b4:	0052      	lsls	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2201      	movs	r2, #1
 80026bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	4a05      	ldr	r2, [pc, #20]	@ (80026e4 <MX_GPIO_Init+0x104>)
 80026ce:	0019      	movs	r1, r3
 80026d0:	0010      	movs	r0, r2
 80026d2:	f000 ff03 	bl	80034dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b009      	add	sp, #36	@ 0x24
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	40021000 	.word	0x40021000
 80026e4:	50000400 	.word	0x50000400

080026e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	TickerHandler(&Ticker);
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fe fceb 	bl	80010ce <TickerHandler>
}
 80026f8:	46c0      	nop			@ (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000000 	.word	0x20000000

08002704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002708:	b672      	cpsid	i
}
 800270a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800270c:	46c0      	nop			@ (mov r8, r8)
 800270e:	e7fd      	b.n	800270c <Error_Handler+0x8>

08002710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002716:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_MspInit+0x4c>)
 8002718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <HAL_MspInit+0x4c>)
 800271c:	2101      	movs	r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	641a      	str	r2, [r3, #64]	@ 0x40
 8002722:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <HAL_MspInit+0x4c>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2201      	movs	r2, #1
 8002728:	4013      	ands	r3, r2
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_MspInit+0x4c>)
 8002730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002732:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <HAL_MspInit+0x4c>)
 8002734:	2180      	movs	r1, #128	@ 0x80
 8002736:	0549      	lsls	r1, r1, #21
 8002738:	430a      	orrs	r2, r1
 800273a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800273c:	4b07      	ldr	r3, [pc, #28]	@ (800275c <HAL_MspInit+0x4c>)
 800273e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	055b      	lsls	r3, r3, #21
 8002744:	4013      	ands	r3, r2
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	0018      	movs	r0, r3
 8002750:	f000 fb16 	bl	8002d80 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002754:	46c0      	nop			@ (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b09d      	sub	sp, #116	@ 0x74
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	235c      	movs	r3, #92	@ 0x5c
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	0018      	movs	r0, r3
 800276e:	2314      	movs	r3, #20
 8002770:	001a      	movs	r2, r3
 8002772:	2100      	movs	r1, #0
 8002774:	f005 fe80 	bl	8008478 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002778:	2410      	movs	r4, #16
 800277a:	193b      	adds	r3, r7, r4
 800277c:	0018      	movs	r0, r3
 800277e:	234c      	movs	r3, #76	@ 0x4c
 8002780:	001a      	movs	r2, r3
 8002782:	2100      	movs	r1, #0
 8002784:	f005 fe78 	bl	8008478 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a22      	ldr	r2, [pc, #136]	@ (8002818 <HAL_FDCAN_MspInit+0xb8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d13e      	bne.n	8002810 <HAL_FDCAN_MspInit+0xb0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002792:	193b      	adds	r3, r7, r4
 8002794:	2280      	movs	r2, #128	@ 0x80
 8002796:	0492      	lsls	r2, r2, #18
 8002798:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800279a:	193b      	adds	r3, r7, r4
 800279c:	2200      	movs	r2, #0
 800279e:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a0:	193b      	adds	r3, r7, r4
 80027a2:	0018      	movs	r0, r3
 80027a4:	f003 f8c4 	bl	8005930 <HAL_RCCEx_PeriphCLKConfig>
 80027a8:	1e03      	subs	r3, r0, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80027ac:	f7ff ffaa 	bl	8002704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80027b0:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_FDCAN_MspInit+0xbc>)
 80027b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027b4:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_FDCAN_MspInit+0xbc>)
 80027b6:	2180      	movs	r1, #128	@ 0x80
 80027b8:	0149      	lsls	r1, r1, #5
 80027ba:	430a      	orrs	r2, r1
 80027bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_FDCAN_MspInit+0xbc>)
 80027c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	015b      	lsls	r3, r3, #5
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027cc:	4b13      	ldr	r3, [pc, #76]	@ (800281c <HAL_FDCAN_MspInit+0xbc>)
 80027ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_FDCAN_MspInit+0xbc>)
 80027d2:	2102      	movs	r1, #2
 80027d4:	430a      	orrs	r2, r1
 80027d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80027d8:	4b10      	ldr	r3, [pc, #64]	@ (800281c <HAL_FDCAN_MspInit+0xbc>)
 80027da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027dc:	2202      	movs	r2, #2
 80027de:	4013      	ands	r3, r2
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027e4:	215c      	movs	r1, #92	@ 0x5c
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	2203      	movs	r2, #3
 80027ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2202      	movs	r2, #2
 80027f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2203      	movs	r2, #3
 8002802:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002804:	187b      	adds	r3, r7, r1
 8002806:	4a06      	ldr	r2, [pc, #24]	@ (8002820 <HAL_FDCAN_MspInit+0xc0>)
 8002808:	0019      	movs	r1, r3
 800280a:	0010      	movs	r0, r2
 800280c:	f000 fe66 	bl	80034dc <HAL_GPIO_Init>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b01d      	add	sp, #116	@ 0x74
 8002816:	bd90      	pop	{r4, r7, pc}
 8002818:	40006800 	.word	0x40006800
 800281c:	40021000 	.word	0x40021000
 8002820:	50000400 	.word	0x50000400

08002824 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b08b      	sub	sp, #44	@ 0x2c
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	2414      	movs	r4, #20
 800282e:	193b      	adds	r3, r7, r4
 8002830:	0018      	movs	r0, r3
 8002832:	2314      	movs	r3, #20
 8002834:	001a      	movs	r2, r3
 8002836:	2100      	movs	r1, #0
 8002838:	f005 fe1e 	bl	8008478 <memset>
  if(hspi->Instance==SPI1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <HAL_SPI_MspInit+0xb4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d144      	bne.n	80028d0 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002846:	4b25      	ldr	r3, [pc, #148]	@ (80028dc <HAL_SPI_MspInit+0xb8>)
 8002848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800284a:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <HAL_SPI_MspInit+0xb8>)
 800284c:	2180      	movs	r1, #128	@ 0x80
 800284e:	0149      	lsls	r1, r1, #5
 8002850:	430a      	orrs	r2, r1
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40
 8002854:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <HAL_SPI_MspInit+0xb8>)
 8002856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	015b      	lsls	r3, r3, #5
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <HAL_SPI_MspInit+0xb8>)
 8002864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002866:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <HAL_SPI_MspInit+0xb8>)
 8002868:	2102      	movs	r1, #2
 800286a:	430a      	orrs	r2, r1
 800286c:	635a      	str	r2, [r3, #52]	@ 0x34
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_SPI_MspInit+0xb8>)
 8002870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002872:	2202      	movs	r2, #2
 8002874:	4013      	ands	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800287a:	193b      	adds	r3, r7, r4
 800287c:	2208      	movs	r2, #8
 800287e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	193b      	adds	r3, r7, r4
 8002882:	2202      	movs	r2, #2
 8002884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002886:	193b      	adds	r3, r7, r4
 8002888:	2202      	movs	r2, #2
 800288a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	193b      	adds	r3, r7, r4
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002892:	193b      	adds	r3, r7, r4
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	193b      	adds	r3, r7, r4
 800289a:	4a11      	ldr	r2, [pc, #68]	@ (80028e0 <HAL_SPI_MspInit+0xbc>)
 800289c:	0019      	movs	r1, r3
 800289e:	0010      	movs	r0, r2
 80028a0:	f000 fe1c 	bl	80034dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028a4:	0021      	movs	r1, r4
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	2230      	movs	r2, #48	@ 0x30
 80028aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	2202      	movs	r2, #2
 80028b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	187b      	adds	r3, r7, r1
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80028be:	187b      	adds	r3, r7, r1
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	4a06      	ldr	r2, [pc, #24]	@ (80028e0 <HAL_SPI_MspInit+0xbc>)
 80028c8:	0019      	movs	r1, r3
 80028ca:	0010      	movs	r0, r2
 80028cc:	f000 fe06 	bl	80034dc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80028d0:	46c0      	nop			@ (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b00b      	add	sp, #44	@ 0x2c
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	40013000 	.word	0x40013000
 80028dc:	40021000 	.word	0x40021000
 80028e0:	50000400 	.word	0x50000400

080028e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	05db      	lsls	r3, r3, #23
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d113      	bne.n	8002920 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <HAL_TIM_Base_MspInit+0x44>)
 80028fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_TIM_Base_MspInit+0x44>)
 80028fe:	2101      	movs	r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <HAL_TIM_Base_MspInit+0x44>)
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2100      	movs	r1, #0
 8002914:	200f      	movs	r0, #15
 8002916:	f000 faf5 	bl	8002f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800291a:	200f      	movs	r0, #15
 800291c:	f000 fb07 	bl	8002f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002920:	46c0      	nop			@ (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b004      	add	sp, #16
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000

0800292c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b099      	sub	sp, #100	@ 0x64
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002934:	2414      	movs	r4, #20
 8002936:	193b      	adds	r3, r7, r4
 8002938:	0018      	movs	r0, r3
 800293a:	234c      	movs	r3, #76	@ 0x4c
 800293c:	001a      	movs	r2, r3
 800293e:	2100      	movs	r1, #0
 8002940:	f005 fd9a 	bl	8008478 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a25      	ldr	r2, [pc, #148]	@ (80029e0 <HAL_PCD_MspInit+0xb4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d143      	bne.n	80029d6 <HAL_PCD_MspInit+0xaa>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800294e:	193b      	adds	r3, r7, r4
 8002950:	2280      	movs	r2, #128	@ 0x80
 8002952:	0452      	lsls	r2, r2, #17
 8002954:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002956:	193b      	adds	r3, r7, r4
 8002958:	2200      	movs	r2, #0
 800295a:	645a      	str	r2, [r3, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800295c:	193b      	adds	r3, r7, r4
 800295e:	0018      	movs	r0, r3
 8002960:	f002 ffe6 	bl	8005930 <HAL_RCCEx_PeriphCLKConfig>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d001      	beq.n	800296c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8002968:	f7ff fecc 	bl	8002704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800296c:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_PCD_MspInit+0xb8>)
 800296e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002970:	4b1c      	ldr	r3, [pc, #112]	@ (80029e4 <HAL_PCD_MspInit+0xb8>)
 8002972:	2180      	movs	r1, #128	@ 0x80
 8002974:	0189      	lsls	r1, r1, #6
 8002976:	430a      	orrs	r2, r1
 8002978:	63da      	str	r2, [r3, #60]	@ 0x3c
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <HAL_PCD_MspInit+0xb8>)
 800297c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002988:	4b16      	ldr	r3, [pc, #88]	@ (80029e4 <HAL_PCD_MspInit+0xb8>)
 800298a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	055b      	lsls	r3, r3, #21
 8002990:	4013      	ands	r3, r2
 8002992:	d116      	bne.n	80029c2 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b13      	ldr	r3, [pc, #76]	@ (80029e4 <HAL_PCD_MspInit+0xb8>)
 8002996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002998:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_PCD_MspInit+0xb8>)
 800299a:	2180      	movs	r1, #128	@ 0x80
 800299c:	0549      	lsls	r1, r1, #21
 800299e:	430a      	orrs	r2, r1
 80029a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029a2:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <HAL_PCD_MspInit+0xb8>)
 80029a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029a6:	2380      	movs	r3, #128	@ 0x80
 80029a8:	055b      	lsls	r3, r3, #21
 80029aa:	4013      	ands	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80029b0:	f002 fa86 	bl	8004ec0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_PCD_MspInit+0xb8>)
 80029b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029b8:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <HAL_PCD_MspInit+0xb8>)
 80029ba:	490b      	ldr	r1, [pc, #44]	@ (80029e8 <HAL_PCD_MspInit+0xbc>)
 80029bc:	400a      	ands	r2, r1
 80029be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029c0:	e001      	b.n	80029c6 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80029c2:	f002 fa7d 	bl	8004ec0 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2008      	movs	r0, #8
 80029cc:	f000 fa9a 	bl	8002f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80029d0:	2008      	movs	r0, #8
 80029d2:	f000 faac 	bl	8002f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b019      	add	sp, #100	@ 0x64
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	40005c00 	.word	0x40005c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	efffffff 	.word	0xefffffff

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	e7fd      	b.n	80029f0 <NMI_Handler+0x4>

080029f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	e7fd      	b.n	80029f8 <HardFault_Handler+0x4>

080029fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a00:	46c0      	nop			@ (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a14:	f000 f974 	bl	8002d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a18:	46c0      	nop			@ (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8002a24:	4b03      	ldr	r3, [pc, #12]	@ (8002a34 <USB_UCPD1_2_IRQHandler+0x14>)
 8002a26:	0018      	movs	r0, r3
 8002a28:	f001 f87a 	bl	8003b20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	20000420 	.word	0x20000420

08002a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a3c:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <TIM2_IRQHandler+0x14>)
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f003 fe7c 	bl	800673c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a44:	46c0      	nop			@ (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	200003d4 	.word	0x200003d4

08002a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  return 1;
 8002a54:	2301      	movs	r3, #1
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_kill>:

int _kill(int pid, int sig)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a66:	f005 fd5d 	bl	8008524 <__errno>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	2216      	movs	r2, #22
 8002a6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	425b      	negs	r3, r3
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_exit>:

void _exit (int status)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a84:	2301      	movs	r3, #1
 8002a86:	425a      	negs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	0011      	movs	r1, r2
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7ff ffe5 	bl	8002a5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	e7fd      	b.n	8002a92 <_exit+0x16>

08002a96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e00a      	b.n	8002abe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aa8:	e000      	b.n	8002aac <_read+0x16>
 8002aaa:	bf00      	nop
 8002aac:	0001      	movs	r1, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	60ba      	str	r2, [r7, #8]
 8002ab4:	b2ca      	uxtb	r2, r1
 8002ab6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	dbf0      	blt.n	8002aa8 <_read+0x12>
  }

  return len;
 8002ac6:	687b      	ldr	r3, [r7, #4]
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b006      	add	sp, #24
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e009      	b.n	8002af6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	60ba      	str	r2, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	0018      	movs	r0, r3
 8002aec:	e000      	b.n	8002af0 <_write+0x20>
 8002aee:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	3301      	adds	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	dbf1      	blt.n	8002ae2 <_write+0x12>
  }
  return len;
 8002afe:	687b      	ldr	r3, [r7, #4]
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b006      	add	sp, #24
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_close>:

int _close(int file)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b10:	2301      	movs	r3, #1
 8002b12:	425b      	negs	r3, r3
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2280      	movs	r2, #128	@ 0x80
 8002b2a:	0192      	lsls	r2, r2, #6
 8002b2c:	605a      	str	r2, [r3, #4]
  return 0;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_isatty>:

int _isatty(int file)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b004      	add	sp, #16
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b68:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <_sbrk+0x5c>)
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <_sbrk+0x60>)
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b74:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <_sbrk+0x64>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <_sbrk+0x68>)
 8002b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b82:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	18d3      	adds	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d207      	bcs.n	8002ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b90:	f005 fcc8 	bl	8008524 <__errno>
 8002b94:	0003      	movs	r3, r0
 8002b96:	220c      	movs	r2, #12
 8002b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	425b      	negs	r3, r3
 8002b9e:	e009      	b.n	8002bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba0:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <_sbrk+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <_sbrk+0x64>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	18d2      	adds	r2, r2, r3
 8002bae:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <_sbrk+0x64>)
 8002bb0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b006      	add	sp, #24
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20024000 	.word	0x20024000
 8002bc0:	00000500 	.word	0x00000500
 8002bc4:	20000700 	.word	0x20000700
 8002bc8:	20000858 	.word	0x20000858

08002bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd0:	46c0      	nop			@ (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bd8:	480d      	ldr	r0, [pc, #52]	@ (8002c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bdc:	f7ff fff6 	bl	8002bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be0:	480c      	ldr	r0, [pc, #48]	@ (8002c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002be2:	490d      	ldr	r1, [pc, #52]	@ (8002c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002be4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c1c <LoopForever+0xe>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be8:	e002      	b.n	8002bf0 <LoopCopyDataInit>

08002bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bee:	3304      	adds	r3, #4

08002bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf4:	d3f9      	bcc.n	8002bea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8002c24 <LoopForever+0x16>)
  movs r3, #0
 8002bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bfc:	e001      	b.n	8002c02 <LoopFillZerobss>

08002bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c00:	3204      	adds	r2, #4

08002c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c04:	d3fb      	bcc.n	8002bfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c06:	f005 fc93 	bl	8008530 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c0a:	f7ff fb17 	bl	800223c <main>

08002c0e <LoopForever>:

LoopForever:
  b LoopForever
 8002c0e:	e7fe      	b.n	8002c0e <LoopForever>
  ldr   r0, =_estack
 8002c10:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c18:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8002c1c:	08009398 	.word	0x08009398
  ldr r2, =_sbss
 8002c20:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8002c24:	20000854 	.word	0x20000854

08002c28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c28:	e7fe      	b.n	8002c28 <ADC1_COMP_IRQHandler>
	...

08002c2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_Init+0x3c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_Init+0x3c>)
 8002c3e:	2180      	movs	r1, #128	@ 0x80
 8002c40:	0049      	lsls	r1, r1, #1
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c46:	2003      	movs	r0, #3
 8002c48:	f000 f810 	bl	8002c6c <HAL_InitTick>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c50:	1dfb      	adds	r3, r7, #7
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e001      	b.n	8002c5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002c58:	f7ff fd5a 	bl	8002710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	781b      	ldrb	r3, [r3, #0]
}
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b002      	add	sp, #8
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40022000 	.word	0x40022000

08002c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c74:	230f      	movs	r3, #15
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <HAL_InitTick+0x88>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d02b      	beq.n	8002cdc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002c84:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf8 <HAL_InitTick+0x8c>)
 8002c86:	681c      	ldr	r4, [r3, #0]
 8002c88:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <HAL_InitTick+0x88>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	23fa      	movs	r3, #250	@ 0xfa
 8002c90:	0098      	lsls	r0, r3, #2
 8002c92:	f7fd fa41 	bl	8000118 <__udivsi3>
 8002c96:	0003      	movs	r3, r0
 8002c98:	0019      	movs	r1, r3
 8002c9a:	0020      	movs	r0, r4
 8002c9c:	f7fd fa3c 	bl	8000118 <__udivsi3>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 f953 	bl	8002f4e <HAL_SYSTICK_Config>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d112      	bne.n	8002cd2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d80a      	bhi.n	8002cc8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	425b      	negs	r3, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 f922 	bl	8002f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <HAL_InitTick+0x90>)
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e00d      	b.n	8002ce4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002cc8:	230f      	movs	r3, #15
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e008      	b.n	8002ce4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cd2:	230f      	movs	r3, #15
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e003      	b.n	8002ce4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cdc:	230f      	movs	r3, #15
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b005      	add	sp, #20
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	20000084 	.word	0x20000084
 8002cf8:	2000007c 	.word	0x2000007c
 8002cfc:	20000080 	.word	0x20000080

08002d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <HAL_IncTick+0x1c>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	001a      	movs	r2, r3
 8002d0a:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <HAL_IncTick+0x20>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	18d2      	adds	r2, r2, r3
 8002d10:	4b03      	ldr	r3, [pc, #12]	@ (8002d20 <HAL_IncTick+0x20>)
 8002d12:	601a      	str	r2, [r3, #0]
}
 8002d14:	46c0      	nop			@ (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	20000084 	.word	0x20000084
 8002d20:	20000704 	.word	0x20000704

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b02      	ldr	r3, [pc, #8]	@ (8002d34 <HAL_GetTick+0x10>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	20000704 	.word	0x20000704

08002d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff fff0 	bl	8002d24 <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	d005      	beq.n	8002d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <HAL_Delay+0x44>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	001a      	movs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	189b      	adds	r3, r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	f7ff ffe0 	bl	8002d24 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d8f7      	bhi.n	8002d60 <HAL_Delay+0x28>
  {
  }
}
 8002d70:	46c0      	nop			@ (mov r8, r8)
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	20000084 	.word	0x20000084

08002d80 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002d88:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a06      	ldr	r2, [pc, #24]	@ (8002da8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	40010000 	.word	0x40010000
 8002da8:	fffff9ff 	.word	0xfffff9ff

08002dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	0002      	movs	r2, r0
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002db8:	1dfb      	adds	r3, r7, #7
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dbe:	d809      	bhi.n	8002dd4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	231f      	movs	r3, #31
 8002dc8:	401a      	ands	r2, r3
 8002dca:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <__NVIC_EnableIRQ+0x30>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	4091      	lsls	r1, r2
 8002dd0:	000a      	movs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002dd4:	46c0      	nop			@ (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	e000e100 	.word	0xe000e100

08002de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	0002      	movs	r2, r0
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002df4:	d828      	bhi.n	8002e48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df6:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb4 <__NVIC_SetPriority+0xd4>)
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	33c0      	adds	r3, #192	@ 0xc0
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	589b      	ldr	r3, [r3, r2]
 8002e06:	1dfa      	adds	r2, r7, #7
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	400a      	ands	r2, r1
 8002e10:	00d2      	lsls	r2, r2, #3
 8002e12:	21ff      	movs	r1, #255	@ 0xff
 8002e14:	4091      	lsls	r1, r2
 8002e16:	000a      	movs	r2, r1
 8002e18:	43d2      	mvns	r2, r2
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	22ff      	movs	r2, #255	@ 0xff
 8002e24:	401a      	ands	r2, r3
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	4003      	ands	r3, r0
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e34:	481f      	ldr	r0, [pc, #124]	@ (8002eb4 <__NVIC_SetPriority+0xd4>)
 8002e36:	1dfb      	adds	r3, r7, #7
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	33c0      	adds	r3, #192	@ 0xc0
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e46:	e031      	b.n	8002eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e48:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb8 <__NVIC_SetPriority+0xd8>)
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	0019      	movs	r1, r3
 8002e50:	230f      	movs	r3, #15
 8002e52:	400b      	ands	r3, r1
 8002e54:	3b08      	subs	r3, #8
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3306      	adds	r3, #6
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	18d3      	adds	r3, r2, r3
 8002e5e:	3304      	adds	r3, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	1dfa      	adds	r2, r7, #7
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	0011      	movs	r1, r2
 8002e68:	2203      	movs	r2, #3
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	00d2      	lsls	r2, r2, #3
 8002e6e:	21ff      	movs	r1, #255	@ 0xff
 8002e70:	4091      	lsls	r1, r2
 8002e72:	000a      	movs	r2, r1
 8002e74:	43d2      	mvns	r2, r2
 8002e76:	401a      	ands	r2, r3
 8002e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	22ff      	movs	r2, #255	@ 0xff
 8002e80:	401a      	ands	r2, r3
 8002e82:	1dfb      	adds	r3, r7, #7
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	0018      	movs	r0, r3
 8002e88:	2303      	movs	r3, #3
 8002e8a:	4003      	ands	r3, r0
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e90:	4809      	ldr	r0, [pc, #36]	@ (8002eb8 <__NVIC_SetPriority+0xd8>)
 8002e92:	1dfb      	adds	r3, r7, #7
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	001c      	movs	r4, r3
 8002e98:	230f      	movs	r3, #15
 8002e9a:	4023      	ands	r3, r4
 8002e9c:	3b08      	subs	r3, #8
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	3306      	adds	r3, #6
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	18c3      	adds	r3, r0, r3
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	601a      	str	r2, [r3, #0]
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b003      	add	sp, #12
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	e000e100 	.word	0xe000e100
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1e5a      	subs	r2, r3, #1
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	045b      	lsls	r3, r3, #17
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d301      	bcc.n	8002ed4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e010      	b.n	8002ef6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <SysTick_Config+0x44>)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002edc:	2301      	movs	r3, #1
 8002ede:	425b      	negs	r3, r3
 8002ee0:	2103      	movs	r1, #3
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7ff ff7c 	bl	8002de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <SysTick_Config+0x44>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eee:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <SysTick_Config+0x44>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b002      	add	sp, #8
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	e000e010 	.word	0xe000e010

08002f04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	210f      	movs	r1, #15
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	1c02      	adds	r2, r0, #0
 8002f14:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	0011      	movs	r1, r2
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff ff5d 	bl	8002de0 <__NVIC_SetPriority>
}
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b004      	add	sp, #16
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	0002      	movs	r2, r0
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f3a:	1dfb      	adds	r3, r7, #7
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b25b      	sxtb	r3, r3
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff ff33 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b002      	add	sp, #8
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff ffaf 	bl	8002ebc <SysTick_Config>
 8002f5e:	0003      	movs	r3, r0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e14e      	b.n	8003218 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	225c      	movs	r2, #92	@ 0x5c
 8002f7e:	5c9b      	ldrb	r3, [r3, r2]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	225d      	movs	r2, #93	@ 0x5d
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff fbe5 	bl	8002760 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2110      	movs	r1, #16
 8002fa2:	438a      	bics	r2, r1
 8002fa4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa6:	f7ff febd 	bl	8002d24 <HAL_GetTick>
 8002faa:	0003      	movs	r3, r0
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002fae:	e012      	b.n	8002fd6 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002fb0:	f7ff feb8 	bl	8002d24 <HAL_GetTick>
 8002fb4:	0002      	movs	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b0a      	cmp	r3, #10
 8002fbc:	d90b      	bls.n	8002fd6 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	225c      	movs	r2, #92	@ 0x5c
 8002fce:	2103      	movs	r1, #3
 8002fd0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e120      	b.n	8003218 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2208      	movs	r2, #8
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d0e5      	beq.n	8002fb0 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2101      	movs	r1, #1
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ff4:	f7ff fe96 	bl	8002d24 <HAL_GetTick>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ffc:	e012      	b.n	8003024 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ffe:	f7ff fe91 	bl	8002d24 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b0a      	cmp	r3, #10
 800300a:	d90b      	bls.n	8003024 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003010:	2201      	movs	r2, #1
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	225c      	movs	r2, #92	@ 0x5c
 800301c:	2103      	movs	r1, #3
 800301e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0f9      	b.n	8003218 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2201      	movs	r2, #1
 800302c:	4013      	ands	r3, r2
 800302e:	d0e6      	beq.n	8002ffe <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2102      	movs	r1, #2
 800303c:	430a      	orrs	r2, r1
 800303e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a76      	ldr	r2, [pc, #472]	@ (8003220 <HAL_FDCAN_Init+0x2b8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d103      	bne.n	8003052 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800304a:	4a76      	ldr	r2, [pc, #472]	@ (8003224 <HAL_FDCAN_Init+0x2bc>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7c1b      	ldrb	r3, [r3, #16]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d108      	bne.n	800306c <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2140      	movs	r1, #64	@ 0x40
 8003066:	438a      	bics	r2, r1
 8003068:	619a      	str	r2, [r3, #24]
 800306a:	e007      	b.n	800307c <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2140      	movs	r1, #64	@ 0x40
 8003078:	430a      	orrs	r2, r1
 800307a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7c5b      	ldrb	r3, [r3, #17]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d109      	bne.n	8003098 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2180      	movs	r1, #128	@ 0x80
 8003090:	01c9      	lsls	r1, r1, #7
 8003092:	430a      	orrs	r2, r1
 8003094:	619a      	str	r2, [r3, #24]
 8003096:	e007      	b.n	80030a8 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4961      	ldr	r1, [pc, #388]	@ (8003228 <HAL_FDCAN_Init+0x2c0>)
 80030a4:	400a      	ands	r2, r1
 80030a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7c9b      	ldrb	r3, [r3, #18]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d108      	bne.n	80030c2 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	495c      	ldr	r1, [pc, #368]	@ (800322c <HAL_FDCAN_Init+0x2c4>)
 80030bc:	400a      	ands	r2, r1
 80030be:	619a      	str	r2, [r3, #24]
 80030c0:	e008      	b.n	80030d4 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2180      	movs	r1, #128	@ 0x80
 80030ce:	0149      	lsls	r1, r1, #5
 80030d0:	430a      	orrs	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	4a55      	ldr	r2, [pc, #340]	@ (8003230 <HAL_FDCAN_Init+0x2c8>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	21a4      	movs	r1, #164	@ 0xa4
 80030f8:	438a      	bics	r2, r1
 80030fa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2110      	movs	r1, #16
 8003108:	438a      	bics	r2, r1
 800310a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d108      	bne.n	8003126 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2104      	movs	r1, #4
 8003120:	430a      	orrs	r2, r1
 8003122:	619a      	str	r2, [r3, #24]
 8003124:	e02c      	b.n	8003180 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d028      	beq.n	8003180 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d01c      	beq.n	8003170 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2180      	movs	r1, #128	@ 0x80
 8003142:	430a      	orrs	r2, r1
 8003144:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2110      	movs	r1, #16
 8003152:	430a      	orrs	r2, r1
 8003154:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d110      	bne.n	8003180 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2120      	movs	r1, #32
 800316a:	430a      	orrs	r2, r1
 800316c:	619a      	str	r2, [r3, #24]
 800316e:	e007      	b.n	8003180 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2120      	movs	r1, #32
 800317c:	430a      	orrs	r2, r1
 800317e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	3b01      	subs	r3, #1
 8003186:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	3b01      	subs	r3, #1
 800318e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003190:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003198:	431a      	orrs	r2, r3
 800319a:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80031a8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80031aa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	23c0      	movs	r3, #192	@ 0xc0
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d115      	bne.n	80031e4 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	3b01      	subs	r3, #1
 80031c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	3b01      	subs	r3, #1
 80031ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80031d0:	431a      	orrs	r2, r3
 80031d2:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	3b01      	subs	r3, #1
 80031da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80031e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	22c0      	movs	r2, #192	@ 0xc0
 80031ea:	5899      	ldr	r1, [r3, r2]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	21c0      	movs	r1, #192	@ 0xc0
 80031f8:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f000 f885 	bl	800330c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	225c      	movs	r2, #92	@ 0x5c
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b004      	add	sp, #16
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40006400 	.word	0x40006400
 8003224:	40006500 	.word	0x40006500
 8003228:	ffffbfff 	.word	0xffffbfff
 800322c:	ffffefff 	.word	0xffffefff
 8003230:	fffffcff 	.word	0xfffffcff

08003234 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	225c      	movs	r2, #92	@ 0x5c
 8003240:	5c9b      	ldrb	r3, [r3, r2]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d110      	bne.n	800326a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	225c      	movs	r2, #92	@ 0x5c
 800324c:	2102      	movs	r1, #2
 800324e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2101      	movs	r1, #1
 800325c:	438a      	bics	r2, r1
 800325e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e006      	b.n	8003278 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326e:	2204      	movs	r2, #4
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
  }
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	225c      	movs	r2, #92	@ 0x5c
 8003290:	5c9b      	ldrb	r3, [r3, r2]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d12d      	bne.n	80032f4 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	22c4      	movs	r2, #196	@ 0xc4
 800329e:	589a      	ldr	r2, [r3, r2]
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	039b      	lsls	r3, r3, #14
 80032a4:	4013      	ands	r3, r2
 80032a6:	d008      	beq.n	80032ba <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ac:	2280      	movs	r2, #128	@ 0x80
 80032ae:	0092      	lsls	r2, r2, #2
 80032b0:	431a      	orrs	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e023      	b.n	8003302 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	22c4      	movs	r2, #196	@ 0xc4
 80032c0:	589b      	ldr	r3, [r3, r2]
 80032c2:	0c1b      	lsrs	r3, r3, #16
 80032c4:	2203      	movs	r2, #3
 80032c6:	4013      	ands	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f887 	bl	80033e4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2101      	movs	r1, #1
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4091      	lsls	r1, r2
 80032e0:	000a      	movs	r2, r1
 80032e2:	21cc      	movs	r1, #204	@ 0xcc
 80032e4:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80032e6:	2201      	movs	r2, #1
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e006      	b.n	8003302 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f8:	2208      	movs	r2, #8
 80032fa:	431a      	orrs	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
  }
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	b006      	add	sp, #24
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003314:	4b2f      	ldr	r3, [pc, #188]	@ (80033d4 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8003316:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2e      	ldr	r2, [pc, #184]	@ (80033d8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d105      	bne.n	800332e <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	22d4      	movs	r2, #212	@ 0xd4
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4694      	mov	ip, r2
 800332a:	4463      	add	r3, ip
 800332c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2280      	movs	r2, #128	@ 0x80
 800333a:	589b      	ldr	r3, [r3, r2]
 800333c:	4a27      	ldr	r2, [pc, #156]	@ (80033dc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800333e:	4013      	ands	r3, r2
 8003340:	0019      	movs	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003346:	041a      	lsls	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	2180      	movs	r1, #128	@ 0x80
 8003350:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3370      	adds	r3, #112	@ 0x70
 8003356:	001a      	movs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2280      	movs	r2, #128	@ 0x80
 8003362:	589b      	ldr	r3, [r3, r2]
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336e:	061a      	lsls	r2, r3, #24
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	2180      	movs	r1, #128	@ 0x80
 8003378:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	33b0      	adds	r3, #176	@ 0xb0
 800337e:	001a      	movs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	3389      	adds	r3, #137	@ 0x89
 8003388:	33ff      	adds	r3, #255	@ 0xff
 800338a:	001a      	movs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2298      	movs	r2, #152	@ 0x98
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	189a      	adds	r2, r3, r2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	229e      	movs	r2, #158	@ 0x9e
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	189a      	adds	r2, r3, r2
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e005      	b.n	80033ba <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3304      	adds	r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	22d4      	movs	r2, #212	@ 0xd4
 80033be:	0092      	lsls	r2, r2, #2
 80033c0:	4694      	mov	ip, r2
 80033c2:	4463      	add	r3, ip
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d3f1      	bcc.n	80033ae <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	46c0      	nop			@ (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b004      	add	sp, #16
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	4000b400 	.word	0x4000b400
 80033d8:	40006800 	.word	0x40006800
 80033dc:	ffe0ffff 	.word	0xffe0ffff
 80033e0:	f0ffffff 	.word	0xf0ffffff

080033e4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003402:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800340a:	4313      	orrs	r3, r2
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e00b      	b.n	8003428 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003418:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800341e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003420:	2280      	movs	r2, #128	@ 0x80
 8003422:	05d2      	lsls	r2, r2, #23
 8003424:	4313      	orrs	r3, r2
 8003426:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003432:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003438:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800343e:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	0013      	movs	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	189b      	adds	r3, r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	18cb      	adds	r3, r1, r3
 800345a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	3304      	adds	r3, #4
 8003466:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3304      	adds	r3, #4
 8003472:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	e020      	b.n	80034bc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3303      	adds	r3, #3
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	18d3      	adds	r3, r2, r3
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3302      	adds	r3, #2
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	18cb      	adds	r3, r1, r3
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003492:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3301      	adds	r3, #1
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	18cb      	adds	r3, r1, r3
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80034a0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	188a      	adds	r2, r1, r2
 80034a8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80034aa:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	3304      	adds	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	3304      	adds	r3, #4
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a05      	ldr	r2, [pc, #20]	@ (80034d8 <FDCAN_CopyMessageToRAM+0xf4>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	001a      	movs	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d3d6      	bcc.n	800347a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b008      	add	sp, #32
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	08009310 	.word	0x08009310

080034dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ea:	e14d      	b.n	8003788 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4091      	lsls	r1, r2
 80034f6:	000a      	movs	r2, r1
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d100      	bne.n	8003504 <HAL_GPIO_Init+0x28>
 8003502:	e13e      	b.n	8003782 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2203      	movs	r2, #3
 800350a:	4013      	ands	r3, r2
 800350c:	2b01      	cmp	r3, #1
 800350e:	d005      	beq.n	800351c <HAL_GPIO_Init+0x40>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2203      	movs	r2, #3
 8003516:	4013      	ands	r3, r2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d130      	bne.n	800357e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	409a      	lsls	r2, r3
 800352a:	0013      	movs	r3, r2
 800352c:	43da      	mvns	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	409a      	lsls	r2, r3
 800353e:	0013      	movs	r3, r2
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003552:	2201      	movs	r2, #1
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
 8003558:	0013      	movs	r3, r2
 800355a:	43da      	mvns	r2, r3
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	2201      	movs	r2, #1
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
 8003570:	0013      	movs	r3, r2
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2203      	movs	r2, #3
 8003584:	4013      	ands	r3, r2
 8003586:	2b03      	cmp	r3, #3
 8003588:	d017      	beq.n	80035ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	2203      	movs	r2, #3
 8003596:	409a      	lsls	r2, r3
 8003598:	0013      	movs	r3, r2
 800359a:	43da      	mvns	r2, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	409a      	lsls	r2, r3
 80035ac:	0013      	movs	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2203      	movs	r2, #3
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d123      	bne.n	800360e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	08da      	lsrs	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3208      	adds	r2, #8
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	58d3      	ldr	r3, [r2, r3]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2207      	movs	r2, #7
 80035d8:	4013      	ands	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	220f      	movs	r2, #15
 80035de:	409a      	lsls	r2, r3
 80035e0:	0013      	movs	r3, r2
 80035e2:	43da      	mvns	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2107      	movs	r1, #7
 80035f2:	400b      	ands	r3, r1
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	409a      	lsls	r2, r3
 80035f8:	0013      	movs	r3, r2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	0092      	lsls	r2, r2, #2
 800360a:	6939      	ldr	r1, [r7, #16]
 800360c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	409a      	lsls	r2, r3
 800361c:	0013      	movs	r3, r2
 800361e:	43da      	mvns	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2203      	movs	r2, #3
 800362c:	401a      	ands	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	409a      	lsls	r2, r3
 8003634:	0013      	movs	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	23c0      	movs	r3, #192	@ 0xc0
 8003648:	029b      	lsls	r3, r3, #10
 800364a:	4013      	ands	r3, r2
 800364c:	d100      	bne.n	8003650 <HAL_GPIO_Init+0x174>
 800364e:	e098      	b.n	8003782 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003650:	4a53      	ldr	r2, [pc, #332]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3318      	adds	r3, #24
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	589b      	ldr	r3, [r3, r2]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2203      	movs	r2, #3
 8003662:	4013      	ands	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	220f      	movs	r2, #15
 8003668:	409a      	lsls	r2, r3
 800366a:	0013      	movs	r3, r2
 800366c:	43da      	mvns	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	23a0      	movs	r3, #160	@ 0xa0
 8003678:	05db      	lsls	r3, r3, #23
 800367a:	429a      	cmp	r2, r3
 800367c:	d019      	beq.n	80036b2 <HAL_GPIO_Init+0x1d6>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a48      	ldr	r2, [pc, #288]	@ (80037a4 <HAL_GPIO_Init+0x2c8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_GPIO_Init+0x1d2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a47      	ldr	r2, [pc, #284]	@ (80037a8 <HAL_GPIO_Init+0x2cc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00d      	beq.n	80036aa <HAL_GPIO_Init+0x1ce>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a46      	ldr	r2, [pc, #280]	@ (80037ac <HAL_GPIO_Init+0x2d0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <HAL_GPIO_Init+0x1ca>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a45      	ldr	r2, [pc, #276]	@ (80037b0 <HAL_GPIO_Init+0x2d4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_GPIO_Init+0x1c6>
 800369e:	2304      	movs	r3, #4
 80036a0:	e008      	b.n	80036b4 <HAL_GPIO_Init+0x1d8>
 80036a2:	2305      	movs	r3, #5
 80036a4:	e006      	b.n	80036b4 <HAL_GPIO_Init+0x1d8>
 80036a6:	2303      	movs	r3, #3
 80036a8:	e004      	b.n	80036b4 <HAL_GPIO_Init+0x1d8>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e002      	b.n	80036b4 <HAL_GPIO_Init+0x1d8>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_GPIO_Init+0x1d8>
 80036b2:	2300      	movs	r3, #0
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	2103      	movs	r1, #3
 80036b8:	400a      	ands	r2, r1
 80036ba:	00d2      	lsls	r2, r2, #3
 80036bc:	4093      	lsls	r3, r2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80036c4:	4936      	ldr	r1, [pc, #216]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3318      	adds	r3, #24
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036d2:	4b33      	ldr	r3, [pc, #204]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43da      	mvns	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	2380      	movs	r3, #128	@ 0x80
 80036e8:	035b      	lsls	r3, r3, #13
 80036ea:	4013      	ands	r3, r2
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036f6:	4b2a      	ldr	r3, [pc, #168]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80036fc:	4b28      	ldr	r3, [pc, #160]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43da      	mvns	r2, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	2380      	movs	r3, #128	@ 0x80
 8003712:	039b      	lsls	r3, r3, #14
 8003714:	4013      	ands	r3, r2
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003720:	4b1f      	ldr	r3, [pc, #124]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003726:	4a1e      	ldr	r2, [pc, #120]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 8003728:	2384      	movs	r3, #132	@ 0x84
 800372a:	58d3      	ldr	r3, [r2, r3]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	43da      	mvns	r2, r3
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	029b      	lsls	r3, r3, #10
 8003740:	4013      	ands	r3, r2
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800374c:	4914      	ldr	r1, [pc, #80]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 800374e:	2284      	movs	r2, #132	@ 0x84
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003754:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 8003756:	2380      	movs	r3, #128	@ 0x80
 8003758:	58d3      	ldr	r3, [r2, r3]
 800375a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	43da      	mvns	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	025b      	lsls	r3, r3, #9
 800376e:	4013      	ands	r3, r2
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800377a:	4909      	ldr	r1, [pc, #36]	@ (80037a0 <HAL_GPIO_Init+0x2c4>)
 800377c:	2280      	movs	r2, #128	@ 0x80
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	3301      	adds	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	40da      	lsrs	r2, r3
 8003790:	1e13      	subs	r3, r2, #0
 8003792:	d000      	beq.n	8003796 <HAL_GPIO_Init+0x2ba>
 8003794:	e6aa      	b.n	80034ec <HAL_GPIO_Init+0x10>
  }
}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	46c0      	nop			@ (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b006      	add	sp, #24
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021800 	.word	0x40021800
 80037a4:	50000400 	.word	0x50000400
 80037a8:	50000800 	.word	0x50000800
 80037ac:	50000c00 	.word	0x50000c00
 80037b0:	50001000 	.word	0x50001000

080037b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	000a      	movs	r2, r1
 80037be:	1cbb      	adds	r3, r7, #2
 80037c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	1cba      	adds	r2, r7, #2
 80037c8:	8812      	ldrh	r2, [r2, #0]
 80037ca:	4013      	ands	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80037ce:	230f      	movs	r3, #15
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e003      	b.n	80037e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037d8:	230f      	movs	r3, #15
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80037e0:	230f      	movs	r3, #15
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	781b      	ldrb	r3, [r3, #0]
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b004      	add	sp, #16
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	0008      	movs	r0, r1
 80037f8:	0011      	movs	r1, r2
 80037fa:	1cbb      	adds	r3, r7, #2
 80037fc:	1c02      	adds	r2, r0, #0
 80037fe:	801a      	strh	r2, [r3, #0]
 8003800:	1c7b      	adds	r3, r7, #1
 8003802:	1c0a      	adds	r2, r1, #0
 8003804:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003806:	1c7b      	adds	r3, r7, #1
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d004      	beq.n	8003818 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800380e:	1cbb      	adds	r3, r7, #2
 8003810:	881a      	ldrh	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003816:	e003      	b.n	8003820 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003818:	1cbb      	adds	r3, r7, #2
 800381a:	881a      	ldrh	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	000a      	movs	r2, r1
 8003832:	1cbb      	adds	r3, r7, #2
 8003834:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800383c:	1cbb      	adds	r3, r7, #2
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4013      	ands	r3, r2
 8003844:	041a      	lsls	r2, r3, #16
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	43db      	mvns	r3, r3
 800384a:	1cb9      	adds	r1, r7, #2
 800384c:	8809      	ldrh	r1, [r1, #0]
 800384e:	400b      	ands	r3, r1
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	619a      	str	r2, [r3, #24]
}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b004      	add	sp, #16
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	000a      	movs	r2, r1
 800386a:	1cbb      	adds	r3, r7, #2
 800386c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800386e:	230a      	movs	r3, #10
 8003870:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8003872:	e002      	b.n	800387a <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f9      	bne.n	8003874 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8003880:	1cbb      	adds	r3, r7, #2
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4a06      	ldr	r2, [pc, #24]	@ (80038a0 <PCD_GET_EP_RX_CNT+0x40>)
 8003888:	4694      	mov	ip, r2
 800388a:	4463      	add	r3, ip
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	b29b      	uxth	r3, r3
 8003892:	059b      	lsls	r3, r3, #22
 8003894:	0d9b      	lsrs	r3, r3, #22
 8003896:	b29b      	uxth	r3, r3
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b004      	add	sp, #16
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40009800 	.word	0x40009800

080038a4 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	000a      	movs	r2, r1
 80038ae:	1cbb      	adds	r3, r7, #2
 80038b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80038b2:	230a      	movs	r3, #10
 80038b4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80038b6:	e002      	b.n	80038be <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f9      	bne.n	80038b8 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80038c4:	1cbb      	adds	r3, r7, #2
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4a06      	ldr	r2, [pc, #24]	@ (80038e4 <PCD_GET_EP_DBUF0_CNT+0x40>)
 80038cc:	4694      	mov	ip, r2
 80038ce:	4463      	add	r3, ip
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	059b      	lsls	r3, r3, #22
 80038d8:	0d9b      	lsrs	r3, r3, #22
 80038da:	b29b      	uxth	r3, r3
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b004      	add	sp, #16
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40009800 	.word	0x40009800

080038e8 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	000a      	movs	r2, r1
 80038f2:	1cbb      	adds	r3, r7, #2
 80038f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80038f6:	230a      	movs	r3, #10
 80038f8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80038fa:	e002      	b.n	8003902 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3b01      	subs	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f9      	bne.n	80038fc <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8003908:	1cbb      	adds	r3, r7, #2
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4a06      	ldr	r2, [pc, #24]	@ (8003928 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8003910:	4694      	mov	ip, r2
 8003912:	4463      	add	r3, ip
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	b29b      	uxth	r3, r3
 800391a:	059b      	lsls	r3, r3, #22
 800391c:	0d9b      	lsrs	r3, r3, #22
 800391e:	b29b      	uxth	r3, r3
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b004      	add	sp, #16
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40009800 	.word	0x40009800

0800392c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b087      	sub	sp, #28
 8003930:	af02      	add	r7, sp, #8
 8003932:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0ea      	b.n	8003b14 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a76      	ldr	r2, [pc, #472]	@ (8003b1c <HAL_PCD_Init+0x1f0>)
 8003942:	5c9b      	ldrb	r3, [r3, r2]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	23a5      	movs	r3, #165	@ 0xa5
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	2100      	movs	r1, #0
 8003952:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	0018      	movs	r0, r3
 8003958:	f7fe ffe8 	bl	800292c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b1c <HAL_PCD_Init+0x1f0>)
 8003960:	2103      	movs	r1, #3
 8003962:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	0018      	movs	r0, r3
 800396a:	f003 faa7 	bl	8006ebc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800396e:	230f      	movs	r3, #15
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e049      	b.n	8003a0c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003978:	200f      	movs	r0, #15
 800397a:	183b      	adds	r3, r7, r0
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	0013      	movs	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	189b      	adds	r3, r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	18cb      	adds	r3, r1, r3
 800398a:	3315      	adds	r3, #21
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003990:	183b      	adds	r3, r7, r0
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	0013      	movs	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	189b      	adds	r3, r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	18cb      	adds	r3, r1, r3
 80039a0:	3314      	adds	r3, #20
 80039a2:	183a      	adds	r2, r7, r0
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039a8:	183b      	adds	r3, r7, r0
 80039aa:	781a      	ldrb	r2, [r3, #0]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	0013      	movs	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	18cb      	adds	r3, r1, r3
 80039b8:	3317      	adds	r3, #23
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	0013      	movs	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	189b      	adds	r3, r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	18cb      	adds	r3, r1, r3
 80039ce:	3324      	adds	r3, #36	@ 0x24
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039d4:	183b      	adds	r3, r7, r0
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	0013      	movs	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	18cb      	adds	r3, r1, r3
 80039e4:	3328      	adds	r3, #40	@ 0x28
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039ea:	183b      	adds	r3, r7, r0
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	0013      	movs	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	18cb      	adds	r3, r1, r3
 80039fc:	3304      	adds	r3, #4
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	183b      	adds	r3, r7, r0
 8003a08:	3201      	adds	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	791b      	ldrb	r3, [r3, #4]
 8003a10:	210f      	movs	r1, #15
 8003a12:	187a      	adds	r2, r7, r1
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3ae      	bcc.n	8003978 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1a:	187b      	adds	r3, r7, r1
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	e056      	b.n	8003ad0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a22:	240f      	movs	r4, #15
 8003a24:	193b      	adds	r3, r7, r4
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	2356      	movs	r3, #86	@ 0x56
 8003a2c:	33ff      	adds	r3, #255	@ 0xff
 8003a2e:	0019      	movs	r1, r3
 8003a30:	0013      	movs	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	189b      	adds	r3, r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	18c3      	adds	r3, r0, r3
 8003a3a:	185b      	adds	r3, r3, r1
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a40:	193b      	adds	r3, r7, r4
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	23aa      	movs	r3, #170	@ 0xaa
 8003a48:	0059      	lsls	r1, r3, #1
 8003a4a:	0013      	movs	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	18c3      	adds	r3, r0, r3
 8003a54:	185b      	adds	r3, r3, r1
 8003a56:	193a      	adds	r2, r7, r4
 8003a58:	7812      	ldrb	r2, [r2, #0]
 8003a5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	2358      	movs	r3, #88	@ 0x58
 8003a64:	33ff      	adds	r3, #255	@ 0xff
 8003a66:	0019      	movs	r1, r3
 8003a68:	0013      	movs	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	189b      	adds	r3, r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	18c3      	adds	r3, r0, r3
 8003a72:	185b      	adds	r3, r3, r1
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a78:	193b      	adds	r3, r7, r4
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	23b2      	movs	r3, #178	@ 0xb2
 8003a80:	0059      	lsls	r1, r3, #1
 8003a82:	0013      	movs	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	18c3      	adds	r3, r0, r3
 8003a8c:	185b      	adds	r3, r3, r1
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	23b4      	movs	r3, #180	@ 0xb4
 8003a9a:	0059      	lsls	r1, r3, #1
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	18c3      	adds	r3, r0, r3
 8003aa6:	185b      	adds	r3, r3, r1
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003aac:	193b      	adds	r3, r7, r4
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	23b6      	movs	r3, #182	@ 0xb6
 8003ab4:	0059      	lsls	r1, r3, #1
 8003ab6:	0013      	movs	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	18c3      	adds	r3, r0, r3
 8003ac0:	185b      	adds	r3, r3, r1
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	3201      	adds	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	791b      	ldrb	r3, [r3, #4]
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	18ba      	adds	r2, r7, r2
 8003ad8:	7812      	ldrb	r2, [r2, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d3a1      	bcc.n	8003a22 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	466a      	mov	r2, sp
 8003ae6:	7c19      	ldrb	r1, [r3, #16]
 8003ae8:	7011      	strb	r1, [r2, #0]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 fa1d 	bl	8006f2e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a07      	ldr	r2, [pc, #28]	@ (8003b1c <HAL_PCD_Init+0x1f0>)
 8003afe:	2101      	movs	r1, #1
 8003b00:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7b1b      	ldrb	r3, [r3, #12]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d103      	bne.n	8003b12 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f001 f9a9 	bl	8004e64 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b005      	add	sp, #20
 8003b1a:	bd90      	pop	{r4, r7, pc}
 8003b1c:	00000295 	.word	0x00000295

08003b20 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f004 fa52 	bl	8007fd6 <USB_ReadInterrupts>
 8003b32:	0003      	movs	r3, r0
 8003b34:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 8003b36:	4a7c      	ldr	r2, [pc, #496]	@ (8003d28 <HAL_PCD_IRQHandler+0x208>)
 8003b38:	23a0      	movs	r3, #160	@ 0xa0
 8003b3a:	58d3      	ldr	r3, [r2, r3]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d100      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x24>
 8003b42:	e0ed      	b.n	8003d20 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 f963 	bl	8003e1c <PCD_EP_ISR_Handler>

    return;
 8003b56:	e0e4      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	2380      	movs	r3, #128	@ 0x80
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d011      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	496f      	ldr	r1, [pc, #444]	@ (8003d2c <HAL_PCD_IRQHandler+0x20c>)
 8003b6e:	400a      	ands	r2, r1
 8003b70:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f000 f90f 	bl	8003d98 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 f922 	bl	8003dc8 <HAL_PCD_SetAddress>

    return;
 8003b84:	e0cd      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	01db      	lsls	r3, r3, #7
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d008      	beq.n	8003ba2 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4965      	ldr	r1, [pc, #404]	@ (8003d30 <HAL_PCD_IRQHandler+0x210>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8003ba0:	e0bf      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	2380      	movs	r3, #128	@ 0x80
 8003ba6:	019b      	lsls	r3, r3, #6
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d008      	beq.n	8003bbe <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	495f      	ldr	r1, [pc, #380]	@ (8003d34 <HAL_PCD_IRQHandler+0x214>)
 8003bb8:	400a      	ands	r2, r1
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8003bbc:	e0b1      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	2380      	movs	r3, #128	@ 0x80
 8003bc2:	015b      	lsls	r3, r3, #5
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d02c      	beq.n	8003c22 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	438a      	bics	r2, r1
 8003bd6:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2108      	movs	r1, #8
 8003be4:	438a      	bics	r2, r1
 8003be6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	23b3      	movs	r3, #179	@ 0xb3
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d109      	bne.n	8003c08 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	23b3      	movs	r3, #179	@ 0xb3
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2100      	movs	r1, #0
 8003c02:	0018      	movs	r0, r3
 8003c04:	f001 f950 	bl	8004ea8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f000 f8d4 	bl	8003db8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4947      	ldr	r1, [pc, #284]	@ (8003d38 <HAL_PCD_IRQHandler+0x218>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8003c20:	e07f      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	2380      	movs	r3, #128	@ 0x80
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d01c      	beq.n	8003c66 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2108      	movs	r1, #8
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	493d      	ldr	r1, [pc, #244]	@ (8003d3c <HAL_PCD_IRQHandler+0x21c>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2104      	movs	r1, #4
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 f8a2 	bl	8003da8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003c64:	e05d      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2280      	movs	r2, #128	@ 0x80
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d038      	beq.n	8003ce0 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4931      	ldr	r1, [pc, #196]	@ (8003d40 <HAL_PCD_IRQHandler+0x220>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	23b3      	movs	r3, #179	@ 0xb3
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	5cd3      	ldrb	r3, [r2, r3]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d125      	bne.n	8003cd6 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2104      	movs	r1, #4
 8003c96:	430a      	orrs	r2, r1
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2108      	movs	r1, #8
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	23b3      	movs	r3, #179	@ 0xb3
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	223c      	movs	r2, #60	@ 0x3c
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	0019      	movs	r1, r3
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	23b4      	movs	r3, #180	@ 0xb4
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2101      	movs	r1, #1
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f001 f8ea 	bl	8004ea8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003cd4:	e025      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f000 f865 	bl	8003da8 <HAL_PCD_SuspendCallback>
    return;
 8003cde:	e020      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	2380      	movs	r3, #128	@ 0x80
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d00c      	beq.n	8003d04 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4913      	ldr	r1, [pc, #76]	@ (8003d44 <HAL_PCD_IRQHandler+0x224>)
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 f843 	bl	8003d88 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d02:	e00e      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	2380      	movs	r3, #128	@ 0x80
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d009      	beq.n	8003d22 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	490b      	ldr	r1, [pc, #44]	@ (8003d48 <HAL_PCD_IRQHandler+0x228>)
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8003d1e:	e000      	b.n	8003d22 <HAL_PCD_IRQHandler+0x202>
    return;
 8003d20:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b004      	add	sp, #16
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	0000fbff 	.word	0x0000fbff
 8003d30:	0000bfff 	.word	0x0000bfff
 8003d34:	0000dfff 	.word	0x0000dfff
 8003d38:	0000efff 	.word	0x0000efff
 8003d3c:	0000f7ff 	.word	0x0000f7ff
 8003d40:	0000ff7f 	.word	0x0000ff7f
 8003d44:	0000fdff 	.word	0x0000fdff
 8003d48:	0000feff 	.word	0x0000feff

08003d4c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	000a      	movs	r2, r1
 8003d56:	1cfb      	adds	r3, r7, #3
 8003d58:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b002      	add	sp, #8
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	000a      	movs	r2, r1
 8003d6c:	1cfb      	adds	r3, r7, #3
 8003d6e:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003d80:	46c0      	nop			@ (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003d90:	46c0      	nop			@ (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003da0:	46c0      	nop			@ (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	000a      	movs	r2, r1
 8003dd2:	1cfb      	adds	r3, r7, #3
 8003dd4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	23a5      	movs	r3, #165	@ 0xa5
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_PCD_SetAddress+0x1e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e016      	b.n	8003e14 <HAL_PCD_SetAddress+0x4c>
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	23a5      	movs	r3, #165	@ 0xa5
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	2101      	movs	r1, #1
 8003dee:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	1cfa      	adds	r2, r7, #3
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	1cfb      	adds	r3, r7, #3
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	0019      	movs	r1, r3
 8003e02:	0010      	movs	r0, r2
 8003e04:	f004 f8d4 	bl	8007fb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	23a5      	movs	r3, #165	@ 0xa5
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	2100      	movs	r1, #0
 8003e10:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e1c:	b5b0      	push	{r4, r5, r7, lr}
 8003e1e:	b08e      	sub	sp, #56	@ 0x38
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e24:	e355      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e2c:	2022      	movs	r0, #34	@ 0x22
 8003e2e:	183b      	adds	r3, r7, r0
 8003e30:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8003e32:	183b      	adds	r3, r7, r0
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	2421      	movs	r4, #33	@ 0x21
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	210f      	movs	r1, #15
 8003e3e:	400a      	ands	r2, r1
 8003e40:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d000      	beq.n	8003e4c <PCD_EP_ISR_Handler+0x30>
 8003e4a:	e12b      	b.n	80040a4 <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e4c:	183b      	adds	r3, r7, r0
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	2210      	movs	r2, #16
 8003e52:	4013      	ands	r3, r2
 8003e54:	d140      	bne.n	8003ed8 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4ac5      	ldr	r2, [pc, #788]	@ (8004174 <PCD_EP_ISR_Handler+0x358>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	2180      	movs	r1, #128	@ 0x80
 8003e6a:	0209      	lsls	r1, r1, #8
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3314      	adds	r3, #20
 8003e74:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4abe      	ldr	r2, [pc, #760]	@ (8004178 <PCD_EP_ISR_Handler+0x35c>)
 8003e7e:	4694      	mov	ip, r2
 8003e80:	4463      	add	r3, ip
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	059b      	lsls	r3, r3, #22
 8003e88:	0d9a      	lsrs	r2, r3, #22
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	18d2      	adds	r2, r2, r3
 8003e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7ff ff5e 	bl	8003d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	7c5b      	ldrb	r3, [r3, #17]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d100      	bne.n	8003eb2 <PCD_EP_ISR_Handler+0x96>
 8003eb0:	e30f      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d000      	beq.n	8003ebc <PCD_EP_ISR_Handler+0xa0>
 8003eba:	e30a      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7c5b      	ldrb	r3, [r3, #17]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2280      	movs	r2, #128	@ 0x80
 8003ec4:	4252      	negs	r2, r2
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	745a      	strb	r2, [r3, #17]
 8003ed6:	e2fc      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3355      	adds	r3, #85	@ 0x55
 8003edc:	33ff      	adds	r3, #255	@ 0xff
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	2132      	movs	r1, #50	@ 0x32
 8003ee8:	187b      	adds	r3, r7, r1
 8003eea:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	881a      	ldrh	r2, [r3, #0]
 8003ef0:	2380      	movs	r3, #128	@ 0x80
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d029      	beq.n	8003f4c <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	0019      	movs	r1, r3
 8003f02:	0010      	movs	r0, r2
 8003f04:	f7ff fcac 	bl	8003860 <PCD_GET_EP_RX_CNT>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	001a      	movs	r2, r3
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	22a7      	movs	r2, #167	@ 0xa7
 8003f18:	0092      	lsls	r2, r2, #2
 8003f1a:	1899      	adds	r1, r3, r2
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f004 f8d9 	bl	80080dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a92      	ldr	r2, [pc, #584]	@ (800417c <PCD_EP_ISR_Handler+0x360>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	2180      	movs	r1, #128	@ 0x80
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff ff17 	bl	8003d78 <HAL_PCD_SetupStageCallback>
 8003f4a:	e2c2      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8003f4c:	2332      	movs	r3, #50	@ 0x32
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	2200      	movs	r2, #0
 8003f52:	5e9b      	ldrsh	r3, [r3, r2]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db00      	blt.n	8003f5a <PCD_EP_ISR_Handler+0x13e>
 8003f58:	e2bb      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a86      	ldr	r2, [pc, #536]	@ (800417c <PCD_EP_ISR_Handler+0x360>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f6c:	2180      	movs	r1, #128	@ 0x80
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	0010      	movs	r0, r2
 8003f7e:	f7ff fc6f 	bl	8003860 <PCD_GET_EP_RX_CNT>
 8003f82:	0003      	movs	r3, r0
 8003f84:	001a      	movs	r2, r3
 8003f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f88:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01a      	beq.n	8003fc8 <PCD_EP_ISR_Handler+0x1ac>
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d016      	beq.n	8003fc8 <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa0:	6959      	ldr	r1, [r3, #20]
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f004 f896 	bl	80080dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	18d2      	adds	r2, r2, r3
 8003fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fbc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7ff fec2 	bl	8003d4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	2132      	movs	r1, #50	@ 0x32
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	881a      	ldrh	r2, [r3, #0]
 8003fd8:	2380      	movs	r3, #128	@ 0x80
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d000      	beq.n	8003fe2 <PCD_EP_ISR_Handler+0x1c6>
 8003fe0:	e277      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	881a      	ldrh	r2, [r3, #0]
 8003fe6:	23c0      	movs	r3, #192	@ 0xc0
 8003fe8:	019b      	lsls	r3, r3, #6
 8003fea:	401a      	ands	r2, r3
 8003fec:	23c0      	movs	r3, #192	@ 0xc0
 8003fee:	019b      	lsls	r3, r3, #6
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d100      	bne.n	8003ff6 <PCD_EP_ISR_Handler+0x1da>
 8003ff4:	e26d      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ff6:	4b60      	ldr	r3, [pc, #384]	@ (8004178 <PCD_EP_ISR_Handler+0x35c>)
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8004178 <PCD_EP_ISR_Handler+0x35c>)
 8003ffc:	0192      	lsls	r2, r2, #6
 8003ffe:	0992      	lsrs	r2, r2, #6
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b3e      	cmp	r3, #62	@ 0x3e
 8004008:	d916      	bls.n	8004038 <PCD_EP_ISR_Handler+0x21c>
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	221f      	movs	r2, #31
 8004018:	4013      	ands	r3, r2
 800401a:	d102      	bne.n	8004022 <PCD_EP_ISR_Handler+0x206>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3b01      	subs	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	4b55      	ldr	r3, [pc, #340]	@ (8004178 <PCD_EP_ISR_Handler+0x35c>)
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	069b      	lsls	r3, r3, #26
 800402a:	431a      	orrs	r2, r3
 800402c:	4b52      	ldr	r3, [pc, #328]	@ (8004178 <PCD_EP_ISR_Handler+0x35c>)
 800402e:	2180      	movs	r1, #128	@ 0x80
 8004030:	0609      	lsls	r1, r1, #24
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e01e      	b.n	8004076 <PCD_EP_ISR_Handler+0x25a>
 8004038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d107      	bne.n	8004050 <PCD_EP_ISR_Handler+0x234>
 8004040:	4b4d      	ldr	r3, [pc, #308]	@ (8004178 <PCD_EP_ISR_Handler+0x35c>)
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4b4c      	ldr	r3, [pc, #304]	@ (8004178 <PCD_EP_ISR_Handler+0x35c>)
 8004046:	2180      	movs	r1, #128	@ 0x80
 8004048:	0609      	lsls	r1, r1, #24
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	e012      	b.n	8004076 <PCD_EP_ISR_Handler+0x25a>
 8004050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2201      	movs	r2, #1
 800405e:	4013      	ands	r3, r2
 8004060:	d002      	beq.n	8004068 <PCD_EP_ISR_Handler+0x24c>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	3301      	adds	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	4b43      	ldr	r3, [pc, #268]	@ (8004178 <PCD_EP_ISR_Handler+0x35c>)
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	069a      	lsls	r2, r3, #26
 8004070:	4b41      	ldr	r3, [pc, #260]	@ (8004178 <PCD_EP_ISR_Handler+0x35c>)
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a40      	ldr	r2, [pc, #256]	@ (8004180 <PCD_EP_ISR_Handler+0x364>)
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2280      	movs	r2, #128	@ 0x80
 8004086:	0152      	lsls	r2, r2, #5
 8004088:	4053      	eors	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2280      	movs	r2, #128	@ 0x80
 8004090:	0192      	lsls	r2, r2, #6
 8004092:	4053      	eors	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4939      	ldr	r1, [pc, #228]	@ (8004184 <PCD_EP_ISR_Handler+0x368>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e216      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	001a      	movs	r2, r3
 80040aa:	2121      	movs	r1, #33	@ 0x21
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	18d3      	adds	r3, r2, r3
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	2032      	movs	r0, #50	@ 0x32
 80040b8:	183b      	adds	r3, r7, r0
 80040ba:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80040bc:	183b      	adds	r3, r7, r0
 80040be:	2200      	movs	r2, #0
 80040c0:	5e9b      	ldrsh	r3, [r3, r2]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	db00      	blt.n	80040c8 <PCD_EP_ISR_Handler+0x2ac>
 80040c6:	e0e0      	b.n	800428a <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	001a      	movs	r2, r3
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a28      	ldr	r2, [pc, #160]	@ (800417c <PCD_EP_ISR_Handler+0x360>)
 80040da:	4013      	ands	r3, r2
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	001a      	movs	r2, r3
 80040e4:	0008      	movs	r0, r1
 80040e6:	187b      	adds	r3, r7, r1
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	18d3      	adds	r3, r2, r3
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	2180      	movs	r1, #128	@ 0x80
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80040f6:	183b      	adds	r3, r7, r0
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	0013      	movs	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	3351      	adds	r3, #81	@ 0x51
 8004104:	33ff      	adds	r3, #255	@ 0xff
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	18d3      	adds	r3, r2, r3
 800410a:	3304      	adds	r3, #4
 800410c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800410e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004110:	7b1b      	ldrb	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11c      	bne.n	8004150 <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2524      	movs	r5, #36	@ 0x24
 8004120:	197c      	adds	r4, r7, r5
 8004122:	0019      	movs	r1, r3
 8004124:	0010      	movs	r0, r2
 8004126:	f7ff fb9b 	bl	8003860 <PCD_GET_EP_RX_CNT>
 800412a:	0003      	movs	r3, r0
 800412c:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800412e:	002c      	movs	r4, r5
 8004130:	193b      	adds	r3, r7, r4
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d100      	bne.n	800413a <PCD_EP_ISR_Handler+0x31e>
 8004138:	e07f      	b.n	800423a <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004140:	6959      	ldr	r1, [r3, #20]
 8004142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004144:	88da      	ldrh	r2, [r3, #6]
 8004146:	193b      	adds	r3, r7, r4
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	f003 ffc7 	bl	80080dc <USB_ReadPMA>
 800414e:	e074      	b.n	800423a <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004152:	78db      	ldrb	r3, [r3, #3]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d117      	bne.n	8004188 <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004158:	2324      	movs	r3, #36	@ 0x24
 800415a:	18fc      	adds	r4, r7, r3
 800415c:	2332      	movs	r3, #50	@ 0x32
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	881a      	ldrh	r2, [r3, #0]
 8004162:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	0018      	movs	r0, r3
 8004168:	f000 f9c8 	bl	80044fc <HAL_PCD_EP_DB_Receive>
 800416c:	0003      	movs	r3, r0
 800416e:	8023      	strh	r3, [r4, #0]
 8004170:	e063      	b.n	800423a <PCD_EP_ISR_Handler+0x41e>
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	07ff8f0f 	.word	0x07ff8f0f
 8004178:	40009800 	.word	0x40009800
 800417c:	07ff0f8f 	.word	0x07ff0f8f
 8004180:	07ffbf8f 	.word	0x07ffbf8f
 8004184:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	001a      	movs	r2, r3
 800418e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	18d3      	adds	r3, r2, r3
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4ad4      	ldr	r2, [pc, #848]	@ (80044ec <PCD_EP_ISR_Handler+0x6d0>)
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	001a      	movs	r2, r3
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	18d3      	adds	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	49d0      	ldr	r1, [pc, #832]	@ (80044f0 <PCD_EP_ISR_Handler+0x6d4>)
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	001a      	movs	r2, r3
 80041ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	18d3      	adds	r3, r2, r3
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2380      	movs	r3, #128	@ 0x80
 80041c6:	01db      	lsls	r3, r3, #7
 80041c8:	4013      	ands	r3, r2
 80041ca:	d01b      	beq.n	8004204 <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2524      	movs	r5, #36	@ 0x24
 80041d6:	197c      	adds	r4, r7, r5
 80041d8:	0019      	movs	r1, r3
 80041da:	0010      	movs	r0, r2
 80041dc:	f7ff fb62 	bl	80038a4 <PCD_GET_EP_DBUF0_CNT>
 80041e0:	0003      	movs	r3, r0
 80041e2:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80041e4:	002c      	movs	r4, r5
 80041e6:	193b      	adds	r3, r7, r4
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d025      	beq.n	800423a <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f4:	6959      	ldr	r1, [r3, #20]
 80041f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f8:	891a      	ldrh	r2, [r3, #8]
 80041fa:	193b      	adds	r3, r7, r4
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	f003 ff6d 	bl	80080dc <USB_ReadPMA>
 8004202:	e01a      	b.n	800423a <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2524      	movs	r5, #36	@ 0x24
 800420e:	197c      	adds	r4, r7, r5
 8004210:	0019      	movs	r1, r3
 8004212:	0010      	movs	r0, r2
 8004214:	f7ff fb68 	bl	80038e8 <PCD_GET_EP_DBUF1_CNT>
 8004218:	0003      	movs	r3, r0
 800421a:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800421c:	002c      	movs	r4, r5
 800421e:	193b      	adds	r3, r7, r4
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422c:	6959      	ldr	r1, [r3, #20]
 800422e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004230:	895a      	ldrh	r2, [r3, #10]
 8004232:	193b      	adds	r3, r7, r4
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	f003 ff51 	bl	80080dc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800423a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	2124      	movs	r1, #36	@ 0x24
 8004240:	187b      	adds	r3, r7, r1
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	18d2      	adds	r2, r2, r3
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800424a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	187b      	adds	r3, r7, r1
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	18d2      	adds	r2, r2, r3
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <PCD_EP_ISR_Handler+0x450>
 8004260:	187b      	adds	r3, r7, r1
 8004262:	881a      	ldrh	r2, [r3, #0]
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d207      	bcs.n	800427c <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800426c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426e:	781a      	ldrb	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0011      	movs	r1, r2
 8004274:	0018      	movs	r0, r3
 8004276:	f7ff fd69 	bl	8003d4c <HAL_PCD_DataOutStageCallback>
 800427a:	e006      	b.n	800428a <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f002 fe7d 	bl	8006f84 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800428a:	2032      	movs	r0, #50	@ 0x32
 800428c:	183b      	adds	r3, r7, r0
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	2280      	movs	r2, #128	@ 0x80
 8004292:	4013      	ands	r3, r2
 8004294:	d100      	bne.n	8004298 <PCD_EP_ISR_Handler+0x47c>
 8004296:	e11c      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 8004298:	2121      	movs	r1, #33	@ 0x21
 800429a:	187b      	adds	r3, r7, r1
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	0013      	movs	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	3310      	adds	r3, #16
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	18d3      	adds	r3, r2, r3
 80042ac:	3304      	adds	r3, #4
 80042ae:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	001a      	movs	r2, r3
 80042b6:	187b      	adds	r3, r7, r1
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	18d3      	adds	r3, r2, r3
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a8c      	ldr	r2, [pc, #560]	@ (80044f4 <PCD_EP_ISR_Handler+0x6d8>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	001a      	movs	r2, r3
 80042cc:	187b      	adds	r3, r7, r1
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	18d3      	adds	r3, r2, r3
 80042d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042d6:	2180      	movs	r1, #128	@ 0x80
 80042d8:	0209      	lsls	r1, r1, #8
 80042da:	430a      	orrs	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80042de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e0:	78db      	ldrb	r3, [r3, #3]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d000      	beq.n	80042e8 <PCD_EP_ISR_Handler+0x4cc>
 80042e6:	e0a3      	b.n	8004430 <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ea:	2200      	movs	r2, #0
 80042ec:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80042ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f0:	7b1b      	ldrb	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d100      	bne.n	80042f8 <PCD_EP_ISR_Handler+0x4dc>
 80042f6:	e093      	b.n	8004420 <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	2240      	movs	r2, #64	@ 0x40
 80042fe:	4013      	ands	r3, r2
 8004300:	d047      	beq.n	8004392 <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d121      	bne.n	800434e <PCD_EP_ISR_Handler+0x532>
 800430a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4a79      	ldr	r2, [pc, #484]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 8004312:	4694      	mov	ip, r2
 8004314:	4463      	add	r3, ip
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4976      	ldr	r1, [pc, #472]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 8004320:	468c      	mov	ip, r1
 8004322:	4463      	add	r3, ip
 8004324:	0192      	lsls	r2, r2, #6
 8004326:	0992      	lsrs	r2, r2, #6
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4a71      	ldr	r2, [pc, #452]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 8004332:	4694      	mov	ip, r2
 8004334:	4463      	add	r3, ip
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	496e      	ldr	r1, [pc, #440]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 8004340:	468c      	mov	ip, r1
 8004342:	4463      	add	r3, ip
 8004344:	2180      	movs	r1, #128	@ 0x80
 8004346:	0609      	lsls	r1, r1, #24
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e068      	b.n	8004420 <PCD_EP_ISR_Handler+0x604>
 800434e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004350:	785b      	ldrb	r3, [r3, #1]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d164      	bne.n	8004420 <PCD_EP_ISR_Handler+0x604>
 8004356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4a66      	ldr	r2, [pc, #408]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 800435e:	4694      	mov	ip, r2
 8004360:	4463      	add	r3, ip
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4963      	ldr	r1, [pc, #396]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 800436c:	468c      	mov	ip, r1
 800436e:	4463      	add	r3, ip
 8004370:	0412      	lsls	r2, r2, #16
 8004372:	0c12      	lsrs	r2, r2, #16
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4a5e      	ldr	r2, [pc, #376]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 800437e:	189a      	adds	r2, r3, r2
 8004380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	495c      	ldr	r1, [pc, #368]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 8004388:	468c      	mov	ip, r1
 800438a:	4463      	add	r3, ip
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	e046      	b.n	8004420 <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004394:	785b      	ldrb	r3, [r3, #1]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d121      	bne.n	80043de <PCD_EP_ISR_Handler+0x5c2>
 800439a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4a55      	ldr	r2, [pc, #340]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 80043a2:	4694      	mov	ip, r2
 80043a4:	4463      	add	r3, ip
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4952      	ldr	r1, [pc, #328]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 80043b0:	468c      	mov	ip, r1
 80043b2:	4463      	add	r3, ip
 80043b4:	0192      	lsls	r2, r2, #6
 80043b6:	0992      	lsrs	r2, r2, #6
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4a4d      	ldr	r2, [pc, #308]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 80043c2:	4694      	mov	ip, r2
 80043c4:	4463      	add	r3, ip
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	494a      	ldr	r1, [pc, #296]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 80043d0:	468c      	mov	ip, r1
 80043d2:	4463      	add	r3, ip
 80043d4:	2180      	movs	r1, #128	@ 0x80
 80043d6:	0609      	lsls	r1, r1, #24
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	e020      	b.n	8004420 <PCD_EP_ISR_Handler+0x604>
 80043de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d11c      	bne.n	8004420 <PCD_EP_ISR_Handler+0x604>
 80043e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4a42      	ldr	r2, [pc, #264]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 80043ee:	4694      	mov	ip, r2
 80043f0:	4463      	add	r3, ip
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	493f      	ldr	r1, [pc, #252]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 80043fc:	468c      	mov	ip, r1
 80043fe:	4463      	add	r3, ip
 8004400:	0412      	lsls	r2, r2, #16
 8004402:	0c12      	lsrs	r2, r2, #16
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4a3a      	ldr	r2, [pc, #232]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 800440e:	189a      	adds	r2, r3, r2
 8004410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4938      	ldr	r1, [pc, #224]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 8004418:	468c      	mov	ip, r1
 800441a:	4463      	add	r3, ip
 800441c:	6852      	ldr	r2, [r2, #4]
 800441e:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	0011      	movs	r1, r2
 8004428:	0018      	movs	r0, r3
 800442a:	f7ff fc9a 	bl	8003d62 <HAL_PCD_DataInStageCallback>
 800442e:	e050      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004430:	2332      	movs	r3, #50	@ 0x32
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	881a      	ldrh	r2, [r3, #0]
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4013      	ands	r3, r2
 800443c:	d141      	bne.n	80044c2 <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4a2c      	ldr	r2, [pc, #176]	@ (80044f8 <PCD_EP_ISR_Handler+0x6dc>)
 8004446:	4694      	mov	ip, r2
 8004448:	4463      	add	r3, ip
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b29a      	uxth	r2, r3
 8004450:	2126      	movs	r1, #38	@ 0x26
 8004452:	187b      	adds	r3, r7, r1
 8004454:	0592      	lsls	r2, r2, #22
 8004456:	0d92      	lsrs	r2, r2, #22
 8004458:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800445a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	187b      	adds	r3, r7, r1
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d907      	bls.n	8004476 <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 8004466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	187b      	adds	r3, r7, r1
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	619a      	str	r2, [r3, #24]
 8004474:	e002      	b.n	800447c <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 8004476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800447c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	0011      	movs	r1, r2
 800448c:	0018      	movs	r0, r3
 800448e:	f7ff fc68 	bl	8003d62 <HAL_PCD_DataInStageCallback>
 8004492:	e01e      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	2126      	movs	r1, #38	@ 0x26
 800449a:	187b      	adds	r3, r7, r1
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	18d2      	adds	r2, r2, r3
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80044a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	187b      	adds	r3, r7, r1
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	18d2      	adds	r2, r2, r3
 80044ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044b8:	0011      	movs	r1, r2
 80044ba:	0018      	movs	r0, r3
 80044bc:	f002 fd62 	bl	8006f84 <USB_EPStartXfer>
 80044c0:	e007      	b.n	80044d2 <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80044c2:	2332      	movs	r3, #50	@ 0x32
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	881a      	ldrh	r2, [r3, #0]
 80044c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 f8ff 	bl	80046d0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	4013      	ands	r3, r2
 80044de:	d000      	beq.n	80044e2 <PCD_EP_ISR_Handler+0x6c6>
 80044e0:	e4a1      	b.n	8003e26 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b00e      	add	sp, #56	@ 0x38
 80044ea:	bdb0      	pop	{r4, r5, r7, pc}
 80044ec:	07ff8f8f 	.word	0x07ff8f8f
 80044f0:	000080c0 	.word	0x000080c0
 80044f4:	07ff8f0f 	.word	0x07ff8f0f
 80044f8:	40009800 	.word	0x40009800

080044fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044fc:	b5b0      	push	{r4, r5, r7, lr}
 80044fe:	b08a      	sub	sp, #40	@ 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	1dbb      	adds	r3, r7, #6
 8004508:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800450a:	1dbb      	adds	r3, r7, #6
 800450c:	881a      	ldrh	r2, [r3, #0]
 800450e:	2380      	movs	r3, #128	@ 0x80
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	4013      	ands	r3, r2
 8004514:	d067      	beq.n	80045e6 <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	251e      	movs	r5, #30
 8004520:	197c      	adds	r4, r7, r5
 8004522:	0019      	movs	r1, r3
 8004524:	0010      	movs	r0, r2
 8004526:	f7ff f9bd 	bl	80038a4 <PCD_GET_EP_DBUF0_CNT>
 800452a:	0003      	movs	r3, r0
 800452c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	197b      	adds	r3, r7, r5
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d307      	bcc.n	800454a <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	197b      	adds	r3, r7, r5
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	1ad2      	subs	r2, r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	619a      	str	r2, [r3, #24]
 8004548:	e002      	b.n	8004550 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2200      	movs	r2, #0
 800454e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11a      	bne.n	800458e <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	001a      	movs	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a55      	ldr	r2, [pc, #340]	@ (80046c0 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2280      	movs	r2, #128	@ 0x80
 8004572:	0192      	lsls	r2, r2, #6
 8004574:	4053      	eors	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	001a      	movs	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	18d3      	adds	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	494e      	ldr	r1, [pc, #312]	@ (80046c4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800458a:	430a      	orrs	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800458e:	1dbb      	adds	r3, r7, #6
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	2240      	movs	r2, #64	@ 0x40
 8004594:	4013      	ands	r3, r2
 8004596:	d015      	beq.n	80045c4 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	001a      	movs	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	18d3      	adds	r3, r2, r3
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a47      	ldr	r2, [pc, #284]	@ (80046c8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	001a      	movs	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	18d3      	adds	r3, r2, r3
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4943      	ldr	r1, [pc, #268]	@ (80046cc <HAL_PCD_EP_DB_Receive+0x1d0>)
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80045c4:	241e      	movs	r4, #30
 80045c6:	193b      	adds	r3, r7, r4
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d100      	bne.n	80045d0 <HAL_PCD_EP_DB_Receive+0xd4>
 80045ce:	e070      	b.n	80046b2 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6959      	ldr	r1, [r3, #20]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	891a      	ldrh	r2, [r3, #8]
 80045dc:	193b      	adds	r3, r7, r4
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	f003 fd7c 	bl	80080dc <USB_ReadPMA>
 80045e4:	e065      	b.n	80046b2 <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	251e      	movs	r5, #30
 80045f0:	197c      	adds	r4, r7, r5
 80045f2:	0019      	movs	r1, r3
 80045f4:	0010      	movs	r0, r2
 80045f6:	f7ff f977 	bl	80038e8 <PCD_GET_EP_DBUF1_CNT>
 80045fa:	0003      	movs	r3, r0
 80045fc:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	197b      	adds	r3, r7, r5
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d307      	bcc.n	800461a <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	197b      	adds	r3, r7, r5
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	1ad2      	subs	r2, r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	619a      	str	r2, [r3, #24]
 8004618:	e002      	b.n	8004620 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2200      	movs	r2, #0
 800461e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11a      	bne.n	800465e <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	001a      	movs	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	18d3      	adds	r3, r2, r3
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800463a:	4013      	ands	r3, r2
 800463c:	627b      	str	r3, [r7, #36]	@ 0x24
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	2280      	movs	r2, #128	@ 0x80
 8004642:	0192      	lsls	r2, r2, #6
 8004644:	4053      	eors	r3, r2
 8004646:	627b      	str	r3, [r7, #36]	@ 0x24
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	001a      	movs	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	18d3      	adds	r3, r2, r3
 8004656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004658:	491a      	ldr	r1, [pc, #104]	@ (80046c4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800465e:	1dbb      	adds	r3, r7, #6
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	2240      	movs	r2, #64	@ 0x40
 8004664:	4013      	ands	r3, r2
 8004666:	d115      	bne.n	8004694 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	001a      	movs	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a13      	ldr	r2, [pc, #76]	@ (80046c8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800467a:	4013      	ands	r3, r2
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	001a      	movs	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	18d3      	adds	r3, r2, r3
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	490f      	ldr	r1, [pc, #60]	@ (80046cc <HAL_PCD_EP_DB_Receive+0x1d0>)
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8004694:	241e      	movs	r4, #30
 8004696:	193b      	adds	r3, r7, r4
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6959      	ldr	r1, [r3, #20]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	895a      	ldrh	r2, [r3, #10]
 80046aa:	193b      	adds	r3, r7, r4
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	f003 fd15 	bl	80080dc <USB_ReadPMA>
    }
  }

  return count;
 80046b2:	231e      	movs	r3, #30
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	881b      	ldrh	r3, [r3, #0]
}
 80046b8:	0018      	movs	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b00a      	add	sp, #40	@ 0x28
 80046be:	bdb0      	pop	{r4, r5, r7, pc}
 80046c0:	07ffbf8f 	.word	0x07ffbf8f
 80046c4:	00008080 	.word	0x00008080
 80046c8:	07ff8f8f 	.word	0x07ff8f8f
 80046cc:	000080c0 	.word	0x000080c0

080046d0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046d0:	b5b0      	push	{r4, r5, r7, lr}
 80046d2:	b08e      	sub	sp, #56	@ 0x38
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	1dbb      	adds	r3, r7, #6
 80046dc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046de:	1dbb      	adds	r3, r7, #6
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	2240      	movs	r2, #64	@ 0x40
 80046e4:	4013      	ands	r3, r2
 80046e6:	d100      	bne.n	80046ea <HAL_PCD_EP_DB_Transmit+0x1a>
 80046e8:	e1c3      	b.n	8004a72 <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	251e      	movs	r5, #30
 80046f4:	197c      	adds	r4, r7, r5
 80046f6:	0019      	movs	r1, r3
 80046f8:	0010      	movs	r0, r2
 80046fa:	f7ff f8d3 	bl	80038a4 <PCD_GET_EP_DBUF0_CNT>
 80046fe:	0003      	movs	r3, r0
 8004700:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	197b      	adds	r3, r7, r5
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d907      	bls.n	800471e <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	197b      	adds	r3, r7, r5
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	1ad2      	subs	r2, r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	619a      	str	r2, [r3, #24]
 800471c:	e002      	b.n	8004724 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d000      	beq.n	800472e <HAL_PCD_EP_DB_Transmit+0x5e>
 800472c:	e0b2      	b.n	8004894 <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d121      	bne.n	800477a <HAL_PCD_EP_DB_Transmit+0xaa>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4ada      	ldr	r2, [pc, #872]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800473e:	4694      	mov	ip, r2
 8004740:	4463      	add	r3, ip
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	49d7      	ldr	r1, [pc, #860]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800474c:	468c      	mov	ip, r1
 800474e:	4463      	add	r3, ip
 8004750:	0192      	lsls	r2, r2, #6
 8004752:	0992      	lsrs	r2, r2, #6
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4ad2      	ldr	r2, [pc, #840]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800475e:	4694      	mov	ip, r2
 8004760:	4463      	add	r3, ip
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	49cf      	ldr	r1, [pc, #828]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800476c:	468c      	mov	ip, r1
 800476e:	4463      	add	r3, ip
 8004770:	2180      	movs	r1, #128	@ 0x80
 8004772:	0609      	lsls	r1, r1, #24
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e020      	b.n	80047bc <HAL_PCD_EP_DB_Transmit+0xec>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d11c      	bne.n	80047bc <HAL_PCD_EP_DB_Transmit+0xec>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4ac7      	ldr	r2, [pc, #796]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800478a:	4694      	mov	ip, r2
 800478c:	4463      	add	r3, ip
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	49c4      	ldr	r1, [pc, #784]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004798:	468c      	mov	ip, r1
 800479a:	4463      	add	r3, ip
 800479c:	0412      	lsls	r2, r2, #16
 800479e:	0c12      	lsrs	r2, r2, #16
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4abf      	ldr	r2, [pc, #764]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80047aa:	189a      	adds	r2, r3, r2
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	49bd      	ldr	r1, [pc, #756]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80047b4:	468c      	mov	ip, r1
 80047b6:	4463      	add	r3, ip
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d121      	bne.n	8004808 <HAL_PCD_EP_DB_Transmit+0x138>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4ab7      	ldr	r2, [pc, #732]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80047cc:	4694      	mov	ip, r2
 80047ce:	4463      	add	r3, ip
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	49b3      	ldr	r1, [pc, #716]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80047da:	468c      	mov	ip, r1
 80047dc:	4463      	add	r3, ip
 80047de:	0192      	lsls	r2, r2, #6
 80047e0:	0992      	lsrs	r2, r2, #6
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4aaf      	ldr	r2, [pc, #700]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80047ec:	4694      	mov	ip, r2
 80047ee:	4463      	add	r3, ip
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	49ab      	ldr	r1, [pc, #684]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80047fa:	468c      	mov	ip, r1
 80047fc:	4463      	add	r3, ip
 80047fe:	2180      	movs	r1, #128	@ 0x80
 8004800:	0609      	lsls	r1, r1, #24
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	e020      	b.n	800484a <HAL_PCD_EP_DB_Transmit+0x17a>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d11c      	bne.n	800484a <HAL_PCD_EP_DB_Transmit+0x17a>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4aa4      	ldr	r2, [pc, #656]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004818:	4694      	mov	ip, r2
 800481a:	4463      	add	r3, ip
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	49a0      	ldr	r1, [pc, #640]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004826:	468c      	mov	ip, r1
 8004828:	4463      	add	r3, ip
 800482a:	0412      	lsls	r2, r2, #16
 800482c:	0c12      	lsrs	r2, r2, #16
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4a9c      	ldr	r2, [pc, #624]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004838:	189a      	adds	r2, r3, r2
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4999      	ldr	r1, [pc, #612]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004842:	468c      	mov	ip, r1
 8004844:	4463      	add	r3, ip
 8004846:	6852      	ldr	r2, [r2, #4]
 8004848:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	0011      	movs	r1, r2
 8004852:	0018      	movs	r0, r3
 8004854:	f7ff fa85 	bl	8003d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004858:	1dbb      	adds	r3, r7, #6
 800485a:	881a      	ldrh	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	@ 0x80
 800485e:	01db      	lsls	r3, r3, #7
 8004860:	4013      	ands	r3, r2
 8004862:	d100      	bne.n	8004866 <HAL_PCD_EP_DB_Transmit+0x196>
 8004864:	e2d5      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	001a      	movs	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	18d3      	adds	r3, r2, r3
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a8d      	ldr	r2, [pc, #564]	@ (8004aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8004878:	4013      	ands	r3, r2
 800487a:	637b      	str	r3, [r7, #52]	@ 0x34
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	001a      	movs	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	18d3      	adds	r3, r2, r3
 800488a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800488c:	4988      	ldr	r1, [pc, #544]	@ (8004ab0 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e2be      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004894:	1dbb      	adds	r3, r7, #6
 8004896:	881a      	ldrh	r2, [r3, #0]
 8004898:	2380      	movs	r3, #128	@ 0x80
 800489a:	01db      	lsls	r3, r3, #7
 800489c:	4013      	ands	r3, r2
 800489e:	d015      	beq.n	80048cc <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	001a      	movs	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	18d3      	adds	r3, r2, r3
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a7e      	ldr	r2, [pc, #504]	@ (8004aac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	001a      	movs	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	18d3      	adds	r3, r2, r3
 80048c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048c6:	497a      	ldr	r1, [pc, #488]	@ (8004ab0 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80048c8:	430a      	orrs	r2, r1
 80048ca:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2224      	movs	r2, #36	@ 0x24
 80048d0:	5c9b      	ldrb	r3, [r3, r2]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d000      	beq.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x208>
 80048d6:	e29c      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	211e      	movs	r1, #30
 80048de:	187b      	adds	r3, r7, r1
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	18d2      	adds	r2, r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	187b      	adds	r3, r7, r1
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	18d2      	adds	r2, r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d309      	bcc.n	8004916 <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6a1a      	ldr	r2, [r3, #32]
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	1ad2      	subs	r2, r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	621a      	str	r2, [r3, #32]
 8004914:	e016      	b.n	8004944 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d108      	bne.n	8004930 <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 800491e:	231e      	movs	r3, #30
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2224      	movs	r2, #36	@ 0x24
 800492a:	2100      	movs	r1, #0
 800492c:	5499      	strb	r1, [r3, r2]
 800492e:	e009      	b.n	8004944 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2224      	movs	r2, #36	@ 0x24
 8004934:	2100      	movs	r1, #0
 8004936:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d162      	bne.n	8004a12 <HAL_PCD_EP_DB_Transmit+0x342>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4a55      	ldr	r2, [pc, #340]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004954:	4694      	mov	ip, r2
 8004956:	4463      	add	r3, ip
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4951      	ldr	r1, [pc, #324]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004962:	468c      	mov	ip, r1
 8004964:	4463      	add	r3, ip
 8004966:	0192      	lsls	r2, r2, #6
 8004968:	0992      	lsrs	r2, r2, #6
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004970:	d91e      	bls.n	80049b0 <HAL_PCD_EP_DB_Transmit+0x2e0>
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	221f      	movs	r2, #31
 800497c:	4013      	ands	r3, r2
 800497e:	d102      	bne.n	8004986 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8004980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004982:	3b01      	subs	r3, #1
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4a46      	ldr	r2, [pc, #280]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800498e:	4694      	mov	ip, r2
 8004990:	4463      	add	r3, ip
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004996:	069b      	lsls	r3, r3, #26
 8004998:	431a      	orrs	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4941      	ldr	r1, [pc, #260]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80049a2:	468c      	mov	ip, r1
 80049a4:	4463      	add	r3, ip
 80049a6:	2180      	movs	r1, #128	@ 0x80
 80049a8:	0609      	lsls	r1, r1, #24
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e055      	b.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x38c>
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d111      	bne.n	80049da <HAL_PCD_EP_DB_Transmit+0x30a>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4a3a      	ldr	r2, [pc, #232]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80049be:	4694      	mov	ip, r2
 80049c0:	4463      	add	r3, ip
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4937      	ldr	r1, [pc, #220]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80049cc:	468c      	mov	ip, r1
 80049ce:	4463      	add	r3, ip
 80049d0:	2180      	movs	r1, #128	@ 0x80
 80049d2:	0609      	lsls	r1, r1, #24
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	e040      	b.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x38c>
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	2201      	movs	r2, #1
 80049e4:	4013      	ands	r3, r2
 80049e6:	d002      	beq.n	80049ee <HAL_PCD_EP_DB_Transmit+0x31e>
 80049e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ea:	3301      	adds	r3, #1
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80049f6:	4694      	mov	ip, r2
 80049f8:	4463      	add	r3, ip
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fe:	069a      	lsls	r2, r3, #26
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4828      	ldr	r0, [pc, #160]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004a08:	4684      	mov	ip, r0
 8004a0a:	4463      	add	r3, ip
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e024      	b.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x38c>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d120      	bne.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x38c>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4a21      	ldr	r2, [pc, #132]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004a22:	4694      	mov	ip, r2
 8004a24:	4463      	add	r3, ip
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	491e      	ldr	r1, [pc, #120]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004a30:	468c      	mov	ip, r1
 8004a32:	4463      	add	r3, ip
 8004a34:	0412      	lsls	r2, r2, #16
 8004a36:	0c12      	lsrs	r2, r2, #16
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4a19      	ldr	r2, [pc, #100]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004a42:	4694      	mov	ip, r2
 8004a44:	4463      	add	r3, ip
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	041a      	lsls	r2, r3, #16
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4815      	ldr	r0, [pc, #84]	@ (8004aa8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8004a54:	4684      	mov	ip, r0
 8004a56:	4463      	add	r3, ip
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6959      	ldr	r1, [r3, #20]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	891a      	ldrh	r2, [r3, #8]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f003 fac0 	bl	8007ff0 <USB_WritePMA>
 8004a70:	e1cf      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	251e      	movs	r5, #30
 8004a7c:	197c      	adds	r4, r7, r5
 8004a7e:	0019      	movs	r1, r3
 8004a80:	0010      	movs	r0, r2
 8004a82:	f7fe ff31 	bl	80038e8 <PCD_GET_EP_DBUF1_CNT>
 8004a86:	0003      	movs	r3, r0
 8004a88:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	197b      	adds	r3, r7, r5
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d30e      	bcc.n	8004ab4 <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	197b      	adds	r3, r7, r5
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	619a      	str	r2, [r3, #24]
 8004aa4:	e009      	b.n	8004aba <HAL_PCD_EP_DB_Transmit+0x3ea>
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	40009800 	.word	0x40009800
 8004aac:	07ff8f8f 	.word	0x07ff8f8f
 8004ab0:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d000      	beq.n	8004ac4 <HAL_PCD_EP_DB_Transmit+0x3f4>
 8004ac2:	e0b2      	b.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d121      	bne.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x440>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4ab5      	ldr	r2, [pc, #724]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004ad4:	4694      	mov	ip, r2
 8004ad6:	4463      	add	r3, ip
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	49b1      	ldr	r1, [pc, #708]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004ae2:	468c      	mov	ip, r1
 8004ae4:	4463      	add	r3, ip
 8004ae6:	0192      	lsls	r2, r2, #6
 8004ae8:	0992      	lsrs	r2, r2, #6
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4aad      	ldr	r2, [pc, #692]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004af4:	4694      	mov	ip, r2
 8004af6:	4463      	add	r3, ip
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	49a9      	ldr	r1, [pc, #676]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004b02:	468c      	mov	ip, r1
 8004b04:	4463      	add	r3, ip
 8004b06:	2180      	movs	r1, #128	@ 0x80
 8004b08:	0609      	lsls	r1, r1, #24
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e020      	b.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x482>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d11c      	bne.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x482>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4aa2      	ldr	r2, [pc, #648]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004b20:	4694      	mov	ip, r2
 8004b22:	4463      	add	r3, ip
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	499e      	ldr	r1, [pc, #632]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004b2e:	468c      	mov	ip, r1
 8004b30:	4463      	add	r3, ip
 8004b32:	0412      	lsls	r2, r2, #16
 8004b34:	0c12      	lsrs	r2, r2, #16
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4a9a      	ldr	r2, [pc, #616]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004b40:	189a      	adds	r2, r3, r2
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4997      	ldr	r1, [pc, #604]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004b4a:	468c      	mov	ip, r1
 8004b4c:	4463      	add	r3, ip
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d121      	bne.n	8004b9e <HAL_PCD_EP_DB_Transmit+0x4ce>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4a91      	ldr	r2, [pc, #580]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004b62:	4694      	mov	ip, r2
 8004b64:	4463      	add	r3, ip
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	498e      	ldr	r1, [pc, #568]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004b70:	468c      	mov	ip, r1
 8004b72:	4463      	add	r3, ip
 8004b74:	0192      	lsls	r2, r2, #6
 8004b76:	0992      	lsrs	r2, r2, #6
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4a89      	ldr	r2, [pc, #548]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004b82:	4694      	mov	ip, r2
 8004b84:	4463      	add	r3, ip
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4986      	ldr	r1, [pc, #536]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004b90:	468c      	mov	ip, r1
 8004b92:	4463      	add	r3, ip
 8004b94:	2180      	movs	r1, #128	@ 0x80
 8004b96:	0609      	lsls	r1, r1, #24
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
 8004b9c:	e020      	b.n	8004be0 <HAL_PCD_EP_DB_Transmit+0x510>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	785b      	ldrb	r3, [r3, #1]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d11c      	bne.n	8004be0 <HAL_PCD_EP_DB_Transmit+0x510>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4a7e      	ldr	r2, [pc, #504]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004bae:	4694      	mov	ip, r2
 8004bb0:	4463      	add	r3, ip
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	497b      	ldr	r1, [pc, #492]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004bbc:	468c      	mov	ip, r1
 8004bbe:	4463      	add	r3, ip
 8004bc0:	0412      	lsls	r2, r2, #16
 8004bc2:	0c12      	lsrs	r2, r2, #16
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4a76      	ldr	r2, [pc, #472]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004bce:	189a      	adds	r2, r3, r2
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4974      	ldr	r1, [pc, #464]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004bd8:	468c      	mov	ip, r1
 8004bda:	4463      	add	r3, ip
 8004bdc:	6852      	ldr	r2, [r2, #4]
 8004bde:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	0011      	movs	r1, r2
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7ff f8ba 	bl	8003d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bee:	1dbb      	adds	r3, r7, #6
 8004bf0:	881a      	ldrh	r2, [r3, #0]
 8004bf2:	2380      	movs	r3, #128	@ 0x80
 8004bf4:	01db      	lsls	r3, r3, #7
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d000      	beq.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x52c>
 8004bfa:	e10a      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	001a      	movs	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	18d3      	adds	r3, r2, r3
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a67      	ldr	r2, [pc, #412]	@ (8004dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	001a      	movs	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	18d3      	adds	r3, r2, r3
 8004c20:	6a3a      	ldr	r2, [r7, #32]
 8004c22:	4963      	ldr	r1, [pc, #396]	@ (8004db0 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e0f3      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c2a:	1dbb      	adds	r3, r7, #6
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	2380      	movs	r3, #128	@ 0x80
 8004c30:	01db      	lsls	r3, r3, #7
 8004c32:	4013      	ands	r3, r2
 8004c34:	d115      	bne.n	8004c62 <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	001a      	movs	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	18d3      	adds	r3, r2, r3
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a59      	ldr	r2, [pc, #356]	@ (8004dac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	001a      	movs	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	18d3      	adds	r3, r2, r3
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4954      	ldr	r1, [pc, #336]	@ (8004db0 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2224      	movs	r2, #36	@ 0x24
 8004c66:	5c9b      	ldrb	r3, [r3, r2]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d000      	beq.n	8004c6e <HAL_PCD_EP_DB_Transmit+0x59e>
 8004c6c:	e0d1      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	211e      	movs	r1, #30
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	18d2      	adds	r2, r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	18d2      	adds	r2, r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	6a1a      	ldr	r2, [r3, #32]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d309      	bcc.n	8004cac <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6a1a      	ldr	r2, [r3, #32]
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	1ad2      	subs	r2, r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	621a      	str	r2, [r3, #32]
 8004caa:	e016      	b.n	8004cda <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d108      	bne.n	8004cc6 <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 8004cb4:	231e      	movs	r3, #30
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2224      	movs	r2, #36	@ 0x24
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	5499      	strb	r1, [r3, r2]
 8004cc4:	e009      	b.n	8004cda <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2224      	movs	r2, #36	@ 0x24
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	785b      	ldrb	r3, [r3, #1]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d168      	bne.n	8004db4 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004cea:	4694      	mov	ip, r2
 8004cec:	4463      	add	r3, ip
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	492c      	ldr	r1, [pc, #176]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004cf8:	468c      	mov	ip, r1
 8004cfa:	4463      	add	r3, ip
 8004cfc:	0192      	lsls	r2, r2, #6
 8004cfe:	0992      	lsrs	r2, r2, #6
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d06:	d91e      	bls.n	8004d46 <HAL_PCD_EP_DB_Transmit+0x676>
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	221f      	movs	r2, #31
 8004d12:	4013      	ands	r3, r2
 8004d14:	d102      	bne.n	8004d1c <HAL_PCD_EP_DB_Transmit+0x64c>
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4a21      	ldr	r2, [pc, #132]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004d24:	4694      	mov	ip, r2
 8004d26:	4463      	add	r3, ip
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	069b      	lsls	r3, r3, #26
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	491c      	ldr	r1, [pc, #112]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004d38:	468c      	mov	ip, r1
 8004d3a:	4463      	add	r3, ip
 8004d3c:	2180      	movs	r1, #128	@ 0x80
 8004d3e:	0609      	lsls	r1, r1, #24
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	e05b      	b.n	8004dfe <HAL_PCD_EP_DB_Transmit+0x72e>
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d111      	bne.n	8004d70 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	4a15      	ldr	r2, [pc, #84]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004d54:	4694      	mov	ip, r2
 8004d56:	4463      	add	r3, ip
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4911      	ldr	r1, [pc, #68]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004d62:	468c      	mov	ip, r1
 8004d64:	4463      	add	r3, ip
 8004d66:	2180      	movs	r1, #128	@ 0x80
 8004d68:	0609      	lsls	r1, r1, #24
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	e046      	b.n	8004dfe <HAL_PCD_EP_DB_Transmit+0x72e>
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	2201      	movs	r2, #1
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d002      	beq.n	8004d84 <HAL_PCD_EP_DB_Transmit+0x6b4>
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	3301      	adds	r3, #1
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4a07      	ldr	r2, [pc, #28]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004d8c:	4694      	mov	ip, r2
 8004d8e:	4463      	add	r3, ip
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	069a      	lsls	r2, r3, #26
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4802      	ldr	r0, [pc, #8]	@ (8004da8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8004d9e:	4684      	mov	ip, r0
 8004da0:	4463      	add	r3, ip
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	e02a      	b.n	8004dfe <HAL_PCD_EP_DB_Transmit+0x72e>
 8004da8:	40009800 	.word	0x40009800
 8004dac:	07ff8f8f 	.word	0x07ff8f8f
 8004db0:	0000c080 	.word	0x0000c080
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d120      	bne.n	8004dfe <HAL_PCD_EP_DB_Transmit+0x72e>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4a25      	ldr	r2, [pc, #148]	@ (8004e58 <HAL_PCD_EP_DB_Transmit+0x788>)
 8004dc4:	4694      	mov	ip, r2
 8004dc6:	4463      	add	r3, ip
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4921      	ldr	r1, [pc, #132]	@ (8004e58 <HAL_PCD_EP_DB_Transmit+0x788>)
 8004dd2:	468c      	mov	ip, r1
 8004dd4:	4463      	add	r3, ip
 8004dd6:	0412      	lsls	r2, r2, #16
 8004dd8:	0c12      	lsrs	r2, r2, #16
 8004dda:	605a      	str	r2, [r3, #4]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <HAL_PCD_EP_DB_Transmit+0x788>)
 8004de4:	4694      	mov	ip, r2
 8004de6:	4463      	add	r3, ip
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	041a      	lsls	r2, r3, #16
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4818      	ldr	r0, [pc, #96]	@ (8004e58 <HAL_PCD_EP_DB_Transmit+0x788>)
 8004df6:	4684      	mov	ip, r0
 8004df8:	4463      	add	r3, ip
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6959      	ldr	r1, [r3, #20]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	895a      	ldrh	r2, [r3, #10]
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f003 f8ef 	bl	8007ff0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	001a      	movs	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	18d3      	adds	r3, r2, r3
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a0e      	ldr	r2, [pc, #56]	@ (8004e5c <HAL_PCD_EP_DB_Transmit+0x78c>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	2210      	movs	r2, #16
 8004e2c:	4053      	eors	r3, r2
 8004e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	2220      	movs	r2, #32
 8004e34:	4053      	eors	r3, r2
 8004e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	001a      	movs	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	18d3      	adds	r3, r2, r3
 8004e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e48:	4905      	ldr	r1, [pc, #20]	@ (8004e60 <HAL_PCD_EP_DB_Transmit+0x790>)
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	0018      	movs	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b00e      	add	sp, #56	@ 0x38
 8004e56:	bdb0      	pop	{r4, r5, r7, pc}
 8004e58:	40009800 	.word	0x40009800
 8004e5c:	07ff8fbf 	.word	0x07ff8fbf
 8004e60:	00008080 	.word	0x00008080

08004e64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	23b5      	movs	r3, #181	@ 0xb5
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	2101      	movs	r1, #1
 8004e7a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	23b3      	movs	r3, #179	@ 0xb3
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	2100      	movs	r1, #0
 8004e84:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e96:	2202      	movs	r2, #2
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b004      	add	sp, #16
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	000a      	movs	r2, r1
 8004eb2:	1cfb      	adds	r3, r7, #3
 8004eb4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b002      	add	sp, #8
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ec4:	4b04      	ldr	r3, [pc, #16]	@ (8004ed8 <HAL_PWREx_EnableVddUSB+0x18>)
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <HAL_PWREx_EnableVddUSB+0x18>)
 8004eca:	2180      	movs	r1, #128	@ 0x80
 8004ecc:	00c9      	lsls	r1, r1, #3
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
}
 8004ed2:	46c0      	nop			@ (mov r8, r8)
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40007000 	.word	0x40007000

08004edc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004ee4:	4b19      	ldr	r3, [pc, #100]	@ (8004f4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a19      	ldr	r2, [pc, #100]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	0019      	movs	r1, r3
 8004eee:	4b17      	ldr	r3, [pc, #92]	@ (8004f4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d11f      	bne.n	8004f40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004f00:	4b14      	ldr	r3, [pc, #80]	@ (8004f54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	0013      	movs	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	189b      	adds	r3, r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4912      	ldr	r1, [pc, #72]	@ (8004f58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f7fb f902 	bl	8000118 <__udivsi3>
 8004f14:	0003      	movs	r3, r0
 8004f16:	3301      	adds	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f1a:	e008      	b.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e001      	b.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e009      	b.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f2e:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	401a      	ands	r2, r3
 8004f38:	2380      	movs	r3, #128	@ 0x80
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d0ed      	beq.n	8004f1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b004      	add	sp, #16
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	40007000 	.word	0x40007000
 8004f50:	fffff9ff 	.word	0xfffff9ff
 8004f54:	2000007c 	.word	0x2000007c
 8004f58:	000f4240 	.word	0x000f4240

08004f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f000 fb50 	bl	8005610 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	4013      	ands	r3, r2
 8004f78:	d100      	bne.n	8004f7c <HAL_RCC_OscConfig+0x20>
 8004f7a:	e07c      	b.n	8005076 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f7c:	4bc3      	ldr	r3, [pc, #780]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2238      	movs	r2, #56	@ 0x38
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f86:	4bc1      	ldr	r3, [pc, #772]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d102      	bne.n	8004f9c <HAL_RCC_OscConfig+0x40>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d002      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d10b      	bne.n	8004fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa2:	4bba      	ldr	r3, [pc, #744]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	2380      	movs	r3, #128	@ 0x80
 8004fa8:	029b      	lsls	r3, r3, #10
 8004faa:	4013      	ands	r3, r2
 8004fac:	d062      	beq.n	8005074 <HAL_RCC_OscConfig+0x118>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d15e      	bne.n	8005074 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e32a      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	2380      	movs	r3, #128	@ 0x80
 8004fc0:	025b      	lsls	r3, r3, #9
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x7a>
 8004fc6:	4bb1      	ldr	r3, [pc, #708]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4bb0      	ldr	r3, [pc, #704]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8004fcc:	2180      	movs	r1, #128	@ 0x80
 8004fce:	0249      	lsls	r1, r1, #9
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e020      	b.n	8005018 <HAL_RCC_OscConfig+0xbc>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	23a0      	movs	r3, #160	@ 0xa0
 8004fdc:	02db      	lsls	r3, r3, #11
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d10e      	bne.n	8005000 <HAL_RCC_OscConfig+0xa4>
 8004fe2:	4baa      	ldr	r3, [pc, #680]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4ba9      	ldr	r3, [pc, #676]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8004fe8:	2180      	movs	r1, #128	@ 0x80
 8004fea:	02c9      	lsls	r1, r1, #11
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	4ba6      	ldr	r3, [pc, #664]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4ba5      	ldr	r3, [pc, #660]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8004ff6:	2180      	movs	r1, #128	@ 0x80
 8004ff8:	0249      	lsls	r1, r1, #9
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0xbc>
 8005000:	4ba2      	ldr	r3, [pc, #648]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4ba1      	ldr	r3, [pc, #644]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005006:	49a2      	ldr	r1, [pc, #648]	@ (8005290 <HAL_RCC_OscConfig+0x334>)
 8005008:	400a      	ands	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	4b9f      	ldr	r3, [pc, #636]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4b9e      	ldr	r3, [pc, #632]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005012:	49a0      	ldr	r1, [pc, #640]	@ (8005294 <HAL_RCC_OscConfig+0x338>)
 8005014:	400a      	ands	r2, r1
 8005016:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d014      	beq.n	800504a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fd fe80 	bl	8002d24 <HAL_GetTick>
 8005024:	0003      	movs	r3, r0
 8005026:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800502a:	f7fd fe7b 	bl	8002d24 <HAL_GetTick>
 800502e:	0002      	movs	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	@ 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e2e9      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503c:	4b93      	ldr	r3, [pc, #588]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	2380      	movs	r3, #128	@ 0x80
 8005042:	029b      	lsls	r3, r3, #10
 8005044:	4013      	ands	r3, r2
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0xce>
 8005048:	e015      	b.n	8005076 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fd fe6b 	bl	8002d24 <HAL_GetTick>
 800504e:	0003      	movs	r3, r0
 8005050:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005054:	f7fd fe66 	bl	8002d24 <HAL_GetTick>
 8005058:	0002      	movs	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	@ 0x64
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e2d4      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005066:	4b89      	ldr	r3, [pc, #548]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	2380      	movs	r3, #128	@ 0x80
 800506c:	029b      	lsls	r3, r3, #10
 800506e:	4013      	ands	r3, r2
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0xf8>
 8005072:	e000      	b.n	8005076 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005074:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2202      	movs	r2, #2
 800507c:	4013      	ands	r3, r2
 800507e:	d100      	bne.n	8005082 <HAL_RCC_OscConfig+0x126>
 8005080:	e099      	b.n	80051b6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005082:	4b82      	ldr	r3, [pc, #520]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2238      	movs	r2, #56	@ 0x38
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800508c:	4b7f      	ldr	r3, [pc, #508]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2203      	movs	r2, #3
 8005092:	4013      	ands	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b10      	cmp	r3, #16
 800509a:	d102      	bne.n	80050a2 <HAL_RCC_OscConfig+0x146>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d002      	beq.n	80050a8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d135      	bne.n	8005114 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050a8:	4b78      	ldr	r3, [pc, #480]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	2380      	movs	r3, #128	@ 0x80
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4013      	ands	r3, r2
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_OscConfig+0x164>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e2a7      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c0:	4b72      	ldr	r3, [pc, #456]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4a74      	ldr	r2, [pc, #464]	@ (8005298 <HAL_RCC_OscConfig+0x33c>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	0019      	movs	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	021a      	lsls	r2, r3, #8
 80050d0:	4b6e      	ldr	r3, [pc, #440]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d112      	bne.n	8005102 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050dc:	4b6b      	ldr	r3, [pc, #428]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a6e      	ldr	r2, [pc, #440]	@ (800529c <HAL_RCC_OscConfig+0x340>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	4b68      	ldr	r3, [pc, #416]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80050ec:	430a      	orrs	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80050f0:	4b66      	ldr	r3, [pc, #408]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	0adb      	lsrs	r3, r3, #11
 80050f6:	2207      	movs	r2, #7
 80050f8:	4013      	ands	r3, r2
 80050fa:	4a69      	ldr	r2, [pc, #420]	@ (80052a0 <HAL_RCC_OscConfig+0x344>)
 80050fc:	40da      	lsrs	r2, r3
 80050fe:	4b69      	ldr	r3, [pc, #420]	@ (80052a4 <HAL_RCC_OscConfig+0x348>)
 8005100:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005102:	4b69      	ldr	r3, [pc, #420]	@ (80052a8 <HAL_RCC_OscConfig+0x34c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	0018      	movs	r0, r3
 8005108:	f7fd fdb0 	bl	8002c6c <HAL_InitTick>
 800510c:	1e03      	subs	r3, r0, #0
 800510e:	d051      	beq.n	80051b4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e27d      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d030      	beq.n	800517e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800511c:	4b5b      	ldr	r3, [pc, #364]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a5e      	ldr	r2, [pc, #376]	@ (800529c <HAL_RCC_OscConfig+0x340>)
 8005122:	4013      	ands	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	4b58      	ldr	r3, [pc, #352]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005130:	4b56      	ldr	r3, [pc, #344]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b55      	ldr	r3, [pc, #340]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005136:	2180      	movs	r1, #128	@ 0x80
 8005138:	0049      	lsls	r1, r1, #1
 800513a:	430a      	orrs	r2, r1
 800513c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fd fdf1 	bl	8002d24 <HAL_GetTick>
 8005142:	0003      	movs	r3, r0
 8005144:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005148:	f7fd fdec 	bl	8002d24 <HAL_GetTick>
 800514c:	0002      	movs	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e25a      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800515a:	4b4c      	ldr	r3, [pc, #304]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	2380      	movs	r3, #128	@ 0x80
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4013      	ands	r3, r2
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005166:	4b49      	ldr	r3, [pc, #292]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4a4b      	ldr	r2, [pc, #300]	@ (8005298 <HAL_RCC_OscConfig+0x33c>)
 800516c:	4013      	ands	r3, r2
 800516e:	0019      	movs	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	021a      	lsls	r2, r3, #8
 8005176:	4b45      	ldr	r3, [pc, #276]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
 800517c:	e01b      	b.n	80051b6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800517e:	4b43      	ldr	r3, [pc, #268]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b42      	ldr	r3, [pc, #264]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005184:	4949      	ldr	r1, [pc, #292]	@ (80052ac <HAL_RCC_OscConfig+0x350>)
 8005186:	400a      	ands	r2, r1
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fd fdcb 	bl	8002d24 <HAL_GetTick>
 800518e:	0003      	movs	r3, r0
 8005190:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005194:	f7fd fdc6 	bl	8002d24 <HAL_GetTick>
 8005198:	0002      	movs	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e234      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051a6:	4b39      	ldr	r3, [pc, #228]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	2380      	movs	r3, #128	@ 0x80
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4013      	ands	r3, r2
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x238>
 80051b2:	e000      	b.n	80051b6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2208      	movs	r2, #8
 80051bc:	4013      	ands	r3, r2
 80051be:	d047      	beq.n	8005250 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051c0:	4b32      	ldr	r3, [pc, #200]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2238      	movs	r2, #56	@ 0x38
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b18      	cmp	r3, #24
 80051ca:	d10a      	bne.n	80051e2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80051cc:	4b2f      	ldr	r3, [pc, #188]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80051ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d0:	2202      	movs	r2, #2
 80051d2:	4013      	ands	r3, r2
 80051d4:	d03c      	beq.n	8005250 <HAL_RCC_OscConfig+0x2f4>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d138      	bne.n	8005250 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e216      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d019      	beq.n	800521e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80051ea:	4b28      	ldr	r3, [pc, #160]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80051ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051ee:	4b27      	ldr	r3, [pc, #156]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 80051f0:	2101      	movs	r1, #1
 80051f2:	430a      	orrs	r2, r1
 80051f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f6:	f7fd fd95 	bl	8002d24 <HAL_GetTick>
 80051fa:	0003      	movs	r3, r0
 80051fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005200:	f7fd fd90 	bl	8002d24 <HAL_GetTick>
 8005204:	0002      	movs	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e1fe      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005212:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005216:	2202      	movs	r2, #2
 8005218:	4013      	ands	r3, r2
 800521a:	d0f1      	beq.n	8005200 <HAL_RCC_OscConfig+0x2a4>
 800521c:	e018      	b.n	8005250 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800521e:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005220:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005222:	4b1a      	ldr	r3, [pc, #104]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005224:	2101      	movs	r1, #1
 8005226:	438a      	bics	r2, r1
 8005228:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fd fd7b 	bl	8002d24 <HAL_GetTick>
 800522e:	0003      	movs	r3, r0
 8005230:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005234:	f7fd fd76 	bl	8002d24 <HAL_GetTick>
 8005238:	0002      	movs	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e1e4      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005246:	4b11      	ldr	r3, [pc, #68]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524a:	2202      	movs	r2, #2
 800524c:	4013      	ands	r3, r2
 800524e:	d1f1      	bne.n	8005234 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2204      	movs	r2, #4
 8005256:	4013      	ands	r3, r2
 8005258:	d100      	bne.n	800525c <HAL_RCC_OscConfig+0x300>
 800525a:	e0c7      	b.n	80053ec <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525c:	231f      	movs	r3, #31
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005264:	4b09      	ldr	r3, [pc, #36]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2238      	movs	r2, #56	@ 0x38
 800526a:	4013      	ands	r3, r2
 800526c:	2b20      	cmp	r3, #32
 800526e:	d11f      	bne.n	80052b0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005270:	4b06      	ldr	r3, [pc, #24]	@ (800528c <HAL_RCC_OscConfig+0x330>)
 8005272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005274:	2202      	movs	r2, #2
 8005276:	4013      	ands	r3, r2
 8005278:	d100      	bne.n	800527c <HAL_RCC_OscConfig+0x320>
 800527a:	e0b7      	b.n	80053ec <HAL_RCC_OscConfig+0x490>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d000      	beq.n	8005286 <HAL_RCC_OscConfig+0x32a>
 8005284:	e0b2      	b.n	80053ec <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e1c2      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	40021000 	.word	0x40021000
 8005290:	fffeffff 	.word	0xfffeffff
 8005294:	fffbffff 	.word	0xfffbffff
 8005298:	ffff80ff 	.word	0xffff80ff
 800529c:	ffffc7ff 	.word	0xffffc7ff
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	2000007c 	.word	0x2000007c
 80052a8:	20000080 	.word	0x20000080
 80052ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052b0:	4bb5      	ldr	r3, [pc, #724]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80052b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052b4:	2380      	movs	r3, #128	@ 0x80
 80052b6:	055b      	lsls	r3, r3, #21
 80052b8:	4013      	ands	r3, r2
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_OscConfig+0x364>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_RCC_OscConfig+0x366>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d011      	beq.n	80052ea <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	4bb0      	ldr	r3, [pc, #704]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80052c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ca:	4baf      	ldr	r3, [pc, #700]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80052cc:	2180      	movs	r1, #128	@ 0x80
 80052ce:	0549      	lsls	r1, r1, #21
 80052d0:	430a      	orrs	r2, r1
 80052d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052d4:	4bac      	ldr	r3, [pc, #688]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80052d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052d8:	2380      	movs	r3, #128	@ 0x80
 80052da:	055b      	lsls	r3, r3, #21
 80052dc:	4013      	ands	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80052e2:	231f      	movs	r3, #31
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ea:	4ba8      	ldr	r3, [pc, #672]	@ (800558c <HAL_RCC_OscConfig+0x630>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	d11a      	bne.n	800532c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f6:	4ba5      	ldr	r3, [pc, #660]	@ (800558c <HAL_RCC_OscConfig+0x630>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4ba4      	ldr	r3, [pc, #656]	@ (800558c <HAL_RCC_OscConfig+0x630>)
 80052fc:	2180      	movs	r1, #128	@ 0x80
 80052fe:	0049      	lsls	r1, r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005304:	f7fd fd0e 	bl	8002d24 <HAL_GetTick>
 8005308:	0003      	movs	r3, r0
 800530a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530e:	f7fd fd09 	bl	8002d24 <HAL_GetTick>
 8005312:	0002      	movs	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e177      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005320:	4b9a      	ldr	r3, [pc, #616]	@ (800558c <HAL_RCC_OscConfig+0x630>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4013      	ands	r3, r2
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d106      	bne.n	8005342 <HAL_RCC_OscConfig+0x3e6>
 8005334:	4b94      	ldr	r3, [pc, #592]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005336:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005338:	4b93      	ldr	r3, [pc, #588]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800533a:	2101      	movs	r1, #1
 800533c:	430a      	orrs	r2, r1
 800533e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005340:	e01c      	b.n	800537c <HAL_RCC_OscConfig+0x420>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b05      	cmp	r3, #5
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0x408>
 800534a:	4b8f      	ldr	r3, [pc, #572]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800534c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800534e:	4b8e      	ldr	r3, [pc, #568]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005350:	2104      	movs	r1, #4
 8005352:	430a      	orrs	r2, r1
 8005354:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005356:	4b8c      	ldr	r3, [pc, #560]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005358:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800535a:	4b8b      	ldr	r3, [pc, #556]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800535c:	2101      	movs	r1, #1
 800535e:	430a      	orrs	r2, r1
 8005360:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0x420>
 8005364:	4b88      	ldr	r3, [pc, #544]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005366:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005368:	4b87      	ldr	r3, [pc, #540]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800536a:	2101      	movs	r1, #1
 800536c:	438a      	bics	r2, r1
 800536e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005370:	4b85      	ldr	r3, [pc, #532]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005372:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005374:	4b84      	ldr	r3, [pc, #528]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005376:	2104      	movs	r1, #4
 8005378:	438a      	bics	r2, r1
 800537a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d014      	beq.n	80053ae <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd fcce 	bl	8002d24 <HAL_GetTick>
 8005388:	0003      	movs	r3, r0
 800538a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800538c:	e009      	b.n	80053a2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538e:	f7fd fcc9 	bl	8002d24 <HAL_GetTick>
 8005392:	0002      	movs	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	4a7d      	ldr	r2, [pc, #500]	@ (8005590 <HAL_RCC_OscConfig+0x634>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e136      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a2:	4b79      	ldr	r3, [pc, #484]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80053a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a6:	2202      	movs	r2, #2
 80053a8:	4013      	ands	r3, r2
 80053aa:	d0f0      	beq.n	800538e <HAL_RCC_OscConfig+0x432>
 80053ac:	e013      	b.n	80053d6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fd fcb9 	bl	8002d24 <HAL_GetTick>
 80053b2:	0003      	movs	r3, r0
 80053b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053b6:	e009      	b.n	80053cc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fd fcb4 	bl	8002d24 <HAL_GetTick>
 80053bc:	0002      	movs	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	4a73      	ldr	r2, [pc, #460]	@ (8005590 <HAL_RCC_OscConfig+0x634>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e121      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053cc:	4b6e      	ldr	r3, [pc, #440]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80053ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d0:	2202      	movs	r2, #2
 80053d2:	4013      	ands	r3, r2
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80053d6:	231f      	movs	r3, #31
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d105      	bne.n	80053ec <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80053e0:	4b69      	ldr	r3, [pc, #420]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80053e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053e4:	4b68      	ldr	r3, [pc, #416]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80053e6:	496b      	ldr	r1, [pc, #428]	@ (8005594 <HAL_RCC_OscConfig+0x638>)
 80053e8:	400a      	ands	r2, r1
 80053ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2220      	movs	r2, #32
 80053f2:	4013      	ands	r3, r2
 80053f4:	d039      	beq.n	800546a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01b      	beq.n	8005436 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053fe:	4b62      	ldr	r3, [pc, #392]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b61      	ldr	r3, [pc, #388]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005404:	2180      	movs	r1, #128	@ 0x80
 8005406:	03c9      	lsls	r1, r1, #15
 8005408:	430a      	orrs	r2, r1
 800540a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fd fc8a 	bl	8002d24 <HAL_GetTick>
 8005410:	0003      	movs	r3, r0
 8005412:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005416:	f7fd fc85 	bl	8002d24 <HAL_GetTick>
 800541a:	0002      	movs	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e0f3      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005428:	4b57      	ldr	r3, [pc, #348]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	4013      	ands	r3, r2
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x4ba>
 8005434:	e019      	b.n	800546a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005436:	4b54      	ldr	r3, [pc, #336]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b53      	ldr	r3, [pc, #332]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800543c:	4956      	ldr	r1, [pc, #344]	@ (8005598 <HAL_RCC_OscConfig+0x63c>)
 800543e:	400a      	ands	r2, r1
 8005440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005442:	f7fd fc6f 	bl	8002d24 <HAL_GetTick>
 8005446:	0003      	movs	r3, r0
 8005448:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800544c:	f7fd fc6a 	bl	8002d24 <HAL_GetTick>
 8005450:	0002      	movs	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0d8      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800545e:	4b4a      	ldr	r3, [pc, #296]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2380      	movs	r3, #128	@ 0x80
 8005464:	041b      	lsls	r3, r3, #16
 8005466:	4013      	ands	r3, r2
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d100      	bne.n	8005474 <HAL_RCC_OscConfig+0x518>
 8005472:	e0cc      	b.n	800560e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005474:	4b44      	ldr	r3, [pc, #272]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2238      	movs	r2, #56	@ 0x38
 800547a:	4013      	ands	r3, r2
 800547c:	2b10      	cmp	r3, #16
 800547e:	d100      	bne.n	8005482 <HAL_RCC_OscConfig+0x526>
 8005480:	e07b      	b.n	800557a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d156      	bne.n	8005538 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548a:	4b3f      	ldr	r3, [pc, #252]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b3e      	ldr	r3, [pc, #248]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005490:	4942      	ldr	r1, [pc, #264]	@ (800559c <HAL_RCC_OscConfig+0x640>)
 8005492:	400a      	ands	r2, r1
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fd fc45 	bl	8002d24 <HAL_GetTick>
 800549a:	0003      	movs	r3, r0
 800549c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fd fc40 	bl	8002d24 <HAL_GetTick>
 80054a4:	0002      	movs	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e0ae      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b2:	4b35      	ldr	r3, [pc, #212]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	2380      	movs	r3, #128	@ 0x80
 80054b8:	049b      	lsls	r3, r3, #18
 80054ba:	4013      	ands	r3, r2
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054be:	4b32      	ldr	r3, [pc, #200]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4a37      	ldr	r2, [pc, #220]	@ (80055a0 <HAL_RCC_OscConfig+0x644>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ea:	431a      	orrs	r2, r3
 80054ec:	4b26      	ldr	r3, [pc, #152]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80054ee:	430a      	orrs	r2, r1
 80054f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054f2:	4b25      	ldr	r3, [pc, #148]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4b24      	ldr	r3, [pc, #144]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 80054f8:	2180      	movs	r1, #128	@ 0x80
 80054fa:	0449      	lsls	r1, r1, #17
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005500:	4b21      	ldr	r3, [pc, #132]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	4b20      	ldr	r3, [pc, #128]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005506:	2180      	movs	r1, #128	@ 0x80
 8005508:	0549      	lsls	r1, r1, #21
 800550a:	430a      	orrs	r2, r1
 800550c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fd fc09 	bl	8002d24 <HAL_GetTick>
 8005512:	0003      	movs	r3, r0
 8005514:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005518:	f7fd fc04 	bl	8002d24 <HAL_GetTick>
 800551c:	0002      	movs	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e072      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800552a:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	2380      	movs	r3, #128	@ 0x80
 8005530:	049b      	lsls	r3, r3, #18
 8005532:	4013      	ands	r3, r2
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0x5bc>
 8005536:	e06a      	b.n	800560e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005538:	4b13      	ldr	r3, [pc, #76]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800553e:	4917      	ldr	r1, [pc, #92]	@ (800559c <HAL_RCC_OscConfig+0x640>)
 8005540:	400a      	ands	r2, r1
 8005542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fd fbee 	bl	8002d24 <HAL_GetTick>
 8005548:	0003      	movs	r3, r0
 800554a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554e:	f7fd fbe9 	bl	8002d24 <HAL_GetTick>
 8005552:	0002      	movs	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e057      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005560:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	049b      	lsls	r3, r3, #18
 8005568:	4013      	ands	r3, r2
 800556a:	d1f0      	bne.n	800554e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800556c:	4b06      	ldr	r3, [pc, #24]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <HAL_RCC_OscConfig+0x62c>)
 8005572:	490c      	ldr	r1, [pc, #48]	@ (80055a4 <HAL_RCC_OscConfig+0x648>)
 8005574:	400a      	ands	r2, r1
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	e049      	b.n	800560e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d112      	bne.n	80055a8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e044      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	40021000 	.word	0x40021000
 800558c:	40007000 	.word	0x40007000
 8005590:	00001388 	.word	0x00001388
 8005594:	efffffff 	.word	0xefffffff
 8005598:	ffbfffff 	.word	0xffbfffff
 800559c:	feffffff 	.word	0xfeffffff
 80055a0:	11c1808c 	.word	0x11c1808c
 80055a4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80055a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005618 <HAL_RCC_OscConfig+0x6bc>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2203      	movs	r2, #3
 80055b2:	401a      	ands	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d126      	bne.n	800560a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2270      	movs	r2, #112	@ 0x70
 80055c0:	401a      	ands	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d11f      	bne.n	800560a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	23fe      	movs	r3, #254	@ 0xfe
 80055ce:	01db      	lsls	r3, r3, #7
 80055d0:	401a      	ands	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d116      	bne.n	800560a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	23f8      	movs	r3, #248	@ 0xf8
 80055e0:	039b      	lsls	r3, r3, #14
 80055e2:	401a      	ands	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d10e      	bne.n	800560a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	23e0      	movs	r3, #224	@ 0xe0
 80055f0:	051b      	lsls	r3, r3, #20
 80055f2:	401a      	ands	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	0f5b      	lsrs	r3, r3, #29
 8005600:	075a      	lsls	r2, r3, #29
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d001      	beq.n	800560e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	0018      	movs	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	b008      	add	sp, #32
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000

0800561c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0e9      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b76      	ldr	r3, [pc, #472]	@ (800580c <HAL_RCC_ClockConfig+0x1f0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2207      	movs	r2, #7
 8005636:	4013      	ands	r3, r2
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d91e      	bls.n	800567c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b73      	ldr	r3, [pc, #460]	@ (800580c <HAL_RCC_ClockConfig+0x1f0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2207      	movs	r2, #7
 8005644:	4393      	bics	r3, r2
 8005646:	0019      	movs	r1, r3
 8005648:	4b70      	ldr	r3, [pc, #448]	@ (800580c <HAL_RCC_ClockConfig+0x1f0>)
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005650:	f7fd fb68 	bl	8002d24 <HAL_GetTick>
 8005654:	0003      	movs	r3, r0
 8005656:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005658:	e009      	b.n	800566e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800565a:	f7fd fb63 	bl	8002d24 <HAL_GetTick>
 800565e:	0002      	movs	r2, r0
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	4a6a      	ldr	r2, [pc, #424]	@ (8005810 <HAL_RCC_ClockConfig+0x1f4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e0ca      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800566e:	4b67      	ldr	r3, [pc, #412]	@ (800580c <HAL_RCC_ClockConfig+0x1f0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2207      	movs	r2, #7
 8005674:	4013      	ands	r3, r2
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d1ee      	bne.n	800565a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2202      	movs	r2, #2
 8005682:	4013      	ands	r3, r2
 8005684:	d015      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2204      	movs	r2, #4
 800568c:	4013      	ands	r3, r2
 800568e:	d006      	beq.n	800569e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005690:	4b60      	ldr	r3, [pc, #384]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	4b5f      	ldr	r3, [pc, #380]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 8005696:	21e0      	movs	r1, #224	@ 0xe0
 8005698:	01c9      	lsls	r1, r1, #7
 800569a:	430a      	orrs	r2, r1
 800569c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800569e:	4b5d      	ldr	r3, [pc, #372]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	4a5d      	ldr	r2, [pc, #372]	@ (8005818 <HAL_RCC_ClockConfig+0x1fc>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	0019      	movs	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	4b59      	ldr	r3, [pc, #356]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 80056ae:	430a      	orrs	r2, r1
 80056b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	4013      	ands	r3, r2
 80056ba:	d057      	beq.n	800576c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d107      	bne.n	80056d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056c4:	4b53      	ldr	r3, [pc, #332]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	2380      	movs	r3, #128	@ 0x80
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	4013      	ands	r3, r2
 80056ce:	d12b      	bne.n	8005728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e097      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d107      	bne.n	80056ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	2380      	movs	r3, #128	@ 0x80
 80056e2:	049b      	lsls	r3, r3, #18
 80056e4:	4013      	ands	r3, r2
 80056e6:	d11f      	bne.n	8005728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e08b      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056f4:	4b47      	ldr	r3, [pc, #284]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	2380      	movs	r3, #128	@ 0x80
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4013      	ands	r3, r2
 80056fe:	d113      	bne.n	8005728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e07f      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d106      	bne.n	800571a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800570c:	4b41      	ldr	r3, [pc, #260]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 800570e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005710:	2202      	movs	r2, #2
 8005712:	4013      	ands	r3, r2
 8005714:	d108      	bne.n	8005728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e074      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800571a:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	2202      	movs	r2, #2
 8005720:	4013      	ands	r3, r2
 8005722:	d101      	bne.n	8005728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e06d      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005728:	4b3a      	ldr	r3, [pc, #232]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2207      	movs	r2, #7
 800572e:	4393      	bics	r3, r2
 8005730:	0019      	movs	r1, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	4b37      	ldr	r3, [pc, #220]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 8005738:	430a      	orrs	r2, r1
 800573a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fd faf2 	bl	8002d24 <HAL_GetTick>
 8005740:	0003      	movs	r3, r0
 8005742:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005744:	e009      	b.n	800575a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005746:	f7fd faed 	bl	8002d24 <HAL_GetTick>
 800574a:	0002      	movs	r2, r0
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	4a2f      	ldr	r2, [pc, #188]	@ (8005810 <HAL_RCC_ClockConfig+0x1f4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e054      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575a:	4b2e      	ldr	r3, [pc, #184]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2238      	movs	r2, #56	@ 0x38
 8005760:	401a      	ands	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	429a      	cmp	r2, r3
 800576a:	d1ec      	bne.n	8005746 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800576c:	4b27      	ldr	r3, [pc, #156]	@ (800580c <HAL_RCC_ClockConfig+0x1f0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2207      	movs	r2, #7
 8005772:	4013      	ands	r3, r2
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d21e      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b24      	ldr	r3, [pc, #144]	@ (800580c <HAL_RCC_ClockConfig+0x1f0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2207      	movs	r2, #7
 8005780:	4393      	bics	r3, r2
 8005782:	0019      	movs	r1, r3
 8005784:	4b21      	ldr	r3, [pc, #132]	@ (800580c <HAL_RCC_ClockConfig+0x1f0>)
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800578c:	f7fd faca 	bl	8002d24 <HAL_GetTick>
 8005790:	0003      	movs	r3, r0
 8005792:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005794:	e009      	b.n	80057aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005796:	f7fd fac5 	bl	8002d24 <HAL_GetTick>
 800579a:	0002      	movs	r2, r0
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005810 <HAL_RCC_ClockConfig+0x1f4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e02c      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057aa:	4b18      	ldr	r3, [pc, #96]	@ (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2207      	movs	r2, #7
 80057b0:	4013      	ands	r3, r2
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d1ee      	bne.n	8005796 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2204      	movs	r2, #4
 80057be:	4013      	ands	r3, r2
 80057c0:	d009      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80057c2:	4b14      	ldr	r3, [pc, #80]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	4a15      	ldr	r2, [pc, #84]	@ (800581c <HAL_RCC_ClockConfig+0x200>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	0019      	movs	r1, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	4b10      	ldr	r3, [pc, #64]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 80057d2:	430a      	orrs	r2, r1
 80057d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80057d6:	f000 f829 	bl	800582c <HAL_RCC_GetSysClockFreq>
 80057da:	0001      	movs	r1, r0
 80057dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	220f      	movs	r2, #15
 80057e4:	401a      	ands	r2, r3
 80057e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005820 <HAL_RCC_ClockConfig+0x204>)
 80057e8:	0092      	lsls	r2, r2, #2
 80057ea:	58d3      	ldr	r3, [r2, r3]
 80057ec:	221f      	movs	r2, #31
 80057ee:	4013      	ands	r3, r2
 80057f0:	000a      	movs	r2, r1
 80057f2:	40da      	lsrs	r2, r3
 80057f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005824 <HAL_RCC_ClockConfig+0x208>)
 80057f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <HAL_RCC_ClockConfig+0x20c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f7fd fa35 	bl	8002c6c <HAL_InitTick>
 8005802:	0003      	movs	r3, r0
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b004      	add	sp, #16
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40022000 	.word	0x40022000
 8005810:	00001388 	.word	0x00001388
 8005814:	40021000 	.word	0x40021000
 8005818:	fffff0ff 	.word	0xfffff0ff
 800581c:	ffff8fff 	.word	0xffff8fff
 8005820:	080092d0 	.word	0x080092d0
 8005824:	2000007c 	.word	0x2000007c
 8005828:	20000080 	.word	0x20000080

0800582c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005832:	4b3c      	ldr	r3, [pc, #240]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2238      	movs	r2, #56	@ 0x38
 8005838:	4013      	ands	r3, r2
 800583a:	d10f      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800583c:	4b39      	ldr	r3, [pc, #228]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	0adb      	lsrs	r3, r3, #11
 8005842:	2207      	movs	r2, #7
 8005844:	4013      	ands	r3, r2
 8005846:	2201      	movs	r2, #1
 8005848:	409a      	lsls	r2, r3
 800584a:	0013      	movs	r3, r2
 800584c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	4835      	ldr	r0, [pc, #212]	@ (8005928 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005852:	f7fa fc61 	bl	8000118 <__udivsi3>
 8005856:	0003      	movs	r3, r0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	e05d      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800585c:	4b31      	ldr	r3, [pc, #196]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2238      	movs	r2, #56	@ 0x38
 8005862:	4013      	ands	r3, r2
 8005864:	2b08      	cmp	r3, #8
 8005866:	d102      	bne.n	800586e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005868:	4b30      	ldr	r3, [pc, #192]	@ (800592c <HAL_RCC_GetSysClockFreq+0x100>)
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	e054      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800586e:	4b2d      	ldr	r3, [pc, #180]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2238      	movs	r2, #56	@ 0x38
 8005874:	4013      	ands	r3, r2
 8005876:	2b10      	cmp	r3, #16
 8005878:	d138      	bne.n	80058ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800587a:	4b2a      	ldr	r3, [pc, #168]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	2203      	movs	r2, #3
 8005880:	4013      	ands	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005884:	4b27      	ldr	r3, [pc, #156]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	091b      	lsrs	r3, r3, #4
 800588a:	2207      	movs	r2, #7
 800588c:	4013      	ands	r3, r2
 800588e:	3301      	adds	r3, #1
 8005890:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d10d      	bne.n	80058b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4824      	ldr	r0, [pc, #144]	@ (800592c <HAL_RCC_GetSysClockFreq+0x100>)
 800589c:	f7fa fc3c 	bl	8000118 <__udivsi3>
 80058a0:	0003      	movs	r3, r0
 80058a2:	0019      	movs	r1, r3
 80058a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	227f      	movs	r2, #127	@ 0x7f
 80058ac:	4013      	ands	r3, r2
 80058ae:	434b      	muls	r3, r1
 80058b0:	617b      	str	r3, [r7, #20]
        break;
 80058b2:	e00d      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	481c      	ldr	r0, [pc, #112]	@ (8005928 <HAL_RCC_GetSysClockFreq+0xfc>)
 80058b8:	f7fa fc2e 	bl	8000118 <__udivsi3>
 80058bc:	0003      	movs	r3, r0
 80058be:	0019      	movs	r1, r3
 80058c0:	4b18      	ldr	r3, [pc, #96]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	227f      	movs	r2, #127	@ 0x7f
 80058c8:	4013      	ands	r3, r2
 80058ca:	434b      	muls	r3, r1
 80058cc:	617b      	str	r3, [r7, #20]
        break;
 80058ce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80058d0:	4b14      	ldr	r3, [pc, #80]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	0f5b      	lsrs	r3, r3, #29
 80058d6:	2207      	movs	r2, #7
 80058d8:	4013      	ands	r3, r2
 80058da:	3301      	adds	r3, #1
 80058dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	6978      	ldr	r0, [r7, #20]
 80058e2:	f7fa fc19 	bl	8000118 <__udivsi3>
 80058e6:	0003      	movs	r3, r0
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	e015      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80058ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2238      	movs	r2, #56	@ 0x38
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d103      	bne.n	8005900 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e00b      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005900:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2238      	movs	r2, #56	@ 0x38
 8005906:	4013      	ands	r3, r2
 8005908:	2b18      	cmp	r3, #24
 800590a:	d103      	bne.n	8005914 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800590c:	23fa      	movs	r3, #250	@ 0xfa
 800590e:	01db      	lsls	r3, r3, #7
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	e001      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005918:	693b      	ldr	r3, [r7, #16]
}
 800591a:	0018      	movs	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	b006      	add	sp, #24
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			@ (mov r8, r8)
 8005924:	40021000 	.word	0x40021000
 8005928:	00f42400 	.word	0x00f42400
 800592c:	007a1200 	.word	0x007a1200

08005930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005938:	2313      	movs	r3, #19
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005940:	2312      	movs	r3, #18
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	2380      	movs	r3, #128	@ 0x80
 800594e:	029b      	lsls	r3, r3, #10
 8005950:	4013      	ands	r3, r2
 8005952:	d100      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005954:	e0ad      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005956:	2011      	movs	r0, #17
 8005958:	183b      	adds	r3, r7, r0
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800595e:	4b47      	ldr	r3, [pc, #284]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005962:	2380      	movs	r3, #128	@ 0x80
 8005964:	055b      	lsls	r3, r3, #21
 8005966:	4013      	ands	r3, r2
 8005968:	d110      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800596a:	4b44      	ldr	r3, [pc, #272]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800596c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800596e:	4b43      	ldr	r3, [pc, #268]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005970:	2180      	movs	r1, #128	@ 0x80
 8005972:	0549      	lsls	r1, r1, #21
 8005974:	430a      	orrs	r2, r1
 8005976:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005978:	4b40      	ldr	r3, [pc, #256]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800597a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800597c:	2380      	movs	r3, #128	@ 0x80
 800597e:	055b      	lsls	r3, r3, #21
 8005980:	4013      	ands	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005986:	183b      	adds	r3, r7, r0
 8005988:	2201      	movs	r2, #1
 800598a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800598c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	4b3b      	ldr	r3, [pc, #236]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005992:	2180      	movs	r1, #128	@ 0x80
 8005994:	0049      	lsls	r1, r1, #1
 8005996:	430a      	orrs	r2, r1
 8005998:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800599a:	f7fd f9c3 	bl	8002d24 <HAL_GetTick>
 800599e:	0003      	movs	r3, r0
 80059a0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059a2:	e00b      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a4:	f7fd f9be 	bl	8002d24 <HAL_GetTick>
 80059a8:	0002      	movs	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d904      	bls.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80059b2:	2313      	movs	r3, #19
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	2203      	movs	r2, #3
 80059b8:	701a      	strb	r2, [r3, #0]
        break;
 80059ba:	e005      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059bc:	4b30      	ldr	r3, [pc, #192]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	2380      	movs	r3, #128	@ 0x80
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	4013      	ands	r3, r2
 80059c6:	d0ed      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80059c8:	2313      	movs	r3, #19
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d15e      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059d2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059d6:	23c0      	movs	r3, #192	@ 0xc0
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4013      	ands	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d019      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d014      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059ee:	4b23      	ldr	r3, [pc, #140]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f2:	4a24      	ldr	r2, [pc, #144]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059f8:	4b20      	ldr	r3, [pc, #128]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059fc:	4b1f      	ldr	r3, [pc, #124]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059fe:	2180      	movs	r1, #128	@ 0x80
 8005a00:	0249      	lsls	r1, r1, #9
 8005a02:	430a      	orrs	r2, r1
 8005a04:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a06:	4b1d      	ldr	r3, [pc, #116]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a0c:	491e      	ldr	r1, [pc, #120]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005a0e:	400a      	ands	r2, r1
 8005a10:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a12:	4b1a      	ldr	r3, [pc, #104]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d016      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fd f980 	bl	8002d24 <HAL_GetTick>
 8005a24:	0003      	movs	r3, r0
 8005a26:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a28:	e00c      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fd f97b 	bl	8002d24 <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d904      	bls.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005a3a:	2313      	movs	r3, #19
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	2203      	movs	r2, #3
 8005a40:	701a      	strb	r2, [r3, #0]
            break;
 8005a42:	e004      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a44:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a48:	2202      	movs	r2, #2
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d0ed      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005a4e:	2313      	movs	r3, #19
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a58:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a5c:	4a09      	ldr	r2, [pc, #36]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	0019      	movs	r1, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a66:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a6c:	e016      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a6e:	2312      	movs	r3, #18
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	2213      	movs	r2, #19
 8005a74:	18ba      	adds	r2, r7, r2
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	e00f      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40007000 	.word	0x40007000
 8005a84:	fffffcff 	.word	0xfffffcff
 8005a88:	fffeffff 	.word	0xfffeffff
 8005a8c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	2312      	movs	r3, #18
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	2213      	movs	r2, #19
 8005a96:	18ba      	adds	r2, r7, r2
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a9c:	2311      	movs	r3, #17
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d105      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa6:	4bb6      	ldr	r3, [pc, #728]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aaa:	4bb5      	ldr	r3, [pc, #724]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aac:	49b5      	ldr	r1, [pc, #724]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005aae:	400a      	ands	r2, r1
 8005ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d009      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005abc:	4bb0      	ldr	r3, [pc, #704]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	4393      	bics	r3, r2
 8005ac4:	0019      	movs	r1, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	4bad      	ldr	r3, [pc, #692]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005acc:	430a      	orrs	r2, r1
 8005ace:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ada:	4ba9      	ldr	r3, [pc, #676]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ade:	220c      	movs	r2, #12
 8005ae0:	4393      	bics	r3, r2
 8005ae2:	0019      	movs	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	4ba5      	ldr	r3, [pc, #660]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aea:	430a      	orrs	r2, r1
 8005aec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2204      	movs	r2, #4
 8005af4:	4013      	ands	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005af8:	4ba1      	ldr	r3, [pc, #644]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afc:	2230      	movs	r2, #48	@ 0x30
 8005afe:	4393      	bics	r3, r2
 8005b00:	0019      	movs	r1, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	4b9e      	ldr	r3, [pc, #632]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2210      	movs	r2, #16
 8005b12:	4013      	ands	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b16:	4b9a      	ldr	r3, [pc, #616]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1a:	4a9b      	ldr	r2, [pc, #620]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	0019      	movs	r1, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	4b96      	ldr	r3, [pc, #600]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b26:	430a      	orrs	r2, r1
 8005b28:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	2380      	movs	r3, #128	@ 0x80
 8005b30:	015b      	lsls	r3, r3, #5
 8005b32:	4013      	ands	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005b36:	4b92      	ldr	r3, [pc, #584]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3a:	4a94      	ldr	r2, [pc, #592]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	0019      	movs	r1, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	4b8e      	ldr	r3, [pc, #568]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b46:	430a      	orrs	r2, r1
 8005b48:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	2380      	movs	r3, #128	@ 0x80
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4013      	ands	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b56:	4b8a      	ldr	r3, [pc, #552]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	4a8d      	ldr	r2, [pc, #564]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	0019      	movs	r1, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b64:	4b86      	ldr	r3, [pc, #536]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b66:	430a      	orrs	r2, r1
 8005b68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	2380      	movs	r3, #128	@ 0x80
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4013      	ands	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b76:	4b82      	ldr	r3, [pc, #520]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7a:	4a86      	ldr	r2, [pc, #536]	@ (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	0019      	movs	r1, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b84:	4b7e      	ldr	r3, [pc, #504]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b86:	430a      	orrs	r2, r1
 8005b88:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	4013      	ands	r3, r2
 8005b92:	d009      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b94:	4b7a      	ldr	r3, [pc, #488]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b98:	4a7f      	ldr	r2, [pc, #508]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	4b77      	ldr	r3, [pc, #476]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2240      	movs	r2, #64	@ 0x40
 8005bae:	4013      	ands	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bb2:	4b73      	ldr	r3, [pc, #460]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb6:	4a79      	ldr	r2, [pc, #484]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	0019      	movs	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	2380      	movs	r3, #128	@ 0x80
 8005bcc:	01db      	lsls	r3, r3, #7
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d015      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bd2:	4b6b      	ldr	r3, [pc, #428]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	0899      	lsrs	r1, r3, #2
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bde:	4b68      	ldr	r3, [pc, #416]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005be0:	430a      	orrs	r2, r1
 8005be2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005be8:	2380      	movs	r3, #128	@ 0x80
 8005bea:	05db      	lsls	r3, r3, #23
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d106      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bf0:	4b63      	ldr	r3, [pc, #396]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	4b62      	ldr	r3, [pc, #392]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bf6:	2180      	movs	r1, #128	@ 0x80
 8005bf8:	0249      	lsls	r1, r1, #9
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	2380      	movs	r3, #128	@ 0x80
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	4013      	ands	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0e:	2240      	movs	r2, #64	@ 0x40
 8005c10:	4393      	bics	r3, r2
 8005c12:	0019      	movs	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c18:	4b59      	ldr	r3, [pc, #356]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	2380      	movs	r3, #128	@ 0x80
 8005c24:	039b      	lsls	r3, r3, #14
 8005c26:	4013      	ands	r3, r2
 8005c28:	d016      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c2a:	4b55      	ldr	r3, [pc, #340]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	0019      	movs	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c38:	4b51      	ldr	r3, [pc, #324]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c42:	2380      	movs	r3, #128	@ 0x80
 8005c44:	03db      	lsls	r3, r3, #15
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d106      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c4a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c50:	2180      	movs	r1, #128	@ 0x80
 8005c52:	0449      	lsls	r1, r1, #17
 8005c54:	430a      	orrs	r2, r1
 8005c56:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	03db      	lsls	r3, r3, #15
 8005c60:	4013      	ands	r3, r2
 8005c62:	d016      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005c64:	4b46      	ldr	r3, [pc, #280]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c68:	4a4e      	ldr	r2, [pc, #312]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c72:	4b43      	ldr	r3, [pc, #268]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c74:	430a      	orrs	r2, r1
 8005c76:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c7c:	2380      	movs	r3, #128	@ 0x80
 8005c7e:	045b      	lsls	r3, r3, #17
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d106      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c84:	4b3e      	ldr	r3, [pc, #248]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	4b3d      	ldr	r3, [pc, #244]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c8a:	2180      	movs	r1, #128	@ 0x80
 8005c8c:	0449      	lsls	r1, r1, #17
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	2380      	movs	r3, #128	@ 0x80
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d014      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005c9e:	4b38      	ldr	r3, [pc, #224]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	4393      	bics	r3, r2
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1a      	ldr	r2, [r3, #32]
 8005cac:	4b34      	ldr	r3, [pc, #208]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d106      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005cba:	4b31      	ldr	r3, [pc, #196]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	4b30      	ldr	r3, [pc, #192]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cc0:	2180      	movs	r1, #128	@ 0x80
 8005cc2:	0249      	lsls	r1, r1, #9
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	019b      	lsls	r3, r3, #6
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d014      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd8:	220c      	movs	r2, #12
 8005cda:	4393      	bics	r3, r2
 8005cdc:	0019      	movs	r1, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ce2:	4b27      	ldr	r3, [pc, #156]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d106      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005cf0:	4b23      	ldr	r3, [pc, #140]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	4b22      	ldr	r3, [pc, #136]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cf6:	2180      	movs	r1, #128	@ 0x80
 8005cf8:	0249      	lsls	r1, r1, #9
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	2380      	movs	r3, #128	@ 0x80
 8005d04:	045b      	lsls	r3, r3, #17
 8005d06:	4013      	ands	r3, r2
 8005d08:	d016      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0e:	4a22      	ldr	r2, [pc, #136]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d18:	4b19      	ldr	r3, [pc, #100]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d22:	2380      	movs	r3, #128	@ 0x80
 8005d24:	019b      	lsls	r3, r3, #6
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d106      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005d2a:	4b15      	ldr	r3, [pc, #84]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	4b14      	ldr	r3, [pc, #80]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d30:	2180      	movs	r1, #128	@ 0x80
 8005d32:	0449      	lsls	r1, r1, #17
 8005d34:	430a      	orrs	r2, r1
 8005d36:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	2380      	movs	r3, #128	@ 0x80
 8005d3e:	049b      	lsls	r3, r3, #18
 8005d40:	4013      	ands	r3, r2
 8005d42:	d016      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d44:	4b0e      	ldr	r3, [pc, #56]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d48:	4a10      	ldr	r2, [pc, #64]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	0019      	movs	r1, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d52:	4b0b      	ldr	r3, [pc, #44]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d54:	430a      	orrs	r2, r1
 8005d56:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d5c:	2380      	movs	r3, #128	@ 0x80
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d106      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005d64:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	4b05      	ldr	r3, [pc, #20]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d6a:	2180      	movs	r1, #128	@ 0x80
 8005d6c:	0449      	lsls	r1, r1, #17
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005d72:	2312      	movs	r3, #18
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	781b      	ldrb	r3, [r3, #0]
}
 8005d78:	0018      	movs	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b006      	add	sp, #24
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000
 8005d84:	efffffff 	.word	0xefffffff
 8005d88:	fffff3ff 	.word	0xfffff3ff
 8005d8c:	fffffcff 	.word	0xfffffcff
 8005d90:	fff3ffff 	.word	0xfff3ffff
 8005d94:	ffcfffff 	.word	0xffcfffff
 8005d98:	ffffcfff 	.word	0xffffcfff
 8005d9c:	ffff3fff 	.word	0xffff3fff
 8005da0:	ffbfffff 	.word	0xffbfffff
 8005da4:	feffffff 	.word	0xfeffffff

08005da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e0a8      	b.n	8005f0c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	2382      	movs	r3, #130	@ 0x82
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d009      	beq.n	8005de2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	61da      	str	r2, [r3, #28]
 8005dd4:	e005      	b.n	8005de2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	225d      	movs	r2, #93	@ 0x5d
 8005dec:	5c9b      	ldrb	r3, [r3, r2]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d107      	bne.n	8005e04 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	225c      	movs	r2, #92	@ 0x5c
 8005df8:	2100      	movs	r1, #0
 8005dfa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f7fc fd10 	bl	8002824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	225d      	movs	r2, #93	@ 0x5d
 8005e08:	2102      	movs	r1, #2
 8005e0a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2140      	movs	r1, #64	@ 0x40
 8005e18:	438a      	bics	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	23e0      	movs	r3, #224	@ 0xe0
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d902      	bls.n	8005e2e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	e002      	b.n	8005e34 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e2e:	2380      	movs	r3, #128	@ 0x80
 8005e30:	015b      	lsls	r3, r3, #5
 8005e32:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	23f0      	movs	r3, #240	@ 0xf0
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d008      	beq.n	8005e52 <HAL_SPI_Init+0xaa>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	23e0      	movs	r3, #224	@ 0xe0
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d002      	beq.n	8005e52 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	2382      	movs	r3, #130	@ 0x82
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	401a      	ands	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6899      	ldr	r1, [r3, #8]
 8005e60:	2384      	movs	r3, #132	@ 0x84
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	400b      	ands	r3, r1
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	400b      	ands	r3, r1
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2101      	movs	r1, #1
 8005e78:	400b      	ands	r3, r1
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6999      	ldr	r1, [r3, #24]
 8005e80:	2380      	movs	r3, #128	@ 0x80
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	400b      	ands	r3, r1
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	2138      	movs	r1, #56	@ 0x38
 8005e8e:	400b      	ands	r3, r1
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	2180      	movs	r1, #128	@ 0x80
 8005e98:	400b      	ands	r3, r1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	0011      	movs	r1, r2
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ea2:	2380      	movs	r3, #128	@ 0x80
 8005ea4:	019b      	lsls	r3, r3, #6
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	401a      	ands	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	2110      	movs	r1, #16
 8005ec0:	400b      	ands	r3, r1
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec8:	2108      	movs	r1, #8
 8005eca:	400b      	ands	r3, r1
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68d9      	ldr	r1, [r3, #12]
 8005ed2:	23f0      	movs	r3, #240	@ 0xf0
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	400b      	ands	r3, r1
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	0011      	movs	r1, r2
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	2380      	movs	r3, #128	@ 0x80
 8005ee0:	015b      	lsls	r3, r3, #5
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4907      	ldr	r1, [pc, #28]	@ (8005f14 <HAL_SPI_Init+0x16c>)
 8005ef8:	400a      	ands	r2, r1
 8005efa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	225d      	movs	r2, #93	@ 0x5d
 8005f06:	2101      	movs	r1, #1
 8005f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b004      	add	sp, #16
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	fffff7ff 	.word	0xfffff7ff

08005f18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	@ 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	001a      	movs	r2, r3
 8005f26:	1cbb      	adds	r3, r7, #2
 8005f28:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f2e:	2323      	movs	r3, #35	@ 0x23
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	2200      	movs	r2, #0
 8005f34:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	225c      	movs	r2, #92	@ 0x5c
 8005f3a:	5c9b      	ldrb	r3, [r3, r2]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x2c>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e1c4      	b.n	80062ce <HAL_SPI_TransmitReceive+0x3b6>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	225c      	movs	r2, #92	@ 0x5c
 8005f48:	2101      	movs	r1, #1
 8005f4a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4c:	f7fc feea 	bl	8002d24 <HAL_GetTick>
 8005f50:	0003      	movs	r3, r0
 8005f52:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f54:	201b      	movs	r0, #27
 8005f56:	183b      	adds	r3, r7, r0
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	215d      	movs	r1, #93	@ 0x5d
 8005f5c:	5c52      	ldrb	r2, [r2, r1]
 8005f5e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f66:	2312      	movs	r3, #18
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	1cba      	adds	r2, r7, #2
 8005f6c:	8812      	ldrh	r2, [r2, #0]
 8005f6e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f70:	183b      	adds	r3, r7, r0
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d011      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x84>
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	2382      	movs	r3, #130	@ 0x82
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d107      	bne.n	8005f92 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <HAL_SPI_TransmitReceive+0x7a>
 8005f8a:	183b      	adds	r3, r7, r0
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d004      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005f92:	2323      	movs	r3, #35	@ 0x23
 8005f94:	18fb      	adds	r3, r7, r3
 8005f96:	2202      	movs	r2, #2
 8005f98:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f9a:	e191      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d006      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x98>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x98>
 8005fa8:	1cbb      	adds	r3, r7, #2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005fb0:	2323      	movs	r3, #35	@ 0x23
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fb8:	e182      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	225d      	movs	r2, #93	@ 0x5d
 8005fbe:	5c9b      	ldrb	r3, [r3, r2]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d003      	beq.n	8005fce <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	225d      	movs	r2, #93	@ 0x5d
 8005fca:	2105      	movs	r1, #5
 8005fcc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1cba      	adds	r2, r7, #2
 8005fde:	2146      	movs	r1, #70	@ 0x46
 8005fe0:	8812      	ldrh	r2, [r2, #0]
 8005fe2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	1cba      	adds	r2, r7, #2
 8005fe8:	2144      	movs	r1, #68	@ 0x44
 8005fea:	8812      	ldrh	r2, [r2, #0]
 8005fec:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	1cba      	adds	r2, r7, #2
 8005ff8:	8812      	ldrh	r2, [r2, #0]
 8005ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	1cba      	adds	r2, r7, #2
 8006000:	8812      	ldrh	r2, [r2, #0]
 8006002:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	23e0      	movs	r3, #224	@ 0xe0
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	429a      	cmp	r2, r3
 800601a:	d908      	bls.n	800602e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	49ac      	ldr	r1, [pc, #688]	@ (80062d8 <HAL_SPI_TransmitReceive+0x3c0>)
 8006028:	400a      	ands	r2, r1
 800602a:	605a      	str	r2, [r3, #4]
 800602c:	e008      	b.n	8006040 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2180      	movs	r1, #128	@ 0x80
 800603a:	0149      	lsls	r1, r1, #5
 800603c:	430a      	orrs	r2, r1
 800603e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2240      	movs	r2, #64	@ 0x40
 8006048:	4013      	ands	r3, r2
 800604a:	2b40      	cmp	r3, #64	@ 0x40
 800604c:	d007      	beq.n	800605e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2140      	movs	r1, #64	@ 0x40
 800605a:	430a      	orrs	r2, r1
 800605c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	23e0      	movs	r3, #224	@ 0xe0
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	429a      	cmp	r2, r3
 8006068:	d800      	bhi.n	800606c <HAL_SPI_TransmitReceive+0x154>
 800606a:	e083      	b.n	8006174 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x168>
 8006074:	2312      	movs	r3, #18
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d000      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x168>
 800607e:	e06d      	b.n	800615c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006084:	881a      	ldrh	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006090:	1c9a      	adds	r2, r3, #2
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a4:	e05a      	b.n	800615c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2202      	movs	r2, #2
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d11b      	bne.n	80060ec <HAL_SPI_TransmitReceive+0x1d4>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d016      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x1d4>
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d113      	bne.n	80060ec <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d4:	1c9a      	adds	r2, r3, #2
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2201      	movs	r2, #1
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d11c      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x21c>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2246      	movs	r2, #70	@ 0x46
 80060fe:	5a9b      	ldrh	r3, [r3, r2]
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d016      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	b292      	uxth	r2, r2
 8006112:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	1c9a      	adds	r2, r3, #2
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2246      	movs	r2, #70	@ 0x46
 8006122:	5a9b      	ldrh	r3, [r3, r2]
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b299      	uxth	r1, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2246      	movs	r2, #70	@ 0x46
 800612e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006130:	2301      	movs	r3, #1
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006134:	f7fc fdf6 	bl	8002d24 <HAL_GetTick>
 8006138:	0002      	movs	r2, r0
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006140:	429a      	cmp	r2, r3
 8006142:	d80b      	bhi.n	800615c <HAL_SPI_TransmitReceive+0x244>
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	3301      	adds	r3, #1
 8006148:	d008      	beq.n	800615c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800614a:	2323      	movs	r3, #35	@ 0x23
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	2203      	movs	r2, #3
 8006150:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	225d      	movs	r2, #93	@ 0x5d
 8006156:	2101      	movs	r1, #1
 8006158:	5499      	strb	r1, [r3, r2]
        goto error;
 800615a:	e0b1      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d19f      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x18e>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2246      	movs	r2, #70	@ 0x46
 800616a:	5a9b      	ldrh	r3, [r3, r2]
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d199      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x18e>
 8006172:	e089      	b.n	8006288 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x270>
 800617c:	2312      	movs	r3, #18
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d000      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x270>
 8006186:	e074      	b.n	8006272 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	7812      	ldrb	r2, [r2, #0]
 8006194:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ae:	e060      	b.n	8006272 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2202      	movs	r2, #2
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d11c      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x2e0>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d017      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x2e0>
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d114      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	330c      	adds	r3, #12
 80061d8:	7812      	ldrb	r2, [r2, #0]
 80061da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2201      	movs	r2, #1
 8006200:	4013      	ands	r3, r2
 8006202:	2b01      	cmp	r3, #1
 8006204:	d11e      	bne.n	8006244 <HAL_SPI_TransmitReceive+0x32c>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2246      	movs	r2, #70	@ 0x46
 800620a:	5a9b      	ldrh	r3, [r3, r2]
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d018      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	330c      	adds	r3, #12
 8006218:	001a      	movs	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2246      	movs	r2, #70	@ 0x46
 8006232:	5a9b      	ldrh	r3, [r3, r2]
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b299      	uxth	r1, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2246      	movs	r2, #70	@ 0x46
 800623e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006240:	2301      	movs	r3, #1
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006244:	f7fc fd6e 	bl	8002d24 <HAL_GetTick>
 8006248:	0002      	movs	r2, r0
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006250:	429a      	cmp	r2, r3
 8006252:	d802      	bhi.n	800625a <HAL_SPI_TransmitReceive+0x342>
 8006254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006256:	3301      	adds	r3, #1
 8006258:	d102      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x348>
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	2b00      	cmp	r3, #0
 800625e:	d108      	bne.n	8006272 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8006260:	2323      	movs	r3, #35	@ 0x23
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	2203      	movs	r2, #3
 8006266:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	225d      	movs	r2, #93	@ 0x5d
 800626c:	2101      	movs	r1, #1
 800626e:	5499      	strb	r1, [r3, r2]
        goto error;
 8006270:	e026      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d199      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x298>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2246      	movs	r2, #70	@ 0x46
 8006280:	5a9b      	ldrh	r3, [r3, r2]
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d193      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	0018      	movs	r0, r3
 8006290:	f000 f954 	bl	800653c <SPI_EndRxTxTransaction>
 8006294:	1e03      	subs	r3, r0, #0
 8006296:	d006      	beq.n	80062a6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8006298:	2323      	movs	r3, #35	@ 0x23
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	2201      	movs	r2, #1
 800629e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80062ae:	2323      	movs	r3, #35	@ 0x23
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	2201      	movs	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e003      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	225d      	movs	r2, #93	@ 0x5d
 80062bc:	2101      	movs	r1, #1
 80062be:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	225c      	movs	r2, #92	@ 0x5c
 80062c4:	2100      	movs	r1, #0
 80062c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80062c8:	2323      	movs	r3, #35	@ 0x23
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	781b      	ldrb	r3, [r3, #0]
}
 80062ce:	0018      	movs	r0, r3
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b00a      	add	sp, #40	@ 0x28
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	46c0      	nop			@ (mov r8, r8)
 80062d8:	ffffefff 	.word	0xffffefff

080062dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	1dfb      	adds	r3, r7, #7
 80062ea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062ec:	f7fc fd1a 	bl	8002d24 <HAL_GetTick>
 80062f0:	0002      	movs	r2, r0
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	18d3      	adds	r3, r2, r3
 80062fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062fc:	f7fc fd12 	bl	8002d24 <HAL_GetTick>
 8006300:	0003      	movs	r3, r0
 8006302:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006304:	4b3a      	ldr	r3, [pc, #232]	@ (80063f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	015b      	lsls	r3, r3, #5
 800630a:	0d1b      	lsrs	r3, r3, #20
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	4353      	muls	r3, r2
 8006310:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006312:	e058      	b.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	3301      	adds	r3, #1
 8006318:	d055      	beq.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800631a:	f7fc fd03 	bl	8002d24 <HAL_GetTick>
 800631e:	0002      	movs	r2, r0
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	429a      	cmp	r2, r3
 8006328:	d902      	bls.n	8006330 <SPI_WaitFlagStateUntilTimeout+0x54>
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d142      	bne.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	21e0      	movs	r1, #224	@ 0xe0
 800633c:	438a      	bics	r2, r1
 800633e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	2382      	movs	r3, #130	@ 0x82
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	429a      	cmp	r2, r3
 800634a:	d113      	bne.n	8006374 <SPI_WaitFlagStateUntilTimeout+0x98>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	2380      	movs	r3, #128	@ 0x80
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	429a      	cmp	r2, r3
 8006356:	d005      	beq.n	8006364 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	2380      	movs	r3, #128	@ 0x80
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	429a      	cmp	r2, r3
 8006362:	d107      	bne.n	8006374 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2140      	movs	r1, #64	@ 0x40
 8006370:	438a      	bics	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006378:	2380      	movs	r3, #128	@ 0x80
 800637a:	019b      	lsls	r3, r3, #6
 800637c:	429a      	cmp	r2, r3
 800637e:	d110      	bne.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	491a      	ldr	r1, [pc, #104]	@ (80063f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800638c:	400a      	ands	r2, r1
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2180      	movs	r1, #128	@ 0x80
 800639c:	0189      	lsls	r1, r1, #6
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	225d      	movs	r2, #93	@ 0x5d
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	225c      	movs	r2, #92	@ 0x5c
 80063ae:	2100      	movs	r1, #0
 80063b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e017      	b.n	80063e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	4013      	ands	r3, r2
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	425a      	negs	r2, r3
 80063d6:	4153      	adcs	r3, r2
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	001a      	movs	r2, r3
 80063dc:	1dfb      	adds	r3, r7, #7
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d197      	bne.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	0018      	movs	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b008      	add	sp, #32
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	2000007c 	.word	0x2000007c
 80063f4:	ffffdfff 	.word	0xffffdfff

080063f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	@ 0x28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006406:	2317      	movs	r3, #23
 8006408:	18fb      	adds	r3, r7, r3
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800640e:	f7fc fc89 	bl	8002d24 <HAL_GetTick>
 8006412:	0002      	movs	r2, r0
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	18d3      	adds	r3, r2, r3
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800641e:	f7fc fc81 	bl	8002d24 <HAL_GetTick>
 8006422:	0003      	movs	r3, r0
 8006424:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800642e:	4b41      	ldr	r3, [pc, #260]	@ (8006534 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	0013      	movs	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	189b      	adds	r3, r3, r2
 8006438:	00da      	lsls	r2, r3, #3
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	0d1b      	lsrs	r3, r3, #20
 800643e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006440:	4353      	muls	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006444:	e068      	b.n	8006518 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	23c0      	movs	r3, #192	@ 0xc0
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	429a      	cmp	r2, r3
 800644e:	d10a      	bne.n	8006466 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	2117      	movs	r1, #23
 800645e:	187b      	adds	r3, r7, r1
 8006460:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006462:	187b      	adds	r3, r7, r1
 8006464:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	d055      	beq.n	8006518 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800646c:	f7fc fc5a 	bl	8002d24 <HAL_GetTick>
 8006470:	0002      	movs	r2, r0
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006478:	429a      	cmp	r2, r3
 800647a:	d902      	bls.n	8006482 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	d142      	bne.n	8006508 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	21e0      	movs	r1, #224	@ 0xe0
 800648e:	438a      	bics	r2, r1
 8006490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	2382      	movs	r3, #130	@ 0x82
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	429a      	cmp	r2, r3
 800649c:	d113      	bne.n	80064c6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	2380      	movs	r3, #128	@ 0x80
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d005      	beq.n	80064b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	2380      	movs	r3, #128	@ 0x80
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d107      	bne.n	80064c6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2140      	movs	r1, #64	@ 0x40
 80064c2:	438a      	bics	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064ca:	2380      	movs	r3, #128	@ 0x80
 80064cc:	019b      	lsls	r3, r3, #6
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d110      	bne.n	80064f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4916      	ldr	r1, [pc, #88]	@ (8006538 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80064de:	400a      	ands	r2, r1
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2180      	movs	r1, #128	@ 0x80
 80064ee:	0189      	lsls	r1, r1, #6
 80064f0:	430a      	orrs	r2, r1
 80064f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	225d      	movs	r2, #93	@ 0x5d
 80064f8:	2101      	movs	r1, #1
 80064fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	225c      	movs	r2, #92	@ 0x5c
 8006500:	2100      	movs	r1, #0
 8006502:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e010      	b.n	800652a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	3b01      	subs	r3, #1
 8006516:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4013      	ands	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d18e      	bne.n	8006446 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	0018      	movs	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	b00a      	add	sp, #40	@ 0x28
 8006530:	bd80      	pop	{r7, pc}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	2000007c 	.word	0x2000007c
 8006538:	ffffdfff 	.word	0xffffdfff

0800653c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	23c0      	movs	r3, #192	@ 0xc0
 800654c:	0159      	lsls	r1, r3, #5
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	0013      	movs	r3, r2
 8006556:	2200      	movs	r2, #0
 8006558:	f7ff ff4e 	bl	80063f8 <SPI_WaitFifoStateUntilTimeout>
 800655c:	1e03      	subs	r3, r0, #0
 800655e:	d007      	beq.n	8006570 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006564:	2220      	movs	r2, #32
 8006566:	431a      	orrs	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e027      	b.n	80065c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	0013      	movs	r3, r2
 800657a:	2200      	movs	r2, #0
 800657c:	2180      	movs	r1, #128	@ 0x80
 800657e:	f7ff fead 	bl	80062dc <SPI_WaitFlagStateUntilTimeout>
 8006582:	1e03      	subs	r3, r0, #0
 8006584:	d007      	beq.n	8006596 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658a:	2220      	movs	r2, #32
 800658c:	431a      	orrs	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e014      	b.n	80065c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	23c0      	movs	r3, #192	@ 0xc0
 800659a:	00d9      	lsls	r1, r3, #3
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	0013      	movs	r3, r2
 80065a4:	2200      	movs	r2, #0
 80065a6:	f7ff ff27 	bl	80063f8 <SPI_WaitFifoStateUntilTimeout>
 80065aa:	1e03      	subs	r3, r0, #0
 80065ac:	d007      	beq.n	80065be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b2:	2220      	movs	r2, #32
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e000      	b.n	80065c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	0018      	movs	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b004      	add	sp, #16
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e04a      	b.n	8006670 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	223d      	movs	r2, #61	@ 0x3d
 80065de:	5c9b      	ldrb	r3, [r3, r2]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d107      	bne.n	80065f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	223c      	movs	r2, #60	@ 0x3c
 80065ea:	2100      	movs	r1, #0
 80065ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7fc f977 	bl	80028e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	223d      	movs	r2, #61	@ 0x3d
 80065fa:	2102      	movs	r1, #2
 80065fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3304      	adds	r3, #4
 8006606:	0019      	movs	r1, r3
 8006608:	0010      	movs	r0, r2
 800660a:	f000 fa95 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2248      	movs	r2, #72	@ 0x48
 8006612:	2101      	movs	r1, #1
 8006614:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	223e      	movs	r2, #62	@ 0x3e
 800661a:	2101      	movs	r1, #1
 800661c:	5499      	strb	r1, [r3, r2]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	223f      	movs	r2, #63	@ 0x3f
 8006622:	2101      	movs	r1, #1
 8006624:	5499      	strb	r1, [r3, r2]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2240      	movs	r2, #64	@ 0x40
 800662a:	2101      	movs	r1, #1
 800662c:	5499      	strb	r1, [r3, r2]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2241      	movs	r2, #65	@ 0x41
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2242      	movs	r2, #66	@ 0x42
 800663a:	2101      	movs	r1, #1
 800663c:	5499      	strb	r1, [r3, r2]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2243      	movs	r2, #67	@ 0x43
 8006642:	2101      	movs	r1, #1
 8006644:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2244      	movs	r2, #68	@ 0x44
 800664a:	2101      	movs	r1, #1
 800664c:	5499      	strb	r1, [r3, r2]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2245      	movs	r2, #69	@ 0x45
 8006652:	2101      	movs	r1, #1
 8006654:	5499      	strb	r1, [r3, r2]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2246      	movs	r2, #70	@ 0x46
 800665a:	2101      	movs	r1, #1
 800665c:	5499      	strb	r1, [r3, r2]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2247      	movs	r2, #71	@ 0x47
 8006662:	2101      	movs	r1, #1
 8006664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	223d      	movs	r2, #61	@ 0x3d
 800666a:	2101      	movs	r1, #1
 800666c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b002      	add	sp, #8
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	223d      	movs	r2, #61	@ 0x3d
 8006684:	5c9b      	ldrb	r3, [r3, r2]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	d001      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e047      	b.n	8006720 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	223d      	movs	r2, #61	@ 0x3d
 8006694:	2102      	movs	r1, #2
 8006696:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2101      	movs	r1, #1
 80066a4:	430a      	orrs	r2, r1
 80066a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006728 <HAL_TIM_Base_Start_IT+0xb0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d014      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x64>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	2380      	movs	r3, #128	@ 0x80
 80066b8:	05db      	lsls	r3, r3, #23
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d00e      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x64>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1a      	ldr	r2, [pc, #104]	@ (800672c <HAL_TIM_Base_Start_IT+0xb4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x64>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a18      	ldr	r2, [pc, #96]	@ (8006730 <HAL_TIM_Base_Start_IT+0xb8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x64>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a17      	ldr	r2, [pc, #92]	@ (8006734 <HAL_TIM_Base_Start_IT+0xbc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d116      	bne.n	800670a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	4a15      	ldr	r2, [pc, #84]	@ (8006738 <HAL_TIM_Base_Start_IT+0xc0>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b06      	cmp	r3, #6
 80066ec:	d016      	beq.n	800671c <HAL_TIM_Base_Start_IT+0xa4>
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	2380      	movs	r3, #128	@ 0x80
 80066f2:	025b      	lsls	r3, r3, #9
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d011      	beq.n	800671c <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2101      	movs	r1, #1
 8006704:	430a      	orrs	r2, r1
 8006706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006708:	e008      	b.n	800671c <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2101      	movs	r1, #1
 8006716:	430a      	orrs	r2, r1
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	e000      	b.n	800671e <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800671c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	0018      	movs	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	b004      	add	sp, #16
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40012c00 	.word	0x40012c00
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40014000 	.word	0x40014000
 8006738:	00010007 	.word	0x00010007

0800673c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2202      	movs	r2, #2
 8006758:	4013      	ands	r3, r2
 800675a:	d021      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2202      	movs	r2, #2
 8006760:	4013      	ands	r3, r2
 8006762:	d01d      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2203      	movs	r2, #3
 800676a:	4252      	negs	r2, r2
 800676c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2203      	movs	r2, #3
 800677c:	4013      	ands	r3, r2
 800677e:	d004      	beq.n	800678a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	0018      	movs	r0, r3
 8006784:	f000 f9c0 	bl	8006b08 <HAL_TIM_IC_CaptureCallback>
 8006788:	e007      	b.n	800679a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0018      	movs	r0, r3
 800678e:	f000 f9b3 	bl	8006af8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	0018      	movs	r0, r3
 8006796:	f000 f9bf 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2204      	movs	r2, #4
 80067a4:	4013      	ands	r3, r2
 80067a6:	d022      	beq.n	80067ee <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2204      	movs	r2, #4
 80067ac:	4013      	ands	r3, r2
 80067ae:	d01e      	beq.n	80067ee <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2205      	movs	r2, #5
 80067b6:	4252      	negs	r2, r2
 80067b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2202      	movs	r2, #2
 80067be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	23c0      	movs	r3, #192	@ 0xc0
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4013      	ands	r3, r2
 80067cc:	d004      	beq.n	80067d8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f000 f999 	bl	8006b08 <HAL_TIM_IC_CaptureCallback>
 80067d6:	e007      	b.n	80067e8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	0018      	movs	r0, r3
 80067dc:	f000 f98c 	bl	8006af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	0018      	movs	r0, r3
 80067e4:	f000 f998 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2208      	movs	r2, #8
 80067f2:	4013      	ands	r3, r2
 80067f4:	d021      	beq.n	800683a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2208      	movs	r2, #8
 80067fa:	4013      	ands	r3, r2
 80067fc:	d01d      	beq.n	800683a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2209      	movs	r2, #9
 8006804:	4252      	negs	r2, r2
 8006806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2204      	movs	r2, #4
 800680c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	2203      	movs	r2, #3
 8006816:	4013      	ands	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 f973 	bl	8006b08 <HAL_TIM_IC_CaptureCallback>
 8006822:	e007      	b.n	8006834 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	0018      	movs	r0, r3
 8006828:	f000 f966 	bl	8006af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	0018      	movs	r0, r3
 8006830:	f000 f972 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2210      	movs	r2, #16
 800683e:	4013      	ands	r3, r2
 8006840:	d022      	beq.n	8006888 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2210      	movs	r2, #16
 8006846:	4013      	ands	r3, r2
 8006848:	d01e      	beq.n	8006888 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2211      	movs	r2, #17
 8006850:	4252      	negs	r2, r2
 8006852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2208      	movs	r2, #8
 8006858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	23c0      	movs	r3, #192	@ 0xc0
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4013      	ands	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	0018      	movs	r0, r3
 800686c:	f000 f94c 	bl	8006b08 <HAL_TIM_IC_CaptureCallback>
 8006870:	e007      	b.n	8006882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0018      	movs	r0, r3
 8006876:	f000 f93f 	bl	8006af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0018      	movs	r0, r3
 800687e:	f000 f94b 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2201      	movs	r2, #1
 800688c:	4013      	ands	r3, r2
 800688e:	d00c      	beq.n	80068aa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	4013      	ands	r3, r2
 8006896:	d008      	beq.n	80068aa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2202      	movs	r2, #2
 800689e:	4252      	negs	r2, r2
 80068a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7fb ff1f 	bl	80026e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2280      	movs	r2, #128	@ 0x80
 80068ae:	4013      	ands	r3, r2
 80068b0:	d104      	bne.n	80068bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	2380      	movs	r3, #128	@ 0x80
 80068b6:	019b      	lsls	r3, r3, #6
 80068b8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80068ba:	d00b      	beq.n	80068d4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2280      	movs	r2, #128	@ 0x80
 80068c0:	4013      	ands	r3, r2
 80068c2:	d007      	beq.n	80068d4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006944 <HAL_TIM_IRQHandler+0x208>)
 80068ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f000 fae4 	bl	8006e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	2380      	movs	r3, #128	@ 0x80
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	4013      	ands	r3, r2
 80068dc:	d00b      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2280      	movs	r2, #128	@ 0x80
 80068e2:	4013      	ands	r3, r2
 80068e4:	d007      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a17      	ldr	r2, [pc, #92]	@ (8006948 <HAL_TIM_IRQHandler+0x20c>)
 80068ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0018      	movs	r0, r3
 80068f2:	f000 fadb 	bl	8006eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2240      	movs	r2, #64	@ 0x40
 80068fa:	4013      	ands	r3, r2
 80068fc:	d00c      	beq.n	8006918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2240      	movs	r2, #64	@ 0x40
 8006902:	4013      	ands	r3, r2
 8006904:	d008      	beq.n	8006918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2241      	movs	r2, #65	@ 0x41
 800690c:	4252      	negs	r2, r2
 800690e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	0018      	movs	r0, r3
 8006914:	f000 f908 	bl	8006b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2220      	movs	r2, #32
 800691c:	4013      	ands	r3, r2
 800691e:	d00c      	beq.n	800693a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	4013      	ands	r3, r2
 8006926:	d008      	beq.n	800693a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2221      	movs	r2, #33	@ 0x21
 800692e:	4252      	negs	r2, r2
 8006930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 faa9 	bl	8006e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800693a:	46c0      	nop			@ (mov r8, r8)
 800693c:	46bd      	mov	sp, r7
 800693e:	b004      	add	sp, #16
 8006940:	bd80      	pop	{r7, pc}
 8006942:	46c0      	nop			@ (mov r8, r8)
 8006944:	ffffdf7f 	.word	0xffffdf7f
 8006948:	fffffeff 	.word	0xfffffeff

0800694c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006956:	230f      	movs	r3, #15
 8006958:	18fb      	adds	r3, r7, r3
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	223c      	movs	r2, #60	@ 0x3c
 8006962:	5c9b      	ldrb	r3, [r3, r2]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_TIM_ConfigClockSource+0x20>
 8006968:	2302      	movs	r3, #2
 800696a:	e0bc      	b.n	8006ae6 <HAL_TIM_ConfigClockSource+0x19a>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	223c      	movs	r2, #60	@ 0x3c
 8006970:	2101      	movs	r1, #1
 8006972:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	223d      	movs	r2, #61	@ 0x3d
 8006978:	2102      	movs	r1, #2
 800697a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4a5a      	ldr	r2, [pc, #360]	@ (8006af0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006988:	4013      	ands	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4a59      	ldr	r2, [pc, #356]	@ (8006af4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006990:	4013      	ands	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2280      	movs	r2, #128	@ 0x80
 80069a2:	0192      	lsls	r2, r2, #6
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d040      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0xde>
 80069a8:	2280      	movs	r2, #128	@ 0x80
 80069aa:	0192      	lsls	r2, r2, #6
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d900      	bls.n	80069b2 <HAL_TIM_ConfigClockSource+0x66>
 80069b0:	e088      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x178>
 80069b2:	2280      	movs	r2, #128	@ 0x80
 80069b4:	0152      	lsls	r2, r2, #5
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d100      	bne.n	80069bc <HAL_TIM_ConfigClockSource+0x70>
 80069ba:	e088      	b.n	8006ace <HAL_TIM_ConfigClockSource+0x182>
 80069bc:	2280      	movs	r2, #128	@ 0x80
 80069be:	0152      	lsls	r2, r2, #5
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d900      	bls.n	80069c6 <HAL_TIM_ConfigClockSource+0x7a>
 80069c4:	e07e      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x178>
 80069c6:	2b70      	cmp	r3, #112	@ 0x70
 80069c8:	d018      	beq.n	80069fc <HAL_TIM_ConfigClockSource+0xb0>
 80069ca:	d900      	bls.n	80069ce <HAL_TIM_ConfigClockSource+0x82>
 80069cc:	e07a      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x178>
 80069ce:	2b60      	cmp	r3, #96	@ 0x60
 80069d0:	d04f      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x126>
 80069d2:	d900      	bls.n	80069d6 <HAL_TIM_ConfigClockSource+0x8a>
 80069d4:	e076      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x178>
 80069d6:	2b50      	cmp	r3, #80	@ 0x50
 80069d8:	d03b      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x106>
 80069da:	d900      	bls.n	80069de <HAL_TIM_ConfigClockSource+0x92>
 80069dc:	e072      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x178>
 80069de:	2b40      	cmp	r3, #64	@ 0x40
 80069e0:	d057      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x146>
 80069e2:	d900      	bls.n	80069e6 <HAL_TIM_ConfigClockSource+0x9a>
 80069e4:	e06e      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x178>
 80069e6:	2b30      	cmp	r3, #48	@ 0x30
 80069e8:	d063      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x166>
 80069ea:	d86b      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x178>
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d060      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x166>
 80069f0:	d868      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x178>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d05d      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x166>
 80069f6:	2b10      	cmp	r3, #16
 80069f8:	d05b      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x166>
 80069fa:	e063      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a0c:	f000 f9a8 	bl	8006d60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2277      	movs	r2, #119	@ 0x77
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	609a      	str	r2, [r3, #8]
      break;
 8006a28:	e052      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a3a:	f000 f991 	bl	8006d60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2180      	movs	r1, #128	@ 0x80
 8006a4a:	01c9      	lsls	r1, r1, #7
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]
      break;
 8006a50:	e03e      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5e:	001a      	movs	r2, r3
 8006a60:	f000 f902 	bl	8006c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2150      	movs	r1, #80	@ 0x50
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f000 f95c 	bl	8006d28 <TIM_ITRx_SetConfig>
      break;
 8006a70:	e02e      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a7e:	001a      	movs	r2, r3
 8006a80:	f000 f920 	bl	8006cc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2160      	movs	r1, #96	@ 0x60
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f000 f94c 	bl	8006d28 <TIM_ITRx_SetConfig>
      break;
 8006a90:	e01e      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9e:	001a      	movs	r2, r3
 8006aa0:	f000 f8e2 	bl	8006c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2140      	movs	r1, #64	@ 0x40
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 f93c 	bl	8006d28 <TIM_ITRx_SetConfig>
      break;
 8006ab0:	e00e      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	0019      	movs	r1, r3
 8006abc:	0010      	movs	r0, r2
 8006abe:	f000 f933 	bl	8006d28 <TIM_ITRx_SetConfig>
      break;
 8006ac2:	e005      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006ac4:	230f      	movs	r3, #15
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	2201      	movs	r2, #1
 8006aca:	701a      	strb	r2, [r3, #0]
      break;
 8006acc:	e000      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006ace:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	223d      	movs	r2, #61	@ 0x3d
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	223c      	movs	r2, #60	@ 0x3c
 8006adc:	2100      	movs	r1, #0
 8006ade:	5499      	strb	r1, [r3, r2]

  return status;
 8006ae0:	230f      	movs	r3, #15
 8006ae2:	18fb      	adds	r3, r7, r3
 8006ae4:	781b      	ldrb	r3, [r3, #0]
}
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b004      	add	sp, #16
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	ffceff88 	.word	0xffceff88
 8006af4:	ffff00ff 	.word	0xffff00ff

08006af8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b00:	46c0      	nop			@ (mov r8, r8)
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b002      	add	sp, #8
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b10:	46c0      	nop			@ (mov r8, r8)
 8006b12:	46bd      	mov	sp, r7
 8006b14:	b002      	add	sp, #8
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b20:	46c0      	nop			@ (mov r8, r8)
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b002      	add	sp, #8
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b30:	46c0      	nop			@ (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b002      	add	sp, #8
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c48 <TIM_Base_SetConfig+0x110>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00c      	beq.n	8006b6a <TIM_Base_SetConfig+0x32>
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	2380      	movs	r3, #128	@ 0x80
 8006b54:	05db      	lsls	r3, r3, #23
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d007      	beq.n	8006b6a <TIM_Base_SetConfig+0x32>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8006c4c <TIM_Base_SetConfig+0x114>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_Base_SetConfig+0x32>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a3a      	ldr	r2, [pc, #232]	@ (8006c50 <TIM_Base_SetConfig+0x118>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d108      	bne.n	8006b7c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2270      	movs	r2, #112	@ 0x70
 8006b6e:	4393      	bics	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a32      	ldr	r2, [pc, #200]	@ (8006c48 <TIM_Base_SetConfig+0x110>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d01c      	beq.n	8006bbe <TIM_Base_SetConfig+0x86>
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	2380      	movs	r3, #128	@ 0x80
 8006b88:	05db      	lsls	r3, r3, #23
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d017      	beq.n	8006bbe <TIM_Base_SetConfig+0x86>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a2e      	ldr	r2, [pc, #184]	@ (8006c4c <TIM_Base_SetConfig+0x114>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <TIM_Base_SetConfig+0x86>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a2d      	ldr	r2, [pc, #180]	@ (8006c50 <TIM_Base_SetConfig+0x118>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00f      	beq.n	8006bbe <TIM_Base_SetConfig+0x86>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8006c54 <TIM_Base_SetConfig+0x11c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00b      	beq.n	8006bbe <TIM_Base_SetConfig+0x86>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c58 <TIM_Base_SetConfig+0x120>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <TIM_Base_SetConfig+0x86>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c5c <TIM_Base_SetConfig+0x124>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_Base_SetConfig+0x86>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a29      	ldr	r2, [pc, #164]	@ (8006c60 <TIM_Base_SetConfig+0x128>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d108      	bne.n	8006bd0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a28      	ldr	r2, [pc, #160]	@ (8006c64 <TIM_Base_SetConfig+0x12c>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2280      	movs	r2, #128	@ 0x80
 8006bd4:	4393      	bics	r3, r2
 8006bd6:	001a      	movs	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a13      	ldr	r2, [pc, #76]	@ (8006c48 <TIM_Base_SetConfig+0x110>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <TIM_Base_SetConfig+0xde>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a15      	ldr	r2, [pc, #84]	@ (8006c58 <TIM_Base_SetConfig+0x120>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <TIM_Base_SetConfig+0xde>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a14      	ldr	r2, [pc, #80]	@ (8006c5c <TIM_Base_SetConfig+0x124>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_Base_SetConfig+0xde>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a13      	ldr	r2, [pc, #76]	@ (8006c60 <TIM_Base_SetConfig+0x128>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d103      	bne.n	8006c1e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d106      	bne.n	8006c3e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2201      	movs	r2, #1
 8006c36:	4393      	bics	r3, r2
 8006c38:	001a      	movs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	611a      	str	r2, [r3, #16]
  }
}
 8006c3e:	46c0      	nop			@ (mov r8, r8)
 8006c40:	46bd      	mov	sp, r7
 8006c42:	b004      	add	sp, #16
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	46c0      	nop			@ (mov r8, r8)
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40002000 	.word	0x40002000
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40014400 	.word	0x40014400
 8006c60:	40014800 	.word	0x40014800
 8006c64:	fffffcff 	.word	0xfffffcff

08006c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	4393      	bics	r3, r2
 8006c82:	001a      	movs	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	22f0      	movs	r2, #240	@ 0xf0
 8006c92:	4393      	bics	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	220a      	movs	r2, #10
 8006ca4:	4393      	bics	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	621a      	str	r2, [r3, #32]
}
 8006cbc:	46c0      	nop			@ (mov r8, r8)
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b006      	add	sp, #24
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	2210      	movs	r2, #16
 8006cdc:	4393      	bics	r3, r2
 8006cde:	001a      	movs	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4a0d      	ldr	r2, [pc, #52]	@ (8006d24 <TIM_TI2_ConfigInputStage+0x60>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	22a0      	movs	r2, #160	@ 0xa0
 8006d00:	4393      	bics	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b006      	add	sp, #24
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	46c0      	nop			@ (mov r8, r8)
 8006d24:	ffff0fff 	.word	0xffff0fff

08006d28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4a08      	ldr	r2, [pc, #32]	@ (8006d5c <TIM_ITRx_SetConfig+0x34>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	2207      	movs	r2, #7
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	609a      	str	r2, [r3, #8]
}
 8006d52:	46c0      	nop			@ (mov r8, r8)
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b004      	add	sp, #16
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	ffcfff8f 	.word	0xffcfff8f

08006d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	4a09      	ldr	r2, [pc, #36]	@ (8006d9c <TIM_ETR_SetConfig+0x3c>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	021a      	lsls	r2, r3, #8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	46c0      	nop			@ (mov r8, r8)
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b006      	add	sp, #24
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	ffff00ff 	.word	0xffff00ff

08006da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	223c      	movs	r2, #60	@ 0x3c
 8006dae:	5c9b      	ldrb	r3, [r3, r2]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e05a      	b.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	223c      	movs	r2, #60	@ 0x3c
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	223d      	movs	r2, #61	@ 0x3d
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a26      	ldr	r2, [pc, #152]	@ (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d108      	bne.n	8006df4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4a25      	ldr	r2, [pc, #148]	@ (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2270      	movs	r2, #112	@ 0x70
 8006df8:	4393      	bics	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a19      	ldr	r2, [pc, #100]	@ (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d014      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	2380      	movs	r3, #128	@ 0x80
 8006e1e:	05db      	lsls	r3, r3, #23
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d00e      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a15      	ldr	r2, [pc, #84]	@ (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a14      	ldr	r2, [pc, #80]	@ (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d004      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a12      	ldr	r2, [pc, #72]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d10c      	bne.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2280      	movs	r2, #128	@ 0x80
 8006e46:	4393      	bics	r3, r2
 8006e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	223d      	movs	r2, #61	@ 0x3d
 8006e60:	2101      	movs	r1, #1
 8006e62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	223c      	movs	r2, #60	@ 0x3c
 8006e68:	2100      	movs	r1, #0
 8006e6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	0018      	movs	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b004      	add	sp, #16
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	46c0      	nop			@ (mov r8, r8)
 8006e78:	40012c00 	.word	0x40012c00
 8006e7c:	ff0fffff 	.word	0xff0fffff
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800
 8006e88:	40014000 	.word	0x40014000

08006e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e94:	46c0      	nop			@ (mov r8, r8)
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b002      	add	sp, #8
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea4:	46c0      	nop			@ (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006eb4:	46c0      	nop			@ (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b002      	add	sp, #8
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <USB_DisableGlobalInt+0x24>)
 8006ec6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	43d2      	mvns	r2, r2
 8006ed0:	401a      	ands	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	0018      	movs	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	b004      	add	sp, #16
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	0000bf80 	.word	0x0000bf80

08006ee4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	000a      	movs	r2, r1
 8006eee:	1cfb      	adds	r3, r7, #3
 8006ef0:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8006ef2:	1cfb      	adds	r3, r7, #3
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	085a      	lsrs	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f06:	e00d      	b.n	8006f24 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 8006f08:	1cfb      	adds	r3, r7, #3
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d107      	bne.n	8006f20 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f14:	2280      	movs	r2, #128	@ 0x80
 8006f16:	0612      	lsls	r2, r2, #24
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f1e:	e001      	b.n	8006f24 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	0018      	movs	r0, r3
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	b002      	add	sp, #8
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8006f2e:	b084      	sub	sp, #16
 8006f30:	b5b0      	push	{r4, r5, r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	2004      	movs	r0, #4
 8006f3a:	2420      	movs	r4, #32
 8006f3c:	1900      	adds	r0, r0, r4
 8006f3e:	19c0      	adds	r0, r0, r7
 8006f40:	6001      	str	r1, [r0, #0]
 8006f42:	6042      	str	r2, [r0, #4]
 8006f44:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f50:	2201      	movs	r2, #1
 8006f52:	4393      	bics	r3, r2
 8006f54:	001a      	movs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8006f5a:	250f      	movs	r5, #15
 8006f5c:	197c      	adds	r4, r7, r5
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2100      	movs	r1, #0
 8006f62:	0018      	movs	r0, r3
 8006f64:	f7ff ffbe 	bl	8006ee4 <USB_SetCurrentMode>
 8006f68:	0003      	movs	r3, r0
 8006f6a:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8006f72:	197b      	adds	r3, r7, r5
 8006f74:	781b      	ldrb	r3, [r3, #0]
}
 8006f76:	0018      	movs	r0, r3
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	b004      	add	sp, #16
 8006f7c:	bcb0      	pop	{r4, r5, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	b004      	add	sp, #16
 8006f82:	4718      	bx	r3

08006f84 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b097      	sub	sp, #92	@ 0x5c
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d001      	beq.n	8006f9a <USB_EPStartXfer+0x16>
 8006f96:	f000 fcbf 	bl	8007918 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d903      	bls.n	8006fae <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fac:	e002      	b.n	8006fb4 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	7b1b      	ldrb	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d12b      	bne.n	8007014 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6959      	ldr	r1, [r3, #20]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	88da      	ldrh	r2, [r3, #6]
 8006fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f811 	bl	8007ff0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4ace      	ldr	r2, [pc, #824]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8006fd6:	4694      	mov	ip, r2
 8006fd8:	4463      	add	r3, ip
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	49cb      	ldr	r1, [pc, #812]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8006fe4:	468c      	mov	ip, r1
 8006fe6:	4463      	add	r3, ip
 8006fe8:	0412      	lsls	r2, r2, #16
 8006fea:	0c12      	lsrs	r2, r2, #16
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	4ac6      	ldr	r2, [pc, #792]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8006ff6:	4694      	mov	ip, r2
 8006ff8:	4463      	add	r3, ip
 8006ffa:	6819      	ldr	r1, [r3, #0]
 8006ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ffe:	041a      	lsls	r2, r3, #16
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	48c2      	ldr	r0, [pc, #776]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8007008:	4684      	mov	ip, r0
 800700a:	4463      	add	r3, ip
 800700c:	430a      	orrs	r2, r1
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f000 fc67 	bl	80078e2 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	78db      	ldrb	r3, [r3, #3]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d000      	beq.n	800701e <USB_EPStartXfer+0x9a>
 800701c:	e31a      	b.n	8007654 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6a1a      	ldr	r2, [r3, #32]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	429a      	cmp	r2, r3
 8007028:	d800      	bhi.n	800702c <USB_EPStartXfer+0xa8>
 800702a:	e2c7      	b.n	80075bc <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	18d3      	adds	r3, r2, r3
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4ab6      	ldr	r2, [pc, #728]	@ (8007314 <USB_EPStartXfer+0x390>)
 800703a:	4013      	ands	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	18d3      	adds	r3, r2, r3
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	49b3      	ldr	r1, [pc, #716]	@ (8007318 <USB_EPStartXfer+0x394>)
 800704c:	430a      	orrs	r2, r1
 800704e:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	6a1a      	ldr	r2, [r3, #32]
 8007054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007056:	1ad2      	subs	r2, r2, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	18d3      	adds	r3, r2, r3
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2240      	movs	r2, #64	@ 0x40
 800706a:	4013      	ands	r3, r2
 800706c:	d100      	bne.n	8007070 <USB_EPStartXfer+0xec>
 800706e:	e155      	b.n	800731c <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d162      	bne.n	800713e <USB_EPStartXfer+0x1ba>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	4aa4      	ldr	r2, [pc, #656]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8007080:	4694      	mov	ip, r2
 8007082:	4463      	add	r3, ip
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	49a0      	ldr	r1, [pc, #640]	@ (8007310 <USB_EPStartXfer+0x38c>)
 800708e:	468c      	mov	ip, r1
 8007090:	4463      	add	r3, ip
 8007092:	0192      	lsls	r2, r2, #6
 8007094:	0992      	lsrs	r2, r2, #6
 8007096:	605a      	str	r2, [r3, #4]
 8007098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800709a:	2b3e      	cmp	r3, #62	@ 0x3e
 800709c:	d91e      	bls.n	80070dc <USB_EPStartXfer+0x158>
 800709e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80070a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a6:	221f      	movs	r2, #31
 80070a8:	4013      	ands	r3, r2
 80070aa:	d102      	bne.n	80070b2 <USB_EPStartXfer+0x12e>
 80070ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070ae:	3b01      	subs	r3, #1
 80070b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4a95      	ldr	r2, [pc, #596]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80070ba:	4694      	mov	ip, r2
 80070bc:	4463      	add	r3, ip
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c2:	069b      	lsls	r3, r3, #26
 80070c4:	431a      	orrs	r2, r3
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4990      	ldr	r1, [pc, #576]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80070ce:	468c      	mov	ip, r1
 80070d0:	4463      	add	r3, ip
 80070d2:	2180      	movs	r1, #128	@ 0x80
 80070d4:	0609      	lsls	r1, r1, #24
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
 80070da:	e055      	b.n	8007188 <USB_EPStartXfer+0x204>
 80070dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d111      	bne.n	8007106 <USB_EPStartXfer+0x182>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4a89      	ldr	r2, [pc, #548]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80070ea:	4694      	mov	ip, r2
 80070ec:	4463      	add	r3, ip
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4986      	ldr	r1, [pc, #536]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80070f8:	468c      	mov	ip, r1
 80070fa:	4463      	add	r3, ip
 80070fc:	2180      	movs	r1, #128	@ 0x80
 80070fe:	0609      	lsls	r1, r1, #24
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
 8007104:	e040      	b.n	8007188 <USB_EPStartXfer+0x204>
 8007106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	653b      	str	r3, [r7, #80]	@ 0x50
 800710c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800710e:	2201      	movs	r2, #1
 8007110:	4013      	ands	r3, r2
 8007112:	d002      	beq.n	800711a <USB_EPStartXfer+0x196>
 8007114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007116:	3301      	adds	r3, #1
 8007118:	653b      	str	r3, [r7, #80]	@ 0x50
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4a7b      	ldr	r2, [pc, #492]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8007122:	4694      	mov	ip, r2
 8007124:	4463      	add	r3, ip
 8007126:	6859      	ldr	r1, [r3, #4]
 8007128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800712a:	069a      	lsls	r2, r3, #26
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	4877      	ldr	r0, [pc, #476]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8007134:	4684      	mov	ip, r0
 8007136:	4463      	add	r3, ip
 8007138:	430a      	orrs	r2, r1
 800713a:	605a      	str	r2, [r3, #4]
 800713c:	e024      	b.n	8007188 <USB_EPStartXfer+0x204>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d120      	bne.n	8007188 <USB_EPStartXfer+0x204>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	4a70      	ldr	r2, [pc, #448]	@ (8007310 <USB_EPStartXfer+0x38c>)
 800714e:	4694      	mov	ip, r2
 8007150:	4463      	add	r3, ip
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	496d      	ldr	r1, [pc, #436]	@ (8007310 <USB_EPStartXfer+0x38c>)
 800715c:	468c      	mov	ip, r1
 800715e:	4463      	add	r3, ip
 8007160:	0412      	lsls	r2, r2, #16
 8007162:	0c12      	lsrs	r2, r2, #16
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4a68      	ldr	r2, [pc, #416]	@ (8007310 <USB_EPStartXfer+0x38c>)
 800716e:	4694      	mov	ip, r2
 8007170:	4463      	add	r3, ip
 8007172:	6859      	ldr	r1, [r3, #4]
 8007174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007176:	041a      	lsls	r2, r3, #16
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4864      	ldr	r0, [pc, #400]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8007180:	4684      	mov	ip, r0
 8007182:	4463      	add	r3, ip
 8007184:	430a      	orrs	r2, r1
 8007186:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8007188:	201a      	movs	r0, #26
 800718a:	183b      	adds	r3, r7, r0
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	8952      	ldrh	r2, [r2, #10]
 8007190:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6959      	ldr	r1, [r3, #20]
 8007196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007198:	b29c      	uxth	r4, r3
 800719a:	183b      	adds	r3, r7, r0
 800719c:	881a      	ldrh	r2, [r3, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	0023      	movs	r3, r4
 80071a2:	f000 ff25 	bl	8007ff0 <USB_WritePMA>
            ep->xfer_buff += len;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ac:	18d2      	adds	r2, r2, r3
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6a1a      	ldr	r2, [r3, #32]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d906      	bls.n	80071cc <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6a1a      	ldr	r2, [r3, #32]
 80071c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071c4:	1ad2      	subs	r2, r2, r3
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	621a      	str	r2, [r3, #32]
 80071ca:	e005      	b.n	80071d8 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2200      	movs	r2, #0
 80071d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d162      	bne.n	80072a6 <USB_EPStartXfer+0x322>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80071e8:	4694      	mov	ip, r2
 80071ea:	4463      	add	r3, ip
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	4946      	ldr	r1, [pc, #280]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80071f6:	468c      	mov	ip, r1
 80071f8:	4463      	add	r3, ip
 80071fa:	0192      	lsls	r2, r2, #6
 80071fc:	0992      	lsrs	r2, r2, #6
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007202:	2b3e      	cmp	r3, #62	@ 0x3e
 8007204:	d91e      	bls.n	8007244 <USB_EPStartXfer+0x2c0>
 8007206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800720c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800720e:	221f      	movs	r2, #31
 8007210:	4013      	ands	r3, r2
 8007212:	d102      	bne.n	800721a <USB_EPStartXfer+0x296>
 8007214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007216:	3b01      	subs	r3, #1
 8007218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	4a3b      	ldr	r2, [pc, #236]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8007222:	4694      	mov	ip, r2
 8007224:	4463      	add	r3, ip
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800722a:	069b      	lsls	r3, r3, #26
 800722c:	431a      	orrs	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4936      	ldr	r1, [pc, #216]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8007236:	468c      	mov	ip, r1
 8007238:	4463      	add	r3, ip
 800723a:	2180      	movs	r1, #128	@ 0x80
 800723c:	0609      	lsls	r1, r1, #24
 800723e:	430a      	orrs	r2, r1
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	e055      	b.n	80072f0 <USB_EPStartXfer+0x36c>
 8007244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007246:	2b00      	cmp	r3, #0
 8007248:	d111      	bne.n	800726e <USB_EPStartXfer+0x2ea>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4a2f      	ldr	r2, [pc, #188]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8007252:	4694      	mov	ip, r2
 8007254:	4463      	add	r3, ip
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	492c      	ldr	r1, [pc, #176]	@ (8007310 <USB_EPStartXfer+0x38c>)
 8007260:	468c      	mov	ip, r1
 8007262:	4463      	add	r3, ip
 8007264:	2180      	movs	r1, #128	@ 0x80
 8007266:	0609      	lsls	r1, r1, #24
 8007268:	430a      	orrs	r2, r1
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e040      	b.n	80072f0 <USB_EPStartXfer+0x36c>
 800726e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007276:	2201      	movs	r2, #1
 8007278:	4013      	ands	r3, r2
 800727a:	d002      	beq.n	8007282 <USB_EPStartXfer+0x2fe>
 800727c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800727e:	3301      	adds	r3, #1
 8007280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4a21      	ldr	r2, [pc, #132]	@ (8007310 <USB_EPStartXfer+0x38c>)
 800728a:	4694      	mov	ip, r2
 800728c:	4463      	add	r3, ip
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007292:	069a      	lsls	r2, r3, #26
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	481d      	ldr	r0, [pc, #116]	@ (8007310 <USB_EPStartXfer+0x38c>)
 800729c:	4684      	mov	ip, r0
 800729e:	4463      	add	r3, ip
 80072a0:	430a      	orrs	r2, r1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	e024      	b.n	80072f0 <USB_EPStartXfer+0x36c>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	785b      	ldrb	r3, [r3, #1]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d120      	bne.n	80072f0 <USB_EPStartXfer+0x36c>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	4a16      	ldr	r2, [pc, #88]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80072b6:	4694      	mov	ip, r2
 80072b8:	4463      	add	r3, ip
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	4913      	ldr	r1, [pc, #76]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80072c4:	468c      	mov	ip, r1
 80072c6:	4463      	add	r3, ip
 80072c8:	0412      	lsls	r2, r2, #16
 80072ca:	0c12      	lsrs	r2, r2, #16
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	4a0e      	ldr	r2, [pc, #56]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80072d6:	4694      	mov	ip, r2
 80072d8:	4463      	add	r3, ip
 80072da:	6819      	ldr	r1, [r3, #0]
 80072dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072de:	041a      	lsls	r2, r3, #16
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	480a      	ldr	r0, [pc, #40]	@ (8007310 <USB_EPStartXfer+0x38c>)
 80072e8:	4684      	mov	ip, r0
 80072ea:	4463      	add	r3, ip
 80072ec:	430a      	orrs	r2, r1
 80072ee:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072f0:	201a      	movs	r0, #26
 80072f2:	183b      	adds	r3, r7, r0
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	8912      	ldrh	r2, [r2, #8]
 80072f8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	6959      	ldr	r1, [r3, #20]
 80072fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007300:	b29c      	uxth	r4, r3
 8007302:	183b      	adds	r3, r7, r0
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	0023      	movs	r3, r4
 800730a:	f000 fe71 	bl	8007ff0 <USB_WritePMA>
 800730e:	e2e8      	b.n	80078e2 <USB_EPStartXfer+0x95e>
 8007310:	40009800 	.word	0x40009800
 8007314:	07ff8f8f 	.word	0x07ff8f8f
 8007318:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d162      	bne.n	80073ea <USB_EPStartXfer+0x466>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	4ac7      	ldr	r2, [pc, #796]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 800732c:	4694      	mov	ip, r2
 800732e:	4463      	add	r3, ip
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	49c3      	ldr	r1, [pc, #780]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 800733a:	468c      	mov	ip, r1
 800733c:	4463      	add	r3, ip
 800733e:	0192      	lsls	r2, r2, #6
 8007340:	0992      	lsrs	r2, r2, #6
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007346:	2b3e      	cmp	r3, #62	@ 0x3e
 8007348:	d91e      	bls.n	8007388 <USB_EPStartXfer+0x404>
 800734a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007352:	221f      	movs	r2, #31
 8007354:	4013      	ands	r3, r2
 8007356:	d102      	bne.n	800735e <USB_EPStartXfer+0x3da>
 8007358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800735a:	3b01      	subs	r3, #1
 800735c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	4ab8      	ldr	r2, [pc, #736]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007366:	4694      	mov	ip, r2
 8007368:	4463      	add	r3, ip
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800736e:	069b      	lsls	r3, r3, #26
 8007370:	431a      	orrs	r2, r3
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	49b3      	ldr	r1, [pc, #716]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 800737a:	468c      	mov	ip, r1
 800737c:	4463      	add	r3, ip
 800737e:	2180      	movs	r1, #128	@ 0x80
 8007380:	0609      	lsls	r1, r1, #24
 8007382:	430a      	orrs	r2, r1
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e055      	b.n	8007434 <USB_EPStartXfer+0x4b0>
 8007388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800738a:	2b00      	cmp	r3, #0
 800738c:	d111      	bne.n	80073b2 <USB_EPStartXfer+0x42e>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4aac      	ldr	r2, [pc, #688]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007396:	4694      	mov	ip, r2
 8007398:	4463      	add	r3, ip
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	49a9      	ldr	r1, [pc, #676]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80073a4:	468c      	mov	ip, r1
 80073a6:	4463      	add	r3, ip
 80073a8:	2180      	movs	r1, #128	@ 0x80
 80073aa:	0609      	lsls	r1, r1, #24
 80073ac:	430a      	orrs	r2, r1
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e040      	b.n	8007434 <USB_EPStartXfer+0x4b0>
 80073b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073ba:	2201      	movs	r2, #1
 80073bc:	4013      	ands	r3, r2
 80073be:	d002      	beq.n	80073c6 <USB_EPStartXfer+0x442>
 80073c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073c2:	3301      	adds	r3, #1
 80073c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	4a9e      	ldr	r2, [pc, #632]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80073ce:	4694      	mov	ip, r2
 80073d0:	4463      	add	r3, ip
 80073d2:	6819      	ldr	r1, [r3, #0]
 80073d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073d6:	069a      	lsls	r2, r3, #26
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	489a      	ldr	r0, [pc, #616]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80073e0:	4684      	mov	ip, r0
 80073e2:	4463      	add	r3, ip
 80073e4:	430a      	orrs	r2, r1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	e024      	b.n	8007434 <USB_EPStartXfer+0x4b0>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d120      	bne.n	8007434 <USB_EPStartXfer+0x4b0>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4a93      	ldr	r2, [pc, #588]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80073fa:	4694      	mov	ip, r2
 80073fc:	4463      	add	r3, ip
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	4990      	ldr	r1, [pc, #576]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007408:	468c      	mov	ip, r1
 800740a:	4463      	add	r3, ip
 800740c:	0412      	lsls	r2, r2, #16
 800740e:	0c12      	lsrs	r2, r2, #16
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4a8b      	ldr	r2, [pc, #556]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 800741a:	4694      	mov	ip, r2
 800741c:	4463      	add	r3, ip
 800741e:	6819      	ldr	r1, [r3, #0]
 8007420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007422:	041a      	lsls	r2, r3, #16
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	00db      	lsls	r3, r3, #3
 800742a:	4887      	ldr	r0, [pc, #540]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 800742c:	4684      	mov	ip, r0
 800742e:	4463      	add	r3, ip
 8007430:	430a      	orrs	r2, r1
 8007432:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007434:	201a      	movs	r0, #26
 8007436:	183b      	adds	r3, r7, r0
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	8912      	ldrh	r2, [r2, #8]
 800743c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6959      	ldr	r1, [r3, #20]
 8007442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007444:	b29c      	uxth	r4, r3
 8007446:	183b      	adds	r3, r7, r0
 8007448:	881a      	ldrh	r2, [r3, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	0023      	movs	r3, r4
 800744e:	f000 fdcf 	bl	8007ff0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695a      	ldr	r2, [r3, #20]
 8007456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007458:	18d2      	adds	r2, r2, r3
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6a1a      	ldr	r2, [r3, #32]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d906      	bls.n	8007478 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	6a1a      	ldr	r2, [r3, #32]
 800746e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007470:	1ad2      	subs	r2, r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	621a      	str	r2, [r3, #32]
 8007476:	e005      	b.n	8007484 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2200      	movs	r2, #0
 8007482:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d162      	bne.n	8007552 <USB_EPStartXfer+0x5ce>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4a6d      	ldr	r2, [pc, #436]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007494:	4694      	mov	ip, r2
 8007496:	4463      	add	r3, ip
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	4969      	ldr	r1, [pc, #420]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80074a2:	468c      	mov	ip, r1
 80074a4:	4463      	add	r3, ip
 80074a6:	0192      	lsls	r2, r2, #6
 80074a8:	0992      	lsrs	r2, r2, #6
 80074aa:	605a      	str	r2, [r3, #4]
 80074ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80074b0:	d91e      	bls.n	80074f0 <USB_EPStartXfer+0x56c>
 80074b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80074b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ba:	221f      	movs	r2, #31
 80074bc:	4013      	ands	r3, r2
 80074be:	d102      	bne.n	80074c6 <USB_EPStartXfer+0x542>
 80074c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c2:	3b01      	subs	r3, #1
 80074c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	4a5e      	ldr	r2, [pc, #376]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80074ce:	4694      	mov	ip, r2
 80074d0:	4463      	add	r3, ip
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074d6:	069b      	lsls	r3, r3, #26
 80074d8:	431a      	orrs	r2, r3
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	4959      	ldr	r1, [pc, #356]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80074e2:	468c      	mov	ip, r1
 80074e4:	4463      	add	r3, ip
 80074e6:	2180      	movs	r1, #128	@ 0x80
 80074e8:	0609      	lsls	r1, r1, #24
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
 80074ee:	e055      	b.n	800759c <USB_EPStartXfer+0x618>
 80074f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d111      	bne.n	800751a <USB_EPStartXfer+0x596>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	4a52      	ldr	r2, [pc, #328]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80074fe:	4694      	mov	ip, r2
 8007500:	4463      	add	r3, ip
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	494f      	ldr	r1, [pc, #316]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 800750c:	468c      	mov	ip, r1
 800750e:	4463      	add	r3, ip
 8007510:	2180      	movs	r1, #128	@ 0x80
 8007512:	0609      	lsls	r1, r1, #24
 8007514:	430a      	orrs	r2, r1
 8007516:	605a      	str	r2, [r3, #4]
 8007518:	e040      	b.n	800759c <USB_EPStartXfer+0x618>
 800751a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007522:	2201      	movs	r2, #1
 8007524:	4013      	ands	r3, r2
 8007526:	d002      	beq.n	800752e <USB_EPStartXfer+0x5aa>
 8007528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800752a:	3301      	adds	r3, #1
 800752c:	647b      	str	r3, [r7, #68]	@ 0x44
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	4a44      	ldr	r2, [pc, #272]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007536:	4694      	mov	ip, r2
 8007538:	4463      	add	r3, ip
 800753a:	6859      	ldr	r1, [r3, #4]
 800753c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800753e:	069a      	lsls	r2, r3, #26
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4840      	ldr	r0, [pc, #256]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007548:	4684      	mov	ip, r0
 800754a:	4463      	add	r3, ip
 800754c:	430a      	orrs	r2, r1
 800754e:	605a      	str	r2, [r3, #4]
 8007550:	e024      	b.n	800759c <USB_EPStartXfer+0x618>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d120      	bne.n	800759c <USB_EPStartXfer+0x618>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4a39      	ldr	r2, [pc, #228]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007562:	4694      	mov	ip, r2
 8007564:	4463      	add	r3, ip
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4936      	ldr	r1, [pc, #216]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007570:	468c      	mov	ip, r1
 8007572:	4463      	add	r3, ip
 8007574:	0412      	lsls	r2, r2, #16
 8007576:	0c12      	lsrs	r2, r2, #16
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4a31      	ldr	r2, [pc, #196]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007582:	4694      	mov	ip, r2
 8007584:	4463      	add	r3, ip
 8007586:	6859      	ldr	r1, [r3, #4]
 8007588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800758a:	041a      	lsls	r2, r3, #16
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	482d      	ldr	r0, [pc, #180]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007594:	4684      	mov	ip, r0
 8007596:	4463      	add	r3, ip
 8007598:	430a      	orrs	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800759c:	201a      	movs	r0, #26
 800759e:	183b      	adds	r3, r7, r0
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	8952      	ldrh	r2, [r2, #10]
 80075a4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	6959      	ldr	r1, [r3, #20]
 80075aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ac:	b29c      	uxth	r4, r3
 80075ae:	183b      	adds	r3, r7, r0
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	0023      	movs	r3, r4
 80075b6:	f000 fd1b 	bl	8007ff0 <USB_WritePMA>
 80075ba:	e192      	b.n	80078e2 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	18d3      	adds	r3, r2, r3
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a1f      	ldr	r2, [pc, #124]	@ (800764c <USB_EPStartXfer+0x6c8>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	18d3      	adds	r3, r2, r3
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	491b      	ldr	r1, [pc, #108]	@ (8007650 <USB_EPStartXfer+0x6cc>)
 80075e2:	430a      	orrs	r2, r1
 80075e4:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	4a16      	ldr	r2, [pc, #88]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80075ee:	4694      	mov	ip, r2
 80075f0:	4463      	add	r3, ip
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	4913      	ldr	r1, [pc, #76]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 80075fc:	468c      	mov	ip, r1
 80075fe:	4463      	add	r3, ip
 8007600:	0412      	lsls	r2, r2, #16
 8007602:	0c12      	lsrs	r2, r2, #16
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4a0e      	ldr	r2, [pc, #56]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 800760e:	4694      	mov	ip, r2
 8007610:	4463      	add	r3, ip
 8007612:	6819      	ldr	r1, [r3, #0]
 8007614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007616:	041a      	lsls	r2, r3, #16
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	480a      	ldr	r0, [pc, #40]	@ (8007648 <USB_EPStartXfer+0x6c4>)
 8007620:	4684      	mov	ip, r0
 8007622:	4463      	add	r3, ip
 8007624:	430a      	orrs	r2, r1
 8007626:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007628:	201a      	movs	r0, #26
 800762a:	183b      	adds	r3, r7, r0
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	8912      	ldrh	r2, [r2, #8]
 8007630:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6959      	ldr	r1, [r3, #20]
 8007636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007638:	b29c      	uxth	r4, r3
 800763a:	183b      	adds	r3, r7, r0
 800763c:	881a      	ldrh	r2, [r3, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	0023      	movs	r3, r4
 8007642:	f000 fcd5 	bl	8007ff0 <USB_WritePMA>
 8007646:	e14c      	b.n	80078e2 <USB_EPStartXfer+0x95e>
 8007648:	40009800 	.word	0x40009800
 800764c:	07ff8e8f 	.word	0x07ff8e8f
 8007650:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	6a1a      	ldr	r2, [r3, #32]
 8007658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800765a:	1ad2      	subs	r2, r2, r3
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	18d3      	adds	r3, r2, r3
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2240      	movs	r2, #64	@ 0x40
 800766e:	4013      	ands	r3, r2
 8007670:	d100      	bne.n	8007674 <USB_EPStartXfer+0x6f0>
 8007672:	e09b      	b.n	80077ac <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	785b      	ldrb	r3, [r3, #1]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d162      	bne.n	8007742 <USB_EPStartXfer+0x7be>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	4ad6      	ldr	r2, [pc, #856]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007684:	4694      	mov	ip, r2
 8007686:	4463      	add	r3, ip
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	49d2      	ldr	r1, [pc, #840]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007692:	468c      	mov	ip, r1
 8007694:	4463      	add	r3, ip
 8007696:	0192      	lsls	r2, r2, #6
 8007698:	0992      	lsrs	r2, r2, #6
 800769a:	605a      	str	r2, [r3, #4]
 800769c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800769e:	2b3e      	cmp	r3, #62	@ 0x3e
 80076a0:	d91e      	bls.n	80076e0 <USB_EPStartXfer+0x75c>
 80076a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a4:	095b      	lsrs	r3, r3, #5
 80076a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80076a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076aa:	221f      	movs	r2, #31
 80076ac:	4013      	ands	r3, r2
 80076ae:	d102      	bne.n	80076b6 <USB_EPStartXfer+0x732>
 80076b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076b2:	3b01      	subs	r3, #1
 80076b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	4ac7      	ldr	r2, [pc, #796]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80076be:	4694      	mov	ip, r2
 80076c0:	4463      	add	r3, ip
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076c6:	069b      	lsls	r3, r3, #26
 80076c8:	431a      	orrs	r2, r3
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	49c2      	ldr	r1, [pc, #776]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80076d2:	468c      	mov	ip, r1
 80076d4:	4463      	add	r3, ip
 80076d6:	2180      	movs	r1, #128	@ 0x80
 80076d8:	0609      	lsls	r1, r1, #24
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
 80076de:	e055      	b.n	800778c <USB_EPStartXfer+0x808>
 80076e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d111      	bne.n	800770a <USB_EPStartXfer+0x786>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4abb      	ldr	r2, [pc, #748]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80076ee:	4694      	mov	ip, r2
 80076f0:	4463      	add	r3, ip
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	49b8      	ldr	r1, [pc, #736]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80076fc:	468c      	mov	ip, r1
 80076fe:	4463      	add	r3, ip
 8007700:	2180      	movs	r1, #128	@ 0x80
 8007702:	0609      	lsls	r1, r1, #24
 8007704:	430a      	orrs	r2, r1
 8007706:	605a      	str	r2, [r3, #4]
 8007708:	e040      	b.n	800778c <USB_EPStartXfer+0x808>
 800770a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007712:	2201      	movs	r2, #1
 8007714:	4013      	ands	r3, r2
 8007716:	d002      	beq.n	800771e <USB_EPStartXfer+0x79a>
 8007718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800771a:	3301      	adds	r3, #1
 800771c:	643b      	str	r3, [r7, #64]	@ 0x40
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	4aad      	ldr	r2, [pc, #692]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007726:	4694      	mov	ip, r2
 8007728:	4463      	add	r3, ip
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800772e:	069a      	lsls	r2, r3, #26
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	48a9      	ldr	r0, [pc, #676]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007738:	4684      	mov	ip, r0
 800773a:	4463      	add	r3, ip
 800773c:	430a      	orrs	r2, r1
 800773e:	605a      	str	r2, [r3, #4]
 8007740:	e024      	b.n	800778c <USB_EPStartXfer+0x808>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d120      	bne.n	800778c <USB_EPStartXfer+0x808>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	4aa2      	ldr	r2, [pc, #648]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007752:	4694      	mov	ip, r2
 8007754:	4463      	add	r3, ip
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	499f      	ldr	r1, [pc, #636]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007760:	468c      	mov	ip, r1
 8007762:	4463      	add	r3, ip
 8007764:	0412      	lsls	r2, r2, #16
 8007766:	0c12      	lsrs	r2, r2, #16
 8007768:	605a      	str	r2, [r3, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	4a9a      	ldr	r2, [pc, #616]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007772:	4694      	mov	ip, r2
 8007774:	4463      	add	r3, ip
 8007776:	6859      	ldr	r1, [r3, #4]
 8007778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800777a:	041a      	lsls	r2, r3, #16
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	4896      	ldr	r0, [pc, #600]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007784:	4684      	mov	ip, r0
 8007786:	4463      	add	r3, ip
 8007788:	430a      	orrs	r2, r1
 800778a:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800778c:	201a      	movs	r0, #26
 800778e:	183b      	adds	r3, r7, r0
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	8952      	ldrh	r2, [r2, #10]
 8007794:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6959      	ldr	r1, [r3, #20]
 800779a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800779c:	b29c      	uxth	r4, r3
 800779e:	183b      	adds	r3, r7, r0
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	0023      	movs	r3, r4
 80077a6:	f000 fc23 	bl	8007ff0 <USB_WritePMA>
 80077aa:	e09a      	b.n	80078e2 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d162      	bne.n	800787a <USB_EPStartXfer+0x8f6>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	4a88      	ldr	r2, [pc, #544]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80077bc:	4694      	mov	ip, r2
 80077be:	4463      	add	r3, ip
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	4984      	ldr	r1, [pc, #528]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80077ca:	468c      	mov	ip, r1
 80077cc:	4463      	add	r3, ip
 80077ce:	0192      	lsls	r2, r2, #6
 80077d0:	0992      	lsrs	r2, r2, #6
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80077d8:	d91e      	bls.n	8007818 <USB_EPStartXfer+0x894>
 80077da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077e2:	221f      	movs	r2, #31
 80077e4:	4013      	ands	r3, r2
 80077e6:	d102      	bne.n	80077ee <USB_EPStartXfer+0x86a>
 80077e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ea:	3b01      	subs	r3, #1
 80077ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	4a79      	ldr	r2, [pc, #484]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80077f6:	4694      	mov	ip, r2
 80077f8:	4463      	add	r3, ip
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077fe:	069b      	lsls	r3, r3, #26
 8007800:	431a      	orrs	r2, r3
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	4974      	ldr	r1, [pc, #464]	@ (80079dc <USB_EPStartXfer+0xa58>)
 800780a:	468c      	mov	ip, r1
 800780c:	4463      	add	r3, ip
 800780e:	2180      	movs	r1, #128	@ 0x80
 8007810:	0609      	lsls	r1, r1, #24
 8007812:	430a      	orrs	r2, r1
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	e055      	b.n	80078c4 <USB_EPStartXfer+0x940>
 8007818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800781a:	2b00      	cmp	r3, #0
 800781c:	d111      	bne.n	8007842 <USB_EPStartXfer+0x8be>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	4a6d      	ldr	r2, [pc, #436]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007826:	4694      	mov	ip, r2
 8007828:	4463      	add	r3, ip
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	496a      	ldr	r1, [pc, #424]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007834:	468c      	mov	ip, r1
 8007836:	4463      	add	r3, ip
 8007838:	2180      	movs	r1, #128	@ 0x80
 800783a:	0609      	lsls	r1, r1, #24
 800783c:	430a      	orrs	r2, r1
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e040      	b.n	80078c4 <USB_EPStartXfer+0x940>
 8007842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007844:	085b      	lsrs	r3, r3, #1
 8007846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800784a:	2201      	movs	r2, #1
 800784c:	4013      	ands	r3, r2
 800784e:	d002      	beq.n	8007856 <USB_EPStartXfer+0x8d2>
 8007850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007852:	3301      	adds	r3, #1
 8007854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	4a5f      	ldr	r2, [pc, #380]	@ (80079dc <USB_EPStartXfer+0xa58>)
 800785e:	4694      	mov	ip, r2
 8007860:	4463      	add	r3, ip
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007866:	069a      	lsls	r2, r3, #26
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	485b      	ldr	r0, [pc, #364]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007870:	4684      	mov	ip, r0
 8007872:	4463      	add	r3, ip
 8007874:	430a      	orrs	r2, r1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	e024      	b.n	80078c4 <USB_EPStartXfer+0x940>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d120      	bne.n	80078c4 <USB_EPStartXfer+0x940>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4a54      	ldr	r2, [pc, #336]	@ (80079dc <USB_EPStartXfer+0xa58>)
 800788a:	4694      	mov	ip, r2
 800788c:	4463      	add	r3, ip
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	4951      	ldr	r1, [pc, #324]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007898:	468c      	mov	ip, r1
 800789a:	4463      	add	r3, ip
 800789c:	0412      	lsls	r2, r2, #16
 800789e:	0c12      	lsrs	r2, r2, #16
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	4a4c      	ldr	r2, [pc, #304]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80078aa:	4694      	mov	ip, r2
 80078ac:	4463      	add	r3, ip
 80078ae:	6819      	ldr	r1, [r3, #0]
 80078b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078b2:	041a      	lsls	r2, r3, #16
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	4848      	ldr	r0, [pc, #288]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80078bc:	4684      	mov	ip, r0
 80078be:	4463      	add	r3, ip
 80078c0:	430a      	orrs	r2, r1
 80078c2:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078c4:	201a      	movs	r0, #26
 80078c6:	183b      	adds	r3, r7, r0
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	8912      	ldrh	r2, [r2, #8]
 80078cc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	6959      	ldr	r1, [r3, #20]
 80078d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078d4:	b29c      	uxth	r4, r3
 80078d6:	183b      	adds	r3, r7, r0
 80078d8:	881a      	ldrh	r2, [r3, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	0023      	movs	r3, r4
 80078de:	f000 fb87 	bl	8007ff0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	18d3      	adds	r3, r2, r3
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a3c      	ldr	r2, [pc, #240]	@ (80079e0 <USB_EPStartXfer+0xa5c>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2210      	movs	r2, #16
 80078f8:	4053      	eors	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2220      	movs	r2, #32
 8007900:	4053      	eors	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	18d3      	adds	r3, r2, r3
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4934      	ldr	r1, [pc, #208]	@ (80079e4 <USB_EPStartXfer+0xa60>)
 8007912:	430a      	orrs	r2, r1
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	e340      	b.n	8007f9a <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	7b1b      	ldrb	r3, [r3, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d000      	beq.n	8007922 <USB_EPStartXfer+0x99e>
 8007920:	e07e      	b.n	8007a20 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	429a      	cmp	r2, r3
 800792c:	d909      	bls.n	8007942 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	699a      	ldr	r2, [r3, #24]
 8007938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800793a:	1ad2      	subs	r2, r2, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	619a      	str	r2, [r3, #24]
 8007940:	e005      	b.n	800794e <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	4a21      	ldr	r2, [pc, #132]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007956:	4694      	mov	ip, r2
 8007958:	4463      	add	r3, ip
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	491e      	ldr	r1, [pc, #120]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007964:	468c      	mov	ip, r1
 8007966:	4463      	add	r3, ip
 8007968:	0192      	lsls	r2, r2, #6
 800796a:	0992      	lsrs	r2, r2, #6
 800796c:	605a      	str	r2, [r3, #4]
 800796e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007970:	2b3e      	cmp	r3, #62	@ 0x3e
 8007972:	d91e      	bls.n	80079b2 <USB_EPStartXfer+0xa2e>
 8007974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007976:	095b      	lsrs	r3, r3, #5
 8007978:	63bb      	str	r3, [r7, #56]	@ 0x38
 800797a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800797c:	221f      	movs	r2, #31
 800797e:	4013      	ands	r3, r2
 8007980:	d102      	bne.n	8007988 <USB_EPStartXfer+0xa04>
 8007982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007984:	3b01      	subs	r3, #1
 8007986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	4a13      	ldr	r2, [pc, #76]	@ (80079dc <USB_EPStartXfer+0xa58>)
 8007990:	4694      	mov	ip, r2
 8007992:	4463      	add	r3, ip
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	069b      	lsls	r3, r3, #26
 800799a:	431a      	orrs	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	490e      	ldr	r1, [pc, #56]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80079a4:	468c      	mov	ip, r1
 80079a6:	4463      	add	r3, ip
 80079a8:	2180      	movs	r1, #128	@ 0x80
 80079aa:	0609      	lsls	r1, r1, #24
 80079ac:	430a      	orrs	r2, r1
 80079ae:	605a      	str	r2, [r3, #4]
 80079b0:	e2d7      	b.n	8007f62 <USB_EPStartXfer+0xfde>
 80079b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d117      	bne.n	80079e8 <USB_EPStartXfer+0xa64>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	4a07      	ldr	r2, [pc, #28]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80079c0:	4694      	mov	ip, r2
 80079c2:	4463      	add	r3, ip
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	4903      	ldr	r1, [pc, #12]	@ (80079dc <USB_EPStartXfer+0xa58>)
 80079ce:	468c      	mov	ip, r1
 80079d0:	4463      	add	r3, ip
 80079d2:	2180      	movs	r1, #128	@ 0x80
 80079d4:	0609      	lsls	r1, r1, #24
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	e2c2      	b.n	8007f62 <USB_EPStartXfer+0xfde>
 80079dc:	40009800 	.word	0x40009800
 80079e0:	07ff8fbf 	.word	0x07ff8fbf
 80079e4:	00008080 	.word	0x00008080
 80079e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079f0:	2201      	movs	r2, #1
 80079f2:	4013      	ands	r3, r2
 80079f4:	d002      	beq.n	80079fc <USB_EPStartXfer+0xa78>
 80079f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f8:	3301      	adds	r3, #1
 80079fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	4ac4      	ldr	r2, [pc, #784]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007a04:	4694      	mov	ip, r2
 8007a06:	4463      	add	r3, ip
 8007a08:	6859      	ldr	r1, [r3, #4]
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0c:	069a      	lsls	r2, r3, #26
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	48bf      	ldr	r0, [pc, #764]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007a16:	4684      	mov	ip, r0
 8007a18:	4463      	add	r3, ip
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
 8007a1e:	e2a0      	b.n	8007f62 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	78db      	ldrb	r3, [r3, #3]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d000      	beq.n	8007a2a <USB_EPStartXfer+0xaa6>
 8007a28:	e15f      	b.n	8007cea <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d168      	bne.n	8007b04 <USB_EPStartXfer+0xb80>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	4ab6      	ldr	r2, [pc, #728]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007a3a:	4694      	mov	ip, r2
 8007a3c:	4463      	add	r3, ip
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	49b3      	ldr	r1, [pc, #716]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007a48:	468c      	mov	ip, r1
 8007a4a:	4463      	add	r3, ip
 8007a4c:	0192      	lsls	r2, r2, #6
 8007a4e:	0992      	lsrs	r2, r2, #6
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a58:	d920      	bls.n	8007a9c <USB_EPStartXfer+0xb18>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	221f      	movs	r2, #31
 8007a68:	4013      	ands	r3, r2
 8007a6a:	d102      	bne.n	8007a72 <USB_EPStartXfer+0xaee>
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4aa6      	ldr	r2, [pc, #664]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007a7a:	4694      	mov	ip, r2
 8007a7c:	4463      	add	r3, ip
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a82:	069b      	lsls	r3, r3, #26
 8007a84:	431a      	orrs	r2, r3
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	49a1      	ldr	r1, [pc, #644]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007a8e:	468c      	mov	ip, r1
 8007a90:	4463      	add	r3, ip
 8007a92:	2180      	movs	r1, #128	@ 0x80
 8007a94:	0609      	lsls	r1, r1, #24
 8007a96:	430a      	orrs	r2, r1
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	e059      	b.n	8007b50 <USB_EPStartXfer+0xbcc>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d111      	bne.n	8007ac8 <USB_EPStartXfer+0xb44>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	4a9a      	ldr	r2, [pc, #616]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007aac:	4694      	mov	ip, r2
 8007aae:	4463      	add	r3, ip
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	4996      	ldr	r1, [pc, #600]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007aba:	468c      	mov	ip, r1
 8007abc:	4463      	add	r3, ip
 8007abe:	2180      	movs	r1, #128	@ 0x80
 8007ac0:	0609      	lsls	r1, r1, #24
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e043      	b.n	8007b50 <USB_EPStartXfer+0xbcc>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	d002      	beq.n	8007ae0 <USB_EPStartXfer+0xb5c>
 8007ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007adc:	3301      	adds	r3, #1
 8007ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4a8b      	ldr	r2, [pc, #556]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007ae8:	4694      	mov	ip, r2
 8007aea:	4463      	add	r3, ip
 8007aec:	6819      	ldr	r1, [r3, #0]
 8007aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af0:	069a      	lsls	r2, r3, #26
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4886      	ldr	r0, [pc, #536]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007afa:	4684      	mov	ip, r0
 8007afc:	4463      	add	r3, ip
 8007afe:	430a      	orrs	r2, r1
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	e025      	b.n	8007b50 <USB_EPStartXfer+0xbcc>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d121      	bne.n	8007b50 <USB_EPStartXfer+0xbcc>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4a80      	ldr	r2, [pc, #512]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007b14:	4694      	mov	ip, r2
 8007b16:	4463      	add	r3, ip
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	497c      	ldr	r1, [pc, #496]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007b22:	468c      	mov	ip, r1
 8007b24:	4463      	add	r3, ip
 8007b26:	0412      	lsls	r2, r2, #16
 8007b28:	0c12      	lsrs	r2, r2, #16
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	4a78      	ldr	r2, [pc, #480]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007b34:	4694      	mov	ip, r2
 8007b36:	4463      	add	r3, ip
 8007b38:	6819      	ldr	r1, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	041a      	lsls	r2, r3, #16
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	4873      	ldr	r0, [pc, #460]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007b48:	4684      	mov	ip, r0
 8007b4a:	4463      	add	r3, ip
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d168      	bne.n	8007c2a <USB_EPStartXfer+0xca6>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	4a6d      	ldr	r2, [pc, #436]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007b60:	4694      	mov	ip, r2
 8007b62:	4463      	add	r3, ip
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	4969      	ldr	r1, [pc, #420]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007b6e:	468c      	mov	ip, r1
 8007b70:	4463      	add	r3, ip
 8007b72:	0192      	lsls	r2, r2, #6
 8007b74:	0992      	lsrs	r2, r2, #6
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b7e:	d920      	bls.n	8007bc2 <USB_EPStartXfer+0xc3e>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	221f      	movs	r2, #31
 8007b8e:	4013      	ands	r3, r2
 8007b90:	d102      	bne.n	8007b98 <USB_EPStartXfer+0xc14>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	3b01      	subs	r3, #1
 8007b96:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	4a5d      	ldr	r2, [pc, #372]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007ba0:	4694      	mov	ip, r2
 8007ba2:	4463      	add	r3, ip
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	069b      	lsls	r3, r3, #26
 8007baa:	431a      	orrs	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	4958      	ldr	r1, [pc, #352]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007bb4:	468c      	mov	ip, r1
 8007bb6:	4463      	add	r3, ip
 8007bb8:	2180      	movs	r1, #128	@ 0x80
 8007bba:	0609      	lsls	r1, r1, #24
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
 8007bc0:	e059      	b.n	8007c76 <USB_EPStartXfer+0xcf2>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d111      	bne.n	8007bee <USB_EPStartXfer+0xc6a>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	4a50      	ldr	r2, [pc, #320]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007bd2:	4694      	mov	ip, r2
 8007bd4:	4463      	add	r3, ip
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	494d      	ldr	r1, [pc, #308]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007be0:	468c      	mov	ip, r1
 8007be2:	4463      	add	r3, ip
 8007be4:	2180      	movs	r1, #128	@ 0x80
 8007be6:	0609      	lsls	r1, r1, #24
 8007be8:	430a      	orrs	r2, r1
 8007bea:	605a      	str	r2, [r3, #4]
 8007bec:	e043      	b.n	8007c76 <USB_EPStartXfer+0xcf2>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	d002      	beq.n	8007c06 <USB_EPStartXfer+0xc82>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	3301      	adds	r3, #1
 8007c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	4a41      	ldr	r2, [pc, #260]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007c0e:	4694      	mov	ip, r2
 8007c10:	4463      	add	r3, ip
 8007c12:	6859      	ldr	r1, [r3, #4]
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	069a      	lsls	r2, r3, #26
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	483d      	ldr	r0, [pc, #244]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007c20:	4684      	mov	ip, r0
 8007c22:	4463      	add	r3, ip
 8007c24:	430a      	orrs	r2, r1
 8007c26:	605a      	str	r2, [r3, #4]
 8007c28:	e025      	b.n	8007c76 <USB_EPStartXfer+0xcf2>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d121      	bne.n	8007c76 <USB_EPStartXfer+0xcf2>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	4a36      	ldr	r2, [pc, #216]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007c3a:	4694      	mov	ip, r2
 8007c3c:	4463      	add	r3, ip
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	4933      	ldr	r1, [pc, #204]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007c48:	468c      	mov	ip, r1
 8007c4a:	4463      	add	r3, ip
 8007c4c:	0412      	lsls	r2, r2, #16
 8007c4e:	0c12      	lsrs	r2, r2, #16
 8007c50:	605a      	str	r2, [r3, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4a2e      	ldr	r2, [pc, #184]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007c5a:	4694      	mov	ip, r2
 8007c5c:	4463      	add	r3, ip
 8007c5e:	6859      	ldr	r1, [r3, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	041a      	lsls	r2, r3, #16
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	4829      	ldr	r0, [pc, #164]	@ (8007d14 <USB_EPStartXfer+0xd90>)
 8007c6e:	4684      	mov	ip, r0
 8007c70:	4463      	add	r3, ip
 8007c72:	430a      	orrs	r2, r1
 8007c74:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d100      	bne.n	8007c80 <USB_EPStartXfer+0xcfc>
 8007c7e:	e170      	b.n	8007f62 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	18d3      	adds	r3, r2, r3
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	2126      	movs	r1, #38	@ 0x26
 8007c8e:	187b      	adds	r3, r7, r1
 8007c90:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c92:	187b      	adds	r3, r7, r1
 8007c94:	881a      	ldrh	r2, [r3, #0]
 8007c96:	2380      	movs	r3, #128	@ 0x80
 8007c98:	01db      	lsls	r3, r3, #7
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	d004      	beq.n	8007ca8 <USB_EPStartXfer+0xd24>
 8007c9e:	187b      	adds	r3, r7, r1
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	2240      	movs	r2, #64	@ 0x40
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	d10d      	bne.n	8007cc4 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ca8:	2126      	movs	r1, #38	@ 0x26
 8007caa:	187b      	adds	r3, r7, r1
 8007cac:	881a      	ldrh	r2, [r3, #0]
 8007cae:	2380      	movs	r3, #128	@ 0x80
 8007cb0:	01db      	lsls	r3, r3, #7
 8007cb2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cb4:	d000      	beq.n	8007cb8 <USB_EPStartXfer+0xd34>
 8007cb6:	e154      	b.n	8007f62 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cb8:	187b      	adds	r3, r7, r1
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	2240      	movs	r2, #64	@ 0x40
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	d000      	beq.n	8007cc4 <USB_EPStartXfer+0xd40>
 8007cc2:	e14e      	b.n	8007f62 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	18d3      	adds	r3, r2, r3
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a11      	ldr	r2, [pc, #68]	@ (8007d18 <USB_EPStartXfer+0xd94>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	623b      	str	r3, [r7, #32]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	18d3      	adds	r3, r2, r3
 8007ce0:	6a3a      	ldr	r2, [r7, #32]
 8007ce2:	490e      	ldr	r1, [pc, #56]	@ (8007d1c <USB_EPStartXfer+0xd98>)
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	e13b      	b.n	8007f62 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	78db      	ldrb	r3, [r3, #3]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d000      	beq.n	8007cf4 <USB_EPStartXfer+0xd70>
 8007cf2:	e134      	b.n	8007f5e <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	699a      	ldr	r2, [r3, #24]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d90f      	bls.n	8007d20 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	699a      	ldr	r2, [r3, #24]
 8007d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d0c:	1ad2      	subs	r2, r2, r3
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	619a      	str	r2, [r3, #24]
 8007d12:	e00b      	b.n	8007d2c <USB_EPStartXfer+0xda8>
 8007d14:	40009800 	.word	0x40009800
 8007d18:	07ff8f8f 	.word	0x07ff8f8f
 8007d1c:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d162      	bne.n	8007dfa <USB_EPStartXfer+0xe76>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	4a9a      	ldr	r2, [pc, #616]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007d3c:	4694      	mov	ip, r2
 8007d3e:	4463      	add	r3, ip
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	4996      	ldr	r1, [pc, #600]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007d4a:	468c      	mov	ip, r1
 8007d4c:	4463      	add	r3, ip
 8007d4e:	0192      	lsls	r2, r2, #6
 8007d50:	0992      	lsrs	r2, r2, #6
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d56:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d58:	d91e      	bls.n	8007d98 <USB_EPStartXfer+0xe14>
 8007d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d62:	221f      	movs	r2, #31
 8007d64:	4013      	ands	r3, r2
 8007d66:	d102      	bne.n	8007d6e <USB_EPStartXfer+0xdea>
 8007d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	4a8b      	ldr	r2, [pc, #556]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007d76:	4694      	mov	ip, r2
 8007d78:	4463      	add	r3, ip
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7e:	069b      	lsls	r3, r3, #26
 8007d80:	431a      	orrs	r2, r3
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	4986      	ldr	r1, [pc, #536]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007d8a:	468c      	mov	ip, r1
 8007d8c:	4463      	add	r3, ip
 8007d8e:	2180      	movs	r1, #128	@ 0x80
 8007d90:	0609      	lsls	r1, r1, #24
 8007d92:	430a      	orrs	r2, r1
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e055      	b.n	8007e44 <USB_EPStartXfer+0xec0>
 8007d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d111      	bne.n	8007dc2 <USB_EPStartXfer+0xe3e>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	4a7f      	ldr	r2, [pc, #508]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007da6:	4694      	mov	ip, r2
 8007da8:	4463      	add	r3, ip
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	497c      	ldr	r1, [pc, #496]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007db4:	468c      	mov	ip, r1
 8007db6:	4463      	add	r3, ip
 8007db8:	2180      	movs	r1, #128	@ 0x80
 8007dba:	0609      	lsls	r1, r1, #24
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	e040      	b.n	8007e44 <USB_EPStartXfer+0xec0>
 8007dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dc4:	085b      	lsrs	r3, r3, #1
 8007dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dca:	2201      	movs	r2, #1
 8007dcc:	4013      	ands	r3, r2
 8007dce:	d002      	beq.n	8007dd6 <USB_EPStartXfer+0xe52>
 8007dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4a71      	ldr	r2, [pc, #452]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007dde:	4694      	mov	ip, r2
 8007de0:	4463      	add	r3, ip
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de6:	069a      	lsls	r2, r3, #26
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	486d      	ldr	r0, [pc, #436]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007df0:	4684      	mov	ip, r0
 8007df2:	4463      	add	r3, ip
 8007df4:	430a      	orrs	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	e024      	b.n	8007e44 <USB_EPStartXfer+0xec0>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	785b      	ldrb	r3, [r3, #1]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d120      	bne.n	8007e44 <USB_EPStartXfer+0xec0>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4a66      	ldr	r2, [pc, #408]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007e0a:	4694      	mov	ip, r2
 8007e0c:	4463      	add	r3, ip
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	4963      	ldr	r1, [pc, #396]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007e18:	468c      	mov	ip, r1
 8007e1a:	4463      	add	r3, ip
 8007e1c:	0412      	lsls	r2, r2, #16
 8007e1e:	0c12      	lsrs	r2, r2, #16
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	4a5e      	ldr	r2, [pc, #376]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007e2a:	4694      	mov	ip, r2
 8007e2c:	4463      	add	r3, ip
 8007e2e:	6819      	ldr	r1, [r3, #0]
 8007e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e32:	041a      	lsls	r2, r3, #16
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	485a      	ldr	r0, [pc, #360]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007e3c:	4684      	mov	ip, r0
 8007e3e:	4463      	add	r3, ip
 8007e40:	430a      	orrs	r2, r1
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d162      	bne.n	8007f12 <USB_EPStartXfer+0xf8e>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	4a54      	ldr	r2, [pc, #336]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007e54:	4694      	mov	ip, r2
 8007e56:	4463      	add	r3, ip
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4950      	ldr	r1, [pc, #320]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007e62:	468c      	mov	ip, r1
 8007e64:	4463      	add	r3, ip
 8007e66:	0192      	lsls	r2, r2, #6
 8007e68:	0992      	lsrs	r2, r2, #6
 8007e6a:	605a      	str	r2, [r3, #4]
 8007e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e70:	d91e      	bls.n	8007eb0 <USB_EPStartXfer+0xf2c>
 8007e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e74:	095b      	lsrs	r3, r3, #5
 8007e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e7a:	221f      	movs	r2, #31
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	d102      	bne.n	8007e86 <USB_EPStartXfer+0xf02>
 8007e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e82:	3b01      	subs	r3, #1
 8007e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	4a45      	ldr	r2, [pc, #276]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007e8e:	4694      	mov	ip, r2
 8007e90:	4463      	add	r3, ip
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e96:	069b      	lsls	r3, r3, #26
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	4940      	ldr	r1, [pc, #256]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007ea2:	468c      	mov	ip, r1
 8007ea4:	4463      	add	r3, ip
 8007ea6:	2180      	movs	r1, #128	@ 0x80
 8007ea8:	0609      	lsls	r1, r1, #24
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	e058      	b.n	8007f62 <USB_EPStartXfer+0xfde>
 8007eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d111      	bne.n	8007eda <USB_EPStartXfer+0xf56>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4a39      	ldr	r2, [pc, #228]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007ebe:	4694      	mov	ip, r2
 8007ec0:	4463      	add	r3, ip
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	4936      	ldr	r1, [pc, #216]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007ecc:	468c      	mov	ip, r1
 8007ece:	4463      	add	r3, ip
 8007ed0:	2180      	movs	r1, #128	@ 0x80
 8007ed2:	0609      	lsls	r1, r1, #24
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
 8007ed8:	e043      	b.n	8007f62 <USB_EPStartXfer+0xfde>
 8007eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	d002      	beq.n	8007eee <USB_EPStartXfer+0xf6a>
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	3301      	adds	r3, #1
 8007eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007ef6:	4694      	mov	ip, r2
 8007ef8:	4463      	add	r3, ip
 8007efa:	6859      	ldr	r1, [r3, #4]
 8007efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efe:	069a      	lsls	r2, r3, #26
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4827      	ldr	r0, [pc, #156]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007f08:	4684      	mov	ip, r0
 8007f0a:	4463      	add	r3, ip
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	605a      	str	r2, [r3, #4]
 8007f10:	e027      	b.n	8007f62 <USB_EPStartXfer+0xfde>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d123      	bne.n	8007f62 <USB_EPStartXfer+0xfde>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	4a20      	ldr	r2, [pc, #128]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007f22:	4694      	mov	ip, r2
 8007f24:	4463      	add	r3, ip
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	491d      	ldr	r1, [pc, #116]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007f30:	468c      	mov	ip, r1
 8007f32:	4463      	add	r3, ip
 8007f34:	0412      	lsls	r2, r2, #16
 8007f36:	0c12      	lsrs	r2, r2, #16
 8007f38:	605a      	str	r2, [r3, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4a18      	ldr	r2, [pc, #96]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007f42:	4694      	mov	ip, r2
 8007f44:	4463      	add	r3, ip
 8007f46:	6859      	ldr	r1, [r3, #4]
 8007f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f4a:	041a      	lsls	r2, r3, #16
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	4814      	ldr	r0, [pc, #80]	@ (8007fa4 <USB_EPStartXfer+0x1020>)
 8007f54:	4684      	mov	ip, r0
 8007f56:	4463      	add	r3, ip
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	605a      	str	r2, [r3, #4]
 8007f5c:	e001      	b.n	8007f62 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e01c      	b.n	8007f9c <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	18d3      	adds	r3, r2, r3
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8007fa8 <USB_EPStartXfer+0x1024>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	61fb      	str	r3, [r7, #28]
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	2280      	movs	r2, #128	@ 0x80
 8007f78:	0152      	lsls	r2, r2, #5
 8007f7a:	4053      	eors	r3, r2
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	2280      	movs	r2, #128	@ 0x80
 8007f82:	0192      	lsls	r2, r2, #6
 8007f84:	4053      	eors	r3, r2
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	18d3      	adds	r3, r2, r3
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	4905      	ldr	r1, [pc, #20]	@ (8007fac <USB_EPStartXfer+0x1028>)
 8007f96:	430a      	orrs	r2, r1
 8007f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	b017      	add	sp, #92	@ 0x5c
 8007fa2:	bd90      	pop	{r4, r7, pc}
 8007fa4:	40009800 	.word	0x40009800
 8007fa8:	07ffbf8f 	.word	0x07ffbf8f
 8007fac:	00008080 	.word	0x00008080

08007fb0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	000a      	movs	r2, r1
 8007fba:	1cfb      	adds	r3, r7, #3
 8007fbc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007fbe:	1cfb      	adds	r3, r7, #3
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2280      	movs	r2, #128	@ 0x80
 8007fca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	0018      	movs	r0, r3
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	b002      	add	sp, #8
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
}
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	b004      	add	sp, #16
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	@ 0x28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	0019      	movs	r1, r3
 8007ffc:	1dbb      	adds	r3, r7, #6
 8007ffe:	801a      	strh	r2, [r3, #0]
 8008000:	1d3b      	adds	r3, r7, #4
 8008002:	1c0a      	adds	r2, r1, #0
 8008004:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8008006:	1d3b      	adds	r3, r7, #4
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	3303      	adds	r3, #3
 800800c:	089b      	lsrs	r3, r3, #2
 800800e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8008010:	2016      	movs	r0, #22
 8008012:	183b      	adds	r3, r7, r0
 8008014:	1d3a      	adds	r2, r7, #4
 8008016:	8812      	ldrh	r2, [r2, #0]
 8008018:	2103      	movs	r1, #3
 800801a:	400a      	ands	r2, r1
 800801c:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8008022:	183b      	adds	r3, r7, r0
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <USB_WritePMA+0x40>
  {
    NbWords--;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	3b01      	subs	r3, #1
 800802e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8008030:	1dbb      	adds	r3, r7, #6
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	4a28      	ldr	r2, [pc, #160]	@ (80080d8 <USB_WritePMA+0xe8>)
 8008036:	4694      	mov	ip, r2
 8008038:	4463      	add	r3, ip
 800803a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	623b      	str	r3, [r7, #32]
 8008040:	e01f      	b.n	8008082 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	781a      	ldrb	r2, [r3, #0]
 8008046:	7859      	ldrb	r1, [r3, #1]
 8008048:	0209      	lsls	r1, r1, #8
 800804a:	430a      	orrs	r2, r1
 800804c:	7899      	ldrb	r1, [r3, #2]
 800804e:	0409      	lsls	r1, r1, #16
 8008050:	430a      	orrs	r2, r1
 8008052:	78db      	ldrb	r3, [r3, #3]
 8008054:	061b      	lsls	r3, r3, #24
 8008056:	4313      	orrs	r3, r2
 8008058:	001a      	movs	r2, r3
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	3304      	adds	r3, #4
 8008062:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	3301      	adds	r3, #1
 8008068:	613b      	str	r3, [r7, #16]
    pBuf++;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	3301      	adds	r3, #1
 800806e:	613b      	str	r3, [r7, #16]
    pBuf++;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	3301      	adds	r3, #1
 8008074:	613b      	str	r3, [r7, #16]
    pBuf++;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	3301      	adds	r3, #1
 800807a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	3b01      	subs	r3, #1
 8008080:	623b      	str	r3, [r7, #32]
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1dc      	bne.n	8008042 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8008088:	2316      	movs	r3, #22
 800808a:	18fb      	adds	r3, r7, r3
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01e      	beq.n	80080d0 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	001a      	movs	r2, r3
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	409a      	lsls	r2, r3
 80080a2:	0013      	movs	r3, r2
 80080a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a6:	4313      	orrs	r3, r2
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	3301      	adds	r3, #1
 80080ae:	623b      	str	r3, [r7, #32]
      pBuf++;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	3301      	adds	r3, #1
 80080b4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 80080b6:	2116      	movs	r1, #22
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	881a      	ldrh	r2, [r3, #0]
 80080bc:	187b      	adds	r3, r7, r1
 80080be:	3a01      	subs	r2, #1
 80080c0:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 80080c2:	187b      	adds	r3, r7, r1
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e5      	bne.n	8008096 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ce:	601a      	str	r2, [r3, #0]
  }
}
 80080d0:	46c0      	nop			@ (mov r8, r8)
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b00a      	add	sp, #40	@ 0x28
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40009800 	.word	0x40009800

080080dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b08b      	sub	sp, #44	@ 0x2c
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	0019      	movs	r1, r3
 80080e8:	1dbb      	adds	r3, r7, #6
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	1d3b      	adds	r3, r7, #4
 80080ee:	1c0a      	adds	r2, r1, #0
 80080f0:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80080f2:	1d3b      	adds	r3, r7, #4
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	3303      	adds	r3, #3
 80080f8:	089b      	lsrs	r3, r3, #2
 80080fa:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80080fc:	201a      	movs	r0, #26
 80080fe:	183b      	adds	r3, r7, r0
 8008100:	1d3a      	adds	r2, r7, #4
 8008102:	8812      	ldrh	r2, [r2, #0]
 8008104:	2103      	movs	r1, #3
 8008106:	400a      	ands	r2, r1
 8008108:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800810e:	1dbb      	adds	r3, r7, #6
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	4a39      	ldr	r2, [pc, #228]	@ (80081f8 <USB_ReadPMA+0x11c>)
 8008114:	4694      	mov	ip, r2
 8008116:	4463      	add	r3, ip
 8008118:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800811a:	183b      	adds	r3, r7, r0
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	3b01      	subs	r3, #1
 8008126:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24
 800812c:	e03c      	b.n	80081a8 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	21ff      	movs	r1, #255	@ 0xff
 8008136:	4011      	ands	r1, r2
 8008138:	000c      	movs	r4, r1
 800813a:	7819      	ldrb	r1, [r3, #0]
 800813c:	2000      	movs	r0, #0
 800813e:	4001      	ands	r1, r0
 8008140:	1c08      	adds	r0, r1, #0
 8008142:	1c21      	adds	r1, r4, #0
 8008144:	4301      	orrs	r1, r0
 8008146:	7019      	strb	r1, [r3, #0]
 8008148:	0a11      	lsrs	r1, r2, #8
 800814a:	20ff      	movs	r0, #255	@ 0xff
 800814c:	4001      	ands	r1, r0
 800814e:	000c      	movs	r4, r1
 8008150:	7859      	ldrb	r1, [r3, #1]
 8008152:	2000      	movs	r0, #0
 8008154:	4001      	ands	r1, r0
 8008156:	1c08      	adds	r0, r1, #0
 8008158:	1c21      	adds	r1, r4, #0
 800815a:	4301      	orrs	r1, r0
 800815c:	7059      	strb	r1, [r3, #1]
 800815e:	0c11      	lsrs	r1, r2, #16
 8008160:	20ff      	movs	r0, #255	@ 0xff
 8008162:	4001      	ands	r1, r0
 8008164:	000c      	movs	r4, r1
 8008166:	7899      	ldrb	r1, [r3, #2]
 8008168:	2000      	movs	r0, #0
 800816a:	4001      	ands	r1, r0
 800816c:	1c08      	adds	r0, r1, #0
 800816e:	1c21      	adds	r1, r4, #0
 8008170:	4301      	orrs	r1, r0
 8008172:	7099      	strb	r1, [r3, #2]
 8008174:	0e10      	lsrs	r0, r2, #24
 8008176:	78da      	ldrb	r2, [r3, #3]
 8008178:	2100      	movs	r1, #0
 800817a:	400a      	ands	r2, r1
 800817c:	1c11      	adds	r1, r2, #0
 800817e:	1c02      	adds	r2, r0, #0
 8008180:	430a      	orrs	r2, r1
 8008182:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	3304      	adds	r3, #4
 8008188:	623b      	str	r3, [r7, #32]
    pBuf++;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	3301      	adds	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
    pBuf++;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	3301      	adds	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
    pBuf++;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	3301      	adds	r3, #1
 800819a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	3301      	adds	r3, #1
 80081a0:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	3b01      	subs	r3, #1
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1bf      	bne.n	800812e <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 80081ae:	231a      	movs	r3, #26
 80081b0:	18fb      	adds	r3, r7, r3
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01b      	beq.n	80081f0 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	40da      	lsrs	r2, r3
 80081c8:	0013      	movs	r3, r2
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	701a      	strb	r2, [r3, #0]
      count++;
 80081d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d2:	3301      	adds	r3, #1
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	3301      	adds	r3, #1
 80081da:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 80081dc:	211a      	movs	r1, #26
 80081de:	187b      	adds	r3, r7, r1
 80081e0:	881a      	ldrh	r2, [r3, #0]
 80081e2:	187b      	adds	r3, r7, r1
 80081e4:	3a01      	subs	r2, #1
 80081e6:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 80081e8:	187b      	adds	r3, r7, r1
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e6      	bne.n	80081be <USB_ReadPMA+0xe2>
  }
}
 80081f0:	46c0      	nop			@ (mov r8, r8)
 80081f2:	46bd      	mov	sp, r7
 80081f4:	b00b      	add	sp, #44	@ 0x2c
 80081f6:	bd90      	pop	{r4, r7, pc}
 80081f8:	40009800 	.word	0x40009800

080081fc <__assert_func>:
 80081fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80081fe:	0014      	movs	r4, r2
 8008200:	001a      	movs	r2, r3
 8008202:	4b09      	ldr	r3, [pc, #36]	@ (8008228 <__assert_func+0x2c>)
 8008204:	0005      	movs	r5, r0
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	000e      	movs	r6, r1
 800820a:	68d8      	ldr	r0, [r3, #12]
 800820c:	4b07      	ldr	r3, [pc, #28]	@ (800822c <__assert_func+0x30>)
 800820e:	2c00      	cmp	r4, #0
 8008210:	d101      	bne.n	8008216 <__assert_func+0x1a>
 8008212:	4b07      	ldr	r3, [pc, #28]	@ (8008230 <__assert_func+0x34>)
 8008214:	001c      	movs	r4, r3
 8008216:	4907      	ldr	r1, [pc, #28]	@ (8008234 <__assert_func+0x38>)
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	9402      	str	r4, [sp, #8]
 800821c:	002b      	movs	r3, r5
 800821e:	9600      	str	r6, [sp, #0]
 8008220:	f000 f8b2 	bl	8008388 <fiprintf>
 8008224:	f000 f9ab 	bl	800857e <abort>
 8008228:	20000094 	.word	0x20000094
 800822c:	08009320 	.word	0x08009320
 8008230:	0800935b 	.word	0x0800935b
 8008234:	0800932d 	.word	0x0800932d

08008238 <std>:
 8008238:	2300      	movs	r3, #0
 800823a:	b510      	push	{r4, lr}
 800823c:	0004      	movs	r4, r0
 800823e:	6003      	str	r3, [r0, #0]
 8008240:	6043      	str	r3, [r0, #4]
 8008242:	6083      	str	r3, [r0, #8]
 8008244:	8181      	strh	r1, [r0, #12]
 8008246:	6643      	str	r3, [r0, #100]	@ 0x64
 8008248:	81c2      	strh	r2, [r0, #14]
 800824a:	6103      	str	r3, [r0, #16]
 800824c:	6143      	str	r3, [r0, #20]
 800824e:	6183      	str	r3, [r0, #24]
 8008250:	0019      	movs	r1, r3
 8008252:	2208      	movs	r2, #8
 8008254:	305c      	adds	r0, #92	@ 0x5c
 8008256:	f000 f90f 	bl	8008478 <memset>
 800825a:	4b0b      	ldr	r3, [pc, #44]	@ (8008288 <std+0x50>)
 800825c:	6224      	str	r4, [r4, #32]
 800825e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008260:	4b0a      	ldr	r3, [pc, #40]	@ (800828c <std+0x54>)
 8008262:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008264:	4b0a      	ldr	r3, [pc, #40]	@ (8008290 <std+0x58>)
 8008266:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008268:	4b0a      	ldr	r3, [pc, #40]	@ (8008294 <std+0x5c>)
 800826a:	6323      	str	r3, [r4, #48]	@ 0x30
 800826c:	4b0a      	ldr	r3, [pc, #40]	@ (8008298 <std+0x60>)
 800826e:	429c      	cmp	r4, r3
 8008270:	d005      	beq.n	800827e <std+0x46>
 8008272:	4b0a      	ldr	r3, [pc, #40]	@ (800829c <std+0x64>)
 8008274:	429c      	cmp	r4, r3
 8008276:	d002      	beq.n	800827e <std+0x46>
 8008278:	4b09      	ldr	r3, [pc, #36]	@ (80082a0 <std+0x68>)
 800827a:	429c      	cmp	r4, r3
 800827c:	d103      	bne.n	8008286 <std+0x4e>
 800827e:	0020      	movs	r0, r4
 8008280:	3058      	adds	r0, #88	@ 0x58
 8008282:	f000 f979 	bl	8008578 <__retarget_lock_init_recursive>
 8008286:	bd10      	pop	{r4, pc}
 8008288:	080083e1 	.word	0x080083e1
 800828c:	08008409 	.word	0x08008409
 8008290:	08008441 	.word	0x08008441
 8008294:	0800846d 	.word	0x0800846d
 8008298:	20000708 	.word	0x20000708
 800829c:	20000770 	.word	0x20000770
 80082a0:	200007d8 	.word	0x200007d8

080082a4 <stdio_exit_handler>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	4a03      	ldr	r2, [pc, #12]	@ (80082b4 <stdio_exit_handler+0x10>)
 80082a8:	4903      	ldr	r1, [pc, #12]	@ (80082b8 <stdio_exit_handler+0x14>)
 80082aa:	4804      	ldr	r0, [pc, #16]	@ (80082bc <stdio_exit_handler+0x18>)
 80082ac:	f000 f87c 	bl	80083a8 <_fwalk_sglue>
 80082b0:	bd10      	pop	{r4, pc}
 80082b2:	46c0      	nop			@ (mov r8, r8)
 80082b4:	20000088 	.word	0x20000088
 80082b8:	08008e11 	.word	0x08008e11
 80082bc:	20000098 	.word	0x20000098

080082c0 <cleanup_stdio>:
 80082c0:	6841      	ldr	r1, [r0, #4]
 80082c2:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <cleanup_stdio+0x30>)
 80082c4:	b510      	push	{r4, lr}
 80082c6:	0004      	movs	r4, r0
 80082c8:	4299      	cmp	r1, r3
 80082ca:	d001      	beq.n	80082d0 <cleanup_stdio+0x10>
 80082cc:	f000 fda0 	bl	8008e10 <_fflush_r>
 80082d0:	68a1      	ldr	r1, [r4, #8]
 80082d2:	4b08      	ldr	r3, [pc, #32]	@ (80082f4 <cleanup_stdio+0x34>)
 80082d4:	4299      	cmp	r1, r3
 80082d6:	d002      	beq.n	80082de <cleanup_stdio+0x1e>
 80082d8:	0020      	movs	r0, r4
 80082da:	f000 fd99 	bl	8008e10 <_fflush_r>
 80082de:	68e1      	ldr	r1, [r4, #12]
 80082e0:	4b05      	ldr	r3, [pc, #20]	@ (80082f8 <cleanup_stdio+0x38>)
 80082e2:	4299      	cmp	r1, r3
 80082e4:	d002      	beq.n	80082ec <cleanup_stdio+0x2c>
 80082e6:	0020      	movs	r0, r4
 80082e8:	f000 fd92 	bl	8008e10 <_fflush_r>
 80082ec:	bd10      	pop	{r4, pc}
 80082ee:	46c0      	nop			@ (mov r8, r8)
 80082f0:	20000708 	.word	0x20000708
 80082f4:	20000770 	.word	0x20000770
 80082f8:	200007d8 	.word	0x200007d8

080082fc <global_stdio_init.part.0>:
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4b09      	ldr	r3, [pc, #36]	@ (8008324 <global_stdio_init.part.0+0x28>)
 8008300:	4a09      	ldr	r2, [pc, #36]	@ (8008328 <global_stdio_init.part.0+0x2c>)
 8008302:	2104      	movs	r1, #4
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	4809      	ldr	r0, [pc, #36]	@ (800832c <global_stdio_init.part.0+0x30>)
 8008308:	2200      	movs	r2, #0
 800830a:	f7ff ff95 	bl	8008238 <std>
 800830e:	2201      	movs	r2, #1
 8008310:	2109      	movs	r1, #9
 8008312:	4807      	ldr	r0, [pc, #28]	@ (8008330 <global_stdio_init.part.0+0x34>)
 8008314:	f7ff ff90 	bl	8008238 <std>
 8008318:	2202      	movs	r2, #2
 800831a:	2112      	movs	r1, #18
 800831c:	4805      	ldr	r0, [pc, #20]	@ (8008334 <global_stdio_init.part.0+0x38>)
 800831e:	f7ff ff8b 	bl	8008238 <std>
 8008322:	bd10      	pop	{r4, pc}
 8008324:	20000840 	.word	0x20000840
 8008328:	080082a5 	.word	0x080082a5
 800832c:	20000708 	.word	0x20000708
 8008330:	20000770 	.word	0x20000770
 8008334:	200007d8 	.word	0x200007d8

08008338 <__sfp_lock_acquire>:
 8008338:	b510      	push	{r4, lr}
 800833a:	4802      	ldr	r0, [pc, #8]	@ (8008344 <__sfp_lock_acquire+0xc>)
 800833c:	f000 f91d 	bl	800857a <__retarget_lock_acquire_recursive>
 8008340:	bd10      	pop	{r4, pc}
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	20000849 	.word	0x20000849

08008348 <__sfp_lock_release>:
 8008348:	b510      	push	{r4, lr}
 800834a:	4802      	ldr	r0, [pc, #8]	@ (8008354 <__sfp_lock_release+0xc>)
 800834c:	f000 f916 	bl	800857c <__retarget_lock_release_recursive>
 8008350:	bd10      	pop	{r4, pc}
 8008352:	46c0      	nop			@ (mov r8, r8)
 8008354:	20000849 	.word	0x20000849

08008358 <__sinit>:
 8008358:	b510      	push	{r4, lr}
 800835a:	0004      	movs	r4, r0
 800835c:	f7ff ffec 	bl	8008338 <__sfp_lock_acquire>
 8008360:	6a23      	ldr	r3, [r4, #32]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <__sinit+0x14>
 8008366:	f7ff ffef 	bl	8008348 <__sfp_lock_release>
 800836a:	bd10      	pop	{r4, pc}
 800836c:	4b04      	ldr	r3, [pc, #16]	@ (8008380 <__sinit+0x28>)
 800836e:	6223      	str	r3, [r4, #32]
 8008370:	4b04      	ldr	r3, [pc, #16]	@ (8008384 <__sinit+0x2c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1f6      	bne.n	8008366 <__sinit+0xe>
 8008378:	f7ff ffc0 	bl	80082fc <global_stdio_init.part.0>
 800837c:	e7f3      	b.n	8008366 <__sinit+0xe>
 800837e:	46c0      	nop			@ (mov r8, r8)
 8008380:	080082c1 	.word	0x080082c1
 8008384:	20000840 	.word	0x20000840

08008388 <fiprintf>:
 8008388:	b40e      	push	{r1, r2, r3}
 800838a:	b517      	push	{r0, r1, r2, r4, lr}
 800838c:	4c05      	ldr	r4, [pc, #20]	@ (80083a4 <fiprintf+0x1c>)
 800838e:	ab05      	add	r3, sp, #20
 8008390:	cb04      	ldmia	r3!, {r2}
 8008392:	0001      	movs	r1, r0
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	f000 fa1c 	bl	80087d4 <_vfiprintf_r>
 800839c:	bc1e      	pop	{r1, r2, r3, r4}
 800839e:	bc08      	pop	{r3}
 80083a0:	b003      	add	sp, #12
 80083a2:	4718      	bx	r3
 80083a4:	20000094 	.word	0x20000094

080083a8 <_fwalk_sglue>:
 80083a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083aa:	0014      	movs	r4, r2
 80083ac:	2600      	movs	r6, #0
 80083ae:	9000      	str	r0, [sp, #0]
 80083b0:	9101      	str	r1, [sp, #4]
 80083b2:	68a5      	ldr	r5, [r4, #8]
 80083b4:	6867      	ldr	r7, [r4, #4]
 80083b6:	3f01      	subs	r7, #1
 80083b8:	d504      	bpl.n	80083c4 <_fwalk_sglue+0x1c>
 80083ba:	6824      	ldr	r4, [r4, #0]
 80083bc:	2c00      	cmp	r4, #0
 80083be:	d1f8      	bne.n	80083b2 <_fwalk_sglue+0xa>
 80083c0:	0030      	movs	r0, r6
 80083c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083c4:	89ab      	ldrh	r3, [r5, #12]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d908      	bls.n	80083dc <_fwalk_sglue+0x34>
 80083ca:	220e      	movs	r2, #14
 80083cc:	5eab      	ldrsh	r3, [r5, r2]
 80083ce:	3301      	adds	r3, #1
 80083d0:	d004      	beq.n	80083dc <_fwalk_sglue+0x34>
 80083d2:	0029      	movs	r1, r5
 80083d4:	9800      	ldr	r0, [sp, #0]
 80083d6:	9b01      	ldr	r3, [sp, #4]
 80083d8:	4798      	blx	r3
 80083da:	4306      	orrs	r6, r0
 80083dc:	3568      	adds	r5, #104	@ 0x68
 80083de:	e7ea      	b.n	80083b6 <_fwalk_sglue+0xe>

080083e0 <__sread>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	000c      	movs	r4, r1
 80083e4:	250e      	movs	r5, #14
 80083e6:	5f49      	ldrsh	r1, [r1, r5]
 80083e8:	f000 f874 	bl	80084d4 <_read_r>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	db03      	blt.n	80083f8 <__sread+0x18>
 80083f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80083f2:	181b      	adds	r3, r3, r0
 80083f4:	6563      	str	r3, [r4, #84]	@ 0x54
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	4a02      	ldr	r2, [pc, #8]	@ (8008404 <__sread+0x24>)
 80083fc:	4013      	ands	r3, r2
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	e7f9      	b.n	80083f6 <__sread+0x16>
 8008402:	46c0      	nop			@ (mov r8, r8)
 8008404:	ffffefff 	.word	0xffffefff

08008408 <__swrite>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	001f      	movs	r7, r3
 800840c:	898b      	ldrh	r3, [r1, #12]
 800840e:	0005      	movs	r5, r0
 8008410:	000c      	movs	r4, r1
 8008412:	0016      	movs	r6, r2
 8008414:	05db      	lsls	r3, r3, #23
 8008416:	d505      	bpl.n	8008424 <__swrite+0x1c>
 8008418:	230e      	movs	r3, #14
 800841a:	5ec9      	ldrsh	r1, [r1, r3]
 800841c:	2200      	movs	r2, #0
 800841e:	2302      	movs	r3, #2
 8008420:	f000 f844 	bl	80084ac <_lseek_r>
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	4a05      	ldr	r2, [pc, #20]	@ (800843c <__swrite+0x34>)
 8008428:	0028      	movs	r0, r5
 800842a:	4013      	ands	r3, r2
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	0032      	movs	r2, r6
 8008430:	230e      	movs	r3, #14
 8008432:	5ee1      	ldrsh	r1, [r4, r3]
 8008434:	003b      	movs	r3, r7
 8008436:	f000 f861 	bl	80084fc <_write_r>
 800843a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800843c:	ffffefff 	.word	0xffffefff

08008440 <__sseek>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	000c      	movs	r4, r1
 8008444:	250e      	movs	r5, #14
 8008446:	5f49      	ldrsh	r1, [r1, r5]
 8008448:	f000 f830 	bl	80084ac <_lseek_r>
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	1c42      	adds	r2, r0, #1
 8008450:	d103      	bne.n	800845a <__sseek+0x1a>
 8008452:	4a05      	ldr	r2, [pc, #20]	@ (8008468 <__sseek+0x28>)
 8008454:	4013      	ands	r3, r2
 8008456:	81a3      	strh	r3, [r4, #12]
 8008458:	bd70      	pop	{r4, r5, r6, pc}
 800845a:	2280      	movs	r2, #128	@ 0x80
 800845c:	0152      	lsls	r2, r2, #5
 800845e:	4313      	orrs	r3, r2
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	6560      	str	r0, [r4, #84]	@ 0x54
 8008464:	e7f8      	b.n	8008458 <__sseek+0x18>
 8008466:	46c0      	nop			@ (mov r8, r8)
 8008468:	ffffefff 	.word	0xffffefff

0800846c <__sclose>:
 800846c:	b510      	push	{r4, lr}
 800846e:	230e      	movs	r3, #14
 8008470:	5ec9      	ldrsh	r1, [r1, r3]
 8008472:	f000 f809 	bl	8008488 <_close_r>
 8008476:	bd10      	pop	{r4, pc}

08008478 <memset>:
 8008478:	0003      	movs	r3, r0
 800847a:	1882      	adds	r2, r0, r2
 800847c:	4293      	cmp	r3, r2
 800847e:	d100      	bne.n	8008482 <memset+0xa>
 8008480:	4770      	bx	lr
 8008482:	7019      	strb	r1, [r3, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	e7f9      	b.n	800847c <memset+0x4>

08008488 <_close_r>:
 8008488:	2300      	movs	r3, #0
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	4d06      	ldr	r5, [pc, #24]	@ (80084a8 <_close_r+0x20>)
 800848e:	0004      	movs	r4, r0
 8008490:	0008      	movs	r0, r1
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7fa fb38 	bl	8002b08 <_close>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d103      	bne.n	80084a4 <_close_r+0x1c>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d000      	beq.n	80084a4 <_close_r+0x1c>
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	46c0      	nop			@ (mov r8, r8)
 80084a8:	20000844 	.word	0x20000844

080084ac <_lseek_r>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	0004      	movs	r4, r0
 80084b0:	0008      	movs	r0, r1
 80084b2:	0011      	movs	r1, r2
 80084b4:	001a      	movs	r2, r3
 80084b6:	2300      	movs	r3, #0
 80084b8:	4d05      	ldr	r5, [pc, #20]	@ (80084d0 <_lseek_r+0x24>)
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	f7fa fb45 	bl	8002b4a <_lseek>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d103      	bne.n	80084cc <_lseek_r+0x20>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d000      	beq.n	80084cc <_lseek_r+0x20>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
 80084ce:	46c0      	nop			@ (mov r8, r8)
 80084d0:	20000844 	.word	0x20000844

080084d4 <_read_r>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	0004      	movs	r4, r0
 80084d8:	0008      	movs	r0, r1
 80084da:	0011      	movs	r1, r2
 80084dc:	001a      	movs	r2, r3
 80084de:	2300      	movs	r3, #0
 80084e0:	4d05      	ldr	r5, [pc, #20]	@ (80084f8 <_read_r+0x24>)
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	f7fa fad7 	bl	8002a96 <_read>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d103      	bne.n	80084f4 <_read_r+0x20>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d000      	beq.n	80084f4 <_read_r+0x20>
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	bd70      	pop	{r4, r5, r6, pc}
 80084f6:	46c0      	nop			@ (mov r8, r8)
 80084f8:	20000844 	.word	0x20000844

080084fc <_write_r>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	0004      	movs	r4, r0
 8008500:	0008      	movs	r0, r1
 8008502:	0011      	movs	r1, r2
 8008504:	001a      	movs	r2, r3
 8008506:	2300      	movs	r3, #0
 8008508:	4d05      	ldr	r5, [pc, #20]	@ (8008520 <_write_r+0x24>)
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	f7fa fae0 	bl	8002ad0 <_write>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d103      	bne.n	800851c <_write_r+0x20>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d000      	beq.n	800851c <_write_r+0x20>
 800851a:	6023      	str	r3, [r4, #0]
 800851c:	bd70      	pop	{r4, r5, r6, pc}
 800851e:	46c0      	nop			@ (mov r8, r8)
 8008520:	20000844 	.word	0x20000844

08008524 <__errno>:
 8008524:	4b01      	ldr	r3, [pc, #4]	@ (800852c <__errno+0x8>)
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	4770      	bx	lr
 800852a:	46c0      	nop			@ (mov r8, r8)
 800852c:	20000094 	.word	0x20000094

08008530 <__libc_init_array>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	2600      	movs	r6, #0
 8008534:	4c0c      	ldr	r4, [pc, #48]	@ (8008568 <__libc_init_array+0x38>)
 8008536:	4d0d      	ldr	r5, [pc, #52]	@ (800856c <__libc_init_array+0x3c>)
 8008538:	1b64      	subs	r4, r4, r5
 800853a:	10a4      	asrs	r4, r4, #2
 800853c:	42a6      	cmp	r6, r4
 800853e:	d109      	bne.n	8008554 <__libc_init_array+0x24>
 8008540:	2600      	movs	r6, #0
 8008542:	f000 fe29 	bl	8009198 <_init>
 8008546:	4c0a      	ldr	r4, [pc, #40]	@ (8008570 <__libc_init_array+0x40>)
 8008548:	4d0a      	ldr	r5, [pc, #40]	@ (8008574 <__libc_init_array+0x44>)
 800854a:	1b64      	subs	r4, r4, r5
 800854c:	10a4      	asrs	r4, r4, #2
 800854e:	42a6      	cmp	r6, r4
 8008550:	d105      	bne.n	800855e <__libc_init_array+0x2e>
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	00b3      	lsls	r3, r6, #2
 8008556:	58eb      	ldr	r3, [r5, r3]
 8008558:	4798      	blx	r3
 800855a:	3601      	adds	r6, #1
 800855c:	e7ee      	b.n	800853c <__libc_init_array+0xc>
 800855e:	00b3      	lsls	r3, r6, #2
 8008560:	58eb      	ldr	r3, [r5, r3]
 8008562:	4798      	blx	r3
 8008564:	3601      	adds	r6, #1
 8008566:	e7f2      	b.n	800854e <__libc_init_array+0x1e>
 8008568:	08009390 	.word	0x08009390
 800856c:	08009390 	.word	0x08009390
 8008570:	08009394 	.word	0x08009394
 8008574:	08009390 	.word	0x08009390

08008578 <__retarget_lock_init_recursive>:
 8008578:	4770      	bx	lr

0800857a <__retarget_lock_acquire_recursive>:
 800857a:	4770      	bx	lr

0800857c <__retarget_lock_release_recursive>:
 800857c:	4770      	bx	lr

0800857e <abort>:
 800857e:	2006      	movs	r0, #6
 8008580:	b510      	push	{r4, lr}
 8008582:	f000 fd3b 	bl	8008ffc <raise>
 8008586:	2001      	movs	r0, #1
 8008588:	f7fa fa78 	bl	8002a7c <_exit>

0800858c <_free_r>:
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	0005      	movs	r5, r0
 8008590:	1e0c      	subs	r4, r1, #0
 8008592:	d010      	beq.n	80085b6 <_free_r+0x2a>
 8008594:	3c04      	subs	r4, #4
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	da00      	bge.n	800859e <_free_r+0x12>
 800859c:	18e4      	adds	r4, r4, r3
 800859e:	0028      	movs	r0, r5
 80085a0:	f000 f8e0 	bl	8008764 <__malloc_lock>
 80085a4:	4a1d      	ldr	r2, [pc, #116]	@ (800861c <_free_r+0x90>)
 80085a6:	6813      	ldr	r3, [r2, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d105      	bne.n	80085b8 <_free_r+0x2c>
 80085ac:	6063      	str	r3, [r4, #4]
 80085ae:	6014      	str	r4, [r2, #0]
 80085b0:	0028      	movs	r0, r5
 80085b2:	f000 f8df 	bl	8008774 <__malloc_unlock>
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	d908      	bls.n	80085ce <_free_r+0x42>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	1821      	adds	r1, r4, r0
 80085c0:	428b      	cmp	r3, r1
 80085c2:	d1f3      	bne.n	80085ac <_free_r+0x20>
 80085c4:	6819      	ldr	r1, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	1809      	adds	r1, r1, r0
 80085ca:	6021      	str	r1, [r4, #0]
 80085cc:	e7ee      	b.n	80085ac <_free_r+0x20>
 80085ce:	001a      	movs	r2, r3
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <_free_r+0x4e>
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	d9f9      	bls.n	80085ce <_free_r+0x42>
 80085da:	6811      	ldr	r1, [r2, #0]
 80085dc:	1850      	adds	r0, r2, r1
 80085de:	42a0      	cmp	r0, r4
 80085e0:	d10b      	bne.n	80085fa <_free_r+0x6e>
 80085e2:	6820      	ldr	r0, [r4, #0]
 80085e4:	1809      	adds	r1, r1, r0
 80085e6:	1850      	adds	r0, r2, r1
 80085e8:	6011      	str	r1, [r2, #0]
 80085ea:	4283      	cmp	r3, r0
 80085ec:	d1e0      	bne.n	80085b0 <_free_r+0x24>
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	1841      	adds	r1, r0, r1
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	6053      	str	r3, [r2, #4]
 80085f8:	e7da      	b.n	80085b0 <_free_r+0x24>
 80085fa:	42a0      	cmp	r0, r4
 80085fc:	d902      	bls.n	8008604 <_free_r+0x78>
 80085fe:	230c      	movs	r3, #12
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	e7d5      	b.n	80085b0 <_free_r+0x24>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	1821      	adds	r1, r4, r0
 8008608:	428b      	cmp	r3, r1
 800860a:	d103      	bne.n	8008614 <_free_r+0x88>
 800860c:	6819      	ldr	r1, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	1809      	adds	r1, r1, r0
 8008612:	6021      	str	r1, [r4, #0]
 8008614:	6063      	str	r3, [r4, #4]
 8008616:	6054      	str	r4, [r2, #4]
 8008618:	e7ca      	b.n	80085b0 <_free_r+0x24>
 800861a:	46c0      	nop			@ (mov r8, r8)
 800861c:	20000850 	.word	0x20000850

08008620 <sbrk_aligned>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	4e0f      	ldr	r6, [pc, #60]	@ (8008660 <sbrk_aligned+0x40>)
 8008624:	000d      	movs	r5, r1
 8008626:	6831      	ldr	r1, [r6, #0]
 8008628:	0004      	movs	r4, r0
 800862a:	2900      	cmp	r1, #0
 800862c:	d102      	bne.n	8008634 <sbrk_aligned+0x14>
 800862e:	f000 fd05 	bl	800903c <_sbrk_r>
 8008632:	6030      	str	r0, [r6, #0]
 8008634:	0029      	movs	r1, r5
 8008636:	0020      	movs	r0, r4
 8008638:	f000 fd00 	bl	800903c <_sbrk_r>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	d103      	bne.n	8008648 <sbrk_aligned+0x28>
 8008640:	2501      	movs	r5, #1
 8008642:	426d      	negs	r5, r5
 8008644:	0028      	movs	r0, r5
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	2303      	movs	r3, #3
 800864a:	1cc5      	adds	r5, r0, #3
 800864c:	439d      	bics	r5, r3
 800864e:	42a8      	cmp	r0, r5
 8008650:	d0f8      	beq.n	8008644 <sbrk_aligned+0x24>
 8008652:	1a29      	subs	r1, r5, r0
 8008654:	0020      	movs	r0, r4
 8008656:	f000 fcf1 	bl	800903c <_sbrk_r>
 800865a:	3001      	adds	r0, #1
 800865c:	d1f2      	bne.n	8008644 <sbrk_aligned+0x24>
 800865e:	e7ef      	b.n	8008640 <sbrk_aligned+0x20>
 8008660:	2000084c 	.word	0x2000084c

08008664 <_malloc_r>:
 8008664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008666:	2203      	movs	r2, #3
 8008668:	1ccb      	adds	r3, r1, #3
 800866a:	4393      	bics	r3, r2
 800866c:	3308      	adds	r3, #8
 800866e:	0005      	movs	r5, r0
 8008670:	001f      	movs	r7, r3
 8008672:	2b0c      	cmp	r3, #12
 8008674:	d234      	bcs.n	80086e0 <_malloc_r+0x7c>
 8008676:	270c      	movs	r7, #12
 8008678:	42b9      	cmp	r1, r7
 800867a:	d833      	bhi.n	80086e4 <_malloc_r+0x80>
 800867c:	0028      	movs	r0, r5
 800867e:	f000 f871 	bl	8008764 <__malloc_lock>
 8008682:	4e37      	ldr	r6, [pc, #220]	@ (8008760 <_malloc_r+0xfc>)
 8008684:	6833      	ldr	r3, [r6, #0]
 8008686:	001c      	movs	r4, r3
 8008688:	2c00      	cmp	r4, #0
 800868a:	d12f      	bne.n	80086ec <_malloc_r+0x88>
 800868c:	0039      	movs	r1, r7
 800868e:	0028      	movs	r0, r5
 8008690:	f7ff ffc6 	bl	8008620 <sbrk_aligned>
 8008694:	0004      	movs	r4, r0
 8008696:	1c43      	adds	r3, r0, #1
 8008698:	d15f      	bne.n	800875a <_malloc_r+0xf6>
 800869a:	6834      	ldr	r4, [r6, #0]
 800869c:	9400      	str	r4, [sp, #0]
 800869e:	9b00      	ldr	r3, [sp, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d14a      	bne.n	800873a <_malloc_r+0xd6>
 80086a4:	2c00      	cmp	r4, #0
 80086a6:	d052      	beq.n	800874e <_malloc_r+0xea>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	0028      	movs	r0, r5
 80086ac:	18e3      	adds	r3, r4, r3
 80086ae:	9900      	ldr	r1, [sp, #0]
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	f000 fcc3 	bl	800903c <_sbrk_r>
 80086b6:	9b01      	ldr	r3, [sp, #4]
 80086b8:	4283      	cmp	r3, r0
 80086ba:	d148      	bne.n	800874e <_malloc_r+0xea>
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	0028      	movs	r0, r5
 80086c0:	1aff      	subs	r7, r7, r3
 80086c2:	0039      	movs	r1, r7
 80086c4:	f7ff ffac 	bl	8008620 <sbrk_aligned>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d040      	beq.n	800874e <_malloc_r+0xea>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	19db      	adds	r3, r3, r7
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	6833      	ldr	r3, [r6, #0]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	d133      	bne.n	8008742 <_malloc_r+0xde>
 80086da:	9b00      	ldr	r3, [sp, #0]
 80086dc:	6033      	str	r3, [r6, #0]
 80086de:	e019      	b.n	8008714 <_malloc_r+0xb0>
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	dac9      	bge.n	8008678 <_malloc_r+0x14>
 80086e4:	230c      	movs	r3, #12
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	2000      	movs	r0, #0
 80086ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086ec:	6821      	ldr	r1, [r4, #0]
 80086ee:	1bc9      	subs	r1, r1, r7
 80086f0:	d420      	bmi.n	8008734 <_malloc_r+0xd0>
 80086f2:	290b      	cmp	r1, #11
 80086f4:	d90a      	bls.n	800870c <_malloc_r+0xa8>
 80086f6:	19e2      	adds	r2, r4, r7
 80086f8:	6027      	str	r7, [r4, #0]
 80086fa:	42a3      	cmp	r3, r4
 80086fc:	d104      	bne.n	8008708 <_malloc_r+0xa4>
 80086fe:	6032      	str	r2, [r6, #0]
 8008700:	6863      	ldr	r3, [r4, #4]
 8008702:	6011      	str	r1, [r2, #0]
 8008704:	6053      	str	r3, [r2, #4]
 8008706:	e005      	b.n	8008714 <_malloc_r+0xb0>
 8008708:	605a      	str	r2, [r3, #4]
 800870a:	e7f9      	b.n	8008700 <_malloc_r+0x9c>
 800870c:	6862      	ldr	r2, [r4, #4]
 800870e:	42a3      	cmp	r3, r4
 8008710:	d10e      	bne.n	8008730 <_malloc_r+0xcc>
 8008712:	6032      	str	r2, [r6, #0]
 8008714:	0028      	movs	r0, r5
 8008716:	f000 f82d 	bl	8008774 <__malloc_unlock>
 800871a:	0020      	movs	r0, r4
 800871c:	2207      	movs	r2, #7
 800871e:	300b      	adds	r0, #11
 8008720:	1d23      	adds	r3, r4, #4
 8008722:	4390      	bics	r0, r2
 8008724:	1ac2      	subs	r2, r0, r3
 8008726:	4298      	cmp	r0, r3
 8008728:	d0df      	beq.n	80086ea <_malloc_r+0x86>
 800872a:	1a1b      	subs	r3, r3, r0
 800872c:	50a3      	str	r3, [r4, r2]
 800872e:	e7dc      	b.n	80086ea <_malloc_r+0x86>
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	e7ef      	b.n	8008714 <_malloc_r+0xb0>
 8008734:	0023      	movs	r3, r4
 8008736:	6864      	ldr	r4, [r4, #4]
 8008738:	e7a6      	b.n	8008688 <_malloc_r+0x24>
 800873a:	9c00      	ldr	r4, [sp, #0]
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	e7ad      	b.n	800869e <_malloc_r+0x3a>
 8008742:	001a      	movs	r2, r3
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	42a3      	cmp	r3, r4
 8008748:	d1fb      	bne.n	8008742 <_malloc_r+0xde>
 800874a:	2300      	movs	r3, #0
 800874c:	e7da      	b.n	8008704 <_malloc_r+0xa0>
 800874e:	230c      	movs	r3, #12
 8008750:	0028      	movs	r0, r5
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	f000 f80e 	bl	8008774 <__malloc_unlock>
 8008758:	e7c6      	b.n	80086e8 <_malloc_r+0x84>
 800875a:	6007      	str	r7, [r0, #0]
 800875c:	e7da      	b.n	8008714 <_malloc_r+0xb0>
 800875e:	46c0      	nop			@ (mov r8, r8)
 8008760:	20000850 	.word	0x20000850

08008764 <__malloc_lock>:
 8008764:	b510      	push	{r4, lr}
 8008766:	4802      	ldr	r0, [pc, #8]	@ (8008770 <__malloc_lock+0xc>)
 8008768:	f7ff ff07 	bl	800857a <__retarget_lock_acquire_recursive>
 800876c:	bd10      	pop	{r4, pc}
 800876e:	46c0      	nop			@ (mov r8, r8)
 8008770:	20000848 	.word	0x20000848

08008774 <__malloc_unlock>:
 8008774:	b510      	push	{r4, lr}
 8008776:	4802      	ldr	r0, [pc, #8]	@ (8008780 <__malloc_unlock+0xc>)
 8008778:	f7ff ff00 	bl	800857c <__retarget_lock_release_recursive>
 800877c:	bd10      	pop	{r4, pc}
 800877e:	46c0      	nop			@ (mov r8, r8)
 8008780:	20000848 	.word	0x20000848

08008784 <__sfputc_r>:
 8008784:	6893      	ldr	r3, [r2, #8]
 8008786:	b510      	push	{r4, lr}
 8008788:	3b01      	subs	r3, #1
 800878a:	6093      	str	r3, [r2, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	da04      	bge.n	800879a <__sfputc_r+0x16>
 8008790:	6994      	ldr	r4, [r2, #24]
 8008792:	42a3      	cmp	r3, r4
 8008794:	db07      	blt.n	80087a6 <__sfputc_r+0x22>
 8008796:	290a      	cmp	r1, #10
 8008798:	d005      	beq.n	80087a6 <__sfputc_r+0x22>
 800879a:	6813      	ldr	r3, [r2, #0]
 800879c:	1c58      	adds	r0, r3, #1
 800879e:	6010      	str	r0, [r2, #0]
 80087a0:	7019      	strb	r1, [r3, #0]
 80087a2:	0008      	movs	r0, r1
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	f000 fb5e 	bl	8008e66 <__swbuf_r>
 80087aa:	0001      	movs	r1, r0
 80087ac:	e7f9      	b.n	80087a2 <__sfputc_r+0x1e>

080087ae <__sfputs_r>:
 80087ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b0:	0006      	movs	r6, r0
 80087b2:	000f      	movs	r7, r1
 80087b4:	0014      	movs	r4, r2
 80087b6:	18d5      	adds	r5, r2, r3
 80087b8:	42ac      	cmp	r4, r5
 80087ba:	d101      	bne.n	80087c0 <__sfputs_r+0x12>
 80087bc:	2000      	movs	r0, #0
 80087be:	e007      	b.n	80087d0 <__sfputs_r+0x22>
 80087c0:	7821      	ldrb	r1, [r4, #0]
 80087c2:	003a      	movs	r2, r7
 80087c4:	0030      	movs	r0, r6
 80087c6:	f7ff ffdd 	bl	8008784 <__sfputc_r>
 80087ca:	3401      	adds	r4, #1
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d1f3      	bne.n	80087b8 <__sfputs_r+0xa>
 80087d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087d4 <_vfiprintf_r>:
 80087d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d6:	b0a1      	sub	sp, #132	@ 0x84
 80087d8:	000f      	movs	r7, r1
 80087da:	0015      	movs	r5, r2
 80087dc:	001e      	movs	r6, r3
 80087de:	9003      	str	r0, [sp, #12]
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d004      	beq.n	80087ee <_vfiprintf_r+0x1a>
 80087e4:	6a03      	ldr	r3, [r0, #32]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <_vfiprintf_r+0x1a>
 80087ea:	f7ff fdb5 	bl	8008358 <__sinit>
 80087ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087f0:	07db      	lsls	r3, r3, #31
 80087f2:	d405      	bmi.n	8008800 <_vfiprintf_r+0x2c>
 80087f4:	89bb      	ldrh	r3, [r7, #12]
 80087f6:	059b      	lsls	r3, r3, #22
 80087f8:	d402      	bmi.n	8008800 <_vfiprintf_r+0x2c>
 80087fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80087fc:	f7ff febd 	bl	800857a <__retarget_lock_acquire_recursive>
 8008800:	89bb      	ldrh	r3, [r7, #12]
 8008802:	071b      	lsls	r3, r3, #28
 8008804:	d502      	bpl.n	800880c <_vfiprintf_r+0x38>
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d113      	bne.n	8008834 <_vfiprintf_r+0x60>
 800880c:	0039      	movs	r1, r7
 800880e:	9803      	ldr	r0, [sp, #12]
 8008810:	f000 fb6c 	bl	8008eec <__swsetup_r>
 8008814:	2800      	cmp	r0, #0
 8008816:	d00d      	beq.n	8008834 <_vfiprintf_r+0x60>
 8008818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800881a:	07db      	lsls	r3, r3, #31
 800881c:	d503      	bpl.n	8008826 <_vfiprintf_r+0x52>
 800881e:	2001      	movs	r0, #1
 8008820:	4240      	negs	r0, r0
 8008822:	b021      	add	sp, #132	@ 0x84
 8008824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008826:	89bb      	ldrh	r3, [r7, #12]
 8008828:	059b      	lsls	r3, r3, #22
 800882a:	d4f8      	bmi.n	800881e <_vfiprintf_r+0x4a>
 800882c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800882e:	f7ff fea5 	bl	800857c <__retarget_lock_release_recursive>
 8008832:	e7f4      	b.n	800881e <_vfiprintf_r+0x4a>
 8008834:	2300      	movs	r3, #0
 8008836:	ac08      	add	r4, sp, #32
 8008838:	6163      	str	r3, [r4, #20]
 800883a:	3320      	adds	r3, #32
 800883c:	7663      	strb	r3, [r4, #25]
 800883e:	3310      	adds	r3, #16
 8008840:	76a3      	strb	r3, [r4, #26]
 8008842:	9607      	str	r6, [sp, #28]
 8008844:	002e      	movs	r6, r5
 8008846:	7833      	ldrb	r3, [r6, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <_vfiprintf_r+0x7c>
 800884c:	2b25      	cmp	r3, #37	@ 0x25
 800884e:	d148      	bne.n	80088e2 <_vfiprintf_r+0x10e>
 8008850:	1b73      	subs	r3, r6, r5
 8008852:	9305      	str	r3, [sp, #20]
 8008854:	42ae      	cmp	r6, r5
 8008856:	d00b      	beq.n	8008870 <_vfiprintf_r+0x9c>
 8008858:	002a      	movs	r2, r5
 800885a:	0039      	movs	r1, r7
 800885c:	9803      	ldr	r0, [sp, #12]
 800885e:	f7ff ffa6 	bl	80087ae <__sfputs_r>
 8008862:	3001      	adds	r0, #1
 8008864:	d100      	bne.n	8008868 <_vfiprintf_r+0x94>
 8008866:	e0ae      	b.n	80089c6 <_vfiprintf_r+0x1f2>
 8008868:	6963      	ldr	r3, [r4, #20]
 800886a:	9a05      	ldr	r2, [sp, #20]
 800886c:	189b      	adds	r3, r3, r2
 800886e:	6163      	str	r3, [r4, #20]
 8008870:	7833      	ldrb	r3, [r6, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d100      	bne.n	8008878 <_vfiprintf_r+0xa4>
 8008876:	e0a6      	b.n	80089c6 <_vfiprintf_r+0x1f2>
 8008878:	2201      	movs	r2, #1
 800887a:	2300      	movs	r3, #0
 800887c:	4252      	negs	r2, r2
 800887e:	6062      	str	r2, [r4, #4]
 8008880:	a904      	add	r1, sp, #16
 8008882:	3254      	adds	r2, #84	@ 0x54
 8008884:	1852      	adds	r2, r2, r1
 8008886:	1c75      	adds	r5, r6, #1
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	60e3      	str	r3, [r4, #12]
 800888c:	60a3      	str	r3, [r4, #8]
 800888e:	7013      	strb	r3, [r2, #0]
 8008890:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008892:	4b59      	ldr	r3, [pc, #356]	@ (80089f8 <_vfiprintf_r+0x224>)
 8008894:	2205      	movs	r2, #5
 8008896:	0018      	movs	r0, r3
 8008898:	7829      	ldrb	r1, [r5, #0]
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	f000 fbe0 	bl	8009060 <memchr>
 80088a0:	1c6e      	adds	r6, r5, #1
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d11f      	bne.n	80088e6 <_vfiprintf_r+0x112>
 80088a6:	6822      	ldr	r2, [r4, #0]
 80088a8:	06d3      	lsls	r3, r2, #27
 80088aa:	d504      	bpl.n	80088b6 <_vfiprintf_r+0xe2>
 80088ac:	2353      	movs	r3, #83	@ 0x53
 80088ae:	a904      	add	r1, sp, #16
 80088b0:	185b      	adds	r3, r3, r1
 80088b2:	2120      	movs	r1, #32
 80088b4:	7019      	strb	r1, [r3, #0]
 80088b6:	0713      	lsls	r3, r2, #28
 80088b8:	d504      	bpl.n	80088c4 <_vfiprintf_r+0xf0>
 80088ba:	2353      	movs	r3, #83	@ 0x53
 80088bc:	a904      	add	r1, sp, #16
 80088be:	185b      	adds	r3, r3, r1
 80088c0:	212b      	movs	r1, #43	@ 0x2b
 80088c2:	7019      	strb	r1, [r3, #0]
 80088c4:	782b      	ldrb	r3, [r5, #0]
 80088c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c8:	d016      	beq.n	80088f8 <_vfiprintf_r+0x124>
 80088ca:	002e      	movs	r6, r5
 80088cc:	2100      	movs	r1, #0
 80088ce:	200a      	movs	r0, #10
 80088d0:	68e3      	ldr	r3, [r4, #12]
 80088d2:	7832      	ldrb	r2, [r6, #0]
 80088d4:	1c75      	adds	r5, r6, #1
 80088d6:	3a30      	subs	r2, #48	@ 0x30
 80088d8:	2a09      	cmp	r2, #9
 80088da:	d950      	bls.n	800897e <_vfiprintf_r+0x1aa>
 80088dc:	2900      	cmp	r1, #0
 80088de:	d111      	bne.n	8008904 <_vfiprintf_r+0x130>
 80088e0:	e017      	b.n	8008912 <_vfiprintf_r+0x13e>
 80088e2:	3601      	adds	r6, #1
 80088e4:	e7af      	b.n	8008846 <_vfiprintf_r+0x72>
 80088e6:	9b05      	ldr	r3, [sp, #20]
 80088e8:	6822      	ldr	r2, [r4, #0]
 80088ea:	1ac0      	subs	r0, r0, r3
 80088ec:	2301      	movs	r3, #1
 80088ee:	4083      	lsls	r3, r0
 80088f0:	4313      	orrs	r3, r2
 80088f2:	0035      	movs	r5, r6
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	e7cc      	b.n	8008892 <_vfiprintf_r+0xbe>
 80088f8:	9b07      	ldr	r3, [sp, #28]
 80088fa:	1d19      	adds	r1, r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	9107      	str	r1, [sp, #28]
 8008900:	2b00      	cmp	r3, #0
 8008902:	db01      	blt.n	8008908 <_vfiprintf_r+0x134>
 8008904:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008906:	e004      	b.n	8008912 <_vfiprintf_r+0x13e>
 8008908:	425b      	negs	r3, r3
 800890a:	60e3      	str	r3, [r4, #12]
 800890c:	2302      	movs	r3, #2
 800890e:	4313      	orrs	r3, r2
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	7833      	ldrb	r3, [r6, #0]
 8008914:	2b2e      	cmp	r3, #46	@ 0x2e
 8008916:	d10c      	bne.n	8008932 <_vfiprintf_r+0x15e>
 8008918:	7873      	ldrb	r3, [r6, #1]
 800891a:	2b2a      	cmp	r3, #42	@ 0x2a
 800891c:	d134      	bne.n	8008988 <_vfiprintf_r+0x1b4>
 800891e:	9b07      	ldr	r3, [sp, #28]
 8008920:	3602      	adds	r6, #2
 8008922:	1d1a      	adds	r2, r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	9207      	str	r2, [sp, #28]
 8008928:	2b00      	cmp	r3, #0
 800892a:	da01      	bge.n	8008930 <_vfiprintf_r+0x15c>
 800892c:	2301      	movs	r3, #1
 800892e:	425b      	negs	r3, r3
 8008930:	9309      	str	r3, [sp, #36]	@ 0x24
 8008932:	4d32      	ldr	r5, [pc, #200]	@ (80089fc <_vfiprintf_r+0x228>)
 8008934:	2203      	movs	r2, #3
 8008936:	0028      	movs	r0, r5
 8008938:	7831      	ldrb	r1, [r6, #0]
 800893a:	f000 fb91 	bl	8009060 <memchr>
 800893e:	2800      	cmp	r0, #0
 8008940:	d006      	beq.n	8008950 <_vfiprintf_r+0x17c>
 8008942:	2340      	movs	r3, #64	@ 0x40
 8008944:	1b40      	subs	r0, r0, r5
 8008946:	4083      	lsls	r3, r0
 8008948:	6822      	ldr	r2, [r4, #0]
 800894a:	3601      	adds	r6, #1
 800894c:	4313      	orrs	r3, r2
 800894e:	6023      	str	r3, [r4, #0]
 8008950:	7831      	ldrb	r1, [r6, #0]
 8008952:	2206      	movs	r2, #6
 8008954:	482a      	ldr	r0, [pc, #168]	@ (8008a00 <_vfiprintf_r+0x22c>)
 8008956:	1c75      	adds	r5, r6, #1
 8008958:	7621      	strb	r1, [r4, #24]
 800895a:	f000 fb81 	bl	8009060 <memchr>
 800895e:	2800      	cmp	r0, #0
 8008960:	d040      	beq.n	80089e4 <_vfiprintf_r+0x210>
 8008962:	4b28      	ldr	r3, [pc, #160]	@ (8008a04 <_vfiprintf_r+0x230>)
 8008964:	2b00      	cmp	r3, #0
 8008966:	d122      	bne.n	80089ae <_vfiprintf_r+0x1da>
 8008968:	2207      	movs	r2, #7
 800896a:	9b07      	ldr	r3, [sp, #28]
 800896c:	3307      	adds	r3, #7
 800896e:	4393      	bics	r3, r2
 8008970:	3308      	adds	r3, #8
 8008972:	9307      	str	r3, [sp, #28]
 8008974:	6963      	ldr	r3, [r4, #20]
 8008976:	9a04      	ldr	r2, [sp, #16]
 8008978:	189b      	adds	r3, r3, r2
 800897a:	6163      	str	r3, [r4, #20]
 800897c:	e762      	b.n	8008844 <_vfiprintf_r+0x70>
 800897e:	4343      	muls	r3, r0
 8008980:	002e      	movs	r6, r5
 8008982:	2101      	movs	r1, #1
 8008984:	189b      	adds	r3, r3, r2
 8008986:	e7a4      	b.n	80088d2 <_vfiprintf_r+0xfe>
 8008988:	2300      	movs	r3, #0
 800898a:	200a      	movs	r0, #10
 800898c:	0019      	movs	r1, r3
 800898e:	3601      	adds	r6, #1
 8008990:	6063      	str	r3, [r4, #4]
 8008992:	7832      	ldrb	r2, [r6, #0]
 8008994:	1c75      	adds	r5, r6, #1
 8008996:	3a30      	subs	r2, #48	@ 0x30
 8008998:	2a09      	cmp	r2, #9
 800899a:	d903      	bls.n	80089a4 <_vfiprintf_r+0x1d0>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0c8      	beq.n	8008932 <_vfiprintf_r+0x15e>
 80089a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80089a2:	e7c6      	b.n	8008932 <_vfiprintf_r+0x15e>
 80089a4:	4341      	muls	r1, r0
 80089a6:	002e      	movs	r6, r5
 80089a8:	2301      	movs	r3, #1
 80089aa:	1889      	adds	r1, r1, r2
 80089ac:	e7f1      	b.n	8008992 <_vfiprintf_r+0x1be>
 80089ae:	aa07      	add	r2, sp, #28
 80089b0:	9200      	str	r2, [sp, #0]
 80089b2:	0021      	movs	r1, r4
 80089b4:	003a      	movs	r2, r7
 80089b6:	4b14      	ldr	r3, [pc, #80]	@ (8008a08 <_vfiprintf_r+0x234>)
 80089b8:	9803      	ldr	r0, [sp, #12]
 80089ba:	e000      	b.n	80089be <_vfiprintf_r+0x1ea>
 80089bc:	bf00      	nop
 80089be:	9004      	str	r0, [sp, #16]
 80089c0:	9b04      	ldr	r3, [sp, #16]
 80089c2:	3301      	adds	r3, #1
 80089c4:	d1d6      	bne.n	8008974 <_vfiprintf_r+0x1a0>
 80089c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089c8:	07db      	lsls	r3, r3, #31
 80089ca:	d405      	bmi.n	80089d8 <_vfiprintf_r+0x204>
 80089cc:	89bb      	ldrh	r3, [r7, #12]
 80089ce:	059b      	lsls	r3, r3, #22
 80089d0:	d402      	bmi.n	80089d8 <_vfiprintf_r+0x204>
 80089d2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80089d4:	f7ff fdd2 	bl	800857c <__retarget_lock_release_recursive>
 80089d8:	89bb      	ldrh	r3, [r7, #12]
 80089da:	065b      	lsls	r3, r3, #25
 80089dc:	d500      	bpl.n	80089e0 <_vfiprintf_r+0x20c>
 80089de:	e71e      	b.n	800881e <_vfiprintf_r+0x4a>
 80089e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80089e2:	e71e      	b.n	8008822 <_vfiprintf_r+0x4e>
 80089e4:	aa07      	add	r2, sp, #28
 80089e6:	9200      	str	r2, [sp, #0]
 80089e8:	0021      	movs	r1, r4
 80089ea:	003a      	movs	r2, r7
 80089ec:	4b06      	ldr	r3, [pc, #24]	@ (8008a08 <_vfiprintf_r+0x234>)
 80089ee:	9803      	ldr	r0, [sp, #12]
 80089f0:	f000 f87c 	bl	8008aec <_printf_i>
 80089f4:	e7e3      	b.n	80089be <_vfiprintf_r+0x1ea>
 80089f6:	46c0      	nop			@ (mov r8, r8)
 80089f8:	0800935c 	.word	0x0800935c
 80089fc:	08009362 	.word	0x08009362
 8008a00:	08009366 	.word	0x08009366
 8008a04:	00000000 	.word	0x00000000
 8008a08:	080087af 	.word	0x080087af

08008a0c <_printf_common>:
 8008a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a0e:	0016      	movs	r6, r2
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	688a      	ldr	r2, [r1, #8]
 8008a14:	690b      	ldr	r3, [r1, #16]
 8008a16:	000c      	movs	r4, r1
 8008a18:	9000      	str	r0, [sp, #0]
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	da00      	bge.n	8008a20 <_printf_common+0x14>
 8008a1e:	0013      	movs	r3, r2
 8008a20:	0022      	movs	r2, r4
 8008a22:	6033      	str	r3, [r6, #0]
 8008a24:	3243      	adds	r2, #67	@ 0x43
 8008a26:	7812      	ldrb	r2, [r2, #0]
 8008a28:	2a00      	cmp	r2, #0
 8008a2a:	d001      	beq.n	8008a30 <_printf_common+0x24>
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	6033      	str	r3, [r6, #0]
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	069b      	lsls	r3, r3, #26
 8008a34:	d502      	bpl.n	8008a3c <_printf_common+0x30>
 8008a36:	6833      	ldr	r3, [r6, #0]
 8008a38:	3302      	adds	r3, #2
 8008a3a:	6033      	str	r3, [r6, #0]
 8008a3c:	6822      	ldr	r2, [r4, #0]
 8008a3e:	2306      	movs	r3, #6
 8008a40:	0015      	movs	r5, r2
 8008a42:	401d      	ands	r5, r3
 8008a44:	421a      	tst	r2, r3
 8008a46:	d027      	beq.n	8008a98 <_printf_common+0x8c>
 8008a48:	0023      	movs	r3, r4
 8008a4a:	3343      	adds	r3, #67	@ 0x43
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	1e5a      	subs	r2, r3, #1
 8008a50:	4193      	sbcs	r3, r2
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	0692      	lsls	r2, r2, #26
 8008a56:	d430      	bmi.n	8008aba <_printf_common+0xae>
 8008a58:	0022      	movs	r2, r4
 8008a5a:	9901      	ldr	r1, [sp, #4]
 8008a5c:	9800      	ldr	r0, [sp, #0]
 8008a5e:	9d08      	ldr	r5, [sp, #32]
 8008a60:	3243      	adds	r2, #67	@ 0x43
 8008a62:	47a8      	blx	r5
 8008a64:	3001      	adds	r0, #1
 8008a66:	d025      	beq.n	8008ab4 <_printf_common+0xa8>
 8008a68:	2206      	movs	r2, #6
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	2500      	movs	r5, #0
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d105      	bne.n	8008a80 <_printf_common+0x74>
 8008a74:	6833      	ldr	r3, [r6, #0]
 8008a76:	68e5      	ldr	r5, [r4, #12]
 8008a78:	1aed      	subs	r5, r5, r3
 8008a7a:	43eb      	mvns	r3, r5
 8008a7c:	17db      	asrs	r3, r3, #31
 8008a7e:	401d      	ands	r5, r3
 8008a80:	68a3      	ldr	r3, [r4, #8]
 8008a82:	6922      	ldr	r2, [r4, #16]
 8008a84:	4293      	cmp	r3, r2
 8008a86:	dd01      	ble.n	8008a8c <_printf_common+0x80>
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	18ed      	adds	r5, r5, r3
 8008a8c:	2600      	movs	r6, #0
 8008a8e:	42b5      	cmp	r5, r6
 8008a90:	d120      	bne.n	8008ad4 <_printf_common+0xc8>
 8008a92:	2000      	movs	r0, #0
 8008a94:	e010      	b.n	8008ab8 <_printf_common+0xac>
 8008a96:	3501      	adds	r5, #1
 8008a98:	68e3      	ldr	r3, [r4, #12]
 8008a9a:	6832      	ldr	r2, [r6, #0]
 8008a9c:	1a9b      	subs	r3, r3, r2
 8008a9e:	42ab      	cmp	r3, r5
 8008aa0:	ddd2      	ble.n	8008a48 <_printf_common+0x3c>
 8008aa2:	0022      	movs	r2, r4
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	9901      	ldr	r1, [sp, #4]
 8008aa8:	9800      	ldr	r0, [sp, #0]
 8008aaa:	9f08      	ldr	r7, [sp, #32]
 8008aac:	3219      	adds	r2, #25
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d1f0      	bne.n	8008a96 <_printf_common+0x8a>
 8008ab4:	2001      	movs	r0, #1
 8008ab6:	4240      	negs	r0, r0
 8008ab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008aba:	2030      	movs	r0, #48	@ 0x30
 8008abc:	18e1      	adds	r1, r4, r3
 8008abe:	3143      	adds	r1, #67	@ 0x43
 8008ac0:	7008      	strb	r0, [r1, #0]
 8008ac2:	0021      	movs	r1, r4
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	3145      	adds	r1, #69	@ 0x45
 8008ac8:	7809      	ldrb	r1, [r1, #0]
 8008aca:	18a2      	adds	r2, r4, r2
 8008acc:	3243      	adds	r2, #67	@ 0x43
 8008ace:	3302      	adds	r3, #2
 8008ad0:	7011      	strb	r1, [r2, #0]
 8008ad2:	e7c1      	b.n	8008a58 <_printf_common+0x4c>
 8008ad4:	0022      	movs	r2, r4
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	9901      	ldr	r1, [sp, #4]
 8008ada:	9800      	ldr	r0, [sp, #0]
 8008adc:	9f08      	ldr	r7, [sp, #32]
 8008ade:	321a      	adds	r2, #26
 8008ae0:	47b8      	blx	r7
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	d0e6      	beq.n	8008ab4 <_printf_common+0xa8>
 8008ae6:	3601      	adds	r6, #1
 8008ae8:	e7d1      	b.n	8008a8e <_printf_common+0x82>
	...

08008aec <_printf_i>:
 8008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aee:	b08b      	sub	sp, #44	@ 0x2c
 8008af0:	9206      	str	r2, [sp, #24]
 8008af2:	000a      	movs	r2, r1
 8008af4:	3243      	adds	r2, #67	@ 0x43
 8008af6:	9307      	str	r3, [sp, #28]
 8008af8:	9005      	str	r0, [sp, #20]
 8008afa:	9203      	str	r2, [sp, #12]
 8008afc:	7e0a      	ldrb	r2, [r1, #24]
 8008afe:	000c      	movs	r4, r1
 8008b00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b02:	2a78      	cmp	r2, #120	@ 0x78
 8008b04:	d809      	bhi.n	8008b1a <_printf_i+0x2e>
 8008b06:	2a62      	cmp	r2, #98	@ 0x62
 8008b08:	d80b      	bhi.n	8008b22 <_printf_i+0x36>
 8008b0a:	2a00      	cmp	r2, #0
 8008b0c:	d100      	bne.n	8008b10 <_printf_i+0x24>
 8008b0e:	e0ba      	b.n	8008c86 <_printf_i+0x19a>
 8008b10:	497a      	ldr	r1, [pc, #488]	@ (8008cfc <_printf_i+0x210>)
 8008b12:	9104      	str	r1, [sp, #16]
 8008b14:	2a58      	cmp	r2, #88	@ 0x58
 8008b16:	d100      	bne.n	8008b1a <_printf_i+0x2e>
 8008b18:	e08e      	b.n	8008c38 <_printf_i+0x14c>
 8008b1a:	0025      	movs	r5, r4
 8008b1c:	3542      	adds	r5, #66	@ 0x42
 8008b1e:	702a      	strb	r2, [r5, #0]
 8008b20:	e022      	b.n	8008b68 <_printf_i+0x7c>
 8008b22:	0010      	movs	r0, r2
 8008b24:	3863      	subs	r0, #99	@ 0x63
 8008b26:	2815      	cmp	r0, #21
 8008b28:	d8f7      	bhi.n	8008b1a <_printf_i+0x2e>
 8008b2a:	f7f7 faeb 	bl	8000104 <__gnu_thumb1_case_shi>
 8008b2e:	0016      	.short	0x0016
 8008b30:	fff6001f 	.word	0xfff6001f
 8008b34:	fff6fff6 	.word	0xfff6fff6
 8008b38:	001ffff6 	.word	0x001ffff6
 8008b3c:	fff6fff6 	.word	0xfff6fff6
 8008b40:	fff6fff6 	.word	0xfff6fff6
 8008b44:	0036009f 	.word	0x0036009f
 8008b48:	fff6007e 	.word	0xfff6007e
 8008b4c:	00b0fff6 	.word	0x00b0fff6
 8008b50:	0036fff6 	.word	0x0036fff6
 8008b54:	fff6fff6 	.word	0xfff6fff6
 8008b58:	0082      	.short	0x0082
 8008b5a:	0025      	movs	r5, r4
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	3542      	adds	r5, #66	@ 0x42
 8008b60:	1d11      	adds	r1, r2, #4
 8008b62:	6019      	str	r1, [r3, #0]
 8008b64:	6813      	ldr	r3, [r2, #0]
 8008b66:	702b      	strb	r3, [r5, #0]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e09e      	b.n	8008caa <_printf_i+0x1be>
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	6809      	ldr	r1, [r1, #0]
 8008b70:	1d02      	adds	r2, r0, #4
 8008b72:	060d      	lsls	r5, r1, #24
 8008b74:	d50b      	bpl.n	8008b8e <_printf_i+0xa2>
 8008b76:	6806      	ldr	r6, [r0, #0]
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	da03      	bge.n	8008b86 <_printf_i+0x9a>
 8008b7e:	232d      	movs	r3, #45	@ 0x2d
 8008b80:	9a03      	ldr	r2, [sp, #12]
 8008b82:	4276      	negs	r6, r6
 8008b84:	7013      	strb	r3, [r2, #0]
 8008b86:	4b5d      	ldr	r3, [pc, #372]	@ (8008cfc <_printf_i+0x210>)
 8008b88:	270a      	movs	r7, #10
 8008b8a:	9304      	str	r3, [sp, #16]
 8008b8c:	e018      	b.n	8008bc0 <_printf_i+0xd4>
 8008b8e:	6806      	ldr	r6, [r0, #0]
 8008b90:	601a      	str	r2, [r3, #0]
 8008b92:	0649      	lsls	r1, r1, #25
 8008b94:	d5f1      	bpl.n	8008b7a <_printf_i+0x8e>
 8008b96:	b236      	sxth	r6, r6
 8008b98:	e7ef      	b.n	8008b7a <_printf_i+0x8e>
 8008b9a:	6808      	ldr	r0, [r1, #0]
 8008b9c:	6819      	ldr	r1, [r3, #0]
 8008b9e:	c940      	ldmia	r1!, {r6}
 8008ba0:	0605      	lsls	r5, r0, #24
 8008ba2:	d402      	bmi.n	8008baa <_printf_i+0xbe>
 8008ba4:	0640      	lsls	r0, r0, #25
 8008ba6:	d500      	bpl.n	8008baa <_printf_i+0xbe>
 8008ba8:	b2b6      	uxth	r6, r6
 8008baa:	6019      	str	r1, [r3, #0]
 8008bac:	4b53      	ldr	r3, [pc, #332]	@ (8008cfc <_printf_i+0x210>)
 8008bae:	270a      	movs	r7, #10
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	2a6f      	cmp	r2, #111	@ 0x6f
 8008bb4:	d100      	bne.n	8008bb8 <_printf_i+0xcc>
 8008bb6:	3f02      	subs	r7, #2
 8008bb8:	0023      	movs	r3, r4
 8008bba:	2200      	movs	r2, #0
 8008bbc:	3343      	adds	r3, #67	@ 0x43
 8008bbe:	701a      	strb	r2, [r3, #0]
 8008bc0:	6863      	ldr	r3, [r4, #4]
 8008bc2:	60a3      	str	r3, [r4, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	db06      	blt.n	8008bd6 <_printf_i+0xea>
 8008bc8:	2104      	movs	r1, #4
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	9d03      	ldr	r5, [sp, #12]
 8008bce:	438a      	bics	r2, r1
 8008bd0:	6022      	str	r2, [r4, #0]
 8008bd2:	4333      	orrs	r3, r6
 8008bd4:	d00c      	beq.n	8008bf0 <_printf_i+0x104>
 8008bd6:	9d03      	ldr	r5, [sp, #12]
 8008bd8:	0030      	movs	r0, r6
 8008bda:	0039      	movs	r1, r7
 8008bdc:	f7f7 fb22 	bl	8000224 <__aeabi_uidivmod>
 8008be0:	9b04      	ldr	r3, [sp, #16]
 8008be2:	3d01      	subs	r5, #1
 8008be4:	5c5b      	ldrb	r3, [r3, r1]
 8008be6:	702b      	strb	r3, [r5, #0]
 8008be8:	0033      	movs	r3, r6
 8008bea:	0006      	movs	r6, r0
 8008bec:	429f      	cmp	r7, r3
 8008bee:	d9f3      	bls.n	8008bd8 <_printf_i+0xec>
 8008bf0:	2f08      	cmp	r7, #8
 8008bf2:	d109      	bne.n	8008c08 <_printf_i+0x11c>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	07db      	lsls	r3, r3, #31
 8008bf8:	d506      	bpl.n	8008c08 <_printf_i+0x11c>
 8008bfa:	6862      	ldr	r2, [r4, #4]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	dc02      	bgt.n	8008c08 <_printf_i+0x11c>
 8008c02:	2330      	movs	r3, #48	@ 0x30
 8008c04:	3d01      	subs	r5, #1
 8008c06:	702b      	strb	r3, [r5, #0]
 8008c08:	9b03      	ldr	r3, [sp, #12]
 8008c0a:	1b5b      	subs	r3, r3, r5
 8008c0c:	6123      	str	r3, [r4, #16]
 8008c0e:	9b07      	ldr	r3, [sp, #28]
 8008c10:	0021      	movs	r1, r4
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	9805      	ldr	r0, [sp, #20]
 8008c16:	9b06      	ldr	r3, [sp, #24]
 8008c18:	aa09      	add	r2, sp, #36	@ 0x24
 8008c1a:	f7ff fef7 	bl	8008a0c <_printf_common>
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d148      	bne.n	8008cb4 <_printf_i+0x1c8>
 8008c22:	2001      	movs	r0, #1
 8008c24:	4240      	negs	r0, r0
 8008c26:	b00b      	add	sp, #44	@ 0x2c
 8008c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	6809      	ldr	r1, [r1, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	6022      	str	r2, [r4, #0]
 8008c32:	2278      	movs	r2, #120	@ 0x78
 8008c34:	4932      	ldr	r1, [pc, #200]	@ (8008d00 <_printf_i+0x214>)
 8008c36:	9104      	str	r1, [sp, #16]
 8008c38:	0021      	movs	r1, r4
 8008c3a:	3145      	adds	r1, #69	@ 0x45
 8008c3c:	700a      	strb	r2, [r1, #0]
 8008c3e:	6819      	ldr	r1, [r3, #0]
 8008c40:	6822      	ldr	r2, [r4, #0]
 8008c42:	c940      	ldmia	r1!, {r6}
 8008c44:	0610      	lsls	r0, r2, #24
 8008c46:	d402      	bmi.n	8008c4e <_printf_i+0x162>
 8008c48:	0650      	lsls	r0, r2, #25
 8008c4a:	d500      	bpl.n	8008c4e <_printf_i+0x162>
 8008c4c:	b2b6      	uxth	r6, r6
 8008c4e:	6019      	str	r1, [r3, #0]
 8008c50:	07d3      	lsls	r3, r2, #31
 8008c52:	d502      	bpl.n	8008c5a <_printf_i+0x16e>
 8008c54:	2320      	movs	r3, #32
 8008c56:	4313      	orrs	r3, r2
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	2e00      	cmp	r6, #0
 8008c5c:	d001      	beq.n	8008c62 <_printf_i+0x176>
 8008c5e:	2710      	movs	r7, #16
 8008c60:	e7aa      	b.n	8008bb8 <_printf_i+0xcc>
 8008c62:	2220      	movs	r2, #32
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	4393      	bics	r3, r2
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	e7f8      	b.n	8008c5e <_printf_i+0x172>
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	680d      	ldr	r5, [r1, #0]
 8008c70:	1d10      	adds	r0, r2, #4
 8008c72:	6949      	ldr	r1, [r1, #20]
 8008c74:	6018      	str	r0, [r3, #0]
 8008c76:	6813      	ldr	r3, [r2, #0]
 8008c78:	062e      	lsls	r6, r5, #24
 8008c7a:	d501      	bpl.n	8008c80 <_printf_i+0x194>
 8008c7c:	6019      	str	r1, [r3, #0]
 8008c7e:	e002      	b.n	8008c86 <_printf_i+0x19a>
 8008c80:	066d      	lsls	r5, r5, #25
 8008c82:	d5fb      	bpl.n	8008c7c <_printf_i+0x190>
 8008c84:	8019      	strh	r1, [r3, #0]
 8008c86:	2300      	movs	r3, #0
 8008c88:	9d03      	ldr	r5, [sp, #12]
 8008c8a:	6123      	str	r3, [r4, #16]
 8008c8c:	e7bf      	b.n	8008c0e <_printf_i+0x122>
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	1d11      	adds	r1, r2, #4
 8008c92:	6019      	str	r1, [r3, #0]
 8008c94:	6815      	ldr	r5, [r2, #0]
 8008c96:	2100      	movs	r1, #0
 8008c98:	0028      	movs	r0, r5
 8008c9a:	6862      	ldr	r2, [r4, #4]
 8008c9c:	f000 f9e0 	bl	8009060 <memchr>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d001      	beq.n	8008ca8 <_printf_i+0x1bc>
 8008ca4:	1b40      	subs	r0, r0, r5
 8008ca6:	6060      	str	r0, [r4, #4]
 8008ca8:	6863      	ldr	r3, [r4, #4]
 8008caa:	6123      	str	r3, [r4, #16]
 8008cac:	2300      	movs	r3, #0
 8008cae:	9a03      	ldr	r2, [sp, #12]
 8008cb0:	7013      	strb	r3, [r2, #0]
 8008cb2:	e7ac      	b.n	8008c0e <_printf_i+0x122>
 8008cb4:	002a      	movs	r2, r5
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	9906      	ldr	r1, [sp, #24]
 8008cba:	9805      	ldr	r0, [sp, #20]
 8008cbc:	9d07      	ldr	r5, [sp, #28]
 8008cbe:	47a8      	blx	r5
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d0ae      	beq.n	8008c22 <_printf_i+0x136>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	079b      	lsls	r3, r3, #30
 8008cc8:	d415      	bmi.n	8008cf6 <_printf_i+0x20a>
 8008cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ccc:	68e0      	ldr	r0, [r4, #12]
 8008cce:	4298      	cmp	r0, r3
 8008cd0:	daa9      	bge.n	8008c26 <_printf_i+0x13a>
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	e7a7      	b.n	8008c26 <_printf_i+0x13a>
 8008cd6:	0022      	movs	r2, r4
 8008cd8:	2301      	movs	r3, #1
 8008cda:	9906      	ldr	r1, [sp, #24]
 8008cdc:	9805      	ldr	r0, [sp, #20]
 8008cde:	9e07      	ldr	r6, [sp, #28]
 8008ce0:	3219      	adds	r2, #25
 8008ce2:	47b0      	blx	r6
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d09c      	beq.n	8008c22 <_printf_i+0x136>
 8008ce8:	3501      	adds	r5, #1
 8008cea:	68e3      	ldr	r3, [r4, #12]
 8008cec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cee:	1a9b      	subs	r3, r3, r2
 8008cf0:	42ab      	cmp	r3, r5
 8008cf2:	dcf0      	bgt.n	8008cd6 <_printf_i+0x1ea>
 8008cf4:	e7e9      	b.n	8008cca <_printf_i+0x1de>
 8008cf6:	2500      	movs	r5, #0
 8008cf8:	e7f7      	b.n	8008cea <_printf_i+0x1fe>
 8008cfa:	46c0      	nop			@ (mov r8, r8)
 8008cfc:	0800936d 	.word	0x0800936d
 8008d00:	0800937e 	.word	0x0800937e

08008d04 <__sflush_r>:
 8008d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d06:	220c      	movs	r2, #12
 8008d08:	5e8b      	ldrsh	r3, [r1, r2]
 8008d0a:	0005      	movs	r5, r0
 8008d0c:	000c      	movs	r4, r1
 8008d0e:	071a      	lsls	r2, r3, #28
 8008d10:	d456      	bmi.n	8008dc0 <__sflush_r+0xbc>
 8008d12:	684a      	ldr	r2, [r1, #4]
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	dc02      	bgt.n	8008d1e <__sflush_r+0x1a>
 8008d18:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008d1a:	2a00      	cmp	r2, #0
 8008d1c:	dd4e      	ble.n	8008dbc <__sflush_r+0xb8>
 8008d1e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008d20:	2f00      	cmp	r7, #0
 8008d22:	d04b      	beq.n	8008dbc <__sflush_r+0xb8>
 8008d24:	2200      	movs	r2, #0
 8008d26:	2080      	movs	r0, #128	@ 0x80
 8008d28:	682e      	ldr	r6, [r5, #0]
 8008d2a:	602a      	str	r2, [r5, #0]
 8008d2c:	001a      	movs	r2, r3
 8008d2e:	0140      	lsls	r0, r0, #5
 8008d30:	6a21      	ldr	r1, [r4, #32]
 8008d32:	4002      	ands	r2, r0
 8008d34:	4203      	tst	r3, r0
 8008d36:	d033      	beq.n	8008da0 <__sflush_r+0x9c>
 8008d38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	075b      	lsls	r3, r3, #29
 8008d3e:	d506      	bpl.n	8008d4e <__sflush_r+0x4a>
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	1ad2      	subs	r2, r2, r3
 8008d44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <__sflush_r+0x4a>
 8008d4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d4c:	1ad2      	subs	r2, r2, r3
 8008d4e:	2300      	movs	r3, #0
 8008d50:	0028      	movs	r0, r5
 8008d52:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008d54:	6a21      	ldr	r1, [r4, #32]
 8008d56:	47b8      	blx	r7
 8008d58:	89a2      	ldrh	r2, [r4, #12]
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	d106      	bne.n	8008d6c <__sflush_r+0x68>
 8008d5e:	6829      	ldr	r1, [r5, #0]
 8008d60:	291d      	cmp	r1, #29
 8008d62:	d846      	bhi.n	8008df2 <__sflush_r+0xee>
 8008d64:	4b29      	ldr	r3, [pc, #164]	@ (8008e0c <__sflush_r+0x108>)
 8008d66:	40cb      	lsrs	r3, r1
 8008d68:	07db      	lsls	r3, r3, #31
 8008d6a:	d542      	bpl.n	8008df2 <__sflush_r+0xee>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	6063      	str	r3, [r4, #4]
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	04d2      	lsls	r2, r2, #19
 8008d76:	d505      	bpl.n	8008d84 <__sflush_r+0x80>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <__sflush_r+0x7e>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d100      	bne.n	8008d84 <__sflush_r+0x80>
 8008d82:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d86:	602e      	str	r6, [r5, #0]
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	d017      	beq.n	8008dbc <__sflush_r+0xb8>
 8008d8c:	0023      	movs	r3, r4
 8008d8e:	3344      	adds	r3, #68	@ 0x44
 8008d90:	4299      	cmp	r1, r3
 8008d92:	d002      	beq.n	8008d9a <__sflush_r+0x96>
 8008d94:	0028      	movs	r0, r5
 8008d96:	f7ff fbf9 	bl	800858c <_free_r>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d9e:	e00d      	b.n	8008dbc <__sflush_r+0xb8>
 8008da0:	2301      	movs	r3, #1
 8008da2:	0028      	movs	r0, r5
 8008da4:	47b8      	blx	r7
 8008da6:	0002      	movs	r2, r0
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d1c6      	bne.n	8008d3a <__sflush_r+0x36>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0c3      	beq.n	8008d3a <__sflush_r+0x36>
 8008db2:	2b1d      	cmp	r3, #29
 8008db4:	d001      	beq.n	8008dba <__sflush_r+0xb6>
 8008db6:	2b16      	cmp	r3, #22
 8008db8:	d11a      	bne.n	8008df0 <__sflush_r+0xec>
 8008dba:	602e      	str	r6, [r5, #0]
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e01e      	b.n	8008dfe <__sflush_r+0xfa>
 8008dc0:	690e      	ldr	r6, [r1, #16]
 8008dc2:	2e00      	cmp	r6, #0
 8008dc4:	d0fa      	beq.n	8008dbc <__sflush_r+0xb8>
 8008dc6:	680f      	ldr	r7, [r1, #0]
 8008dc8:	600e      	str	r6, [r1, #0]
 8008dca:	1bba      	subs	r2, r7, r6
 8008dcc:	9201      	str	r2, [sp, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	079b      	lsls	r3, r3, #30
 8008dd2:	d100      	bne.n	8008dd6 <__sflush_r+0xd2>
 8008dd4:	694a      	ldr	r2, [r1, #20]
 8008dd6:	60a2      	str	r2, [r4, #8]
 8008dd8:	9b01      	ldr	r3, [sp, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	ddee      	ble.n	8008dbc <__sflush_r+0xb8>
 8008dde:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008de0:	0032      	movs	r2, r6
 8008de2:	001f      	movs	r7, r3
 8008de4:	0028      	movs	r0, r5
 8008de6:	9b01      	ldr	r3, [sp, #4]
 8008de8:	6a21      	ldr	r1, [r4, #32]
 8008dea:	47b8      	blx	r7
 8008dec:	2800      	cmp	r0, #0
 8008dee:	dc07      	bgt.n	8008e00 <__sflush_r+0xfc>
 8008df0:	89a2      	ldrh	r2, [r4, #12]
 8008df2:	2340      	movs	r3, #64	@ 0x40
 8008df4:	2001      	movs	r0, #1
 8008df6:	4313      	orrs	r3, r2
 8008df8:	b21b      	sxth	r3, r3
 8008dfa:	81a3      	strh	r3, [r4, #12]
 8008dfc:	4240      	negs	r0, r0
 8008dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e00:	9b01      	ldr	r3, [sp, #4]
 8008e02:	1836      	adds	r6, r6, r0
 8008e04:	1a1b      	subs	r3, r3, r0
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	e7e6      	b.n	8008dd8 <__sflush_r+0xd4>
 8008e0a:	46c0      	nop			@ (mov r8, r8)
 8008e0c:	20400001 	.word	0x20400001

08008e10 <_fflush_r>:
 8008e10:	690b      	ldr	r3, [r1, #16]
 8008e12:	b570      	push	{r4, r5, r6, lr}
 8008e14:	0005      	movs	r5, r0
 8008e16:	000c      	movs	r4, r1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <_fflush_r+0x12>
 8008e1c:	2500      	movs	r5, #0
 8008e1e:	0028      	movs	r0, r5
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d004      	beq.n	8008e30 <_fflush_r+0x20>
 8008e26:	6a03      	ldr	r3, [r0, #32]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <_fflush_r+0x20>
 8008e2c:	f7ff fa94 	bl	8008358 <__sinit>
 8008e30:	220c      	movs	r2, #12
 8008e32:	5ea3      	ldrsh	r3, [r4, r2]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d0f1      	beq.n	8008e1c <_fflush_r+0xc>
 8008e38:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e3a:	07d2      	lsls	r2, r2, #31
 8008e3c:	d404      	bmi.n	8008e48 <_fflush_r+0x38>
 8008e3e:	059b      	lsls	r3, r3, #22
 8008e40:	d402      	bmi.n	8008e48 <_fflush_r+0x38>
 8008e42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e44:	f7ff fb99 	bl	800857a <__retarget_lock_acquire_recursive>
 8008e48:	0028      	movs	r0, r5
 8008e4a:	0021      	movs	r1, r4
 8008e4c:	f7ff ff5a 	bl	8008d04 <__sflush_r>
 8008e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e52:	0005      	movs	r5, r0
 8008e54:	07db      	lsls	r3, r3, #31
 8008e56:	d4e2      	bmi.n	8008e1e <_fflush_r+0xe>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	059b      	lsls	r3, r3, #22
 8008e5c:	d4df      	bmi.n	8008e1e <_fflush_r+0xe>
 8008e5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e60:	f7ff fb8c 	bl	800857c <__retarget_lock_release_recursive>
 8008e64:	e7db      	b.n	8008e1e <_fflush_r+0xe>

08008e66 <__swbuf_r>:
 8008e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e68:	0006      	movs	r6, r0
 8008e6a:	000d      	movs	r5, r1
 8008e6c:	0014      	movs	r4, r2
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d004      	beq.n	8008e7c <__swbuf_r+0x16>
 8008e72:	6a03      	ldr	r3, [r0, #32]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <__swbuf_r+0x16>
 8008e78:	f7ff fa6e 	bl	8008358 <__sinit>
 8008e7c:	69a3      	ldr	r3, [r4, #24]
 8008e7e:	60a3      	str	r3, [r4, #8]
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	071b      	lsls	r3, r3, #28
 8008e84:	d502      	bpl.n	8008e8c <__swbuf_r+0x26>
 8008e86:	6923      	ldr	r3, [r4, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <__swbuf_r+0x3a>
 8008e8c:	0021      	movs	r1, r4
 8008e8e:	0030      	movs	r0, r6
 8008e90:	f000 f82c 	bl	8008eec <__swsetup_r>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d003      	beq.n	8008ea0 <__swbuf_r+0x3a>
 8008e98:	2501      	movs	r5, #1
 8008e9a:	426d      	negs	r5, r5
 8008e9c:	0028      	movs	r0, r5
 8008e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	6820      	ldr	r0, [r4, #0]
 8008ea4:	b2ef      	uxtb	r7, r5
 8008ea6:	1ac0      	subs	r0, r0, r3
 8008ea8:	6963      	ldr	r3, [r4, #20]
 8008eaa:	b2ed      	uxtb	r5, r5
 8008eac:	4283      	cmp	r3, r0
 8008eae:	dc05      	bgt.n	8008ebc <__swbuf_r+0x56>
 8008eb0:	0021      	movs	r1, r4
 8008eb2:	0030      	movs	r0, r6
 8008eb4:	f7ff ffac 	bl	8008e10 <_fflush_r>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1ed      	bne.n	8008e98 <__swbuf_r+0x32>
 8008ebc:	68a3      	ldr	r3, [r4, #8]
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	60a3      	str	r3, [r4, #8]
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	6022      	str	r2, [r4, #0]
 8008eca:	701f      	strb	r7, [r3, #0]
 8008ecc:	6963      	ldr	r3, [r4, #20]
 8008ece:	4283      	cmp	r3, r0
 8008ed0:	d004      	beq.n	8008edc <__swbuf_r+0x76>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	07db      	lsls	r3, r3, #31
 8008ed6:	d5e1      	bpl.n	8008e9c <__swbuf_r+0x36>
 8008ed8:	2d0a      	cmp	r5, #10
 8008eda:	d1df      	bne.n	8008e9c <__swbuf_r+0x36>
 8008edc:	0021      	movs	r1, r4
 8008ede:	0030      	movs	r0, r6
 8008ee0:	f7ff ff96 	bl	8008e10 <_fflush_r>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d0d9      	beq.n	8008e9c <__swbuf_r+0x36>
 8008ee8:	e7d6      	b.n	8008e98 <__swbuf_r+0x32>
	...

08008eec <__swsetup_r>:
 8008eec:	4b2d      	ldr	r3, [pc, #180]	@ (8008fa4 <__swsetup_r+0xb8>)
 8008eee:	b570      	push	{r4, r5, r6, lr}
 8008ef0:	0005      	movs	r5, r0
 8008ef2:	6818      	ldr	r0, [r3, #0]
 8008ef4:	000c      	movs	r4, r1
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d004      	beq.n	8008f04 <__swsetup_r+0x18>
 8008efa:	6a03      	ldr	r3, [r0, #32]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <__swsetup_r+0x18>
 8008f00:	f7ff fa2a 	bl	8008358 <__sinit>
 8008f04:	220c      	movs	r2, #12
 8008f06:	5ea3      	ldrsh	r3, [r4, r2]
 8008f08:	071a      	lsls	r2, r3, #28
 8008f0a:	d423      	bmi.n	8008f54 <__swsetup_r+0x68>
 8008f0c:	06da      	lsls	r2, r3, #27
 8008f0e:	d407      	bmi.n	8008f20 <__swsetup_r+0x34>
 8008f10:	2209      	movs	r2, #9
 8008f12:	602a      	str	r2, [r5, #0]
 8008f14:	2240      	movs	r2, #64	@ 0x40
 8008f16:	2001      	movs	r0, #1
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	4240      	negs	r0, r0
 8008f1e:	e03a      	b.n	8008f96 <__swsetup_r+0xaa>
 8008f20:	075b      	lsls	r3, r3, #29
 8008f22:	d513      	bpl.n	8008f4c <__swsetup_r+0x60>
 8008f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f26:	2900      	cmp	r1, #0
 8008f28:	d008      	beq.n	8008f3c <__swsetup_r+0x50>
 8008f2a:	0023      	movs	r3, r4
 8008f2c:	3344      	adds	r3, #68	@ 0x44
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	d002      	beq.n	8008f38 <__swsetup_r+0x4c>
 8008f32:	0028      	movs	r0, r5
 8008f34:	f7ff fb2a 	bl	800858c <_free_r>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f3c:	2224      	movs	r2, #36	@ 0x24
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	4393      	bics	r3, r2
 8008f42:	81a3      	strh	r3, [r4, #12]
 8008f44:	2300      	movs	r3, #0
 8008f46:	6063      	str	r3, [r4, #4]
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	6023      	str	r3, [r4, #0]
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	89a2      	ldrh	r2, [r4, #12]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	81a3      	strh	r3, [r4, #12]
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10b      	bne.n	8008f72 <__swsetup_r+0x86>
 8008f5a:	21a0      	movs	r1, #160	@ 0xa0
 8008f5c:	2280      	movs	r2, #128	@ 0x80
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	0089      	lsls	r1, r1, #2
 8008f62:	0092      	lsls	r2, r2, #2
 8008f64:	400b      	ands	r3, r1
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d003      	beq.n	8008f72 <__swsetup_r+0x86>
 8008f6a:	0021      	movs	r1, r4
 8008f6c:	0028      	movs	r0, r5
 8008f6e:	f000 f8ad 	bl	80090cc <__smakebuf_r>
 8008f72:	220c      	movs	r2, #12
 8008f74:	5ea3      	ldrsh	r3, [r4, r2]
 8008f76:	2101      	movs	r1, #1
 8008f78:	001a      	movs	r2, r3
 8008f7a:	400a      	ands	r2, r1
 8008f7c:	420b      	tst	r3, r1
 8008f7e:	d00b      	beq.n	8008f98 <__swsetup_r+0xac>
 8008f80:	2200      	movs	r2, #0
 8008f82:	60a2      	str	r2, [r4, #8]
 8008f84:	6962      	ldr	r2, [r4, #20]
 8008f86:	4252      	negs	r2, r2
 8008f88:	61a2      	str	r2, [r4, #24]
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	6922      	ldr	r2, [r4, #16]
 8008f8e:	4282      	cmp	r2, r0
 8008f90:	d101      	bne.n	8008f96 <__swsetup_r+0xaa>
 8008f92:	061a      	lsls	r2, r3, #24
 8008f94:	d4be      	bmi.n	8008f14 <__swsetup_r+0x28>
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	0799      	lsls	r1, r3, #30
 8008f9a:	d400      	bmi.n	8008f9e <__swsetup_r+0xb2>
 8008f9c:	6962      	ldr	r2, [r4, #20]
 8008f9e:	60a2      	str	r2, [r4, #8]
 8008fa0:	e7f3      	b.n	8008f8a <__swsetup_r+0x9e>
 8008fa2:	46c0      	nop			@ (mov r8, r8)
 8008fa4:	20000094 	.word	0x20000094

08008fa8 <_raise_r>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	0004      	movs	r4, r0
 8008fac:	000d      	movs	r5, r1
 8008fae:	291f      	cmp	r1, #31
 8008fb0:	d904      	bls.n	8008fbc <_raise_r+0x14>
 8008fb2:	2316      	movs	r3, #22
 8008fb4:	6003      	str	r3, [r0, #0]
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	4240      	negs	r0, r0
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d004      	beq.n	8008fcc <_raise_r+0x24>
 8008fc2:	008a      	lsls	r2, r1, #2
 8008fc4:	189b      	adds	r3, r3, r2
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	2a00      	cmp	r2, #0
 8008fca:	d108      	bne.n	8008fde <_raise_r+0x36>
 8008fcc:	0020      	movs	r0, r4
 8008fce:	f000 f831 	bl	8009034 <_getpid_r>
 8008fd2:	002a      	movs	r2, r5
 8008fd4:	0001      	movs	r1, r0
 8008fd6:	0020      	movs	r0, r4
 8008fd8:	f000 f81a 	bl	8009010 <_kill_r>
 8008fdc:	e7ed      	b.n	8008fba <_raise_r+0x12>
 8008fde:	2a01      	cmp	r2, #1
 8008fe0:	d009      	beq.n	8008ff6 <_raise_r+0x4e>
 8008fe2:	1c51      	adds	r1, r2, #1
 8008fe4:	d103      	bne.n	8008fee <_raise_r+0x46>
 8008fe6:	2316      	movs	r3, #22
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	2001      	movs	r0, #1
 8008fec:	e7e5      	b.n	8008fba <_raise_r+0x12>
 8008fee:	2100      	movs	r1, #0
 8008ff0:	0028      	movs	r0, r5
 8008ff2:	6019      	str	r1, [r3, #0]
 8008ff4:	4790      	blx	r2
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	e7df      	b.n	8008fba <_raise_r+0x12>
	...

08008ffc <raise>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	4b03      	ldr	r3, [pc, #12]	@ (800900c <raise+0x10>)
 8009000:	0001      	movs	r1, r0
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	f7ff ffd0 	bl	8008fa8 <_raise_r>
 8009008:	bd10      	pop	{r4, pc}
 800900a:	46c0      	nop			@ (mov r8, r8)
 800900c:	20000094 	.word	0x20000094

08009010 <_kill_r>:
 8009010:	2300      	movs	r3, #0
 8009012:	b570      	push	{r4, r5, r6, lr}
 8009014:	4d06      	ldr	r5, [pc, #24]	@ (8009030 <_kill_r+0x20>)
 8009016:	0004      	movs	r4, r0
 8009018:	0008      	movs	r0, r1
 800901a:	0011      	movs	r1, r2
 800901c:	602b      	str	r3, [r5, #0]
 800901e:	f7f9 fd1d 	bl	8002a5c <_kill>
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	d103      	bne.n	800902e <_kill_r+0x1e>
 8009026:	682b      	ldr	r3, [r5, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d000      	beq.n	800902e <_kill_r+0x1e>
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	20000844 	.word	0x20000844

08009034 <_getpid_r>:
 8009034:	b510      	push	{r4, lr}
 8009036:	f7f9 fd0b 	bl	8002a50 <_getpid>
 800903a:	bd10      	pop	{r4, pc}

0800903c <_sbrk_r>:
 800903c:	2300      	movs	r3, #0
 800903e:	b570      	push	{r4, r5, r6, lr}
 8009040:	4d06      	ldr	r5, [pc, #24]	@ (800905c <_sbrk_r+0x20>)
 8009042:	0004      	movs	r4, r0
 8009044:	0008      	movs	r0, r1
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	f7f9 fd8a 	bl	8002b60 <_sbrk>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d103      	bne.n	8009058 <_sbrk_r+0x1c>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d000      	beq.n	8009058 <_sbrk_r+0x1c>
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	bd70      	pop	{r4, r5, r6, pc}
 800905a:	46c0      	nop			@ (mov r8, r8)
 800905c:	20000844 	.word	0x20000844

08009060 <memchr>:
 8009060:	b2c9      	uxtb	r1, r1
 8009062:	1882      	adds	r2, r0, r2
 8009064:	4290      	cmp	r0, r2
 8009066:	d101      	bne.n	800906c <memchr+0xc>
 8009068:	2000      	movs	r0, #0
 800906a:	4770      	bx	lr
 800906c:	7803      	ldrb	r3, [r0, #0]
 800906e:	428b      	cmp	r3, r1
 8009070:	d0fb      	beq.n	800906a <memchr+0xa>
 8009072:	3001      	adds	r0, #1
 8009074:	e7f6      	b.n	8009064 <memchr+0x4>
	...

08009078 <__swhatbuf_r>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	000e      	movs	r6, r1
 800907c:	001d      	movs	r5, r3
 800907e:	230e      	movs	r3, #14
 8009080:	5ec9      	ldrsh	r1, [r1, r3]
 8009082:	0014      	movs	r4, r2
 8009084:	b096      	sub	sp, #88	@ 0x58
 8009086:	2900      	cmp	r1, #0
 8009088:	da0c      	bge.n	80090a4 <__swhatbuf_r+0x2c>
 800908a:	89b2      	ldrh	r2, [r6, #12]
 800908c:	2380      	movs	r3, #128	@ 0x80
 800908e:	0011      	movs	r1, r2
 8009090:	4019      	ands	r1, r3
 8009092:	421a      	tst	r2, r3
 8009094:	d114      	bne.n	80090c0 <__swhatbuf_r+0x48>
 8009096:	2380      	movs	r3, #128	@ 0x80
 8009098:	00db      	lsls	r3, r3, #3
 800909a:	2000      	movs	r0, #0
 800909c:	6029      	str	r1, [r5, #0]
 800909e:	6023      	str	r3, [r4, #0]
 80090a0:	b016      	add	sp, #88	@ 0x58
 80090a2:	bd70      	pop	{r4, r5, r6, pc}
 80090a4:	466a      	mov	r2, sp
 80090a6:	f000 f853 	bl	8009150 <_fstat_r>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	dbed      	blt.n	800908a <__swhatbuf_r+0x12>
 80090ae:	23f0      	movs	r3, #240	@ 0xf0
 80090b0:	9901      	ldr	r1, [sp, #4]
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	4019      	ands	r1, r3
 80090b6:	4b04      	ldr	r3, [pc, #16]	@ (80090c8 <__swhatbuf_r+0x50>)
 80090b8:	18c9      	adds	r1, r1, r3
 80090ba:	424b      	negs	r3, r1
 80090bc:	4159      	adcs	r1, r3
 80090be:	e7ea      	b.n	8009096 <__swhatbuf_r+0x1e>
 80090c0:	2100      	movs	r1, #0
 80090c2:	2340      	movs	r3, #64	@ 0x40
 80090c4:	e7e9      	b.n	800909a <__swhatbuf_r+0x22>
 80090c6:	46c0      	nop			@ (mov r8, r8)
 80090c8:	ffffe000 	.word	0xffffe000

080090cc <__smakebuf_r>:
 80090cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ce:	2602      	movs	r6, #2
 80090d0:	898b      	ldrh	r3, [r1, #12]
 80090d2:	0005      	movs	r5, r0
 80090d4:	000c      	movs	r4, r1
 80090d6:	b085      	sub	sp, #20
 80090d8:	4233      	tst	r3, r6
 80090da:	d007      	beq.n	80090ec <__smakebuf_r+0x20>
 80090dc:	0023      	movs	r3, r4
 80090de:	3347      	adds	r3, #71	@ 0x47
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	6123      	str	r3, [r4, #16]
 80090e4:	2301      	movs	r3, #1
 80090e6:	6163      	str	r3, [r4, #20]
 80090e8:	b005      	add	sp, #20
 80090ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ec:	ab03      	add	r3, sp, #12
 80090ee:	aa02      	add	r2, sp, #8
 80090f0:	f7ff ffc2 	bl	8009078 <__swhatbuf_r>
 80090f4:	9f02      	ldr	r7, [sp, #8]
 80090f6:	9001      	str	r0, [sp, #4]
 80090f8:	0039      	movs	r1, r7
 80090fa:	0028      	movs	r0, r5
 80090fc:	f7ff fab2 	bl	8008664 <_malloc_r>
 8009100:	2800      	cmp	r0, #0
 8009102:	d108      	bne.n	8009116 <__smakebuf_r+0x4a>
 8009104:	220c      	movs	r2, #12
 8009106:	5ea3      	ldrsh	r3, [r4, r2]
 8009108:	059a      	lsls	r2, r3, #22
 800910a:	d4ed      	bmi.n	80090e8 <__smakebuf_r+0x1c>
 800910c:	2203      	movs	r2, #3
 800910e:	4393      	bics	r3, r2
 8009110:	431e      	orrs	r6, r3
 8009112:	81a6      	strh	r6, [r4, #12]
 8009114:	e7e2      	b.n	80090dc <__smakebuf_r+0x10>
 8009116:	2380      	movs	r3, #128	@ 0x80
 8009118:	89a2      	ldrh	r2, [r4, #12]
 800911a:	6020      	str	r0, [r4, #0]
 800911c:	4313      	orrs	r3, r2
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	6120      	str	r0, [r4, #16]
 8009124:	6167      	str	r7, [r4, #20]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00c      	beq.n	8009144 <__smakebuf_r+0x78>
 800912a:	0028      	movs	r0, r5
 800912c:	230e      	movs	r3, #14
 800912e:	5ee1      	ldrsh	r1, [r4, r3]
 8009130:	f000 f820 	bl	8009174 <_isatty_r>
 8009134:	2800      	cmp	r0, #0
 8009136:	d005      	beq.n	8009144 <__smakebuf_r+0x78>
 8009138:	2303      	movs	r3, #3
 800913a:	89a2      	ldrh	r2, [r4, #12]
 800913c:	439a      	bics	r2, r3
 800913e:	3b02      	subs	r3, #2
 8009140:	4313      	orrs	r3, r2
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	9a01      	ldr	r2, [sp, #4]
 8009148:	4313      	orrs	r3, r2
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	e7cc      	b.n	80090e8 <__smakebuf_r+0x1c>
	...

08009150 <_fstat_r>:
 8009150:	2300      	movs	r3, #0
 8009152:	b570      	push	{r4, r5, r6, lr}
 8009154:	4d06      	ldr	r5, [pc, #24]	@ (8009170 <_fstat_r+0x20>)
 8009156:	0004      	movs	r4, r0
 8009158:	0008      	movs	r0, r1
 800915a:	0011      	movs	r1, r2
 800915c:	602b      	str	r3, [r5, #0]
 800915e:	f7f9 fcdd 	bl	8002b1c <_fstat>
 8009162:	1c43      	adds	r3, r0, #1
 8009164:	d103      	bne.n	800916e <_fstat_r+0x1e>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d000      	beq.n	800916e <_fstat_r+0x1e>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	20000844 	.word	0x20000844

08009174 <_isatty_r>:
 8009174:	2300      	movs	r3, #0
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	4d06      	ldr	r5, [pc, #24]	@ (8009194 <_isatty_r+0x20>)
 800917a:	0004      	movs	r4, r0
 800917c:	0008      	movs	r0, r1
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	f7f9 fcda 	bl	8002b38 <_isatty>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d103      	bne.n	8009190 <_isatty_r+0x1c>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d000      	beq.n	8009190 <_isatty_r+0x1c>
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	bd70      	pop	{r4, r5, r6, pc}
 8009192:	46c0      	nop			@ (mov r8, r8)
 8009194:	20000844 	.word	0x20000844

08009198 <_init>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	46c0      	nop			@ (mov r8, r8)
 800919c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919e:	bc08      	pop	{r3}
 80091a0:	469e      	mov	lr, r3
 80091a2:	4770      	bx	lr

080091a4 <_fini>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	46c0      	nop			@ (mov r8, r8)
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr
