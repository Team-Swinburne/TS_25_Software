
TS_25_Temp_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a90  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008b50  08008b50  00009b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d70  08008d70  0000a0e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008d70  08008d70  0000a0e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008d70  08008d70  0000a0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d70  08008d70  00009d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d74  08008d74  00009d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08008d78  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  200000e4  08008e5c  0000a0e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  08008e5c  0000aa38  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a0e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112d5  00000000  00000000  0000a10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002862  00000000  00000000  0001b3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5f  00000000  00000000  0001eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efdc  00000000  00000000  0001faff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b1b  00000000  00000000  0003eadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c609c  00000000  00000000  000525f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be4  00000000  00000000  001186d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0011d2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000e4 	.word	0x200000e4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008b34 	.word	0x08008b34

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000e8 	.word	0x200000e8
 8000100:	08008b34 	.word	0x08008b34

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0010      	movs	r0, r2
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	0019      	movs	r1, r3
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f000 ffe3 	bl	800120c <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 ff27 	bl	80010a4 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 ffd5 	bl	800120c <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 ffcb 	bl	800120c <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 ff51 	bl	800112c <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 ff47 	bl	800112c <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			@ (mov r8, r8)

080002ac <__aeabi_d2uiz>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2200      	movs	r2, #0
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <__aeabi_d2uiz+0x38>)
 80002b2:	0004      	movs	r4, r0
 80002b4:	000d      	movs	r5, r1
 80002b6:	f7ff ffef 	bl	8000298 <__aeabi_dcmpge>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d104      	bne.n	80002c8 <__aeabi_d2uiz+0x1c>
 80002be:	0020      	movs	r0, r4
 80002c0:	0029      	movs	r1, r5
 80002c2:	f001 ff23 	bl	800210c <__aeabi_d2iz>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <__aeabi_d2uiz+0x38>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	0020      	movs	r0, r4
 80002ce:	0029      	movs	r1, r5
 80002d0:	f001 faf0 	bl	80018b4 <__aeabi_dsub>
 80002d4:	f001 ff1a 	bl	800210c <__aeabi_d2iz>
 80002d8:	2380      	movs	r3, #128	@ 0x80
 80002da:	061b      	lsls	r3, r3, #24
 80002dc:	469c      	mov	ip, r3
 80002de:	4460      	add	r0, ip
 80002e0:	e7f1      	b.n	80002c6 <__aeabi_d2uiz+0x1a>
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	41e00000 	.word	0x41e00000

080002e8 <__aeabi_dadd>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	464f      	mov	r7, r9
 80002ec:	4646      	mov	r6, r8
 80002ee:	46d6      	mov	lr, sl
 80002f0:	b5c0      	push	{r6, r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	9000      	str	r0, [sp, #0]
 80002f6:	9101      	str	r1, [sp, #4]
 80002f8:	030e      	lsls	r6, r1, #12
 80002fa:	004c      	lsls	r4, r1, #1
 80002fc:	0fcd      	lsrs	r5, r1, #31
 80002fe:	0a71      	lsrs	r1, r6, #9
 8000300:	9e00      	ldr	r6, [sp, #0]
 8000302:	005f      	lsls	r7, r3, #1
 8000304:	0f76      	lsrs	r6, r6, #29
 8000306:	430e      	orrs	r6, r1
 8000308:	9900      	ldr	r1, [sp, #0]
 800030a:	9200      	str	r2, [sp, #0]
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	00c9      	lsls	r1, r1, #3
 8000310:	4689      	mov	r9, r1
 8000312:	0319      	lsls	r1, r3, #12
 8000314:	0d7b      	lsrs	r3, r7, #21
 8000316:	4698      	mov	r8, r3
 8000318:	9b01      	ldr	r3, [sp, #4]
 800031a:	0a49      	lsrs	r1, r1, #9
 800031c:	0fdb      	lsrs	r3, r3, #31
 800031e:	469c      	mov	ip, r3
 8000320:	9b00      	ldr	r3, [sp, #0]
 8000322:	9a00      	ldr	r2, [sp, #0]
 8000324:	0f5b      	lsrs	r3, r3, #29
 8000326:	430b      	orrs	r3, r1
 8000328:	4641      	mov	r1, r8
 800032a:	0d64      	lsrs	r4, r4, #21
 800032c:	00d2      	lsls	r2, r2, #3
 800032e:	1a61      	subs	r1, r4, r1
 8000330:	4565      	cmp	r5, ip
 8000332:	d100      	bne.n	8000336 <__aeabi_dadd+0x4e>
 8000334:	e0a6      	b.n	8000484 <__aeabi_dadd+0x19c>
 8000336:	2900      	cmp	r1, #0
 8000338:	dd72      	ble.n	8000420 <__aeabi_dadd+0x138>
 800033a:	4647      	mov	r7, r8
 800033c:	2f00      	cmp	r7, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_dadd+0x5a>
 8000340:	e0dd      	b.n	80004fe <__aeabi_dadd+0x216>
 8000342:	4fcc      	ldr	r7, [pc, #816]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000344:	42bc      	cmp	r4, r7
 8000346:	d100      	bne.n	800034a <__aeabi_dadd+0x62>
 8000348:	e19a      	b.n	8000680 <__aeabi_dadd+0x398>
 800034a:	2701      	movs	r7, #1
 800034c:	2938      	cmp	r1, #56	@ 0x38
 800034e:	dc17      	bgt.n	8000380 <__aeabi_dadd+0x98>
 8000350:	2780      	movs	r7, #128	@ 0x80
 8000352:	043f      	lsls	r7, r7, #16
 8000354:	433b      	orrs	r3, r7
 8000356:	291f      	cmp	r1, #31
 8000358:	dd00      	ble.n	800035c <__aeabi_dadd+0x74>
 800035a:	e1dd      	b.n	8000718 <__aeabi_dadd+0x430>
 800035c:	2720      	movs	r7, #32
 800035e:	1a78      	subs	r0, r7, r1
 8000360:	001f      	movs	r7, r3
 8000362:	4087      	lsls	r7, r0
 8000364:	46ba      	mov	sl, r7
 8000366:	0017      	movs	r7, r2
 8000368:	40cf      	lsrs	r7, r1
 800036a:	4684      	mov	ip, r0
 800036c:	0038      	movs	r0, r7
 800036e:	4657      	mov	r7, sl
 8000370:	4307      	orrs	r7, r0
 8000372:	4660      	mov	r0, ip
 8000374:	4082      	lsls	r2, r0
 8000376:	40cb      	lsrs	r3, r1
 8000378:	1e50      	subs	r0, r2, #1
 800037a:	4182      	sbcs	r2, r0
 800037c:	1af6      	subs	r6, r6, r3
 800037e:	4317      	orrs	r7, r2
 8000380:	464b      	mov	r3, r9
 8000382:	1bdf      	subs	r7, r3, r7
 8000384:	45b9      	cmp	r9, r7
 8000386:	4180      	sbcs	r0, r0
 8000388:	4240      	negs	r0, r0
 800038a:	1a36      	subs	r6, r6, r0
 800038c:	0233      	lsls	r3, r6, #8
 800038e:	d400      	bmi.n	8000392 <__aeabi_dadd+0xaa>
 8000390:	e0ff      	b.n	8000592 <__aeabi_dadd+0x2aa>
 8000392:	0276      	lsls	r6, r6, #9
 8000394:	0a76      	lsrs	r6, r6, #9
 8000396:	2e00      	cmp	r6, #0
 8000398:	d100      	bne.n	800039c <__aeabi_dadd+0xb4>
 800039a:	e13c      	b.n	8000616 <__aeabi_dadd+0x32e>
 800039c:	0030      	movs	r0, r6
 800039e:	f001 ff43 	bl	8002228 <__clzsi2>
 80003a2:	0003      	movs	r3, r0
 80003a4:	3b08      	subs	r3, #8
 80003a6:	2120      	movs	r1, #32
 80003a8:	0038      	movs	r0, r7
 80003aa:	1aca      	subs	r2, r1, r3
 80003ac:	40d0      	lsrs	r0, r2
 80003ae:	409e      	lsls	r6, r3
 80003b0:	0002      	movs	r2, r0
 80003b2:	409f      	lsls	r7, r3
 80003b4:	4332      	orrs	r2, r6
 80003b6:	429c      	cmp	r4, r3
 80003b8:	dd00      	ble.n	80003bc <__aeabi_dadd+0xd4>
 80003ba:	e1a6      	b.n	800070a <__aeabi_dadd+0x422>
 80003bc:	1b18      	subs	r0, r3, r4
 80003be:	3001      	adds	r0, #1
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	003e      	movs	r6, r7
 80003c4:	408f      	lsls	r7, r1
 80003c6:	40c6      	lsrs	r6, r0
 80003c8:	1e7b      	subs	r3, r7, #1
 80003ca:	419f      	sbcs	r7, r3
 80003cc:	0013      	movs	r3, r2
 80003ce:	408b      	lsls	r3, r1
 80003d0:	4337      	orrs	r7, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	40c2      	lsrs	r2, r0
 80003d6:	003b      	movs	r3, r7
 80003d8:	0016      	movs	r6, r2
 80003da:	2400      	movs	r4, #0
 80003dc:	4313      	orrs	r3, r2
 80003de:	d100      	bne.n	80003e2 <__aeabi_dadd+0xfa>
 80003e0:	e1df      	b.n	80007a2 <__aeabi_dadd+0x4ba>
 80003e2:	077b      	lsls	r3, r7, #29
 80003e4:	d100      	bne.n	80003e8 <__aeabi_dadd+0x100>
 80003e6:	e332      	b.n	8000a4e <__aeabi_dadd+0x766>
 80003e8:	230f      	movs	r3, #15
 80003ea:	003a      	movs	r2, r7
 80003ec:	403b      	ands	r3, r7
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d004      	beq.n	80003fc <__aeabi_dadd+0x114>
 80003f2:	1d3a      	adds	r2, r7, #4
 80003f4:	42ba      	cmp	r2, r7
 80003f6:	41bf      	sbcs	r7, r7
 80003f8:	427f      	negs	r7, r7
 80003fa:	19f6      	adds	r6, r6, r7
 80003fc:	0233      	lsls	r3, r6, #8
 80003fe:	d400      	bmi.n	8000402 <__aeabi_dadd+0x11a>
 8000400:	e323      	b.n	8000a4a <__aeabi_dadd+0x762>
 8000402:	4b9c      	ldr	r3, [pc, #624]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000404:	3401      	adds	r4, #1
 8000406:	429c      	cmp	r4, r3
 8000408:	d100      	bne.n	800040c <__aeabi_dadd+0x124>
 800040a:	e0b4      	b.n	8000576 <__aeabi_dadd+0x28e>
 800040c:	4b9a      	ldr	r3, [pc, #616]	@ (8000678 <__aeabi_dadd+0x390>)
 800040e:	0564      	lsls	r4, r4, #21
 8000410:	401e      	ands	r6, r3
 8000412:	0d64      	lsrs	r4, r4, #21
 8000414:	0777      	lsls	r7, r6, #29
 8000416:	08d2      	lsrs	r2, r2, #3
 8000418:	0276      	lsls	r6, r6, #9
 800041a:	4317      	orrs	r7, r2
 800041c:	0b36      	lsrs	r6, r6, #12
 800041e:	e0ac      	b.n	800057a <__aeabi_dadd+0x292>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_dadd+0x13e>
 8000424:	e07e      	b.n	8000524 <__aeabi_dadd+0x23c>
 8000426:	4641      	mov	r1, r8
 8000428:	1b09      	subs	r1, r1, r4
 800042a:	2c00      	cmp	r4, #0
 800042c:	d000      	beq.n	8000430 <__aeabi_dadd+0x148>
 800042e:	e160      	b.n	80006f2 <__aeabi_dadd+0x40a>
 8000430:	0034      	movs	r4, r6
 8000432:	4648      	mov	r0, r9
 8000434:	4304      	orrs	r4, r0
 8000436:	d100      	bne.n	800043a <__aeabi_dadd+0x152>
 8000438:	e1c9      	b.n	80007ce <__aeabi_dadd+0x4e6>
 800043a:	1e4c      	subs	r4, r1, #1
 800043c:	2901      	cmp	r1, #1
 800043e:	d100      	bne.n	8000442 <__aeabi_dadd+0x15a>
 8000440:	e22e      	b.n	80008a0 <__aeabi_dadd+0x5b8>
 8000442:	4d8c      	ldr	r5, [pc, #560]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000444:	42a9      	cmp	r1, r5
 8000446:	d100      	bne.n	800044a <__aeabi_dadd+0x162>
 8000448:	e224      	b.n	8000894 <__aeabi_dadd+0x5ac>
 800044a:	2701      	movs	r7, #1
 800044c:	2c38      	cmp	r4, #56	@ 0x38
 800044e:	dc11      	bgt.n	8000474 <__aeabi_dadd+0x18c>
 8000450:	0021      	movs	r1, r4
 8000452:	291f      	cmp	r1, #31
 8000454:	dd00      	ble.n	8000458 <__aeabi_dadd+0x170>
 8000456:	e20b      	b.n	8000870 <__aeabi_dadd+0x588>
 8000458:	2420      	movs	r4, #32
 800045a:	0037      	movs	r7, r6
 800045c:	4648      	mov	r0, r9
 800045e:	1a64      	subs	r4, r4, r1
 8000460:	40a7      	lsls	r7, r4
 8000462:	40c8      	lsrs	r0, r1
 8000464:	4307      	orrs	r7, r0
 8000466:	4648      	mov	r0, r9
 8000468:	40a0      	lsls	r0, r4
 800046a:	40ce      	lsrs	r6, r1
 800046c:	1e44      	subs	r4, r0, #1
 800046e:	41a0      	sbcs	r0, r4
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	4307      	orrs	r7, r0
 8000474:	1bd7      	subs	r7, r2, r7
 8000476:	42ba      	cmp	r2, r7
 8000478:	4192      	sbcs	r2, r2
 800047a:	4252      	negs	r2, r2
 800047c:	4665      	mov	r5, ip
 800047e:	4644      	mov	r4, r8
 8000480:	1a9e      	subs	r6, r3, r2
 8000482:	e783      	b.n	800038c <__aeabi_dadd+0xa4>
 8000484:	2900      	cmp	r1, #0
 8000486:	dc00      	bgt.n	800048a <__aeabi_dadd+0x1a2>
 8000488:	e09c      	b.n	80005c4 <__aeabi_dadd+0x2dc>
 800048a:	4647      	mov	r7, r8
 800048c:	2f00      	cmp	r7, #0
 800048e:	d167      	bne.n	8000560 <__aeabi_dadd+0x278>
 8000490:	001f      	movs	r7, r3
 8000492:	4317      	orrs	r7, r2
 8000494:	d100      	bne.n	8000498 <__aeabi_dadd+0x1b0>
 8000496:	e0e4      	b.n	8000662 <__aeabi_dadd+0x37a>
 8000498:	1e48      	subs	r0, r1, #1
 800049a:	2901      	cmp	r1, #1
 800049c:	d100      	bne.n	80004a0 <__aeabi_dadd+0x1b8>
 800049e:	e19b      	b.n	80007d8 <__aeabi_dadd+0x4f0>
 80004a0:	4f74      	ldr	r7, [pc, #464]	@ (8000674 <__aeabi_dadd+0x38c>)
 80004a2:	42b9      	cmp	r1, r7
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dadd+0x1c0>
 80004a6:	e0eb      	b.n	8000680 <__aeabi_dadd+0x398>
 80004a8:	2701      	movs	r7, #1
 80004aa:	0001      	movs	r1, r0
 80004ac:	2838      	cmp	r0, #56	@ 0x38
 80004ae:	dc11      	bgt.n	80004d4 <__aeabi_dadd+0x1ec>
 80004b0:	291f      	cmp	r1, #31
 80004b2:	dd00      	ble.n	80004b6 <__aeabi_dadd+0x1ce>
 80004b4:	e1c7      	b.n	8000846 <__aeabi_dadd+0x55e>
 80004b6:	2720      	movs	r7, #32
 80004b8:	1a78      	subs	r0, r7, r1
 80004ba:	001f      	movs	r7, r3
 80004bc:	4684      	mov	ip, r0
 80004be:	4087      	lsls	r7, r0
 80004c0:	0010      	movs	r0, r2
 80004c2:	40c8      	lsrs	r0, r1
 80004c4:	4307      	orrs	r7, r0
 80004c6:	4660      	mov	r0, ip
 80004c8:	4082      	lsls	r2, r0
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	1e50      	subs	r0, r2, #1
 80004ce:	4182      	sbcs	r2, r0
 80004d0:	18f6      	adds	r6, r6, r3
 80004d2:	4317      	orrs	r7, r2
 80004d4:	444f      	add	r7, r9
 80004d6:	454f      	cmp	r7, r9
 80004d8:	4180      	sbcs	r0, r0
 80004da:	4240      	negs	r0, r0
 80004dc:	1836      	adds	r6, r6, r0
 80004de:	0233      	lsls	r3, r6, #8
 80004e0:	d557      	bpl.n	8000592 <__aeabi_dadd+0x2aa>
 80004e2:	4b64      	ldr	r3, [pc, #400]	@ (8000674 <__aeabi_dadd+0x38c>)
 80004e4:	3401      	adds	r4, #1
 80004e6:	429c      	cmp	r4, r3
 80004e8:	d045      	beq.n	8000576 <__aeabi_dadd+0x28e>
 80004ea:	2101      	movs	r1, #1
 80004ec:	4b62      	ldr	r3, [pc, #392]	@ (8000678 <__aeabi_dadd+0x390>)
 80004ee:	087a      	lsrs	r2, r7, #1
 80004f0:	401e      	ands	r6, r3
 80004f2:	4039      	ands	r1, r7
 80004f4:	430a      	orrs	r2, r1
 80004f6:	07f7      	lsls	r7, r6, #31
 80004f8:	4317      	orrs	r7, r2
 80004fa:	0876      	lsrs	r6, r6, #1
 80004fc:	e771      	b.n	80003e2 <__aeabi_dadd+0xfa>
 80004fe:	001f      	movs	r7, r3
 8000500:	4317      	orrs	r7, r2
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x21e>
 8000504:	e0ad      	b.n	8000662 <__aeabi_dadd+0x37a>
 8000506:	1e4f      	subs	r7, r1, #1
 8000508:	46bc      	mov	ip, r7
 800050a:	2901      	cmp	r1, #1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x228>
 800050e:	e182      	b.n	8000816 <__aeabi_dadd+0x52e>
 8000510:	4f58      	ldr	r7, [pc, #352]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000512:	42b9      	cmp	r1, r7
 8000514:	d100      	bne.n	8000518 <__aeabi_dadd+0x230>
 8000516:	e190      	b.n	800083a <__aeabi_dadd+0x552>
 8000518:	4661      	mov	r1, ip
 800051a:	2701      	movs	r7, #1
 800051c:	2938      	cmp	r1, #56	@ 0x38
 800051e:	dd00      	ble.n	8000522 <__aeabi_dadd+0x23a>
 8000520:	e72e      	b.n	8000380 <__aeabi_dadd+0x98>
 8000522:	e718      	b.n	8000356 <__aeabi_dadd+0x6e>
 8000524:	4f55      	ldr	r7, [pc, #340]	@ (800067c <__aeabi_dadd+0x394>)
 8000526:	1c61      	adds	r1, r4, #1
 8000528:	4239      	tst	r1, r7
 800052a:	d000      	beq.n	800052e <__aeabi_dadd+0x246>
 800052c:	e0d0      	b.n	80006d0 <__aeabi_dadd+0x3e8>
 800052e:	0031      	movs	r1, r6
 8000530:	4648      	mov	r0, r9
 8000532:	001f      	movs	r7, r3
 8000534:	4301      	orrs	r1, r0
 8000536:	4317      	orrs	r7, r2
 8000538:	2c00      	cmp	r4, #0
 800053a:	d000      	beq.n	800053e <__aeabi_dadd+0x256>
 800053c:	e13d      	b.n	80007ba <__aeabi_dadd+0x4d2>
 800053e:	2900      	cmp	r1, #0
 8000540:	d100      	bne.n	8000544 <__aeabi_dadd+0x25c>
 8000542:	e1bc      	b.n	80008be <__aeabi_dadd+0x5d6>
 8000544:	2f00      	cmp	r7, #0
 8000546:	d000      	beq.n	800054a <__aeabi_dadd+0x262>
 8000548:	e1bf      	b.n	80008ca <__aeabi_dadd+0x5e2>
 800054a:	464b      	mov	r3, r9
 800054c:	2100      	movs	r1, #0
 800054e:	08d8      	lsrs	r0, r3, #3
 8000550:	0777      	lsls	r7, r6, #29
 8000552:	4307      	orrs	r7, r0
 8000554:	08f0      	lsrs	r0, r6, #3
 8000556:	0306      	lsls	r6, r0, #12
 8000558:	054c      	lsls	r4, r1, #21
 800055a:	0b36      	lsrs	r6, r6, #12
 800055c:	0d64      	lsrs	r4, r4, #21
 800055e:	e00c      	b.n	800057a <__aeabi_dadd+0x292>
 8000560:	4f44      	ldr	r7, [pc, #272]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000562:	42bc      	cmp	r4, r7
 8000564:	d100      	bne.n	8000568 <__aeabi_dadd+0x280>
 8000566:	e08b      	b.n	8000680 <__aeabi_dadd+0x398>
 8000568:	2701      	movs	r7, #1
 800056a:	2938      	cmp	r1, #56	@ 0x38
 800056c:	dcb2      	bgt.n	80004d4 <__aeabi_dadd+0x1ec>
 800056e:	2780      	movs	r7, #128	@ 0x80
 8000570:	043f      	lsls	r7, r7, #16
 8000572:	433b      	orrs	r3, r7
 8000574:	e79c      	b.n	80004b0 <__aeabi_dadd+0x1c8>
 8000576:	2600      	movs	r6, #0
 8000578:	2700      	movs	r7, #0
 800057a:	0524      	lsls	r4, r4, #20
 800057c:	4334      	orrs	r4, r6
 800057e:	07ed      	lsls	r5, r5, #31
 8000580:	432c      	orrs	r4, r5
 8000582:	0038      	movs	r0, r7
 8000584:	0021      	movs	r1, r4
 8000586:	b002      	add	sp, #8
 8000588:	bce0      	pop	{r5, r6, r7}
 800058a:	46ba      	mov	sl, r7
 800058c:	46b1      	mov	r9, r6
 800058e:	46a8      	mov	r8, r5
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000592:	077b      	lsls	r3, r7, #29
 8000594:	d004      	beq.n	80005a0 <__aeabi_dadd+0x2b8>
 8000596:	230f      	movs	r3, #15
 8000598:	403b      	ands	r3, r7
 800059a:	2b04      	cmp	r3, #4
 800059c:	d000      	beq.n	80005a0 <__aeabi_dadd+0x2b8>
 800059e:	e728      	b.n	80003f2 <__aeabi_dadd+0x10a>
 80005a0:	08f8      	lsrs	r0, r7, #3
 80005a2:	4b34      	ldr	r3, [pc, #208]	@ (8000674 <__aeabi_dadd+0x38c>)
 80005a4:	0777      	lsls	r7, r6, #29
 80005a6:	4307      	orrs	r7, r0
 80005a8:	08f0      	lsrs	r0, r6, #3
 80005aa:	429c      	cmp	r4, r3
 80005ac:	d000      	beq.n	80005b0 <__aeabi_dadd+0x2c8>
 80005ae:	e24a      	b.n	8000a46 <__aeabi_dadd+0x75e>
 80005b0:	003b      	movs	r3, r7
 80005b2:	4303      	orrs	r3, r0
 80005b4:	d059      	beq.n	800066a <__aeabi_dadd+0x382>
 80005b6:	2680      	movs	r6, #128	@ 0x80
 80005b8:	0336      	lsls	r6, r6, #12
 80005ba:	4306      	orrs	r6, r0
 80005bc:	0336      	lsls	r6, r6, #12
 80005be:	4c2d      	ldr	r4, [pc, #180]	@ (8000674 <__aeabi_dadd+0x38c>)
 80005c0:	0b36      	lsrs	r6, r6, #12
 80005c2:	e7da      	b.n	800057a <__aeabi_dadd+0x292>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	d061      	beq.n	800068c <__aeabi_dadd+0x3a4>
 80005c8:	4641      	mov	r1, r8
 80005ca:	1b09      	subs	r1, r1, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x2ea>
 80005d0:	e0b9      	b.n	8000746 <__aeabi_dadd+0x45e>
 80005d2:	4c28      	ldr	r4, [pc, #160]	@ (8000674 <__aeabi_dadd+0x38c>)
 80005d4:	45a0      	cmp	r8, r4
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x2f2>
 80005d8:	e1a5      	b.n	8000926 <__aeabi_dadd+0x63e>
 80005da:	2701      	movs	r7, #1
 80005dc:	2938      	cmp	r1, #56	@ 0x38
 80005de:	dc13      	bgt.n	8000608 <__aeabi_dadd+0x320>
 80005e0:	2480      	movs	r4, #128	@ 0x80
 80005e2:	0424      	lsls	r4, r4, #16
 80005e4:	4326      	orrs	r6, r4
 80005e6:	291f      	cmp	r1, #31
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dadd+0x304>
 80005ea:	e1c8      	b.n	800097e <__aeabi_dadd+0x696>
 80005ec:	2420      	movs	r4, #32
 80005ee:	0037      	movs	r7, r6
 80005f0:	4648      	mov	r0, r9
 80005f2:	1a64      	subs	r4, r4, r1
 80005f4:	40a7      	lsls	r7, r4
 80005f6:	40c8      	lsrs	r0, r1
 80005f8:	4307      	orrs	r7, r0
 80005fa:	4648      	mov	r0, r9
 80005fc:	40a0      	lsls	r0, r4
 80005fe:	40ce      	lsrs	r6, r1
 8000600:	1e44      	subs	r4, r0, #1
 8000602:	41a0      	sbcs	r0, r4
 8000604:	199b      	adds	r3, r3, r6
 8000606:	4307      	orrs	r7, r0
 8000608:	18bf      	adds	r7, r7, r2
 800060a:	4297      	cmp	r7, r2
 800060c:	4192      	sbcs	r2, r2
 800060e:	4252      	negs	r2, r2
 8000610:	4644      	mov	r4, r8
 8000612:	18d6      	adds	r6, r2, r3
 8000614:	e763      	b.n	80004de <__aeabi_dadd+0x1f6>
 8000616:	0038      	movs	r0, r7
 8000618:	f001 fe06 	bl	8002228 <__clzsi2>
 800061c:	0003      	movs	r3, r0
 800061e:	3318      	adds	r3, #24
 8000620:	2b1f      	cmp	r3, #31
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x33e>
 8000624:	e6bf      	b.n	80003a6 <__aeabi_dadd+0xbe>
 8000626:	003a      	movs	r2, r7
 8000628:	3808      	subs	r0, #8
 800062a:	4082      	lsls	r2, r0
 800062c:	429c      	cmp	r4, r3
 800062e:	dd00      	ble.n	8000632 <__aeabi_dadd+0x34a>
 8000630:	e083      	b.n	800073a <__aeabi_dadd+0x452>
 8000632:	1b1b      	subs	r3, r3, r4
 8000634:	1c58      	adds	r0, r3, #1
 8000636:	281f      	cmp	r0, #31
 8000638:	dc00      	bgt.n	800063c <__aeabi_dadd+0x354>
 800063a:	e1b4      	b.n	80009a6 <__aeabi_dadd+0x6be>
 800063c:	0017      	movs	r7, r2
 800063e:	3b1f      	subs	r3, #31
 8000640:	40df      	lsrs	r7, r3
 8000642:	2820      	cmp	r0, #32
 8000644:	d005      	beq.n	8000652 <__aeabi_dadd+0x36a>
 8000646:	2340      	movs	r3, #64	@ 0x40
 8000648:	1a1b      	subs	r3, r3, r0
 800064a:	409a      	lsls	r2, r3
 800064c:	1e53      	subs	r3, r2, #1
 800064e:	419a      	sbcs	r2, r3
 8000650:	4317      	orrs	r7, r2
 8000652:	2400      	movs	r4, #0
 8000654:	2f00      	cmp	r7, #0
 8000656:	d00a      	beq.n	800066e <__aeabi_dadd+0x386>
 8000658:	077b      	lsls	r3, r7, #29
 800065a:	d000      	beq.n	800065e <__aeabi_dadd+0x376>
 800065c:	e6c4      	b.n	80003e8 <__aeabi_dadd+0x100>
 800065e:	0026      	movs	r6, r4
 8000660:	e79e      	b.n	80005a0 <__aeabi_dadd+0x2b8>
 8000662:	464b      	mov	r3, r9
 8000664:	000c      	movs	r4, r1
 8000666:	08d8      	lsrs	r0, r3, #3
 8000668:	e79b      	b.n	80005a2 <__aeabi_dadd+0x2ba>
 800066a:	2700      	movs	r7, #0
 800066c:	4c01      	ldr	r4, [pc, #4]	@ (8000674 <__aeabi_dadd+0x38c>)
 800066e:	2600      	movs	r6, #0
 8000670:	e783      	b.n	800057a <__aeabi_dadd+0x292>
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	000007ff 	.word	0x000007ff
 8000678:	ff7fffff 	.word	0xff7fffff
 800067c:	000007fe 	.word	0x000007fe
 8000680:	464b      	mov	r3, r9
 8000682:	0777      	lsls	r7, r6, #29
 8000684:	08d8      	lsrs	r0, r3, #3
 8000686:	4307      	orrs	r7, r0
 8000688:	08f0      	lsrs	r0, r6, #3
 800068a:	e791      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 800068c:	4fcd      	ldr	r7, [pc, #820]	@ (80009c4 <__aeabi_dadd+0x6dc>)
 800068e:	1c61      	adds	r1, r4, #1
 8000690:	4239      	tst	r1, r7
 8000692:	d16b      	bne.n	800076c <__aeabi_dadd+0x484>
 8000694:	0031      	movs	r1, r6
 8000696:	4648      	mov	r0, r9
 8000698:	4301      	orrs	r1, r0
 800069a:	2c00      	cmp	r4, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_dadd+0x3b8>
 800069e:	e14b      	b.n	8000938 <__aeabi_dadd+0x650>
 80006a0:	001f      	movs	r7, r3
 80006a2:	4317      	orrs	r7, r2
 80006a4:	2900      	cmp	r1, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x3c2>
 80006a8:	e181      	b.n	80009ae <__aeabi_dadd+0x6c6>
 80006aa:	2f00      	cmp	r7, #0
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dadd+0x3c8>
 80006ae:	e74c      	b.n	800054a <__aeabi_dadd+0x262>
 80006b0:	444a      	add	r2, r9
 80006b2:	454a      	cmp	r2, r9
 80006b4:	4180      	sbcs	r0, r0
 80006b6:	18f6      	adds	r6, r6, r3
 80006b8:	4240      	negs	r0, r0
 80006ba:	1836      	adds	r6, r6, r0
 80006bc:	0233      	lsls	r3, r6, #8
 80006be:	d500      	bpl.n	80006c2 <__aeabi_dadd+0x3da>
 80006c0:	e1b0      	b.n	8000a24 <__aeabi_dadd+0x73c>
 80006c2:	0017      	movs	r7, r2
 80006c4:	4691      	mov	r9, r2
 80006c6:	4337      	orrs	r7, r6
 80006c8:	d000      	beq.n	80006cc <__aeabi_dadd+0x3e4>
 80006ca:	e73e      	b.n	800054a <__aeabi_dadd+0x262>
 80006cc:	2600      	movs	r6, #0
 80006ce:	e754      	b.n	800057a <__aeabi_dadd+0x292>
 80006d0:	4649      	mov	r1, r9
 80006d2:	1a89      	subs	r1, r1, r2
 80006d4:	4688      	mov	r8, r1
 80006d6:	45c1      	cmp	r9, r8
 80006d8:	41bf      	sbcs	r7, r7
 80006da:	1af1      	subs	r1, r6, r3
 80006dc:	427f      	negs	r7, r7
 80006de:	1bc9      	subs	r1, r1, r7
 80006e0:	020f      	lsls	r7, r1, #8
 80006e2:	d461      	bmi.n	80007a8 <__aeabi_dadd+0x4c0>
 80006e4:	4647      	mov	r7, r8
 80006e6:	430f      	orrs	r7, r1
 80006e8:	d100      	bne.n	80006ec <__aeabi_dadd+0x404>
 80006ea:	e0bd      	b.n	8000868 <__aeabi_dadd+0x580>
 80006ec:	000e      	movs	r6, r1
 80006ee:	4647      	mov	r7, r8
 80006f0:	e651      	b.n	8000396 <__aeabi_dadd+0xae>
 80006f2:	4cb5      	ldr	r4, [pc, #724]	@ (80009c8 <__aeabi_dadd+0x6e0>)
 80006f4:	45a0      	cmp	r8, r4
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x412>
 80006f8:	e100      	b.n	80008fc <__aeabi_dadd+0x614>
 80006fa:	2701      	movs	r7, #1
 80006fc:	2938      	cmp	r1, #56	@ 0x38
 80006fe:	dd00      	ble.n	8000702 <__aeabi_dadd+0x41a>
 8000700:	e6b8      	b.n	8000474 <__aeabi_dadd+0x18c>
 8000702:	2480      	movs	r4, #128	@ 0x80
 8000704:	0424      	lsls	r4, r4, #16
 8000706:	4326      	orrs	r6, r4
 8000708:	e6a3      	b.n	8000452 <__aeabi_dadd+0x16a>
 800070a:	4eb0      	ldr	r6, [pc, #704]	@ (80009cc <__aeabi_dadd+0x6e4>)
 800070c:	1ae4      	subs	r4, r4, r3
 800070e:	4016      	ands	r6, r2
 8000710:	077b      	lsls	r3, r7, #29
 8000712:	d000      	beq.n	8000716 <__aeabi_dadd+0x42e>
 8000714:	e73f      	b.n	8000596 <__aeabi_dadd+0x2ae>
 8000716:	e743      	b.n	80005a0 <__aeabi_dadd+0x2b8>
 8000718:	000f      	movs	r7, r1
 800071a:	0018      	movs	r0, r3
 800071c:	3f20      	subs	r7, #32
 800071e:	40f8      	lsrs	r0, r7
 8000720:	4684      	mov	ip, r0
 8000722:	2920      	cmp	r1, #32
 8000724:	d003      	beq.n	800072e <__aeabi_dadd+0x446>
 8000726:	2740      	movs	r7, #64	@ 0x40
 8000728:	1a79      	subs	r1, r7, r1
 800072a:	408b      	lsls	r3, r1
 800072c:	431a      	orrs	r2, r3
 800072e:	1e53      	subs	r3, r2, #1
 8000730:	419a      	sbcs	r2, r3
 8000732:	4663      	mov	r3, ip
 8000734:	0017      	movs	r7, r2
 8000736:	431f      	orrs	r7, r3
 8000738:	e622      	b.n	8000380 <__aeabi_dadd+0x98>
 800073a:	48a4      	ldr	r0, [pc, #656]	@ (80009cc <__aeabi_dadd+0x6e4>)
 800073c:	1ae1      	subs	r1, r4, r3
 800073e:	4010      	ands	r0, r2
 8000740:	0747      	lsls	r7, r0, #29
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	e707      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000746:	0034      	movs	r4, r6
 8000748:	4648      	mov	r0, r9
 800074a:	4304      	orrs	r4, r0
 800074c:	d100      	bne.n	8000750 <__aeabi_dadd+0x468>
 800074e:	e0fa      	b.n	8000946 <__aeabi_dadd+0x65e>
 8000750:	1e4c      	subs	r4, r1, #1
 8000752:	2901      	cmp	r1, #1
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x470>
 8000756:	e0d7      	b.n	8000908 <__aeabi_dadd+0x620>
 8000758:	4f9b      	ldr	r7, [pc, #620]	@ (80009c8 <__aeabi_dadd+0x6e0>)
 800075a:	42b9      	cmp	r1, r7
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x478>
 800075e:	e0e2      	b.n	8000926 <__aeabi_dadd+0x63e>
 8000760:	2701      	movs	r7, #1
 8000762:	2c38      	cmp	r4, #56	@ 0x38
 8000764:	dd00      	ble.n	8000768 <__aeabi_dadd+0x480>
 8000766:	e74f      	b.n	8000608 <__aeabi_dadd+0x320>
 8000768:	0021      	movs	r1, r4
 800076a:	e73c      	b.n	80005e6 <__aeabi_dadd+0x2fe>
 800076c:	4c96      	ldr	r4, [pc, #600]	@ (80009c8 <__aeabi_dadd+0x6e0>)
 800076e:	42a1      	cmp	r1, r4
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x48c>
 8000772:	e0dd      	b.n	8000930 <__aeabi_dadd+0x648>
 8000774:	444a      	add	r2, r9
 8000776:	454a      	cmp	r2, r9
 8000778:	4180      	sbcs	r0, r0
 800077a:	18f3      	adds	r3, r6, r3
 800077c:	4240      	negs	r0, r0
 800077e:	1818      	adds	r0, r3, r0
 8000780:	07c7      	lsls	r7, r0, #31
 8000782:	0852      	lsrs	r2, r2, #1
 8000784:	4317      	orrs	r7, r2
 8000786:	0846      	lsrs	r6, r0, #1
 8000788:	0752      	lsls	r2, r2, #29
 800078a:	d005      	beq.n	8000798 <__aeabi_dadd+0x4b0>
 800078c:	220f      	movs	r2, #15
 800078e:	000c      	movs	r4, r1
 8000790:	403a      	ands	r2, r7
 8000792:	2a04      	cmp	r2, #4
 8000794:	d000      	beq.n	8000798 <__aeabi_dadd+0x4b0>
 8000796:	e62c      	b.n	80003f2 <__aeabi_dadd+0x10a>
 8000798:	0776      	lsls	r6, r6, #29
 800079a:	08ff      	lsrs	r7, r7, #3
 800079c:	4337      	orrs	r7, r6
 800079e:	0900      	lsrs	r0, r0, #4
 80007a0:	e6d9      	b.n	8000556 <__aeabi_dadd+0x26e>
 80007a2:	2700      	movs	r7, #0
 80007a4:	2600      	movs	r6, #0
 80007a6:	e6e8      	b.n	800057a <__aeabi_dadd+0x292>
 80007a8:	4649      	mov	r1, r9
 80007aa:	1a57      	subs	r7, r2, r1
 80007ac:	42ba      	cmp	r2, r7
 80007ae:	4192      	sbcs	r2, r2
 80007b0:	1b9e      	subs	r6, r3, r6
 80007b2:	4252      	negs	r2, r2
 80007b4:	4665      	mov	r5, ip
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	e5ed      	b.n	8000396 <__aeabi_dadd+0xae>
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d000      	beq.n	80007c0 <__aeabi_dadd+0x4d8>
 80007be:	e0c6      	b.n	800094e <__aeabi_dadd+0x666>
 80007c0:	2f00      	cmp	r7, #0
 80007c2:	d167      	bne.n	8000894 <__aeabi_dadd+0x5ac>
 80007c4:	2680      	movs	r6, #128	@ 0x80
 80007c6:	2500      	movs	r5, #0
 80007c8:	4c7f      	ldr	r4, [pc, #508]	@ (80009c8 <__aeabi_dadd+0x6e0>)
 80007ca:	0336      	lsls	r6, r6, #12
 80007cc:	e6d5      	b.n	800057a <__aeabi_dadd+0x292>
 80007ce:	4665      	mov	r5, ip
 80007d0:	000c      	movs	r4, r1
 80007d2:	001e      	movs	r6, r3
 80007d4:	08d0      	lsrs	r0, r2, #3
 80007d6:	e6e4      	b.n	80005a2 <__aeabi_dadd+0x2ba>
 80007d8:	444a      	add	r2, r9
 80007da:	454a      	cmp	r2, r9
 80007dc:	4180      	sbcs	r0, r0
 80007de:	18f3      	adds	r3, r6, r3
 80007e0:	4240      	negs	r0, r0
 80007e2:	1818      	adds	r0, r3, r0
 80007e4:	0011      	movs	r1, r2
 80007e6:	0203      	lsls	r3, r0, #8
 80007e8:	d400      	bmi.n	80007ec <__aeabi_dadd+0x504>
 80007ea:	e096      	b.n	800091a <__aeabi_dadd+0x632>
 80007ec:	4b77      	ldr	r3, [pc, #476]	@ (80009cc <__aeabi_dadd+0x6e4>)
 80007ee:	0849      	lsrs	r1, r1, #1
 80007f0:	4018      	ands	r0, r3
 80007f2:	07c3      	lsls	r3, r0, #31
 80007f4:	430b      	orrs	r3, r1
 80007f6:	0844      	lsrs	r4, r0, #1
 80007f8:	0749      	lsls	r1, r1, #29
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x516>
 80007fc:	e129      	b.n	8000a52 <__aeabi_dadd+0x76a>
 80007fe:	220f      	movs	r2, #15
 8000800:	401a      	ands	r2, r3
 8000802:	2a04      	cmp	r2, #4
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x520>
 8000806:	e0ea      	b.n	80009de <__aeabi_dadd+0x6f6>
 8000808:	1d1f      	adds	r7, r3, #4
 800080a:	429f      	cmp	r7, r3
 800080c:	41b6      	sbcs	r6, r6
 800080e:	4276      	negs	r6, r6
 8000810:	1936      	adds	r6, r6, r4
 8000812:	2402      	movs	r4, #2
 8000814:	e6c4      	b.n	80005a0 <__aeabi_dadd+0x2b8>
 8000816:	4649      	mov	r1, r9
 8000818:	1a8f      	subs	r7, r1, r2
 800081a:	45b9      	cmp	r9, r7
 800081c:	4180      	sbcs	r0, r0
 800081e:	1af6      	subs	r6, r6, r3
 8000820:	4240      	negs	r0, r0
 8000822:	1a36      	subs	r6, r6, r0
 8000824:	0233      	lsls	r3, r6, #8
 8000826:	d406      	bmi.n	8000836 <__aeabi_dadd+0x54e>
 8000828:	0773      	lsls	r3, r6, #29
 800082a:	08ff      	lsrs	r7, r7, #3
 800082c:	2101      	movs	r1, #1
 800082e:	431f      	orrs	r7, r3
 8000830:	08f0      	lsrs	r0, r6, #3
 8000832:	e690      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000834:	4665      	mov	r5, ip
 8000836:	2401      	movs	r4, #1
 8000838:	e5ab      	b.n	8000392 <__aeabi_dadd+0xaa>
 800083a:	464b      	mov	r3, r9
 800083c:	0777      	lsls	r7, r6, #29
 800083e:	08d8      	lsrs	r0, r3, #3
 8000840:	4307      	orrs	r7, r0
 8000842:	08f0      	lsrs	r0, r6, #3
 8000844:	e6b4      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000846:	000f      	movs	r7, r1
 8000848:	0018      	movs	r0, r3
 800084a:	3f20      	subs	r7, #32
 800084c:	40f8      	lsrs	r0, r7
 800084e:	4684      	mov	ip, r0
 8000850:	2920      	cmp	r1, #32
 8000852:	d003      	beq.n	800085c <__aeabi_dadd+0x574>
 8000854:	2740      	movs	r7, #64	@ 0x40
 8000856:	1a79      	subs	r1, r7, r1
 8000858:	408b      	lsls	r3, r1
 800085a:	431a      	orrs	r2, r3
 800085c:	1e53      	subs	r3, r2, #1
 800085e:	419a      	sbcs	r2, r3
 8000860:	4663      	mov	r3, ip
 8000862:	0017      	movs	r7, r2
 8000864:	431f      	orrs	r7, r3
 8000866:	e635      	b.n	80004d4 <__aeabi_dadd+0x1ec>
 8000868:	2500      	movs	r5, #0
 800086a:	2400      	movs	r4, #0
 800086c:	2600      	movs	r6, #0
 800086e:	e684      	b.n	800057a <__aeabi_dadd+0x292>
 8000870:	000c      	movs	r4, r1
 8000872:	0035      	movs	r5, r6
 8000874:	3c20      	subs	r4, #32
 8000876:	40e5      	lsrs	r5, r4
 8000878:	2920      	cmp	r1, #32
 800087a:	d005      	beq.n	8000888 <__aeabi_dadd+0x5a0>
 800087c:	2440      	movs	r4, #64	@ 0x40
 800087e:	1a61      	subs	r1, r4, r1
 8000880:	408e      	lsls	r6, r1
 8000882:	4649      	mov	r1, r9
 8000884:	4331      	orrs	r1, r6
 8000886:	4689      	mov	r9, r1
 8000888:	4648      	mov	r0, r9
 800088a:	1e41      	subs	r1, r0, #1
 800088c:	4188      	sbcs	r0, r1
 800088e:	0007      	movs	r7, r0
 8000890:	432f      	orrs	r7, r5
 8000892:	e5ef      	b.n	8000474 <__aeabi_dadd+0x18c>
 8000894:	08d2      	lsrs	r2, r2, #3
 8000896:	075f      	lsls	r7, r3, #29
 8000898:	4665      	mov	r5, ip
 800089a:	4317      	orrs	r7, r2
 800089c:	08d8      	lsrs	r0, r3, #3
 800089e:	e687      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 80008a0:	1a17      	subs	r7, r2, r0
 80008a2:	42ba      	cmp	r2, r7
 80008a4:	4192      	sbcs	r2, r2
 80008a6:	1b9e      	subs	r6, r3, r6
 80008a8:	4252      	negs	r2, r2
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	0233      	lsls	r3, r6, #8
 80008ae:	d4c1      	bmi.n	8000834 <__aeabi_dadd+0x54c>
 80008b0:	0773      	lsls	r3, r6, #29
 80008b2:	08ff      	lsrs	r7, r7, #3
 80008b4:	4665      	mov	r5, ip
 80008b6:	2101      	movs	r1, #1
 80008b8:	431f      	orrs	r7, r3
 80008ba:	08f0      	lsrs	r0, r6, #3
 80008bc:	e64b      	b.n	8000556 <__aeabi_dadd+0x26e>
 80008be:	2f00      	cmp	r7, #0
 80008c0:	d07b      	beq.n	80009ba <__aeabi_dadd+0x6d2>
 80008c2:	4665      	mov	r5, ip
 80008c4:	001e      	movs	r6, r3
 80008c6:	4691      	mov	r9, r2
 80008c8:	e63f      	b.n	800054a <__aeabi_dadd+0x262>
 80008ca:	1a81      	subs	r1, r0, r2
 80008cc:	4688      	mov	r8, r1
 80008ce:	45c1      	cmp	r9, r8
 80008d0:	41a4      	sbcs	r4, r4
 80008d2:	1af1      	subs	r1, r6, r3
 80008d4:	4264      	negs	r4, r4
 80008d6:	1b09      	subs	r1, r1, r4
 80008d8:	2480      	movs	r4, #128	@ 0x80
 80008da:	0424      	lsls	r4, r4, #16
 80008dc:	4221      	tst	r1, r4
 80008de:	d077      	beq.n	80009d0 <__aeabi_dadd+0x6e8>
 80008e0:	1a10      	subs	r0, r2, r0
 80008e2:	4282      	cmp	r2, r0
 80008e4:	4192      	sbcs	r2, r2
 80008e6:	0007      	movs	r7, r0
 80008e8:	1b9e      	subs	r6, r3, r6
 80008ea:	4252      	negs	r2, r2
 80008ec:	1ab6      	subs	r6, r6, r2
 80008ee:	4337      	orrs	r7, r6
 80008f0:	d000      	beq.n	80008f4 <__aeabi_dadd+0x60c>
 80008f2:	e0a0      	b.n	8000a36 <__aeabi_dadd+0x74e>
 80008f4:	4665      	mov	r5, ip
 80008f6:	2400      	movs	r4, #0
 80008f8:	2600      	movs	r6, #0
 80008fa:	e63e      	b.n	800057a <__aeabi_dadd+0x292>
 80008fc:	075f      	lsls	r7, r3, #29
 80008fe:	08d2      	lsrs	r2, r2, #3
 8000900:	4665      	mov	r5, ip
 8000902:	4317      	orrs	r7, r2
 8000904:	08d8      	lsrs	r0, r3, #3
 8000906:	e653      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000908:	1881      	adds	r1, r0, r2
 800090a:	4291      	cmp	r1, r2
 800090c:	4192      	sbcs	r2, r2
 800090e:	18f0      	adds	r0, r6, r3
 8000910:	4252      	negs	r2, r2
 8000912:	1880      	adds	r0, r0, r2
 8000914:	0203      	lsls	r3, r0, #8
 8000916:	d500      	bpl.n	800091a <__aeabi_dadd+0x632>
 8000918:	e768      	b.n	80007ec <__aeabi_dadd+0x504>
 800091a:	0747      	lsls	r7, r0, #29
 800091c:	08c9      	lsrs	r1, r1, #3
 800091e:	430f      	orrs	r7, r1
 8000920:	08c0      	lsrs	r0, r0, #3
 8000922:	2101      	movs	r1, #1
 8000924:	e617      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000926:	08d2      	lsrs	r2, r2, #3
 8000928:	075f      	lsls	r7, r3, #29
 800092a:	4317      	orrs	r7, r2
 800092c:	08d8      	lsrs	r0, r3, #3
 800092e:	e63f      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000930:	000c      	movs	r4, r1
 8000932:	2600      	movs	r6, #0
 8000934:	2700      	movs	r7, #0
 8000936:	e620      	b.n	800057a <__aeabi_dadd+0x292>
 8000938:	2900      	cmp	r1, #0
 800093a:	d156      	bne.n	80009ea <__aeabi_dadd+0x702>
 800093c:	075f      	lsls	r7, r3, #29
 800093e:	08d2      	lsrs	r2, r2, #3
 8000940:	4317      	orrs	r7, r2
 8000942:	08d8      	lsrs	r0, r3, #3
 8000944:	e634      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000946:	000c      	movs	r4, r1
 8000948:	001e      	movs	r6, r3
 800094a:	08d0      	lsrs	r0, r2, #3
 800094c:	e629      	b.n	80005a2 <__aeabi_dadd+0x2ba>
 800094e:	08c1      	lsrs	r1, r0, #3
 8000950:	0770      	lsls	r0, r6, #29
 8000952:	4301      	orrs	r1, r0
 8000954:	08f0      	lsrs	r0, r6, #3
 8000956:	2f00      	cmp	r7, #0
 8000958:	d062      	beq.n	8000a20 <__aeabi_dadd+0x738>
 800095a:	2480      	movs	r4, #128	@ 0x80
 800095c:	0324      	lsls	r4, r4, #12
 800095e:	4220      	tst	r0, r4
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x68a>
 8000962:	08de      	lsrs	r6, r3, #3
 8000964:	4226      	tst	r6, r4
 8000966:	d104      	bne.n	8000972 <__aeabi_dadd+0x68a>
 8000968:	4665      	mov	r5, ip
 800096a:	0030      	movs	r0, r6
 800096c:	08d1      	lsrs	r1, r2, #3
 800096e:	075b      	lsls	r3, r3, #29
 8000970:	4319      	orrs	r1, r3
 8000972:	0f4f      	lsrs	r7, r1, #29
 8000974:	00c9      	lsls	r1, r1, #3
 8000976:	08c9      	lsrs	r1, r1, #3
 8000978:	077f      	lsls	r7, r7, #29
 800097a:	430f      	orrs	r7, r1
 800097c:	e618      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 800097e:	000c      	movs	r4, r1
 8000980:	0030      	movs	r0, r6
 8000982:	3c20      	subs	r4, #32
 8000984:	40e0      	lsrs	r0, r4
 8000986:	4684      	mov	ip, r0
 8000988:	2920      	cmp	r1, #32
 800098a:	d005      	beq.n	8000998 <__aeabi_dadd+0x6b0>
 800098c:	2440      	movs	r4, #64	@ 0x40
 800098e:	1a61      	subs	r1, r4, r1
 8000990:	408e      	lsls	r6, r1
 8000992:	4649      	mov	r1, r9
 8000994:	4331      	orrs	r1, r6
 8000996:	4689      	mov	r9, r1
 8000998:	4648      	mov	r0, r9
 800099a:	1e41      	subs	r1, r0, #1
 800099c:	4188      	sbcs	r0, r1
 800099e:	4661      	mov	r1, ip
 80009a0:	0007      	movs	r7, r0
 80009a2:	430f      	orrs	r7, r1
 80009a4:	e630      	b.n	8000608 <__aeabi_dadd+0x320>
 80009a6:	2120      	movs	r1, #32
 80009a8:	2700      	movs	r7, #0
 80009aa:	1a09      	subs	r1, r1, r0
 80009ac:	e50e      	b.n	80003cc <__aeabi_dadd+0xe4>
 80009ae:	001e      	movs	r6, r3
 80009b0:	2f00      	cmp	r7, #0
 80009b2:	d000      	beq.n	80009b6 <__aeabi_dadd+0x6ce>
 80009b4:	e522      	b.n	80003fc <__aeabi_dadd+0x114>
 80009b6:	2400      	movs	r4, #0
 80009b8:	e758      	b.n	800086c <__aeabi_dadd+0x584>
 80009ba:	2500      	movs	r5, #0
 80009bc:	2400      	movs	r4, #0
 80009be:	2600      	movs	r6, #0
 80009c0:	e5db      	b.n	800057a <__aeabi_dadd+0x292>
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	000007fe 	.word	0x000007fe
 80009c8:	000007ff 	.word	0x000007ff
 80009cc:	ff7fffff 	.word	0xff7fffff
 80009d0:	4647      	mov	r7, r8
 80009d2:	430f      	orrs	r7, r1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x6f0>
 80009d6:	e747      	b.n	8000868 <__aeabi_dadd+0x580>
 80009d8:	000e      	movs	r6, r1
 80009da:	46c1      	mov	r9, r8
 80009dc:	e5b5      	b.n	800054a <__aeabi_dadd+0x262>
 80009de:	08df      	lsrs	r7, r3, #3
 80009e0:	0764      	lsls	r4, r4, #29
 80009e2:	2102      	movs	r1, #2
 80009e4:	4327      	orrs	r7, r4
 80009e6:	0900      	lsrs	r0, r0, #4
 80009e8:	e5b5      	b.n	8000556 <__aeabi_dadd+0x26e>
 80009ea:	0019      	movs	r1, r3
 80009ec:	08c0      	lsrs	r0, r0, #3
 80009ee:	0777      	lsls	r7, r6, #29
 80009f0:	4307      	orrs	r7, r0
 80009f2:	4311      	orrs	r1, r2
 80009f4:	08f0      	lsrs	r0, r6, #3
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x714>
 80009fa:	e5d9      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 80009fc:	2180      	movs	r1, #128	@ 0x80
 80009fe:	0309      	lsls	r1, r1, #12
 8000a00:	4208      	tst	r0, r1
 8000a02:	d007      	beq.n	8000a14 <__aeabi_dadd+0x72c>
 8000a04:	08dc      	lsrs	r4, r3, #3
 8000a06:	420c      	tst	r4, r1
 8000a08:	d104      	bne.n	8000a14 <__aeabi_dadd+0x72c>
 8000a0a:	08d2      	lsrs	r2, r2, #3
 8000a0c:	075b      	lsls	r3, r3, #29
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	0017      	movs	r7, r2
 8000a12:	0020      	movs	r0, r4
 8000a14:	0f7b      	lsrs	r3, r7, #29
 8000a16:	00ff      	lsls	r7, r7, #3
 8000a18:	08ff      	lsrs	r7, r7, #3
 8000a1a:	075b      	lsls	r3, r3, #29
 8000a1c:	431f      	orrs	r7, r3
 8000a1e:	e5c7      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000a20:	000f      	movs	r7, r1
 8000a22:	e5c5      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <__aeabi_dadd+0x788>)
 8000a26:	08d2      	lsrs	r2, r2, #3
 8000a28:	4033      	ands	r3, r6
 8000a2a:	075f      	lsls	r7, r3, #29
 8000a2c:	025b      	lsls	r3, r3, #9
 8000a2e:	2401      	movs	r4, #1
 8000a30:	4317      	orrs	r7, r2
 8000a32:	0b1e      	lsrs	r6, r3, #12
 8000a34:	e5a1      	b.n	800057a <__aeabi_dadd+0x292>
 8000a36:	4226      	tst	r6, r4
 8000a38:	d012      	beq.n	8000a60 <__aeabi_dadd+0x778>
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <__aeabi_dadd+0x788>)
 8000a3c:	4665      	mov	r5, ip
 8000a3e:	0002      	movs	r2, r0
 8000a40:	2401      	movs	r4, #1
 8000a42:	401e      	ands	r6, r3
 8000a44:	e4e6      	b.n	8000414 <__aeabi_dadd+0x12c>
 8000a46:	0021      	movs	r1, r4
 8000a48:	e585      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000a4a:	0017      	movs	r7, r2
 8000a4c:	e5a8      	b.n	80005a0 <__aeabi_dadd+0x2b8>
 8000a4e:	003a      	movs	r2, r7
 8000a50:	e4d4      	b.n	80003fc <__aeabi_dadd+0x114>
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	0764      	lsls	r4, r4, #29
 8000a56:	431c      	orrs	r4, r3
 8000a58:	0027      	movs	r7, r4
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	0900      	lsrs	r0, r0, #4
 8000a5e:	e57a      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000a60:	08c0      	lsrs	r0, r0, #3
 8000a62:	0777      	lsls	r7, r6, #29
 8000a64:	4307      	orrs	r7, r0
 8000a66:	4665      	mov	r5, ip
 8000a68:	2100      	movs	r1, #0
 8000a6a:	08f0      	lsrs	r0, r6, #3
 8000a6c:	e573      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	ff7fffff 	.word	0xff7fffff

08000a74 <__aeabi_ddiv>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	46de      	mov	lr, fp
 8000a78:	4645      	mov	r5, r8
 8000a7a:	4657      	mov	r7, sl
 8000a7c:	464e      	mov	r6, r9
 8000a7e:	b5e0      	push	{r5, r6, r7, lr}
 8000a80:	b087      	sub	sp, #28
 8000a82:	9200      	str	r2, [sp, #0]
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	030b      	lsls	r3, r1, #12
 8000a88:	0b1b      	lsrs	r3, r3, #12
 8000a8a:	469b      	mov	fp, r3
 8000a8c:	0fca      	lsrs	r2, r1, #31
 8000a8e:	004b      	lsls	r3, r1, #1
 8000a90:	0004      	movs	r4, r0
 8000a92:	4680      	mov	r8, r0
 8000a94:	0d5b      	lsrs	r3, r3, #21
 8000a96:	9202      	str	r2, [sp, #8]
 8000a98:	d100      	bne.n	8000a9c <__aeabi_ddiv+0x28>
 8000a9a:	e098      	b.n	8000bce <__aeabi_ddiv+0x15a>
 8000a9c:	4a7c      	ldr	r2, [pc, #496]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d037      	beq.n	8000b12 <__aeabi_ddiv+0x9e>
 8000aa2:	4659      	mov	r1, fp
 8000aa4:	0f42      	lsrs	r2, r0, #29
 8000aa6:	00c9      	lsls	r1, r1, #3
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	2180      	movs	r1, #128	@ 0x80
 8000aac:	0409      	lsls	r1, r1, #16
 8000aae:	4311      	orrs	r1, r2
 8000ab0:	00c2      	lsls	r2, r0, #3
 8000ab2:	4690      	mov	r8, r2
 8000ab4:	4a77      	ldr	r2, [pc, #476]	@ (8000c94 <__aeabi_ddiv+0x220>)
 8000ab6:	4689      	mov	r9, r1
 8000ab8:	4692      	mov	sl, r2
 8000aba:	449a      	add	sl, r3
 8000abc:	2300      	movs	r3, #0
 8000abe:	2400      	movs	r4, #0
 8000ac0:	9303      	str	r3, [sp, #12]
 8000ac2:	9e00      	ldr	r6, [sp, #0]
 8000ac4:	9f01      	ldr	r7, [sp, #4]
 8000ac6:	033b      	lsls	r3, r7, #12
 8000ac8:	0b1b      	lsrs	r3, r3, #12
 8000aca:	469b      	mov	fp, r3
 8000acc:	007b      	lsls	r3, r7, #1
 8000ace:	0030      	movs	r0, r6
 8000ad0:	0d5b      	lsrs	r3, r3, #21
 8000ad2:	0ffd      	lsrs	r5, r7, #31
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d059      	beq.n	8000b8c <__aeabi_ddiv+0x118>
 8000ad8:	4a6d      	ldr	r2, [pc, #436]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d048      	beq.n	8000b70 <__aeabi_ddiv+0xfc>
 8000ade:	4659      	mov	r1, fp
 8000ae0:	0f72      	lsrs	r2, r6, #29
 8000ae2:	00c9      	lsls	r1, r1, #3
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	2180      	movs	r1, #128	@ 0x80
 8000ae8:	0409      	lsls	r1, r1, #16
 8000aea:	4311      	orrs	r1, r2
 8000aec:	468b      	mov	fp, r1
 8000aee:	4969      	ldr	r1, [pc, #420]	@ (8000c94 <__aeabi_ddiv+0x220>)
 8000af0:	00f2      	lsls	r2, r6, #3
 8000af2:	468c      	mov	ip, r1
 8000af4:	4651      	mov	r1, sl
 8000af6:	4463      	add	r3, ip
 8000af8:	1acb      	subs	r3, r1, r3
 8000afa:	469a      	mov	sl, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	9e02      	ldr	r6, [sp, #8]
 8000b00:	406e      	eors	r6, r5
 8000b02:	b2f6      	uxtb	r6, r6
 8000b04:	2c0f      	cmp	r4, #15
 8000b06:	d900      	bls.n	8000b0a <__aeabi_ddiv+0x96>
 8000b08:	e0ce      	b.n	8000ca8 <__aeabi_ddiv+0x234>
 8000b0a:	4b63      	ldr	r3, [pc, #396]	@ (8000c98 <__aeabi_ddiv+0x224>)
 8000b0c:	00a4      	lsls	r4, r4, #2
 8000b0e:	591b      	ldr	r3, [r3, r4]
 8000b10:	469f      	mov	pc, r3
 8000b12:	465a      	mov	r2, fp
 8000b14:	4302      	orrs	r2, r0
 8000b16:	4691      	mov	r9, r2
 8000b18:	d000      	beq.n	8000b1c <__aeabi_ddiv+0xa8>
 8000b1a:	e090      	b.n	8000c3e <__aeabi_ddiv+0x1ca>
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	2302      	movs	r3, #2
 8000b20:	4690      	mov	r8, r2
 8000b22:	2408      	movs	r4, #8
 8000b24:	9303      	str	r3, [sp, #12]
 8000b26:	e7cc      	b.n	8000ac2 <__aeabi_ddiv+0x4e>
 8000b28:	46cb      	mov	fp, r9
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	9d02      	ldr	r5, [sp, #8]
 8000b2e:	9903      	ldr	r1, [sp, #12]
 8000b30:	2902      	cmp	r1, #2
 8000b32:	d100      	bne.n	8000b36 <__aeabi_ddiv+0xc2>
 8000b34:	e1de      	b.n	8000ef4 <__aeabi_ddiv+0x480>
 8000b36:	2903      	cmp	r1, #3
 8000b38:	d100      	bne.n	8000b3c <__aeabi_ddiv+0xc8>
 8000b3a:	e08d      	b.n	8000c58 <__aeabi_ddiv+0x1e4>
 8000b3c:	2901      	cmp	r1, #1
 8000b3e:	d000      	beq.n	8000b42 <__aeabi_ddiv+0xce>
 8000b40:	e179      	b.n	8000e36 <__aeabi_ddiv+0x3c2>
 8000b42:	002e      	movs	r6, r5
 8000b44:	2200      	movs	r2, #0
 8000b46:	2300      	movs	r3, #0
 8000b48:	2400      	movs	r4, #0
 8000b4a:	4690      	mov	r8, r2
 8000b4c:	051b      	lsls	r3, r3, #20
 8000b4e:	4323      	orrs	r3, r4
 8000b50:	07f6      	lsls	r6, r6, #31
 8000b52:	4333      	orrs	r3, r6
 8000b54:	4640      	mov	r0, r8
 8000b56:	0019      	movs	r1, r3
 8000b58:	b007      	add	sp, #28
 8000b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b5c:	46bb      	mov	fp, r7
 8000b5e:	46b2      	mov	sl, r6
 8000b60:	46a9      	mov	r9, r5
 8000b62:	46a0      	mov	r8, r4
 8000b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b66:	2200      	movs	r2, #0
 8000b68:	2400      	movs	r4, #0
 8000b6a:	4690      	mov	r8, r2
 8000b6c:	4b48      	ldr	r3, [pc, #288]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000b6e:	e7ed      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000b70:	465a      	mov	r2, fp
 8000b72:	9b00      	ldr	r3, [sp, #0]
 8000b74:	431a      	orrs	r2, r3
 8000b76:	4b49      	ldr	r3, [pc, #292]	@ (8000c9c <__aeabi_ddiv+0x228>)
 8000b78:	469c      	mov	ip, r3
 8000b7a:	44e2      	add	sl, ip
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d159      	bne.n	8000c34 <__aeabi_ddiv+0x1c0>
 8000b80:	2302      	movs	r3, #2
 8000b82:	431c      	orrs	r4, r3
 8000b84:	2300      	movs	r3, #0
 8000b86:	2102      	movs	r1, #2
 8000b88:	469b      	mov	fp, r3
 8000b8a:	e7b8      	b.n	8000afe <__aeabi_ddiv+0x8a>
 8000b8c:	465a      	mov	r2, fp
 8000b8e:	9b00      	ldr	r3, [sp, #0]
 8000b90:	431a      	orrs	r2, r3
 8000b92:	d049      	beq.n	8000c28 <__aeabi_ddiv+0x1b4>
 8000b94:	465b      	mov	r3, fp
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_ddiv+0x128>
 8000b9a:	e19c      	b.n	8000ed6 <__aeabi_ddiv+0x462>
 8000b9c:	4658      	mov	r0, fp
 8000b9e:	f001 fb43 	bl	8002228 <__clzsi2>
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	3a0b      	subs	r2, #11
 8000ba8:	271d      	movs	r7, #29
 8000baa:	9e00      	ldr	r6, [sp, #0]
 8000bac:	1aba      	subs	r2, r7, r2
 8000bae:	0019      	movs	r1, r3
 8000bb0:	4658      	mov	r0, fp
 8000bb2:	40d6      	lsrs	r6, r2
 8000bb4:	3908      	subs	r1, #8
 8000bb6:	4088      	lsls	r0, r1
 8000bb8:	0032      	movs	r2, r6
 8000bba:	4302      	orrs	r2, r0
 8000bbc:	4693      	mov	fp, r2
 8000bbe:	9a00      	ldr	r2, [sp, #0]
 8000bc0:	408a      	lsls	r2, r1
 8000bc2:	4937      	ldr	r1, [pc, #220]	@ (8000ca0 <__aeabi_ddiv+0x22c>)
 8000bc4:	4453      	add	r3, sl
 8000bc6:	468a      	mov	sl, r1
 8000bc8:	2100      	movs	r1, #0
 8000bca:	449a      	add	sl, r3
 8000bcc:	e797      	b.n	8000afe <__aeabi_ddiv+0x8a>
 8000bce:	465b      	mov	r3, fp
 8000bd0:	4303      	orrs	r3, r0
 8000bd2:	4699      	mov	r9, r3
 8000bd4:	d021      	beq.n	8000c1a <__aeabi_ddiv+0x1a6>
 8000bd6:	465b      	mov	r3, fp
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d100      	bne.n	8000bde <__aeabi_ddiv+0x16a>
 8000bdc:	e169      	b.n	8000eb2 <__aeabi_ddiv+0x43e>
 8000bde:	4658      	mov	r0, fp
 8000be0:	f001 fb22 	bl	8002228 <__clzsi2>
 8000be4:	230b      	movs	r3, #11
 8000be6:	425b      	negs	r3, r3
 8000be8:	469c      	mov	ip, r3
 8000bea:	0002      	movs	r2, r0
 8000bec:	4484      	add	ip, r0
 8000bee:	4666      	mov	r6, ip
 8000bf0:	231d      	movs	r3, #29
 8000bf2:	1b9b      	subs	r3, r3, r6
 8000bf4:	0026      	movs	r6, r4
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	4658      	mov	r0, fp
 8000bfa:	40de      	lsrs	r6, r3
 8000bfc:	3908      	subs	r1, #8
 8000bfe:	4088      	lsls	r0, r1
 8000c00:	0033      	movs	r3, r6
 8000c02:	4303      	orrs	r3, r0
 8000c04:	4699      	mov	r9, r3
 8000c06:	0023      	movs	r3, r4
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <__aeabi_ddiv+0x230>)
 8000c0e:	2400      	movs	r4, #0
 8000c10:	1a9b      	subs	r3, r3, r2
 8000c12:	469a      	mov	sl, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	9303      	str	r3, [sp, #12]
 8000c18:	e753      	b.n	8000ac2 <__aeabi_ddiv+0x4e>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3301      	adds	r3, #1
 8000c22:	2404      	movs	r4, #4
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	e74c      	b.n	8000ac2 <__aeabi_ddiv+0x4e>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	431c      	orrs	r4, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	469b      	mov	fp, r3
 8000c32:	e764      	b.n	8000afe <__aeabi_ddiv+0x8a>
 8000c34:	2303      	movs	r3, #3
 8000c36:	0032      	movs	r2, r6
 8000c38:	2103      	movs	r1, #3
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	e75f      	b.n	8000afe <__aeabi_ddiv+0x8a>
 8000c3e:	469a      	mov	sl, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	46d9      	mov	r9, fp
 8000c44:	240c      	movs	r4, #12
 8000c46:	9303      	str	r3, [sp, #12]
 8000c48:	e73b      	b.n	8000ac2 <__aeabi_ddiv+0x4e>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2480      	movs	r4, #128	@ 0x80
 8000c4e:	4698      	mov	r8, r3
 8000c50:	2600      	movs	r6, #0
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000c54:	0324      	lsls	r4, r4, #12
 8000c56:	e779      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000c58:	2480      	movs	r4, #128	@ 0x80
 8000c5a:	465b      	mov	r3, fp
 8000c5c:	0324      	lsls	r4, r4, #12
 8000c5e:	431c      	orrs	r4, r3
 8000c60:	0324      	lsls	r4, r4, #12
 8000c62:	002e      	movs	r6, r5
 8000c64:	4690      	mov	r8, r2
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000c68:	0b24      	lsrs	r4, r4, #12
 8000c6a:	e76f      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000c6c:	2480      	movs	r4, #128	@ 0x80
 8000c6e:	464b      	mov	r3, r9
 8000c70:	0324      	lsls	r4, r4, #12
 8000c72:	4223      	tst	r3, r4
 8000c74:	d002      	beq.n	8000c7c <__aeabi_ddiv+0x208>
 8000c76:	465b      	mov	r3, fp
 8000c78:	4223      	tst	r3, r4
 8000c7a:	d0f0      	beq.n	8000c5e <__aeabi_ddiv+0x1ea>
 8000c7c:	2480      	movs	r4, #128	@ 0x80
 8000c7e:	464b      	mov	r3, r9
 8000c80:	0324      	lsls	r4, r4, #12
 8000c82:	431c      	orrs	r4, r3
 8000c84:	0324      	lsls	r4, r4, #12
 8000c86:	9e02      	ldr	r6, [sp, #8]
 8000c88:	4b01      	ldr	r3, [pc, #4]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000c8a:	0b24      	lsrs	r4, r4, #12
 8000c8c:	e75e      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	000007ff 	.word	0x000007ff
 8000c94:	fffffc01 	.word	0xfffffc01
 8000c98:	08008bc0 	.word	0x08008bc0
 8000c9c:	fffff801 	.word	0xfffff801
 8000ca0:	000003f3 	.word	0x000003f3
 8000ca4:	fffffc0d 	.word	0xfffffc0d
 8000ca8:	45cb      	cmp	fp, r9
 8000caa:	d200      	bcs.n	8000cae <__aeabi_ddiv+0x23a>
 8000cac:	e0f8      	b.n	8000ea0 <__aeabi_ddiv+0x42c>
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_ddiv+0x23e>
 8000cb0:	e0f3      	b.n	8000e9a <__aeabi_ddiv+0x426>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	425b      	negs	r3, r3
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	4644      	mov	r4, r8
 8000cba:	4648      	mov	r0, r9
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	44e2      	add	sl, ip
 8000cc0:	465b      	mov	r3, fp
 8000cc2:	0e17      	lsrs	r7, r2, #24
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c19      	lsrs	r1, r3, #16
 8000cca:	043b      	lsls	r3, r7, #16
 8000ccc:	0212      	lsls	r2, r2, #8
 8000cce:	9700      	str	r7, [sp, #0]
 8000cd0:	0c1f      	lsrs	r7, r3, #16
 8000cd2:	4691      	mov	r9, r2
 8000cd4:	9102      	str	r1, [sp, #8]
 8000cd6:	9703      	str	r7, [sp, #12]
 8000cd8:	f7ff faa4 	bl	8000224 <__aeabi_uidivmod>
 8000cdc:	0002      	movs	r2, r0
 8000cde:	437a      	muls	r2, r7
 8000ce0:	040b      	lsls	r3, r1, #16
 8000ce2:	0c21      	lsrs	r1, r4, #16
 8000ce4:	4680      	mov	r8, r0
 8000ce6:	4319      	orrs	r1, r3
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	d909      	bls.n	8000d00 <__aeabi_ddiv+0x28c>
 8000cec:	9f00      	ldr	r7, [sp, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	46bc      	mov	ip, r7
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	4461      	add	r1, ip
 8000cf6:	469c      	mov	ip, r3
 8000cf8:	44e0      	add	r8, ip
 8000cfa:	428f      	cmp	r7, r1
 8000cfc:	d800      	bhi.n	8000d00 <__aeabi_ddiv+0x28c>
 8000cfe:	e15c      	b.n	8000fba <__aeabi_ddiv+0x546>
 8000d00:	1a88      	subs	r0, r1, r2
 8000d02:	9902      	ldr	r1, [sp, #8]
 8000d04:	f7ff fa8e 	bl	8000224 <__aeabi_uidivmod>
 8000d08:	9a03      	ldr	r2, [sp, #12]
 8000d0a:	0424      	lsls	r4, r4, #16
 8000d0c:	4342      	muls	r2, r0
 8000d0e:	0409      	lsls	r1, r1, #16
 8000d10:	0c24      	lsrs	r4, r4, #16
 8000d12:	0003      	movs	r3, r0
 8000d14:	430c      	orrs	r4, r1
 8000d16:	42a2      	cmp	r2, r4
 8000d18:	d906      	bls.n	8000d28 <__aeabi_ddiv+0x2b4>
 8000d1a:	9900      	ldr	r1, [sp, #0]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	468c      	mov	ip, r1
 8000d20:	4464      	add	r4, ip
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	d800      	bhi.n	8000d28 <__aeabi_ddiv+0x2b4>
 8000d26:	e142      	b.n	8000fae <__aeabi_ddiv+0x53a>
 8000d28:	1aa0      	subs	r0, r4, r2
 8000d2a:	4642      	mov	r2, r8
 8000d2c:	0412      	lsls	r2, r2, #16
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	4693      	mov	fp, r2
 8000d32:	464b      	mov	r3, r9
 8000d34:	4659      	mov	r1, fp
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	001f      	movs	r7, r3
 8000d3a:	9304      	str	r3, [sp, #16]
 8000d3c:	040b      	lsls	r3, r1, #16
 8000d3e:	4649      	mov	r1, r9
 8000d40:	0409      	lsls	r1, r1, #16
 8000d42:	0c09      	lsrs	r1, r1, #16
 8000d44:	000c      	movs	r4, r1
 8000d46:	0c1b      	lsrs	r3, r3, #16
 8000d48:	435c      	muls	r4, r3
 8000d4a:	0c12      	lsrs	r2, r2, #16
 8000d4c:	437b      	muls	r3, r7
 8000d4e:	4688      	mov	r8, r1
 8000d50:	4351      	muls	r1, r2
 8000d52:	437a      	muls	r2, r7
 8000d54:	0c27      	lsrs	r7, r4, #16
 8000d56:	46bc      	mov	ip, r7
 8000d58:	185b      	adds	r3, r3, r1
 8000d5a:	4463      	add	r3, ip
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d903      	bls.n	8000d68 <__aeabi_ddiv+0x2f4>
 8000d60:	2180      	movs	r1, #128	@ 0x80
 8000d62:	0249      	lsls	r1, r1, #9
 8000d64:	468c      	mov	ip, r1
 8000d66:	4462      	add	r2, ip
 8000d68:	0c19      	lsrs	r1, r3, #16
 8000d6a:	0424      	lsls	r4, r4, #16
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	0c24      	lsrs	r4, r4, #16
 8000d70:	188a      	adds	r2, r1, r2
 8000d72:	191c      	adds	r4, r3, r4
 8000d74:	4290      	cmp	r0, r2
 8000d76:	d302      	bcc.n	8000d7e <__aeabi_ddiv+0x30a>
 8000d78:	d116      	bne.n	8000da8 <__aeabi_ddiv+0x334>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	d214      	bcs.n	8000da8 <__aeabi_ddiv+0x334>
 8000d7e:	465b      	mov	r3, fp
 8000d80:	9f00      	ldr	r7, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	444d      	add	r5, r9
 8000d86:	9305      	str	r3, [sp, #20]
 8000d88:	454d      	cmp	r5, r9
 8000d8a:	419b      	sbcs	r3, r3
 8000d8c:	46bc      	mov	ip, r7
 8000d8e:	425b      	negs	r3, r3
 8000d90:	4463      	add	r3, ip
 8000d92:	18c0      	adds	r0, r0, r3
 8000d94:	4287      	cmp	r7, r0
 8000d96:	d300      	bcc.n	8000d9a <__aeabi_ddiv+0x326>
 8000d98:	e102      	b.n	8000fa0 <__aeabi_ddiv+0x52c>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x32c>
 8000d9e:	e129      	b.n	8000ff4 <__aeabi_ddiv+0x580>
 8000da0:	d100      	bne.n	8000da4 <__aeabi_ddiv+0x330>
 8000da2:	e124      	b.n	8000fee <__aeabi_ddiv+0x57a>
 8000da4:	9b05      	ldr	r3, [sp, #20]
 8000da6:	469b      	mov	fp, r3
 8000da8:	1b2c      	subs	r4, r5, r4
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	41ad      	sbcs	r5, r5
 8000dae:	9b00      	ldr	r3, [sp, #0]
 8000db0:	1a80      	subs	r0, r0, r2
 8000db2:	426d      	negs	r5, r5
 8000db4:	1b40      	subs	r0, r0, r5
 8000db6:	4283      	cmp	r3, r0
 8000db8:	d100      	bne.n	8000dbc <__aeabi_ddiv+0x348>
 8000dba:	e10f      	b.n	8000fdc <__aeabi_ddiv+0x568>
 8000dbc:	9902      	ldr	r1, [sp, #8]
 8000dbe:	f7ff fa31 	bl	8000224 <__aeabi_uidivmod>
 8000dc2:	9a03      	ldr	r2, [sp, #12]
 8000dc4:	040b      	lsls	r3, r1, #16
 8000dc6:	4342      	muls	r2, r0
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	0005      	movs	r5, r0
 8000dcc:	4319      	orrs	r1, r3
 8000dce:	428a      	cmp	r2, r1
 8000dd0:	d900      	bls.n	8000dd4 <__aeabi_ddiv+0x360>
 8000dd2:	e0cb      	b.n	8000f6c <__aeabi_ddiv+0x4f8>
 8000dd4:	1a88      	subs	r0, r1, r2
 8000dd6:	9902      	ldr	r1, [sp, #8]
 8000dd8:	f7ff fa24 	bl	8000224 <__aeabi_uidivmod>
 8000ddc:	9a03      	ldr	r2, [sp, #12]
 8000dde:	0424      	lsls	r4, r4, #16
 8000de0:	4342      	muls	r2, r0
 8000de2:	0409      	lsls	r1, r1, #16
 8000de4:	0c24      	lsrs	r4, r4, #16
 8000de6:	0003      	movs	r3, r0
 8000de8:	430c      	orrs	r4, r1
 8000dea:	42a2      	cmp	r2, r4
 8000dec:	d900      	bls.n	8000df0 <__aeabi_ddiv+0x37c>
 8000dee:	e0ca      	b.n	8000f86 <__aeabi_ddiv+0x512>
 8000df0:	4641      	mov	r1, r8
 8000df2:	1aa4      	subs	r4, r4, r2
 8000df4:	042a      	lsls	r2, r5, #16
 8000df6:	431a      	orrs	r2, r3
 8000df8:	9f04      	ldr	r7, [sp, #16]
 8000dfa:	0413      	lsls	r3, r2, #16
 8000dfc:	0c1b      	lsrs	r3, r3, #16
 8000dfe:	4359      	muls	r1, r3
 8000e00:	4640      	mov	r0, r8
 8000e02:	437b      	muls	r3, r7
 8000e04:	469c      	mov	ip, r3
 8000e06:	0c15      	lsrs	r5, r2, #16
 8000e08:	4368      	muls	r0, r5
 8000e0a:	0c0b      	lsrs	r3, r1, #16
 8000e0c:	4484      	add	ip, r0
 8000e0e:	4463      	add	r3, ip
 8000e10:	437d      	muls	r5, r7
 8000e12:	4298      	cmp	r0, r3
 8000e14:	d903      	bls.n	8000e1e <__aeabi_ddiv+0x3aa>
 8000e16:	2080      	movs	r0, #128	@ 0x80
 8000e18:	0240      	lsls	r0, r0, #9
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	4465      	add	r5, ip
 8000e1e:	0c18      	lsrs	r0, r3, #16
 8000e20:	0409      	lsls	r1, r1, #16
 8000e22:	041b      	lsls	r3, r3, #16
 8000e24:	0c09      	lsrs	r1, r1, #16
 8000e26:	1940      	adds	r0, r0, r5
 8000e28:	185b      	adds	r3, r3, r1
 8000e2a:	4284      	cmp	r4, r0
 8000e2c:	d327      	bcc.n	8000e7e <__aeabi_ddiv+0x40a>
 8000e2e:	d023      	beq.n	8000e78 <__aeabi_ddiv+0x404>
 8000e30:	2301      	movs	r3, #1
 8000e32:	0035      	movs	r5, r6
 8000e34:	431a      	orrs	r2, r3
 8000e36:	4b94      	ldr	r3, [pc, #592]	@ (8001088 <__aeabi_ddiv+0x614>)
 8000e38:	4453      	add	r3, sl
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dd60      	ble.n	8000f00 <__aeabi_ddiv+0x48c>
 8000e3e:	0751      	lsls	r1, r2, #29
 8000e40:	d000      	beq.n	8000e44 <__aeabi_ddiv+0x3d0>
 8000e42:	e086      	b.n	8000f52 <__aeabi_ddiv+0x4de>
 8000e44:	002e      	movs	r6, r5
 8000e46:	08d1      	lsrs	r1, r2, #3
 8000e48:	465a      	mov	r2, fp
 8000e4a:	01d2      	lsls	r2, r2, #7
 8000e4c:	d506      	bpl.n	8000e5c <__aeabi_ddiv+0x3e8>
 8000e4e:	465a      	mov	r2, fp
 8000e50:	4b8e      	ldr	r3, [pc, #568]	@ (800108c <__aeabi_ddiv+0x618>)
 8000e52:	401a      	ands	r2, r3
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	4693      	mov	fp, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4453      	add	r3, sl
 8000e5c:	4a8c      	ldr	r2, [pc, #560]	@ (8001090 <__aeabi_ddiv+0x61c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_ddiv+0x3f0>
 8000e62:	e680      	b.n	8000b66 <__aeabi_ddiv+0xf2>
 8000e64:	465a      	mov	r2, fp
 8000e66:	0752      	lsls	r2, r2, #29
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	4690      	mov	r8, r2
 8000e6c:	465a      	mov	r2, fp
 8000e6e:	055b      	lsls	r3, r3, #21
 8000e70:	0254      	lsls	r4, r2, #9
 8000e72:	0b24      	lsrs	r4, r4, #12
 8000e74:	0d5b      	lsrs	r3, r3, #21
 8000e76:	e669      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000e78:	0035      	movs	r5, r6
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0db      	beq.n	8000e36 <__aeabi_ddiv+0x3c2>
 8000e7e:	9d00      	ldr	r5, [sp, #0]
 8000e80:	1e51      	subs	r1, r2, #1
 8000e82:	46ac      	mov	ip, r5
 8000e84:	4464      	add	r4, ip
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	d200      	bcs.n	8000e8c <__aeabi_ddiv+0x418>
 8000e8a:	e09e      	b.n	8000fca <__aeabi_ddiv+0x556>
 8000e8c:	4284      	cmp	r4, r0
 8000e8e:	d200      	bcs.n	8000e92 <__aeabi_ddiv+0x41e>
 8000e90:	e0e1      	b.n	8001056 <__aeabi_ddiv+0x5e2>
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0x422>
 8000e94:	e0ee      	b.n	8001074 <__aeabi_ddiv+0x600>
 8000e96:	000a      	movs	r2, r1
 8000e98:	e7ca      	b.n	8000e30 <__aeabi_ddiv+0x3bc>
 8000e9a:	4542      	cmp	r2, r8
 8000e9c:	d900      	bls.n	8000ea0 <__aeabi_ddiv+0x42c>
 8000e9e:	e708      	b.n	8000cb2 <__aeabi_ddiv+0x23e>
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	07dc      	lsls	r4, r3, #31
 8000ea4:	0858      	lsrs	r0, r3, #1
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	4643      	mov	r3, r8
 8000eae:	07dd      	lsls	r5, r3, #31
 8000eb0:	e706      	b.n	8000cc0 <__aeabi_ddiv+0x24c>
 8000eb2:	f001 f9b9 	bl	8002228 <__clzsi2>
 8000eb6:	2315      	movs	r3, #21
 8000eb8:	469c      	mov	ip, r3
 8000eba:	4484      	add	ip, r0
 8000ebc:	0002      	movs	r2, r0
 8000ebe:	4663      	mov	r3, ip
 8000ec0:	3220      	adds	r2, #32
 8000ec2:	2b1c      	cmp	r3, #28
 8000ec4:	dc00      	bgt.n	8000ec8 <__aeabi_ddiv+0x454>
 8000ec6:	e692      	b.n	8000bee <__aeabi_ddiv+0x17a>
 8000ec8:	0023      	movs	r3, r4
 8000eca:	3808      	subs	r0, #8
 8000ecc:	4083      	lsls	r3, r0
 8000ece:	4699      	mov	r9, r3
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4698      	mov	r8, r3
 8000ed4:	e69a      	b.n	8000c0c <__aeabi_ddiv+0x198>
 8000ed6:	f001 f9a7 	bl	8002228 <__clzsi2>
 8000eda:	0002      	movs	r2, r0
 8000edc:	0003      	movs	r3, r0
 8000ede:	3215      	adds	r2, #21
 8000ee0:	3320      	adds	r3, #32
 8000ee2:	2a1c      	cmp	r2, #28
 8000ee4:	dc00      	bgt.n	8000ee8 <__aeabi_ddiv+0x474>
 8000ee6:	e65f      	b.n	8000ba8 <__aeabi_ddiv+0x134>
 8000ee8:	9900      	ldr	r1, [sp, #0]
 8000eea:	3808      	subs	r0, #8
 8000eec:	4081      	lsls	r1, r0
 8000eee:	2200      	movs	r2, #0
 8000ef0:	468b      	mov	fp, r1
 8000ef2:	e666      	b.n	8000bc2 <__aeabi_ddiv+0x14e>
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	002e      	movs	r6, r5
 8000ef8:	2400      	movs	r4, #0
 8000efa:	4690      	mov	r8, r2
 8000efc:	4b65      	ldr	r3, [pc, #404]	@ (8001094 <__aeabi_ddiv+0x620>)
 8000efe:	e625      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000f00:	002e      	movs	r6, r5
 8000f02:	2101      	movs	r1, #1
 8000f04:	1ac9      	subs	r1, r1, r3
 8000f06:	2938      	cmp	r1, #56	@ 0x38
 8000f08:	dd00      	ble.n	8000f0c <__aeabi_ddiv+0x498>
 8000f0a:	e61b      	b.n	8000b44 <__aeabi_ddiv+0xd0>
 8000f0c:	291f      	cmp	r1, #31
 8000f0e:	dc7e      	bgt.n	800100e <__aeabi_ddiv+0x59a>
 8000f10:	4861      	ldr	r0, [pc, #388]	@ (8001098 <__aeabi_ddiv+0x624>)
 8000f12:	0014      	movs	r4, r2
 8000f14:	4450      	add	r0, sl
 8000f16:	465b      	mov	r3, fp
 8000f18:	4082      	lsls	r2, r0
 8000f1a:	4083      	lsls	r3, r0
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	1e50      	subs	r0, r2, #1
 8000f20:	4182      	sbcs	r2, r0
 8000f22:	4323      	orrs	r3, r4
 8000f24:	431a      	orrs	r2, r3
 8000f26:	465b      	mov	r3, fp
 8000f28:	40cb      	lsrs	r3, r1
 8000f2a:	0751      	lsls	r1, r2, #29
 8000f2c:	d009      	beq.n	8000f42 <__aeabi_ddiv+0x4ce>
 8000f2e:	210f      	movs	r1, #15
 8000f30:	4011      	ands	r1, r2
 8000f32:	2904      	cmp	r1, #4
 8000f34:	d005      	beq.n	8000f42 <__aeabi_ddiv+0x4ce>
 8000f36:	1d11      	adds	r1, r2, #4
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	4192      	sbcs	r2, r2
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	000a      	movs	r2, r1
 8000f42:	0219      	lsls	r1, r3, #8
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_ddiv+0x4d4>
 8000f46:	e09b      	b.n	8001080 <__aeabi_ddiv+0x60c>
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4690      	mov	r8, r2
 8000f50:	e5fc      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000f52:	210f      	movs	r1, #15
 8000f54:	4011      	ands	r1, r2
 8000f56:	2904      	cmp	r1, #4
 8000f58:	d100      	bne.n	8000f5c <__aeabi_ddiv+0x4e8>
 8000f5a:	e773      	b.n	8000e44 <__aeabi_ddiv+0x3d0>
 8000f5c:	1d11      	adds	r1, r2, #4
 8000f5e:	4291      	cmp	r1, r2
 8000f60:	4192      	sbcs	r2, r2
 8000f62:	4252      	negs	r2, r2
 8000f64:	002e      	movs	r6, r5
 8000f66:	08c9      	lsrs	r1, r1, #3
 8000f68:	4493      	add	fp, r2
 8000f6a:	e76d      	b.n	8000e48 <__aeabi_ddiv+0x3d4>
 8000f6c:	9b00      	ldr	r3, [sp, #0]
 8000f6e:	3d01      	subs	r5, #1
 8000f70:	469c      	mov	ip, r3
 8000f72:	4461      	add	r1, ip
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d900      	bls.n	8000f7a <__aeabi_ddiv+0x506>
 8000f78:	e72c      	b.n	8000dd4 <__aeabi_ddiv+0x360>
 8000f7a:	428a      	cmp	r2, r1
 8000f7c:	d800      	bhi.n	8000f80 <__aeabi_ddiv+0x50c>
 8000f7e:	e729      	b.n	8000dd4 <__aeabi_ddiv+0x360>
 8000f80:	1e85      	subs	r5, r0, #2
 8000f82:	4461      	add	r1, ip
 8000f84:	e726      	b.n	8000dd4 <__aeabi_ddiv+0x360>
 8000f86:	9900      	ldr	r1, [sp, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	468c      	mov	ip, r1
 8000f8c:	4464      	add	r4, ip
 8000f8e:	42a1      	cmp	r1, r4
 8000f90:	d900      	bls.n	8000f94 <__aeabi_ddiv+0x520>
 8000f92:	e72d      	b.n	8000df0 <__aeabi_ddiv+0x37c>
 8000f94:	42a2      	cmp	r2, r4
 8000f96:	d800      	bhi.n	8000f9a <__aeabi_ddiv+0x526>
 8000f98:	e72a      	b.n	8000df0 <__aeabi_ddiv+0x37c>
 8000f9a:	1e83      	subs	r3, r0, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	e727      	b.n	8000df0 <__aeabi_ddiv+0x37c>
 8000fa0:	4287      	cmp	r7, r0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_ddiv+0x532>
 8000fa4:	e6fe      	b.n	8000da4 <__aeabi_ddiv+0x330>
 8000fa6:	45a9      	cmp	r9, r5
 8000fa8:	d900      	bls.n	8000fac <__aeabi_ddiv+0x538>
 8000faa:	e6fb      	b.n	8000da4 <__aeabi_ddiv+0x330>
 8000fac:	e6f5      	b.n	8000d9a <__aeabi_ddiv+0x326>
 8000fae:	42a2      	cmp	r2, r4
 8000fb0:	d800      	bhi.n	8000fb4 <__aeabi_ddiv+0x540>
 8000fb2:	e6b9      	b.n	8000d28 <__aeabi_ddiv+0x2b4>
 8000fb4:	1e83      	subs	r3, r0, #2
 8000fb6:	4464      	add	r4, ip
 8000fb8:	e6b6      	b.n	8000d28 <__aeabi_ddiv+0x2b4>
 8000fba:	428a      	cmp	r2, r1
 8000fbc:	d800      	bhi.n	8000fc0 <__aeabi_ddiv+0x54c>
 8000fbe:	e69f      	b.n	8000d00 <__aeabi_ddiv+0x28c>
 8000fc0:	46bc      	mov	ip, r7
 8000fc2:	1e83      	subs	r3, r0, #2
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	4461      	add	r1, ip
 8000fc8:	e69a      	b.n	8000d00 <__aeabi_ddiv+0x28c>
 8000fca:	000a      	movs	r2, r1
 8000fcc:	4284      	cmp	r4, r0
 8000fce:	d000      	beq.n	8000fd2 <__aeabi_ddiv+0x55e>
 8000fd0:	e72e      	b.n	8000e30 <__aeabi_ddiv+0x3bc>
 8000fd2:	454b      	cmp	r3, r9
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_ddiv+0x564>
 8000fd6:	e72b      	b.n	8000e30 <__aeabi_ddiv+0x3bc>
 8000fd8:	0035      	movs	r5, r6
 8000fda:	e72c      	b.n	8000e36 <__aeabi_ddiv+0x3c2>
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <__aeabi_ddiv+0x614>)
 8000fde:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <__aeabi_ddiv+0x628>)
 8000fe0:	4453      	add	r3, sl
 8000fe2:	4592      	cmp	sl, r2
 8000fe4:	db43      	blt.n	800106e <__aeabi_ddiv+0x5fa>
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4493      	add	fp, r2
 8000fec:	e72c      	b.n	8000e48 <__aeabi_ddiv+0x3d4>
 8000fee:	42ac      	cmp	r4, r5
 8000ff0:	d800      	bhi.n	8000ff4 <__aeabi_ddiv+0x580>
 8000ff2:	e6d7      	b.n	8000da4 <__aeabi_ddiv+0x330>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	425b      	negs	r3, r3
 8000ff8:	469c      	mov	ip, r3
 8000ffa:	9900      	ldr	r1, [sp, #0]
 8000ffc:	444d      	add	r5, r9
 8000ffe:	454d      	cmp	r5, r9
 8001000:	419b      	sbcs	r3, r3
 8001002:	44e3      	add	fp, ip
 8001004:	468c      	mov	ip, r1
 8001006:	425b      	negs	r3, r3
 8001008:	4463      	add	r3, ip
 800100a:	18c0      	adds	r0, r0, r3
 800100c:	e6cc      	b.n	8000da8 <__aeabi_ddiv+0x334>
 800100e:	201f      	movs	r0, #31
 8001010:	4240      	negs	r0, r0
 8001012:	1ac3      	subs	r3, r0, r3
 8001014:	4658      	mov	r0, fp
 8001016:	40d8      	lsrs	r0, r3
 8001018:	2920      	cmp	r1, #32
 800101a:	d004      	beq.n	8001026 <__aeabi_ddiv+0x5b2>
 800101c:	4659      	mov	r1, fp
 800101e:	4b20      	ldr	r3, [pc, #128]	@ (80010a0 <__aeabi_ddiv+0x62c>)
 8001020:	4453      	add	r3, sl
 8001022:	4099      	lsls	r1, r3
 8001024:	430a      	orrs	r2, r1
 8001026:	1e53      	subs	r3, r2, #1
 8001028:	419a      	sbcs	r2, r3
 800102a:	2307      	movs	r3, #7
 800102c:	0019      	movs	r1, r3
 800102e:	4302      	orrs	r2, r0
 8001030:	2400      	movs	r4, #0
 8001032:	4011      	ands	r1, r2
 8001034:	4213      	tst	r3, r2
 8001036:	d009      	beq.n	800104c <__aeabi_ddiv+0x5d8>
 8001038:	3308      	adds	r3, #8
 800103a:	4013      	ands	r3, r2
 800103c:	2b04      	cmp	r3, #4
 800103e:	d01d      	beq.n	800107c <__aeabi_ddiv+0x608>
 8001040:	1d13      	adds	r3, r2, #4
 8001042:	4293      	cmp	r3, r2
 8001044:	4189      	sbcs	r1, r1
 8001046:	001a      	movs	r2, r3
 8001048:	4249      	negs	r1, r1
 800104a:	0749      	lsls	r1, r1, #29
 800104c:	08d2      	lsrs	r2, r2, #3
 800104e:	430a      	orrs	r2, r1
 8001050:	4690      	mov	r8, r2
 8001052:	2300      	movs	r3, #0
 8001054:	e57a      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8001056:	4649      	mov	r1, r9
 8001058:	9f00      	ldr	r7, [sp, #0]
 800105a:	004d      	lsls	r5, r1, #1
 800105c:	454d      	cmp	r5, r9
 800105e:	4189      	sbcs	r1, r1
 8001060:	46bc      	mov	ip, r7
 8001062:	4249      	negs	r1, r1
 8001064:	4461      	add	r1, ip
 8001066:	46a9      	mov	r9, r5
 8001068:	3a02      	subs	r2, #2
 800106a:	1864      	adds	r4, r4, r1
 800106c:	e7ae      	b.n	8000fcc <__aeabi_ddiv+0x558>
 800106e:	2201      	movs	r2, #1
 8001070:	4252      	negs	r2, r2
 8001072:	e746      	b.n	8000f02 <__aeabi_ddiv+0x48e>
 8001074:	4599      	cmp	r9, r3
 8001076:	d3ee      	bcc.n	8001056 <__aeabi_ddiv+0x5e2>
 8001078:	000a      	movs	r2, r1
 800107a:	e7aa      	b.n	8000fd2 <__aeabi_ddiv+0x55e>
 800107c:	2100      	movs	r1, #0
 800107e:	e7e5      	b.n	800104c <__aeabi_ddiv+0x5d8>
 8001080:	0759      	lsls	r1, r3, #29
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	0b1c      	lsrs	r4, r3, #12
 8001086:	e7e1      	b.n	800104c <__aeabi_ddiv+0x5d8>
 8001088:	000003ff 	.word	0x000003ff
 800108c:	feffffff 	.word	0xfeffffff
 8001090:	000007fe 	.word	0x000007fe
 8001094:	000007ff 	.word	0x000007ff
 8001098:	0000041e 	.word	0x0000041e
 800109c:	fffffc02 	.word	0xfffffc02
 80010a0:	0000043e 	.word	0x0000043e

080010a4 <__eqdf2>:
 80010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a6:	4657      	mov	r7, sl
 80010a8:	46de      	mov	lr, fp
 80010aa:	464e      	mov	r6, r9
 80010ac:	4645      	mov	r5, r8
 80010ae:	b5e0      	push	{r5, r6, r7, lr}
 80010b0:	000d      	movs	r5, r1
 80010b2:	0004      	movs	r4, r0
 80010b4:	0fe8      	lsrs	r0, r5, #31
 80010b6:	4683      	mov	fp, r0
 80010b8:	0309      	lsls	r1, r1, #12
 80010ba:	0fd8      	lsrs	r0, r3, #31
 80010bc:	0b09      	lsrs	r1, r1, #12
 80010be:	4682      	mov	sl, r0
 80010c0:	4819      	ldr	r0, [pc, #100]	@ (8001128 <__eqdf2+0x84>)
 80010c2:	468c      	mov	ip, r1
 80010c4:	031f      	lsls	r7, r3, #12
 80010c6:	0069      	lsls	r1, r5, #1
 80010c8:	005e      	lsls	r6, r3, #1
 80010ca:	0d49      	lsrs	r1, r1, #21
 80010cc:	0b3f      	lsrs	r7, r7, #12
 80010ce:	0d76      	lsrs	r6, r6, #21
 80010d0:	4281      	cmp	r1, r0
 80010d2:	d018      	beq.n	8001106 <__eqdf2+0x62>
 80010d4:	4286      	cmp	r6, r0
 80010d6:	d00f      	beq.n	80010f8 <__eqdf2+0x54>
 80010d8:	2001      	movs	r0, #1
 80010da:	42b1      	cmp	r1, r6
 80010dc:	d10d      	bne.n	80010fa <__eqdf2+0x56>
 80010de:	45bc      	cmp	ip, r7
 80010e0:	d10b      	bne.n	80010fa <__eqdf2+0x56>
 80010e2:	4294      	cmp	r4, r2
 80010e4:	d109      	bne.n	80010fa <__eqdf2+0x56>
 80010e6:	45d3      	cmp	fp, sl
 80010e8:	d01c      	beq.n	8001124 <__eqdf2+0x80>
 80010ea:	2900      	cmp	r1, #0
 80010ec:	d105      	bne.n	80010fa <__eqdf2+0x56>
 80010ee:	4660      	mov	r0, ip
 80010f0:	4320      	orrs	r0, r4
 80010f2:	1e43      	subs	r3, r0, #1
 80010f4:	4198      	sbcs	r0, r3
 80010f6:	e000      	b.n	80010fa <__eqdf2+0x56>
 80010f8:	2001      	movs	r0, #1
 80010fa:	bcf0      	pop	{r4, r5, r6, r7}
 80010fc:	46bb      	mov	fp, r7
 80010fe:	46b2      	mov	sl, r6
 8001100:	46a9      	mov	r9, r5
 8001102:	46a0      	mov	r8, r4
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	2001      	movs	r0, #1
 8001108:	428e      	cmp	r6, r1
 800110a:	d1f6      	bne.n	80010fa <__eqdf2+0x56>
 800110c:	4661      	mov	r1, ip
 800110e:	4339      	orrs	r1, r7
 8001110:	000f      	movs	r7, r1
 8001112:	4317      	orrs	r7, r2
 8001114:	4327      	orrs	r7, r4
 8001116:	d1f0      	bne.n	80010fa <__eqdf2+0x56>
 8001118:	465b      	mov	r3, fp
 800111a:	4652      	mov	r2, sl
 800111c:	1a98      	subs	r0, r3, r2
 800111e:	1e43      	subs	r3, r0, #1
 8001120:	4198      	sbcs	r0, r3
 8001122:	e7ea      	b.n	80010fa <__eqdf2+0x56>
 8001124:	2000      	movs	r0, #0
 8001126:	e7e8      	b.n	80010fa <__eqdf2+0x56>
 8001128:	000007ff 	.word	0x000007ff

0800112c <__gedf2>:
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	4657      	mov	r7, sl
 8001130:	464e      	mov	r6, r9
 8001132:	4645      	mov	r5, r8
 8001134:	46de      	mov	lr, fp
 8001136:	b5e0      	push	{r5, r6, r7, lr}
 8001138:	000d      	movs	r5, r1
 800113a:	030e      	lsls	r6, r1, #12
 800113c:	0049      	lsls	r1, r1, #1
 800113e:	0d49      	lsrs	r1, r1, #21
 8001140:	468a      	mov	sl, r1
 8001142:	0fdf      	lsrs	r7, r3, #31
 8001144:	0fe9      	lsrs	r1, r5, #31
 8001146:	46bc      	mov	ip, r7
 8001148:	b083      	sub	sp, #12
 800114a:	4f2f      	ldr	r7, [pc, #188]	@ (8001208 <__gedf2+0xdc>)
 800114c:	0004      	movs	r4, r0
 800114e:	4680      	mov	r8, r0
 8001150:	9101      	str	r1, [sp, #4]
 8001152:	0058      	lsls	r0, r3, #1
 8001154:	0319      	lsls	r1, r3, #12
 8001156:	4691      	mov	r9, r2
 8001158:	0b36      	lsrs	r6, r6, #12
 800115a:	0b09      	lsrs	r1, r1, #12
 800115c:	0d40      	lsrs	r0, r0, #21
 800115e:	45ba      	cmp	sl, r7
 8001160:	d01d      	beq.n	800119e <__gedf2+0x72>
 8001162:	42b8      	cmp	r0, r7
 8001164:	d00d      	beq.n	8001182 <__gedf2+0x56>
 8001166:	4657      	mov	r7, sl
 8001168:	2f00      	cmp	r7, #0
 800116a:	d12a      	bne.n	80011c2 <__gedf2+0x96>
 800116c:	4334      	orrs	r4, r6
 800116e:	2800      	cmp	r0, #0
 8001170:	d124      	bne.n	80011bc <__gedf2+0x90>
 8001172:	430a      	orrs	r2, r1
 8001174:	d036      	beq.n	80011e4 <__gedf2+0xb8>
 8001176:	2c00      	cmp	r4, #0
 8001178:	d141      	bne.n	80011fe <__gedf2+0xd2>
 800117a:	4663      	mov	r3, ip
 800117c:	0058      	lsls	r0, r3, #1
 800117e:	3801      	subs	r0, #1
 8001180:	e015      	b.n	80011ae <__gedf2+0x82>
 8001182:	4311      	orrs	r1, r2
 8001184:	d138      	bne.n	80011f8 <__gedf2+0xcc>
 8001186:	4653      	mov	r3, sl
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <__gedf2+0x64>
 800118c:	4326      	orrs	r6, r4
 800118e:	d0f4      	beq.n	800117a <__gedf2+0x4e>
 8001190:	9b01      	ldr	r3, [sp, #4]
 8001192:	4563      	cmp	r3, ip
 8001194:	d107      	bne.n	80011a6 <__gedf2+0x7a>
 8001196:	9b01      	ldr	r3, [sp, #4]
 8001198:	0058      	lsls	r0, r3, #1
 800119a:	3801      	subs	r0, #1
 800119c:	e007      	b.n	80011ae <__gedf2+0x82>
 800119e:	4326      	orrs	r6, r4
 80011a0:	d12a      	bne.n	80011f8 <__gedf2+0xcc>
 80011a2:	4550      	cmp	r0, sl
 80011a4:	d021      	beq.n	80011ea <__gedf2+0xbe>
 80011a6:	2001      	movs	r0, #1
 80011a8:	9b01      	ldr	r3, [sp, #4]
 80011aa:	425f      	negs	r7, r3
 80011ac:	4338      	orrs	r0, r7
 80011ae:	b003      	add	sp, #12
 80011b0:	bcf0      	pop	{r4, r5, r6, r7}
 80011b2:	46bb      	mov	fp, r7
 80011b4:	46b2      	mov	sl, r6
 80011b6:	46a9      	mov	r9, r5
 80011b8:	46a0      	mov	r8, r4
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011bc:	2c00      	cmp	r4, #0
 80011be:	d0dc      	beq.n	800117a <__gedf2+0x4e>
 80011c0:	e7e6      	b.n	8001190 <__gedf2+0x64>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d0ef      	beq.n	80011a6 <__gedf2+0x7a>
 80011c6:	9b01      	ldr	r3, [sp, #4]
 80011c8:	4563      	cmp	r3, ip
 80011ca:	d1ec      	bne.n	80011a6 <__gedf2+0x7a>
 80011cc:	4582      	cmp	sl, r0
 80011ce:	dcea      	bgt.n	80011a6 <__gedf2+0x7a>
 80011d0:	dbe1      	blt.n	8001196 <__gedf2+0x6a>
 80011d2:	428e      	cmp	r6, r1
 80011d4:	d8e7      	bhi.n	80011a6 <__gedf2+0x7a>
 80011d6:	d1de      	bne.n	8001196 <__gedf2+0x6a>
 80011d8:	45c8      	cmp	r8, r9
 80011da:	d8e4      	bhi.n	80011a6 <__gedf2+0x7a>
 80011dc:	2000      	movs	r0, #0
 80011de:	45c8      	cmp	r8, r9
 80011e0:	d2e5      	bcs.n	80011ae <__gedf2+0x82>
 80011e2:	e7d8      	b.n	8001196 <__gedf2+0x6a>
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d0e2      	beq.n	80011ae <__gedf2+0x82>
 80011e8:	e7dd      	b.n	80011a6 <__gedf2+0x7a>
 80011ea:	4311      	orrs	r1, r2
 80011ec:	d104      	bne.n	80011f8 <__gedf2+0xcc>
 80011ee:	9b01      	ldr	r3, [sp, #4]
 80011f0:	4563      	cmp	r3, ip
 80011f2:	d1d8      	bne.n	80011a6 <__gedf2+0x7a>
 80011f4:	2000      	movs	r0, #0
 80011f6:	e7da      	b.n	80011ae <__gedf2+0x82>
 80011f8:	2002      	movs	r0, #2
 80011fa:	4240      	negs	r0, r0
 80011fc:	e7d7      	b.n	80011ae <__gedf2+0x82>
 80011fe:	9b01      	ldr	r3, [sp, #4]
 8001200:	4563      	cmp	r3, ip
 8001202:	d0e6      	beq.n	80011d2 <__gedf2+0xa6>
 8001204:	e7cf      	b.n	80011a6 <__gedf2+0x7a>
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	000007ff 	.word	0x000007ff

0800120c <__ledf2>:
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	4657      	mov	r7, sl
 8001210:	464e      	mov	r6, r9
 8001212:	4645      	mov	r5, r8
 8001214:	46de      	mov	lr, fp
 8001216:	b5e0      	push	{r5, r6, r7, lr}
 8001218:	000d      	movs	r5, r1
 800121a:	030e      	lsls	r6, r1, #12
 800121c:	0049      	lsls	r1, r1, #1
 800121e:	0d49      	lsrs	r1, r1, #21
 8001220:	468a      	mov	sl, r1
 8001222:	0fdf      	lsrs	r7, r3, #31
 8001224:	0fe9      	lsrs	r1, r5, #31
 8001226:	46bc      	mov	ip, r7
 8001228:	b083      	sub	sp, #12
 800122a:	4f2e      	ldr	r7, [pc, #184]	@ (80012e4 <__ledf2+0xd8>)
 800122c:	0004      	movs	r4, r0
 800122e:	4680      	mov	r8, r0
 8001230:	9101      	str	r1, [sp, #4]
 8001232:	0058      	lsls	r0, r3, #1
 8001234:	0319      	lsls	r1, r3, #12
 8001236:	4691      	mov	r9, r2
 8001238:	0b36      	lsrs	r6, r6, #12
 800123a:	0b09      	lsrs	r1, r1, #12
 800123c:	0d40      	lsrs	r0, r0, #21
 800123e:	45ba      	cmp	sl, r7
 8001240:	d01e      	beq.n	8001280 <__ledf2+0x74>
 8001242:	42b8      	cmp	r0, r7
 8001244:	d00d      	beq.n	8001262 <__ledf2+0x56>
 8001246:	4657      	mov	r7, sl
 8001248:	2f00      	cmp	r7, #0
 800124a:	d127      	bne.n	800129c <__ledf2+0x90>
 800124c:	4334      	orrs	r4, r6
 800124e:	2800      	cmp	r0, #0
 8001250:	d133      	bne.n	80012ba <__ledf2+0xae>
 8001252:	430a      	orrs	r2, r1
 8001254:	d034      	beq.n	80012c0 <__ledf2+0xb4>
 8001256:	2c00      	cmp	r4, #0
 8001258:	d140      	bne.n	80012dc <__ledf2+0xd0>
 800125a:	4663      	mov	r3, ip
 800125c:	0058      	lsls	r0, r3, #1
 800125e:	3801      	subs	r0, #1
 8001260:	e015      	b.n	800128e <__ledf2+0x82>
 8001262:	4311      	orrs	r1, r2
 8001264:	d112      	bne.n	800128c <__ledf2+0x80>
 8001266:	4653      	mov	r3, sl
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <__ledf2+0x64>
 800126c:	4326      	orrs	r6, r4
 800126e:	d0f4      	beq.n	800125a <__ledf2+0x4e>
 8001270:	9b01      	ldr	r3, [sp, #4]
 8001272:	4563      	cmp	r3, ip
 8001274:	d01d      	beq.n	80012b2 <__ledf2+0xa6>
 8001276:	2001      	movs	r0, #1
 8001278:	9b01      	ldr	r3, [sp, #4]
 800127a:	425f      	negs	r7, r3
 800127c:	4338      	orrs	r0, r7
 800127e:	e006      	b.n	800128e <__ledf2+0x82>
 8001280:	4326      	orrs	r6, r4
 8001282:	d103      	bne.n	800128c <__ledf2+0x80>
 8001284:	4550      	cmp	r0, sl
 8001286:	d1f6      	bne.n	8001276 <__ledf2+0x6a>
 8001288:	4311      	orrs	r1, r2
 800128a:	d01c      	beq.n	80012c6 <__ledf2+0xba>
 800128c:	2002      	movs	r0, #2
 800128e:	b003      	add	sp, #12
 8001290:	bcf0      	pop	{r4, r5, r6, r7}
 8001292:	46bb      	mov	fp, r7
 8001294:	46b2      	mov	sl, r6
 8001296:	46a9      	mov	r9, r5
 8001298:	46a0      	mov	r8, r4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	2800      	cmp	r0, #0
 800129e:	d0ea      	beq.n	8001276 <__ledf2+0x6a>
 80012a0:	9b01      	ldr	r3, [sp, #4]
 80012a2:	4563      	cmp	r3, ip
 80012a4:	d1e7      	bne.n	8001276 <__ledf2+0x6a>
 80012a6:	4582      	cmp	sl, r0
 80012a8:	dce5      	bgt.n	8001276 <__ledf2+0x6a>
 80012aa:	db02      	blt.n	80012b2 <__ledf2+0xa6>
 80012ac:	428e      	cmp	r6, r1
 80012ae:	d8e2      	bhi.n	8001276 <__ledf2+0x6a>
 80012b0:	d00e      	beq.n	80012d0 <__ledf2+0xc4>
 80012b2:	9b01      	ldr	r3, [sp, #4]
 80012b4:	0058      	lsls	r0, r3, #1
 80012b6:	3801      	subs	r0, #1
 80012b8:	e7e9      	b.n	800128e <__ledf2+0x82>
 80012ba:	2c00      	cmp	r4, #0
 80012bc:	d0cd      	beq.n	800125a <__ledf2+0x4e>
 80012be:	e7d7      	b.n	8001270 <__ledf2+0x64>
 80012c0:	2c00      	cmp	r4, #0
 80012c2:	d0e4      	beq.n	800128e <__ledf2+0x82>
 80012c4:	e7d7      	b.n	8001276 <__ledf2+0x6a>
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	2000      	movs	r0, #0
 80012ca:	4563      	cmp	r3, ip
 80012cc:	d0df      	beq.n	800128e <__ledf2+0x82>
 80012ce:	e7d2      	b.n	8001276 <__ledf2+0x6a>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8d0      	bhi.n	8001276 <__ledf2+0x6a>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d2d9      	bcs.n	800128e <__ledf2+0x82>
 80012da:	e7ea      	b.n	80012b2 <__ledf2+0xa6>
 80012dc:	9b01      	ldr	r3, [sp, #4]
 80012de:	4563      	cmp	r3, ip
 80012e0:	d0e4      	beq.n	80012ac <__ledf2+0xa0>
 80012e2:	e7c8      	b.n	8001276 <__ledf2+0x6a>
 80012e4:	000007ff 	.word	0x000007ff

080012e8 <__aeabi_dmul>:
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	4657      	mov	r7, sl
 80012ec:	464e      	mov	r6, r9
 80012ee:	46de      	mov	lr, fp
 80012f0:	4645      	mov	r5, r8
 80012f2:	b5e0      	push	{r5, r6, r7, lr}
 80012f4:	001f      	movs	r7, r3
 80012f6:	030b      	lsls	r3, r1, #12
 80012f8:	0b1b      	lsrs	r3, r3, #12
 80012fa:	0016      	movs	r6, r2
 80012fc:	469a      	mov	sl, r3
 80012fe:	0fca      	lsrs	r2, r1, #31
 8001300:	004b      	lsls	r3, r1, #1
 8001302:	0004      	movs	r4, r0
 8001304:	4691      	mov	r9, r2
 8001306:	b085      	sub	sp, #20
 8001308:	0d5b      	lsrs	r3, r3, #21
 800130a:	d100      	bne.n	800130e <__aeabi_dmul+0x26>
 800130c:	e1cf      	b.n	80016ae <__aeabi_dmul+0x3c6>
 800130e:	4acd      	ldr	r2, [pc, #820]	@ (8001644 <__aeabi_dmul+0x35c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d055      	beq.n	80013c0 <__aeabi_dmul+0xd8>
 8001314:	4651      	mov	r1, sl
 8001316:	0f42      	lsrs	r2, r0, #29
 8001318:	00c9      	lsls	r1, r1, #3
 800131a:	430a      	orrs	r2, r1
 800131c:	2180      	movs	r1, #128	@ 0x80
 800131e:	0409      	lsls	r1, r1, #16
 8001320:	4311      	orrs	r1, r2
 8001322:	00c2      	lsls	r2, r0, #3
 8001324:	4690      	mov	r8, r2
 8001326:	4ac8      	ldr	r2, [pc, #800]	@ (8001648 <__aeabi_dmul+0x360>)
 8001328:	468a      	mov	sl, r1
 800132a:	4693      	mov	fp, r2
 800132c:	449b      	add	fp, r3
 800132e:	2300      	movs	r3, #0
 8001330:	2500      	movs	r5, #0
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	033c      	lsls	r4, r7, #12
 8001336:	007b      	lsls	r3, r7, #1
 8001338:	0ffa      	lsrs	r2, r7, #31
 800133a:	9601      	str	r6, [sp, #4]
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	0d5b      	lsrs	r3, r3, #21
 8001340:	9200      	str	r2, [sp, #0]
 8001342:	d100      	bne.n	8001346 <__aeabi_dmul+0x5e>
 8001344:	e188      	b.n	8001658 <__aeabi_dmul+0x370>
 8001346:	4abf      	ldr	r2, [pc, #764]	@ (8001644 <__aeabi_dmul+0x35c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d100      	bne.n	800134e <__aeabi_dmul+0x66>
 800134c:	e092      	b.n	8001474 <__aeabi_dmul+0x18c>
 800134e:	4abe      	ldr	r2, [pc, #760]	@ (8001648 <__aeabi_dmul+0x360>)
 8001350:	4694      	mov	ip, r2
 8001352:	4463      	add	r3, ip
 8001354:	449b      	add	fp, r3
 8001356:	2d0a      	cmp	r5, #10
 8001358:	dc42      	bgt.n	80013e0 <__aeabi_dmul+0xf8>
 800135a:	00e4      	lsls	r4, r4, #3
 800135c:	0f73      	lsrs	r3, r6, #29
 800135e:	4323      	orrs	r3, r4
 8001360:	2480      	movs	r4, #128	@ 0x80
 8001362:	4649      	mov	r1, r9
 8001364:	0424      	lsls	r4, r4, #16
 8001366:	431c      	orrs	r4, r3
 8001368:	00f3      	lsls	r3, r6, #3
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	9b00      	ldr	r3, [sp, #0]
 800136e:	2000      	movs	r0, #0
 8001370:	4059      	eors	r1, r3
 8001372:	b2cb      	uxtb	r3, r1
 8001374:	9303      	str	r3, [sp, #12]
 8001376:	2d02      	cmp	r5, #2
 8001378:	dc00      	bgt.n	800137c <__aeabi_dmul+0x94>
 800137a:	e094      	b.n	80014a6 <__aeabi_dmul+0x1be>
 800137c:	2301      	movs	r3, #1
 800137e:	40ab      	lsls	r3, r5
 8001380:	001d      	movs	r5, r3
 8001382:	23a6      	movs	r3, #166	@ 0xa6
 8001384:	002a      	movs	r2, r5
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	401a      	ands	r2, r3
 800138a:	421d      	tst	r5, r3
 800138c:	d000      	beq.n	8001390 <__aeabi_dmul+0xa8>
 800138e:	e229      	b.n	80017e4 <__aeabi_dmul+0x4fc>
 8001390:	2390      	movs	r3, #144	@ 0x90
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	421d      	tst	r5, r3
 8001396:	d100      	bne.n	800139a <__aeabi_dmul+0xb2>
 8001398:	e24d      	b.n	8001836 <__aeabi_dmul+0x54e>
 800139a:	2300      	movs	r3, #0
 800139c:	2480      	movs	r4, #128	@ 0x80
 800139e:	4699      	mov	r9, r3
 80013a0:	0324      	lsls	r4, r4, #12
 80013a2:	4ba8      	ldr	r3, [pc, #672]	@ (8001644 <__aeabi_dmul+0x35c>)
 80013a4:	0010      	movs	r0, r2
 80013a6:	464a      	mov	r2, r9
 80013a8:	051b      	lsls	r3, r3, #20
 80013aa:	4323      	orrs	r3, r4
 80013ac:	07d2      	lsls	r2, r2, #31
 80013ae:	4313      	orrs	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	b005      	add	sp, #20
 80013b4:	bcf0      	pop	{r4, r5, r6, r7}
 80013b6:	46bb      	mov	fp, r7
 80013b8:	46b2      	mov	sl, r6
 80013ba:	46a9      	mov	r9, r5
 80013bc:	46a0      	mov	r8, r4
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c0:	4652      	mov	r2, sl
 80013c2:	4302      	orrs	r2, r0
 80013c4:	4690      	mov	r8, r2
 80013c6:	d000      	beq.n	80013ca <__aeabi_dmul+0xe2>
 80013c8:	e1ac      	b.n	8001724 <__aeabi_dmul+0x43c>
 80013ca:	469b      	mov	fp, r3
 80013cc:	2302      	movs	r3, #2
 80013ce:	4692      	mov	sl, r2
 80013d0:	2508      	movs	r5, #8
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	e7ae      	b.n	8001334 <__aeabi_dmul+0x4c>
 80013d6:	9b00      	ldr	r3, [sp, #0]
 80013d8:	46a2      	mov	sl, r4
 80013da:	4699      	mov	r9, r3
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	4698      	mov	r8, r3
 80013e0:	9b02      	ldr	r3, [sp, #8]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dmul+0x100>
 80013e6:	e1ca      	b.n	800177e <__aeabi_dmul+0x496>
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d100      	bne.n	80013ee <__aeabi_dmul+0x106>
 80013ec:	e192      	b.n	8001714 <__aeabi_dmul+0x42c>
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d110      	bne.n	8001414 <__aeabi_dmul+0x12c>
 80013f2:	2300      	movs	r3, #0
 80013f4:	2400      	movs	r4, #0
 80013f6:	2200      	movs	r2, #0
 80013f8:	e7d4      	b.n	80013a4 <__aeabi_dmul+0xbc>
 80013fa:	2201      	movs	r2, #1
 80013fc:	087b      	lsrs	r3, r7, #1
 80013fe:	403a      	ands	r2, r7
 8001400:	4313      	orrs	r3, r2
 8001402:	4652      	mov	r2, sl
 8001404:	07d2      	lsls	r2, r2, #31
 8001406:	4313      	orrs	r3, r2
 8001408:	4698      	mov	r8, r3
 800140a:	4653      	mov	r3, sl
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	469a      	mov	sl, r3
 8001410:	9b03      	ldr	r3, [sp, #12]
 8001412:	4699      	mov	r9, r3
 8001414:	465b      	mov	r3, fp
 8001416:	1c58      	adds	r0, r3, #1
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	445b      	add	r3, fp
 800141e:	2b00      	cmp	r3, #0
 8001420:	dc00      	bgt.n	8001424 <__aeabi_dmul+0x13c>
 8001422:	e1b1      	b.n	8001788 <__aeabi_dmul+0x4a0>
 8001424:	4642      	mov	r2, r8
 8001426:	0752      	lsls	r2, r2, #29
 8001428:	d00b      	beq.n	8001442 <__aeabi_dmul+0x15a>
 800142a:	220f      	movs	r2, #15
 800142c:	4641      	mov	r1, r8
 800142e:	400a      	ands	r2, r1
 8001430:	2a04      	cmp	r2, #4
 8001432:	d006      	beq.n	8001442 <__aeabi_dmul+0x15a>
 8001434:	4642      	mov	r2, r8
 8001436:	1d11      	adds	r1, r2, #4
 8001438:	4541      	cmp	r1, r8
 800143a:	4192      	sbcs	r2, r2
 800143c:	4688      	mov	r8, r1
 800143e:	4252      	negs	r2, r2
 8001440:	4492      	add	sl, r2
 8001442:	4652      	mov	r2, sl
 8001444:	01d2      	lsls	r2, r2, #7
 8001446:	d506      	bpl.n	8001456 <__aeabi_dmul+0x16e>
 8001448:	4652      	mov	r2, sl
 800144a:	4b80      	ldr	r3, [pc, #512]	@ (800164c <__aeabi_dmul+0x364>)
 800144c:	401a      	ands	r2, r3
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	4692      	mov	sl, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	18c3      	adds	r3, r0, r3
 8001456:	4a7e      	ldr	r2, [pc, #504]	@ (8001650 <__aeabi_dmul+0x368>)
 8001458:	4293      	cmp	r3, r2
 800145a:	dd00      	ble.n	800145e <__aeabi_dmul+0x176>
 800145c:	e18f      	b.n	800177e <__aeabi_dmul+0x496>
 800145e:	4642      	mov	r2, r8
 8001460:	08d1      	lsrs	r1, r2, #3
 8001462:	4652      	mov	r2, sl
 8001464:	0752      	lsls	r2, r2, #29
 8001466:	430a      	orrs	r2, r1
 8001468:	4651      	mov	r1, sl
 800146a:	055b      	lsls	r3, r3, #21
 800146c:	024c      	lsls	r4, r1, #9
 800146e:	0b24      	lsrs	r4, r4, #12
 8001470:	0d5b      	lsrs	r3, r3, #21
 8001472:	e797      	b.n	80013a4 <__aeabi_dmul+0xbc>
 8001474:	4b73      	ldr	r3, [pc, #460]	@ (8001644 <__aeabi_dmul+0x35c>)
 8001476:	4326      	orrs	r6, r4
 8001478:	469c      	mov	ip, r3
 800147a:	44e3      	add	fp, ip
 800147c:	2e00      	cmp	r6, #0
 800147e:	d100      	bne.n	8001482 <__aeabi_dmul+0x19a>
 8001480:	e16f      	b.n	8001762 <__aeabi_dmul+0x47a>
 8001482:	2303      	movs	r3, #3
 8001484:	4649      	mov	r1, r9
 8001486:	431d      	orrs	r5, r3
 8001488:	9b00      	ldr	r3, [sp, #0]
 800148a:	4059      	eors	r1, r3
 800148c:	b2cb      	uxtb	r3, r1
 800148e:	9303      	str	r3, [sp, #12]
 8001490:	2d0a      	cmp	r5, #10
 8001492:	dd00      	ble.n	8001496 <__aeabi_dmul+0x1ae>
 8001494:	e133      	b.n	80016fe <__aeabi_dmul+0x416>
 8001496:	2301      	movs	r3, #1
 8001498:	40ab      	lsls	r3, r5
 800149a:	001d      	movs	r5, r3
 800149c:	2303      	movs	r3, #3
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2288      	movs	r2, #136	@ 0x88
 80014a2:	422a      	tst	r2, r5
 80014a4:	d197      	bne.n	80013d6 <__aeabi_dmul+0xee>
 80014a6:	4642      	mov	r2, r8
 80014a8:	4643      	mov	r3, r8
 80014aa:	0412      	lsls	r2, r2, #16
 80014ac:	0c12      	lsrs	r2, r2, #16
 80014ae:	0016      	movs	r6, r2
 80014b0:	9801      	ldr	r0, [sp, #4]
 80014b2:	0c1d      	lsrs	r5, r3, #16
 80014b4:	0c03      	lsrs	r3, r0, #16
 80014b6:	0400      	lsls	r0, r0, #16
 80014b8:	0c00      	lsrs	r0, r0, #16
 80014ba:	4346      	muls	r6, r0
 80014bc:	46b4      	mov	ip, r6
 80014be:	001e      	movs	r6, r3
 80014c0:	436e      	muls	r6, r5
 80014c2:	9600      	str	r6, [sp, #0]
 80014c4:	0016      	movs	r6, r2
 80014c6:	0007      	movs	r7, r0
 80014c8:	435e      	muls	r6, r3
 80014ca:	4661      	mov	r1, ip
 80014cc:	46b0      	mov	r8, r6
 80014ce:	436f      	muls	r7, r5
 80014d0:	0c0e      	lsrs	r6, r1, #16
 80014d2:	44b8      	add	r8, r7
 80014d4:	4446      	add	r6, r8
 80014d6:	42b7      	cmp	r7, r6
 80014d8:	d905      	bls.n	80014e6 <__aeabi_dmul+0x1fe>
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0249      	lsls	r1, r1, #9
 80014de:	4688      	mov	r8, r1
 80014e0:	9f00      	ldr	r7, [sp, #0]
 80014e2:	4447      	add	r7, r8
 80014e4:	9700      	str	r7, [sp, #0]
 80014e6:	4661      	mov	r1, ip
 80014e8:	0409      	lsls	r1, r1, #16
 80014ea:	0c09      	lsrs	r1, r1, #16
 80014ec:	0c37      	lsrs	r7, r6, #16
 80014ee:	0436      	lsls	r6, r6, #16
 80014f0:	468c      	mov	ip, r1
 80014f2:	0031      	movs	r1, r6
 80014f4:	4461      	add	r1, ip
 80014f6:	9101      	str	r1, [sp, #4]
 80014f8:	0011      	movs	r1, r2
 80014fa:	0c26      	lsrs	r6, r4, #16
 80014fc:	0424      	lsls	r4, r4, #16
 80014fe:	0c24      	lsrs	r4, r4, #16
 8001500:	4361      	muls	r1, r4
 8001502:	468c      	mov	ip, r1
 8001504:	0021      	movs	r1, r4
 8001506:	4369      	muls	r1, r5
 8001508:	4689      	mov	r9, r1
 800150a:	4661      	mov	r1, ip
 800150c:	0c09      	lsrs	r1, r1, #16
 800150e:	4688      	mov	r8, r1
 8001510:	4372      	muls	r2, r6
 8001512:	444a      	add	r2, r9
 8001514:	4442      	add	r2, r8
 8001516:	4375      	muls	r5, r6
 8001518:	4591      	cmp	r9, r2
 800151a:	d903      	bls.n	8001524 <__aeabi_dmul+0x23c>
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	0249      	lsls	r1, r1, #9
 8001520:	4688      	mov	r8, r1
 8001522:	4445      	add	r5, r8
 8001524:	0c11      	lsrs	r1, r2, #16
 8001526:	4688      	mov	r8, r1
 8001528:	4661      	mov	r1, ip
 800152a:	0409      	lsls	r1, r1, #16
 800152c:	0c09      	lsrs	r1, r1, #16
 800152e:	468c      	mov	ip, r1
 8001530:	0412      	lsls	r2, r2, #16
 8001532:	4462      	add	r2, ip
 8001534:	18b9      	adds	r1, r7, r2
 8001536:	9102      	str	r1, [sp, #8]
 8001538:	4651      	mov	r1, sl
 800153a:	0c09      	lsrs	r1, r1, #16
 800153c:	468c      	mov	ip, r1
 800153e:	4651      	mov	r1, sl
 8001540:	040f      	lsls	r7, r1, #16
 8001542:	0c3f      	lsrs	r7, r7, #16
 8001544:	0039      	movs	r1, r7
 8001546:	4341      	muls	r1, r0
 8001548:	4445      	add	r5, r8
 800154a:	4688      	mov	r8, r1
 800154c:	4661      	mov	r1, ip
 800154e:	4341      	muls	r1, r0
 8001550:	468a      	mov	sl, r1
 8001552:	4641      	mov	r1, r8
 8001554:	4660      	mov	r0, ip
 8001556:	0c09      	lsrs	r1, r1, #16
 8001558:	4689      	mov	r9, r1
 800155a:	4358      	muls	r0, r3
 800155c:	437b      	muls	r3, r7
 800155e:	4453      	add	r3, sl
 8001560:	444b      	add	r3, r9
 8001562:	459a      	cmp	sl, r3
 8001564:	d903      	bls.n	800156e <__aeabi_dmul+0x286>
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	0249      	lsls	r1, r1, #9
 800156a:	4689      	mov	r9, r1
 800156c:	4448      	add	r0, r9
 800156e:	0c19      	lsrs	r1, r3, #16
 8001570:	4689      	mov	r9, r1
 8001572:	4641      	mov	r1, r8
 8001574:	0409      	lsls	r1, r1, #16
 8001576:	0c09      	lsrs	r1, r1, #16
 8001578:	4688      	mov	r8, r1
 800157a:	0039      	movs	r1, r7
 800157c:	4361      	muls	r1, r4
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	4443      	add	r3, r8
 8001582:	4688      	mov	r8, r1
 8001584:	4661      	mov	r1, ip
 8001586:	434c      	muls	r4, r1
 8001588:	4371      	muls	r1, r6
 800158a:	468c      	mov	ip, r1
 800158c:	4641      	mov	r1, r8
 800158e:	4377      	muls	r7, r6
 8001590:	0c0e      	lsrs	r6, r1, #16
 8001592:	193f      	adds	r7, r7, r4
 8001594:	19f6      	adds	r6, r6, r7
 8001596:	4448      	add	r0, r9
 8001598:	42b4      	cmp	r4, r6
 800159a:	d903      	bls.n	80015a4 <__aeabi_dmul+0x2bc>
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	0249      	lsls	r1, r1, #9
 80015a0:	4689      	mov	r9, r1
 80015a2:	44cc      	add	ip, r9
 80015a4:	9902      	ldr	r1, [sp, #8]
 80015a6:	9f00      	ldr	r7, [sp, #0]
 80015a8:	4689      	mov	r9, r1
 80015aa:	0431      	lsls	r1, r6, #16
 80015ac:	444f      	add	r7, r9
 80015ae:	4689      	mov	r9, r1
 80015b0:	4641      	mov	r1, r8
 80015b2:	4297      	cmp	r7, r2
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	040c      	lsls	r4, r1, #16
 80015b8:	0c24      	lsrs	r4, r4, #16
 80015ba:	444c      	add	r4, r9
 80015bc:	18ff      	adds	r7, r7, r3
 80015be:	4252      	negs	r2, r2
 80015c0:	1964      	adds	r4, r4, r5
 80015c2:	18a1      	adds	r1, r4, r2
 80015c4:	429f      	cmp	r7, r3
 80015c6:	419b      	sbcs	r3, r3
 80015c8:	4688      	mov	r8, r1
 80015ca:	4682      	mov	sl, r0
 80015cc:	425b      	negs	r3, r3
 80015ce:	4699      	mov	r9, r3
 80015d0:	4590      	cmp	r8, r2
 80015d2:	4192      	sbcs	r2, r2
 80015d4:	42ac      	cmp	r4, r5
 80015d6:	41a4      	sbcs	r4, r4
 80015d8:	44c2      	add	sl, r8
 80015da:	44d1      	add	r9, sl
 80015dc:	4252      	negs	r2, r2
 80015de:	4264      	negs	r4, r4
 80015e0:	4314      	orrs	r4, r2
 80015e2:	4599      	cmp	r9, r3
 80015e4:	419b      	sbcs	r3, r3
 80015e6:	4582      	cmp	sl, r0
 80015e8:	4192      	sbcs	r2, r2
 80015ea:	425b      	negs	r3, r3
 80015ec:	4252      	negs	r2, r2
 80015ee:	4313      	orrs	r3, r2
 80015f0:	464a      	mov	r2, r9
 80015f2:	0c36      	lsrs	r6, r6, #16
 80015f4:	19a4      	adds	r4, r4, r6
 80015f6:	18e3      	adds	r3, r4, r3
 80015f8:	4463      	add	r3, ip
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	0dd2      	lsrs	r2, r2, #23
 80015fe:	431a      	orrs	r2, r3
 8001600:	9901      	ldr	r1, [sp, #4]
 8001602:	4692      	mov	sl, r2
 8001604:	027a      	lsls	r2, r7, #9
 8001606:	430a      	orrs	r2, r1
 8001608:	1e50      	subs	r0, r2, #1
 800160a:	4182      	sbcs	r2, r0
 800160c:	0dff      	lsrs	r7, r7, #23
 800160e:	4317      	orrs	r7, r2
 8001610:	464a      	mov	r2, r9
 8001612:	0252      	lsls	r2, r2, #9
 8001614:	4317      	orrs	r7, r2
 8001616:	46b8      	mov	r8, r7
 8001618:	01db      	lsls	r3, r3, #7
 800161a:	d500      	bpl.n	800161e <__aeabi_dmul+0x336>
 800161c:	e6ed      	b.n	80013fa <__aeabi_dmul+0x112>
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <__aeabi_dmul+0x36c>)
 8001620:	9a03      	ldr	r2, [sp, #12]
 8001622:	445b      	add	r3, fp
 8001624:	4691      	mov	r9, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	dc00      	bgt.n	800162c <__aeabi_dmul+0x344>
 800162a:	e0ac      	b.n	8001786 <__aeabi_dmul+0x49e>
 800162c:	003a      	movs	r2, r7
 800162e:	0752      	lsls	r2, r2, #29
 8001630:	d100      	bne.n	8001634 <__aeabi_dmul+0x34c>
 8001632:	e710      	b.n	8001456 <__aeabi_dmul+0x16e>
 8001634:	220f      	movs	r2, #15
 8001636:	4658      	mov	r0, fp
 8001638:	403a      	ands	r2, r7
 800163a:	2a04      	cmp	r2, #4
 800163c:	d000      	beq.n	8001640 <__aeabi_dmul+0x358>
 800163e:	e6f9      	b.n	8001434 <__aeabi_dmul+0x14c>
 8001640:	e709      	b.n	8001456 <__aeabi_dmul+0x16e>
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	000007ff 	.word	0x000007ff
 8001648:	fffffc01 	.word	0xfffffc01
 800164c:	feffffff 	.word	0xfeffffff
 8001650:	000007fe 	.word	0x000007fe
 8001654:	000003ff 	.word	0x000003ff
 8001658:	0022      	movs	r2, r4
 800165a:	4332      	orrs	r2, r6
 800165c:	d06f      	beq.n	800173e <__aeabi_dmul+0x456>
 800165e:	2c00      	cmp	r4, #0
 8001660:	d100      	bne.n	8001664 <__aeabi_dmul+0x37c>
 8001662:	e0c2      	b.n	80017ea <__aeabi_dmul+0x502>
 8001664:	0020      	movs	r0, r4
 8001666:	f000 fddf 	bl	8002228 <__clzsi2>
 800166a:	0002      	movs	r2, r0
 800166c:	0003      	movs	r3, r0
 800166e:	3a0b      	subs	r2, #11
 8001670:	201d      	movs	r0, #29
 8001672:	1a82      	subs	r2, r0, r2
 8001674:	0030      	movs	r0, r6
 8001676:	0019      	movs	r1, r3
 8001678:	40d0      	lsrs	r0, r2
 800167a:	3908      	subs	r1, #8
 800167c:	408c      	lsls	r4, r1
 800167e:	0002      	movs	r2, r0
 8001680:	4322      	orrs	r2, r4
 8001682:	0034      	movs	r4, r6
 8001684:	408c      	lsls	r4, r1
 8001686:	4659      	mov	r1, fp
 8001688:	1acb      	subs	r3, r1, r3
 800168a:	4986      	ldr	r1, [pc, #536]	@ (80018a4 <__aeabi_dmul+0x5bc>)
 800168c:	468b      	mov	fp, r1
 800168e:	449b      	add	fp, r3
 8001690:	2d0a      	cmp	r5, #10
 8001692:	dd00      	ble.n	8001696 <__aeabi_dmul+0x3ae>
 8001694:	e6a4      	b.n	80013e0 <__aeabi_dmul+0xf8>
 8001696:	4649      	mov	r1, r9
 8001698:	9b00      	ldr	r3, [sp, #0]
 800169a:	9401      	str	r4, [sp, #4]
 800169c:	4059      	eors	r1, r3
 800169e:	b2cb      	uxtb	r3, r1
 80016a0:	0014      	movs	r4, r2
 80016a2:	2000      	movs	r0, #0
 80016a4:	9303      	str	r3, [sp, #12]
 80016a6:	2d02      	cmp	r5, #2
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dmul+0x3c4>
 80016aa:	e667      	b.n	800137c <__aeabi_dmul+0x94>
 80016ac:	e6fb      	b.n	80014a6 <__aeabi_dmul+0x1be>
 80016ae:	4653      	mov	r3, sl
 80016b0:	4303      	orrs	r3, r0
 80016b2:	4698      	mov	r8, r3
 80016b4:	d03c      	beq.n	8001730 <__aeabi_dmul+0x448>
 80016b6:	4653      	mov	r3, sl
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_dmul+0x3d6>
 80016bc:	e0a3      	b.n	8001806 <__aeabi_dmul+0x51e>
 80016be:	4650      	mov	r0, sl
 80016c0:	f000 fdb2 	bl	8002228 <__clzsi2>
 80016c4:	230b      	movs	r3, #11
 80016c6:	425b      	negs	r3, r3
 80016c8:	469c      	mov	ip, r3
 80016ca:	0002      	movs	r2, r0
 80016cc:	4484      	add	ip, r0
 80016ce:	0011      	movs	r1, r2
 80016d0:	4650      	mov	r0, sl
 80016d2:	3908      	subs	r1, #8
 80016d4:	4088      	lsls	r0, r1
 80016d6:	231d      	movs	r3, #29
 80016d8:	4680      	mov	r8, r0
 80016da:	4660      	mov	r0, ip
 80016dc:	1a1b      	subs	r3, r3, r0
 80016de:	0020      	movs	r0, r4
 80016e0:	40d8      	lsrs	r0, r3
 80016e2:	0003      	movs	r3, r0
 80016e4:	4640      	mov	r0, r8
 80016e6:	4303      	orrs	r3, r0
 80016e8:	469a      	mov	sl, r3
 80016ea:	0023      	movs	r3, r4
 80016ec:	408b      	lsls	r3, r1
 80016ee:	4698      	mov	r8, r3
 80016f0:	4b6c      	ldr	r3, [pc, #432]	@ (80018a4 <__aeabi_dmul+0x5bc>)
 80016f2:	2500      	movs	r5, #0
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	469b      	mov	fp, r3
 80016f8:	2300      	movs	r3, #0
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	e61a      	b.n	8001334 <__aeabi_dmul+0x4c>
 80016fe:	2d0f      	cmp	r5, #15
 8001700:	d000      	beq.n	8001704 <__aeabi_dmul+0x41c>
 8001702:	e0c9      	b.n	8001898 <__aeabi_dmul+0x5b0>
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	4652      	mov	r2, sl
 8001708:	031b      	lsls	r3, r3, #12
 800170a:	421a      	tst	r2, r3
 800170c:	d002      	beq.n	8001714 <__aeabi_dmul+0x42c>
 800170e:	421c      	tst	r4, r3
 8001710:	d100      	bne.n	8001714 <__aeabi_dmul+0x42c>
 8001712:	e092      	b.n	800183a <__aeabi_dmul+0x552>
 8001714:	2480      	movs	r4, #128	@ 0x80
 8001716:	4653      	mov	r3, sl
 8001718:	0324      	lsls	r4, r4, #12
 800171a:	431c      	orrs	r4, r3
 800171c:	0324      	lsls	r4, r4, #12
 800171e:	4642      	mov	r2, r8
 8001720:	0b24      	lsrs	r4, r4, #12
 8001722:	e63e      	b.n	80013a2 <__aeabi_dmul+0xba>
 8001724:	469b      	mov	fp, r3
 8001726:	2303      	movs	r3, #3
 8001728:	4680      	mov	r8, r0
 800172a:	250c      	movs	r5, #12
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	e601      	b.n	8001334 <__aeabi_dmul+0x4c>
 8001730:	2300      	movs	r3, #0
 8001732:	469a      	mov	sl, r3
 8001734:	469b      	mov	fp, r3
 8001736:	3301      	adds	r3, #1
 8001738:	2504      	movs	r5, #4
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	e5fa      	b.n	8001334 <__aeabi_dmul+0x4c>
 800173e:	2101      	movs	r1, #1
 8001740:	430d      	orrs	r5, r1
 8001742:	2d0a      	cmp	r5, #10
 8001744:	dd00      	ble.n	8001748 <__aeabi_dmul+0x460>
 8001746:	e64b      	b.n	80013e0 <__aeabi_dmul+0xf8>
 8001748:	4649      	mov	r1, r9
 800174a:	9800      	ldr	r0, [sp, #0]
 800174c:	4041      	eors	r1, r0
 800174e:	b2c9      	uxtb	r1, r1
 8001750:	9103      	str	r1, [sp, #12]
 8001752:	2d02      	cmp	r5, #2
 8001754:	dc00      	bgt.n	8001758 <__aeabi_dmul+0x470>
 8001756:	e096      	b.n	8001886 <__aeabi_dmul+0x59e>
 8001758:	2300      	movs	r3, #0
 800175a:	2400      	movs	r4, #0
 800175c:	2001      	movs	r0, #1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	e60c      	b.n	800137c <__aeabi_dmul+0x94>
 8001762:	4649      	mov	r1, r9
 8001764:	2302      	movs	r3, #2
 8001766:	9a00      	ldr	r2, [sp, #0]
 8001768:	432b      	orrs	r3, r5
 800176a:	4051      	eors	r1, r2
 800176c:	b2ca      	uxtb	r2, r1
 800176e:	9203      	str	r2, [sp, #12]
 8001770:	2b0a      	cmp	r3, #10
 8001772:	dd00      	ble.n	8001776 <__aeabi_dmul+0x48e>
 8001774:	e634      	b.n	80013e0 <__aeabi_dmul+0xf8>
 8001776:	2d00      	cmp	r5, #0
 8001778:	d157      	bne.n	800182a <__aeabi_dmul+0x542>
 800177a:	9b03      	ldr	r3, [sp, #12]
 800177c:	4699      	mov	r9, r3
 800177e:	2400      	movs	r4, #0
 8001780:	2200      	movs	r2, #0
 8001782:	4b49      	ldr	r3, [pc, #292]	@ (80018a8 <__aeabi_dmul+0x5c0>)
 8001784:	e60e      	b.n	80013a4 <__aeabi_dmul+0xbc>
 8001786:	4658      	mov	r0, fp
 8001788:	2101      	movs	r1, #1
 800178a:	1ac9      	subs	r1, r1, r3
 800178c:	2938      	cmp	r1, #56	@ 0x38
 800178e:	dd00      	ble.n	8001792 <__aeabi_dmul+0x4aa>
 8001790:	e62f      	b.n	80013f2 <__aeabi_dmul+0x10a>
 8001792:	291f      	cmp	r1, #31
 8001794:	dd56      	ble.n	8001844 <__aeabi_dmul+0x55c>
 8001796:	221f      	movs	r2, #31
 8001798:	4654      	mov	r4, sl
 800179a:	4252      	negs	r2, r2
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	40dc      	lsrs	r4, r3
 80017a0:	2920      	cmp	r1, #32
 80017a2:	d007      	beq.n	80017b4 <__aeabi_dmul+0x4cc>
 80017a4:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <__aeabi_dmul+0x5c4>)
 80017a6:	4642      	mov	r2, r8
 80017a8:	469c      	mov	ip, r3
 80017aa:	4653      	mov	r3, sl
 80017ac:	4460      	add	r0, ip
 80017ae:	4083      	lsls	r3, r0
 80017b0:	431a      	orrs	r2, r3
 80017b2:	4690      	mov	r8, r2
 80017b4:	4642      	mov	r2, r8
 80017b6:	2107      	movs	r1, #7
 80017b8:	1e53      	subs	r3, r2, #1
 80017ba:	419a      	sbcs	r2, r3
 80017bc:	000b      	movs	r3, r1
 80017be:	4322      	orrs	r2, r4
 80017c0:	4013      	ands	r3, r2
 80017c2:	2400      	movs	r4, #0
 80017c4:	4211      	tst	r1, r2
 80017c6:	d009      	beq.n	80017dc <__aeabi_dmul+0x4f4>
 80017c8:	230f      	movs	r3, #15
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d05d      	beq.n	800188c <__aeabi_dmul+0x5a4>
 80017d0:	1d11      	adds	r1, r2, #4
 80017d2:	4291      	cmp	r1, r2
 80017d4:	419b      	sbcs	r3, r3
 80017d6:	000a      	movs	r2, r1
 80017d8:	425b      	negs	r3, r3
 80017da:	075b      	lsls	r3, r3, #29
 80017dc:	08d2      	lsrs	r2, r2, #3
 80017de:	431a      	orrs	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	e5df      	b.n	80013a4 <__aeabi_dmul+0xbc>
 80017e4:	9b03      	ldr	r3, [sp, #12]
 80017e6:	4699      	mov	r9, r3
 80017e8:	e5fa      	b.n	80013e0 <__aeabi_dmul+0xf8>
 80017ea:	9801      	ldr	r0, [sp, #4]
 80017ec:	f000 fd1c 	bl	8002228 <__clzsi2>
 80017f0:	0002      	movs	r2, r0
 80017f2:	0003      	movs	r3, r0
 80017f4:	3215      	adds	r2, #21
 80017f6:	3320      	adds	r3, #32
 80017f8:	2a1c      	cmp	r2, #28
 80017fa:	dc00      	bgt.n	80017fe <__aeabi_dmul+0x516>
 80017fc:	e738      	b.n	8001670 <__aeabi_dmul+0x388>
 80017fe:	9a01      	ldr	r2, [sp, #4]
 8001800:	3808      	subs	r0, #8
 8001802:	4082      	lsls	r2, r0
 8001804:	e73f      	b.n	8001686 <__aeabi_dmul+0x39e>
 8001806:	f000 fd0f 	bl	8002228 <__clzsi2>
 800180a:	2315      	movs	r3, #21
 800180c:	469c      	mov	ip, r3
 800180e:	4484      	add	ip, r0
 8001810:	0002      	movs	r2, r0
 8001812:	4663      	mov	r3, ip
 8001814:	3220      	adds	r2, #32
 8001816:	2b1c      	cmp	r3, #28
 8001818:	dc00      	bgt.n	800181c <__aeabi_dmul+0x534>
 800181a:	e758      	b.n	80016ce <__aeabi_dmul+0x3e6>
 800181c:	2300      	movs	r3, #0
 800181e:	4698      	mov	r8, r3
 8001820:	0023      	movs	r3, r4
 8001822:	3808      	subs	r0, #8
 8001824:	4083      	lsls	r3, r0
 8001826:	469a      	mov	sl, r3
 8001828:	e762      	b.n	80016f0 <__aeabi_dmul+0x408>
 800182a:	001d      	movs	r5, r3
 800182c:	2300      	movs	r3, #0
 800182e:	2400      	movs	r4, #0
 8001830:	2002      	movs	r0, #2
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	e5a2      	b.n	800137c <__aeabi_dmul+0x94>
 8001836:	9002      	str	r0, [sp, #8]
 8001838:	e632      	b.n	80014a0 <__aeabi_dmul+0x1b8>
 800183a:	431c      	orrs	r4, r3
 800183c:	9b00      	ldr	r3, [sp, #0]
 800183e:	9a01      	ldr	r2, [sp, #4]
 8001840:	4699      	mov	r9, r3
 8001842:	e5ae      	b.n	80013a2 <__aeabi_dmul+0xba>
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <__aeabi_dmul+0x5c8>)
 8001846:	4652      	mov	r2, sl
 8001848:	18c3      	adds	r3, r0, r3
 800184a:	4640      	mov	r0, r8
 800184c:	409a      	lsls	r2, r3
 800184e:	40c8      	lsrs	r0, r1
 8001850:	4302      	orrs	r2, r0
 8001852:	4640      	mov	r0, r8
 8001854:	4098      	lsls	r0, r3
 8001856:	0003      	movs	r3, r0
 8001858:	1e58      	subs	r0, r3, #1
 800185a:	4183      	sbcs	r3, r0
 800185c:	4654      	mov	r4, sl
 800185e:	431a      	orrs	r2, r3
 8001860:	40cc      	lsrs	r4, r1
 8001862:	0753      	lsls	r3, r2, #29
 8001864:	d009      	beq.n	800187a <__aeabi_dmul+0x592>
 8001866:	230f      	movs	r3, #15
 8001868:	4013      	ands	r3, r2
 800186a:	2b04      	cmp	r3, #4
 800186c:	d005      	beq.n	800187a <__aeabi_dmul+0x592>
 800186e:	1d13      	adds	r3, r2, #4
 8001870:	4293      	cmp	r3, r2
 8001872:	4192      	sbcs	r2, r2
 8001874:	4252      	negs	r2, r2
 8001876:	18a4      	adds	r4, r4, r2
 8001878:	001a      	movs	r2, r3
 800187a:	0223      	lsls	r3, r4, #8
 800187c:	d508      	bpl.n	8001890 <__aeabi_dmul+0x5a8>
 800187e:	2301      	movs	r3, #1
 8001880:	2400      	movs	r4, #0
 8001882:	2200      	movs	r2, #0
 8001884:	e58e      	b.n	80013a4 <__aeabi_dmul+0xbc>
 8001886:	4689      	mov	r9, r1
 8001888:	2400      	movs	r4, #0
 800188a:	e58b      	b.n	80013a4 <__aeabi_dmul+0xbc>
 800188c:	2300      	movs	r3, #0
 800188e:	e7a5      	b.n	80017dc <__aeabi_dmul+0x4f4>
 8001890:	0763      	lsls	r3, r4, #29
 8001892:	0264      	lsls	r4, r4, #9
 8001894:	0b24      	lsrs	r4, r4, #12
 8001896:	e7a1      	b.n	80017dc <__aeabi_dmul+0x4f4>
 8001898:	9b00      	ldr	r3, [sp, #0]
 800189a:	46a2      	mov	sl, r4
 800189c:	4699      	mov	r9, r3
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	4698      	mov	r8, r3
 80018a2:	e737      	b.n	8001714 <__aeabi_dmul+0x42c>
 80018a4:	fffffc0d 	.word	0xfffffc0d
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	0000043e 	.word	0x0000043e
 80018b0:	0000041e 	.word	0x0000041e

080018b4 <__aeabi_dsub>:
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	4657      	mov	r7, sl
 80018b8:	464e      	mov	r6, r9
 80018ba:	4645      	mov	r5, r8
 80018bc:	46de      	mov	lr, fp
 80018be:	b5e0      	push	{r5, r6, r7, lr}
 80018c0:	b083      	sub	sp, #12
 80018c2:	9000      	str	r0, [sp, #0]
 80018c4:	9101      	str	r1, [sp, #4]
 80018c6:	030c      	lsls	r4, r1, #12
 80018c8:	004d      	lsls	r5, r1, #1
 80018ca:	0fce      	lsrs	r6, r1, #31
 80018cc:	0a61      	lsrs	r1, r4, #9
 80018ce:	9c00      	ldr	r4, [sp, #0]
 80018d0:	005f      	lsls	r7, r3, #1
 80018d2:	0f64      	lsrs	r4, r4, #29
 80018d4:	430c      	orrs	r4, r1
 80018d6:	9900      	ldr	r1, [sp, #0]
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	00c8      	lsls	r0, r1, #3
 80018de:	0319      	lsls	r1, r3, #12
 80018e0:	0d7b      	lsrs	r3, r7, #21
 80018e2:	4699      	mov	r9, r3
 80018e4:	9b01      	ldr	r3, [sp, #4]
 80018e6:	4fcc      	ldr	r7, [pc, #816]	@ (8001c18 <__aeabi_dsub+0x364>)
 80018e8:	0fdb      	lsrs	r3, r3, #31
 80018ea:	469c      	mov	ip, r3
 80018ec:	0a4b      	lsrs	r3, r1, #9
 80018ee:	9900      	ldr	r1, [sp, #0]
 80018f0:	4680      	mov	r8, r0
 80018f2:	0f49      	lsrs	r1, r1, #29
 80018f4:	4319      	orrs	r1, r3
 80018f6:	9b00      	ldr	r3, [sp, #0]
 80018f8:	468b      	mov	fp, r1
 80018fa:	00da      	lsls	r2, r3, #3
 80018fc:	4692      	mov	sl, r2
 80018fe:	0d6d      	lsrs	r5, r5, #21
 8001900:	45b9      	cmp	r9, r7
 8001902:	d100      	bne.n	8001906 <__aeabi_dsub+0x52>
 8001904:	e0bf      	b.n	8001a86 <__aeabi_dsub+0x1d2>
 8001906:	2301      	movs	r3, #1
 8001908:	4661      	mov	r1, ip
 800190a:	4059      	eors	r1, r3
 800190c:	464b      	mov	r3, r9
 800190e:	468c      	mov	ip, r1
 8001910:	1aeb      	subs	r3, r5, r3
 8001912:	428e      	cmp	r6, r1
 8001914:	d075      	beq.n	8001a02 <__aeabi_dsub+0x14e>
 8001916:	2b00      	cmp	r3, #0
 8001918:	dc00      	bgt.n	800191c <__aeabi_dsub+0x68>
 800191a:	e2a3      	b.n	8001e64 <__aeabi_dsub+0x5b0>
 800191c:	4649      	mov	r1, r9
 800191e:	2900      	cmp	r1, #0
 8001920:	d100      	bne.n	8001924 <__aeabi_dsub+0x70>
 8001922:	e0ce      	b.n	8001ac2 <__aeabi_dsub+0x20e>
 8001924:	42bd      	cmp	r5, r7
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x76>
 8001928:	e200      	b.n	8001d2c <__aeabi_dsub+0x478>
 800192a:	2701      	movs	r7, #1
 800192c:	2b38      	cmp	r3, #56	@ 0x38
 800192e:	dc19      	bgt.n	8001964 <__aeabi_dsub+0xb0>
 8001930:	2780      	movs	r7, #128	@ 0x80
 8001932:	4659      	mov	r1, fp
 8001934:	043f      	lsls	r7, r7, #16
 8001936:	4339      	orrs	r1, r7
 8001938:	468b      	mov	fp, r1
 800193a:	2b1f      	cmp	r3, #31
 800193c:	dd00      	ble.n	8001940 <__aeabi_dsub+0x8c>
 800193e:	e1fa      	b.n	8001d36 <__aeabi_dsub+0x482>
 8001940:	2720      	movs	r7, #32
 8001942:	1af9      	subs	r1, r7, r3
 8001944:	468c      	mov	ip, r1
 8001946:	4659      	mov	r1, fp
 8001948:	4667      	mov	r7, ip
 800194a:	40b9      	lsls	r1, r7
 800194c:	000f      	movs	r7, r1
 800194e:	0011      	movs	r1, r2
 8001950:	40d9      	lsrs	r1, r3
 8001952:	430f      	orrs	r7, r1
 8001954:	4661      	mov	r1, ip
 8001956:	408a      	lsls	r2, r1
 8001958:	1e51      	subs	r1, r2, #1
 800195a:	418a      	sbcs	r2, r1
 800195c:	4659      	mov	r1, fp
 800195e:	40d9      	lsrs	r1, r3
 8001960:	4317      	orrs	r7, r2
 8001962:	1a64      	subs	r4, r4, r1
 8001964:	1bc7      	subs	r7, r0, r7
 8001966:	42b8      	cmp	r0, r7
 8001968:	4180      	sbcs	r0, r0
 800196a:	4240      	negs	r0, r0
 800196c:	1a24      	subs	r4, r4, r0
 800196e:	0223      	lsls	r3, r4, #8
 8001970:	d400      	bmi.n	8001974 <__aeabi_dsub+0xc0>
 8001972:	e140      	b.n	8001bf6 <__aeabi_dsub+0x342>
 8001974:	0264      	lsls	r4, r4, #9
 8001976:	0a64      	lsrs	r4, r4, #9
 8001978:	2c00      	cmp	r4, #0
 800197a:	d100      	bne.n	800197e <__aeabi_dsub+0xca>
 800197c:	e154      	b.n	8001c28 <__aeabi_dsub+0x374>
 800197e:	0020      	movs	r0, r4
 8001980:	f000 fc52 	bl	8002228 <__clzsi2>
 8001984:	0003      	movs	r3, r0
 8001986:	3b08      	subs	r3, #8
 8001988:	2120      	movs	r1, #32
 800198a:	0038      	movs	r0, r7
 800198c:	1aca      	subs	r2, r1, r3
 800198e:	40d0      	lsrs	r0, r2
 8001990:	409c      	lsls	r4, r3
 8001992:	0002      	movs	r2, r0
 8001994:	409f      	lsls	r7, r3
 8001996:	4322      	orrs	r2, r4
 8001998:	429d      	cmp	r5, r3
 800199a:	dd00      	ble.n	800199e <__aeabi_dsub+0xea>
 800199c:	e1a6      	b.n	8001cec <__aeabi_dsub+0x438>
 800199e:	1b58      	subs	r0, r3, r5
 80019a0:	3001      	adds	r0, #1
 80019a2:	1a09      	subs	r1, r1, r0
 80019a4:	003c      	movs	r4, r7
 80019a6:	408f      	lsls	r7, r1
 80019a8:	40c4      	lsrs	r4, r0
 80019aa:	1e7b      	subs	r3, r7, #1
 80019ac:	419f      	sbcs	r7, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	408b      	lsls	r3, r1
 80019b2:	4327      	orrs	r7, r4
 80019b4:	431f      	orrs	r7, r3
 80019b6:	40c2      	lsrs	r2, r0
 80019b8:	003b      	movs	r3, r7
 80019ba:	0014      	movs	r4, r2
 80019bc:	2500      	movs	r5, #0
 80019be:	4313      	orrs	r3, r2
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x110>
 80019c2:	e1f7      	b.n	8001db4 <__aeabi_dsub+0x500>
 80019c4:	077b      	lsls	r3, r7, #29
 80019c6:	d100      	bne.n	80019ca <__aeabi_dsub+0x116>
 80019c8:	e377      	b.n	80020ba <__aeabi_dsub+0x806>
 80019ca:	230f      	movs	r3, #15
 80019cc:	0038      	movs	r0, r7
 80019ce:	403b      	ands	r3, r7
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d004      	beq.n	80019de <__aeabi_dsub+0x12a>
 80019d4:	1d38      	adds	r0, r7, #4
 80019d6:	42b8      	cmp	r0, r7
 80019d8:	41bf      	sbcs	r7, r7
 80019da:	427f      	negs	r7, r7
 80019dc:	19e4      	adds	r4, r4, r7
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d400      	bmi.n	80019e4 <__aeabi_dsub+0x130>
 80019e2:	e368      	b.n	80020b6 <__aeabi_dsub+0x802>
 80019e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001c18 <__aeabi_dsub+0x364>)
 80019e6:	3501      	adds	r5, #1
 80019e8:	429d      	cmp	r5, r3
 80019ea:	d100      	bne.n	80019ee <__aeabi_dsub+0x13a>
 80019ec:	e0f4      	b.n	8001bd8 <__aeabi_dsub+0x324>
 80019ee:	4b8b      	ldr	r3, [pc, #556]	@ (8001c1c <__aeabi_dsub+0x368>)
 80019f0:	056d      	lsls	r5, r5, #21
 80019f2:	401c      	ands	r4, r3
 80019f4:	0d6d      	lsrs	r5, r5, #21
 80019f6:	0767      	lsls	r7, r4, #29
 80019f8:	08c0      	lsrs	r0, r0, #3
 80019fa:	0264      	lsls	r4, r4, #9
 80019fc:	4307      	orrs	r7, r0
 80019fe:	0b24      	lsrs	r4, r4, #12
 8001a00:	e0ec      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_dsub+0x154>
 8001a06:	e329      	b.n	800205c <__aeabi_dsub+0x7a8>
 8001a08:	4649      	mov	r1, r9
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d000      	beq.n	8001a10 <__aeabi_dsub+0x15c>
 8001a0e:	e0d6      	b.n	8001bbe <__aeabi_dsub+0x30a>
 8001a10:	4659      	mov	r1, fp
 8001a12:	4311      	orrs	r1, r2
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x164>
 8001a16:	e12e      	b.n	8001c76 <__aeabi_dsub+0x3c2>
 8001a18:	1e59      	subs	r1, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x16c>
 8001a1e:	e1e6      	b.n	8001dee <__aeabi_dsub+0x53a>
 8001a20:	42bb      	cmp	r3, r7
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x172>
 8001a24:	e182      	b.n	8001d2c <__aeabi_dsub+0x478>
 8001a26:	2701      	movs	r7, #1
 8001a28:	000b      	movs	r3, r1
 8001a2a:	2938      	cmp	r1, #56	@ 0x38
 8001a2c:	dc14      	bgt.n	8001a58 <__aeabi_dsub+0x1a4>
 8001a2e:	2b1f      	cmp	r3, #31
 8001a30:	dd00      	ble.n	8001a34 <__aeabi_dsub+0x180>
 8001a32:	e23c      	b.n	8001eae <__aeabi_dsub+0x5fa>
 8001a34:	2720      	movs	r7, #32
 8001a36:	1af9      	subs	r1, r7, r3
 8001a38:	468c      	mov	ip, r1
 8001a3a:	4659      	mov	r1, fp
 8001a3c:	4667      	mov	r7, ip
 8001a3e:	40b9      	lsls	r1, r7
 8001a40:	000f      	movs	r7, r1
 8001a42:	0011      	movs	r1, r2
 8001a44:	40d9      	lsrs	r1, r3
 8001a46:	430f      	orrs	r7, r1
 8001a48:	4661      	mov	r1, ip
 8001a4a:	408a      	lsls	r2, r1
 8001a4c:	1e51      	subs	r1, r2, #1
 8001a4e:	418a      	sbcs	r2, r1
 8001a50:	4659      	mov	r1, fp
 8001a52:	40d9      	lsrs	r1, r3
 8001a54:	4317      	orrs	r7, r2
 8001a56:	1864      	adds	r4, r4, r1
 8001a58:	183f      	adds	r7, r7, r0
 8001a5a:	4287      	cmp	r7, r0
 8001a5c:	4180      	sbcs	r0, r0
 8001a5e:	4240      	negs	r0, r0
 8001a60:	1824      	adds	r4, r4, r0
 8001a62:	0223      	lsls	r3, r4, #8
 8001a64:	d400      	bmi.n	8001a68 <__aeabi_dsub+0x1b4>
 8001a66:	e0c6      	b.n	8001bf6 <__aeabi_dsub+0x342>
 8001a68:	4b6b      	ldr	r3, [pc, #428]	@ (8001c18 <__aeabi_dsub+0x364>)
 8001a6a:	3501      	adds	r5, #1
 8001a6c:	429d      	cmp	r5, r3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x1be>
 8001a70:	e0b2      	b.n	8001bd8 <__aeabi_dsub+0x324>
 8001a72:	2101      	movs	r1, #1
 8001a74:	4b69      	ldr	r3, [pc, #420]	@ (8001c1c <__aeabi_dsub+0x368>)
 8001a76:	087a      	lsrs	r2, r7, #1
 8001a78:	401c      	ands	r4, r3
 8001a7a:	4039      	ands	r1, r7
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	07e7      	lsls	r7, r4, #31
 8001a80:	4317      	orrs	r7, r2
 8001a82:	0864      	lsrs	r4, r4, #1
 8001a84:	e79e      	b.n	80019c4 <__aeabi_dsub+0x110>
 8001a86:	4b66      	ldr	r3, [pc, #408]	@ (8001c20 <__aeabi_dsub+0x36c>)
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	468a      	mov	sl, r1
 8001a8c:	18eb      	adds	r3, r5, r3
 8001a8e:	2900      	cmp	r1, #0
 8001a90:	d028      	beq.n	8001ae4 <__aeabi_dsub+0x230>
 8001a92:	4566      	cmp	r6, ip
 8001a94:	d02c      	beq.n	8001af0 <__aeabi_dsub+0x23c>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d05b      	beq.n	8001b52 <__aeabi_dsub+0x29e>
 8001a9a:	2d00      	cmp	r5, #0
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dsub+0x1ec>
 8001a9e:	e12c      	b.n	8001cfa <__aeabi_dsub+0x446>
 8001aa0:	465b      	mov	r3, fp
 8001aa2:	4666      	mov	r6, ip
 8001aa4:	075f      	lsls	r7, r3, #29
 8001aa6:	08d2      	lsrs	r2, r2, #3
 8001aa8:	4317      	orrs	r7, r2
 8001aaa:	08dd      	lsrs	r5, r3, #3
 8001aac:	003b      	movs	r3, r7
 8001aae:	432b      	orrs	r3, r5
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x200>
 8001ab2:	e0e2      	b.n	8001c7a <__aeabi_dsub+0x3c6>
 8001ab4:	2480      	movs	r4, #128	@ 0x80
 8001ab6:	0324      	lsls	r4, r4, #12
 8001ab8:	432c      	orrs	r4, r5
 8001aba:	0324      	lsls	r4, r4, #12
 8001abc:	4d56      	ldr	r5, [pc, #344]	@ (8001c18 <__aeabi_dsub+0x364>)
 8001abe:	0b24      	lsrs	r4, r4, #12
 8001ac0:	e08c      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001ac2:	4659      	mov	r1, fp
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x216>
 8001ac8:	e0d5      	b.n	8001c76 <__aeabi_dsub+0x3c2>
 8001aca:	1e59      	subs	r1, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x21e>
 8001ad0:	e1b9      	b.n	8001e46 <__aeabi_dsub+0x592>
 8001ad2:	42bb      	cmp	r3, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x224>
 8001ad6:	e1b1      	b.n	8001e3c <__aeabi_dsub+0x588>
 8001ad8:	2701      	movs	r7, #1
 8001ada:	000b      	movs	r3, r1
 8001adc:	2938      	cmp	r1, #56	@ 0x38
 8001ade:	dd00      	ble.n	8001ae2 <__aeabi_dsub+0x22e>
 8001ae0:	e740      	b.n	8001964 <__aeabi_dsub+0xb0>
 8001ae2:	e72a      	b.n	800193a <__aeabi_dsub+0x86>
 8001ae4:	4661      	mov	r1, ip
 8001ae6:	2701      	movs	r7, #1
 8001ae8:	4079      	eors	r1, r7
 8001aea:	468c      	mov	ip, r1
 8001aec:	4566      	cmp	r6, ip
 8001aee:	d1d2      	bne.n	8001a96 <__aeabi_dsub+0x1e2>
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x242>
 8001af4:	e0c5      	b.n	8001c82 <__aeabi_dsub+0x3ce>
 8001af6:	2d00      	cmp	r5, #0
 8001af8:	d000      	beq.n	8001afc <__aeabi_dsub+0x248>
 8001afa:	e155      	b.n	8001da8 <__aeabi_dsub+0x4f4>
 8001afc:	464b      	mov	r3, r9
 8001afe:	0025      	movs	r5, r4
 8001b00:	4305      	orrs	r5, r0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x252>
 8001b04:	e212      	b.n	8001f2c <__aeabi_dsub+0x678>
 8001b06:	1e59      	subs	r1, r3, #1
 8001b08:	468c      	mov	ip, r1
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x25c>
 8001b0e:	e249      	b.n	8001fa4 <__aeabi_dsub+0x6f0>
 8001b10:	4d41      	ldr	r5, [pc, #260]	@ (8001c18 <__aeabi_dsub+0x364>)
 8001b12:	42ab      	cmp	r3, r5
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x264>
 8001b16:	e28f      	b.n	8002038 <__aeabi_dsub+0x784>
 8001b18:	2701      	movs	r7, #1
 8001b1a:	2938      	cmp	r1, #56	@ 0x38
 8001b1c:	dc11      	bgt.n	8001b42 <__aeabi_dsub+0x28e>
 8001b1e:	4663      	mov	r3, ip
 8001b20:	2b1f      	cmp	r3, #31
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x272>
 8001b24:	e25b      	b.n	8001fde <__aeabi_dsub+0x72a>
 8001b26:	4661      	mov	r1, ip
 8001b28:	2320      	movs	r3, #32
 8001b2a:	0027      	movs	r7, r4
 8001b2c:	1a5b      	subs	r3, r3, r1
 8001b2e:	0005      	movs	r5, r0
 8001b30:	4098      	lsls	r0, r3
 8001b32:	409f      	lsls	r7, r3
 8001b34:	40cd      	lsrs	r5, r1
 8001b36:	1e43      	subs	r3, r0, #1
 8001b38:	4198      	sbcs	r0, r3
 8001b3a:	40cc      	lsrs	r4, r1
 8001b3c:	432f      	orrs	r7, r5
 8001b3e:	4307      	orrs	r7, r0
 8001b40:	44a3      	add	fp, r4
 8001b42:	18bf      	adds	r7, r7, r2
 8001b44:	4297      	cmp	r7, r2
 8001b46:	4192      	sbcs	r2, r2
 8001b48:	4252      	negs	r2, r2
 8001b4a:	445a      	add	r2, fp
 8001b4c:	0014      	movs	r4, r2
 8001b4e:	464d      	mov	r5, r9
 8001b50:	e787      	b.n	8001a62 <__aeabi_dsub+0x1ae>
 8001b52:	4f34      	ldr	r7, [pc, #208]	@ (8001c24 <__aeabi_dsub+0x370>)
 8001b54:	1c6b      	adds	r3, r5, #1
 8001b56:	423b      	tst	r3, r7
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x2a8>
 8001b5a:	e0b6      	b.n	8001cca <__aeabi_dsub+0x416>
 8001b5c:	4659      	mov	r1, fp
 8001b5e:	0023      	movs	r3, r4
 8001b60:	4311      	orrs	r1, r2
 8001b62:	000f      	movs	r7, r1
 8001b64:	4303      	orrs	r3, r0
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dsub+0x2b8>
 8001b6a:	e126      	b.n	8001dba <__aeabi_dsub+0x506>
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x2be>
 8001b70:	e1c0      	b.n	8001ef4 <__aeabi_dsub+0x640>
 8001b72:	2900      	cmp	r1, #0
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x2c4>
 8001b76:	e0a1      	b.n	8001cbc <__aeabi_dsub+0x408>
 8001b78:	1a83      	subs	r3, r0, r2
 8001b7a:	4698      	mov	r8, r3
 8001b7c:	465b      	mov	r3, fp
 8001b7e:	4540      	cmp	r0, r8
 8001b80:	41ad      	sbcs	r5, r5
 8001b82:	1ae3      	subs	r3, r4, r3
 8001b84:	426d      	negs	r5, r5
 8001b86:	1b5b      	subs	r3, r3, r5
 8001b88:	2580      	movs	r5, #128	@ 0x80
 8001b8a:	042d      	lsls	r5, r5, #16
 8001b8c:	422b      	tst	r3, r5
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dsub+0x2de>
 8001b90:	e14b      	b.n	8001e2a <__aeabi_dsub+0x576>
 8001b92:	465b      	mov	r3, fp
 8001b94:	1a10      	subs	r0, r2, r0
 8001b96:	4282      	cmp	r2, r0
 8001b98:	4192      	sbcs	r2, r2
 8001b9a:	1b1c      	subs	r4, r3, r4
 8001b9c:	0007      	movs	r7, r0
 8001b9e:	2601      	movs	r6, #1
 8001ba0:	4663      	mov	r3, ip
 8001ba2:	4252      	negs	r2, r2
 8001ba4:	1aa4      	subs	r4, r4, r2
 8001ba6:	4327      	orrs	r7, r4
 8001ba8:	401e      	ands	r6, r3
 8001baa:	2f00      	cmp	r7, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x2fc>
 8001bae:	e142      	b.n	8001e36 <__aeabi_dsub+0x582>
 8001bb0:	422c      	tst	r4, r5
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x302>
 8001bb4:	e26d      	b.n	8002092 <__aeabi_dsub+0x7de>
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <__aeabi_dsub+0x368>)
 8001bb8:	2501      	movs	r5, #1
 8001bba:	401c      	ands	r4, r3
 8001bbc:	e71b      	b.n	80019f6 <__aeabi_dsub+0x142>
 8001bbe:	42bd      	cmp	r5, r7
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x310>
 8001bc2:	e13b      	b.n	8001e3c <__aeabi_dsub+0x588>
 8001bc4:	2701      	movs	r7, #1
 8001bc6:	2b38      	cmp	r3, #56	@ 0x38
 8001bc8:	dd00      	ble.n	8001bcc <__aeabi_dsub+0x318>
 8001bca:	e745      	b.n	8001a58 <__aeabi_dsub+0x1a4>
 8001bcc:	2780      	movs	r7, #128	@ 0x80
 8001bce:	4659      	mov	r1, fp
 8001bd0:	043f      	lsls	r7, r7, #16
 8001bd2:	4339      	orrs	r1, r7
 8001bd4:	468b      	mov	fp, r1
 8001bd6:	e72a      	b.n	8001a2e <__aeabi_dsub+0x17a>
 8001bd8:	2400      	movs	r4, #0
 8001bda:	2700      	movs	r7, #0
 8001bdc:	052d      	lsls	r5, r5, #20
 8001bde:	4325      	orrs	r5, r4
 8001be0:	07f6      	lsls	r6, r6, #31
 8001be2:	4335      	orrs	r5, r6
 8001be4:	0038      	movs	r0, r7
 8001be6:	0029      	movs	r1, r5
 8001be8:	b003      	add	sp, #12
 8001bea:	bcf0      	pop	{r4, r5, r6, r7}
 8001bec:	46bb      	mov	fp, r7
 8001bee:	46b2      	mov	sl, r6
 8001bf0:	46a9      	mov	r9, r5
 8001bf2:	46a0      	mov	r8, r4
 8001bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf6:	077b      	lsls	r3, r7, #29
 8001bf8:	d004      	beq.n	8001c04 <__aeabi_dsub+0x350>
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	403b      	ands	r3, r7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d000      	beq.n	8001c04 <__aeabi_dsub+0x350>
 8001c02:	e6e7      	b.n	80019d4 <__aeabi_dsub+0x120>
 8001c04:	002b      	movs	r3, r5
 8001c06:	08f8      	lsrs	r0, r7, #3
 8001c08:	4a03      	ldr	r2, [pc, #12]	@ (8001c18 <__aeabi_dsub+0x364>)
 8001c0a:	0767      	lsls	r7, r4, #29
 8001c0c:	4307      	orrs	r7, r0
 8001c0e:	08e5      	lsrs	r5, r4, #3
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x362>
 8001c14:	e74a      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001c16:	e0a5      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	ff7fffff 	.word	0xff7fffff
 8001c20:	fffff801 	.word	0xfffff801
 8001c24:	000007fe 	.word	0x000007fe
 8001c28:	0038      	movs	r0, r7
 8001c2a:	f000 fafd 	bl	8002228 <__clzsi2>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	3318      	adds	r3, #24
 8001c32:	2b1f      	cmp	r3, #31
 8001c34:	dc00      	bgt.n	8001c38 <__aeabi_dsub+0x384>
 8001c36:	e6a7      	b.n	8001988 <__aeabi_dsub+0xd4>
 8001c38:	003a      	movs	r2, r7
 8001c3a:	3808      	subs	r0, #8
 8001c3c:	4082      	lsls	r2, r0
 8001c3e:	429d      	cmp	r5, r3
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x390>
 8001c42:	e08a      	b.n	8001d5a <__aeabi_dsub+0x4a6>
 8001c44:	1b5b      	subs	r3, r3, r5
 8001c46:	1c58      	adds	r0, r3, #1
 8001c48:	281f      	cmp	r0, #31
 8001c4a:	dc00      	bgt.n	8001c4e <__aeabi_dsub+0x39a>
 8001c4c:	e1d8      	b.n	8002000 <__aeabi_dsub+0x74c>
 8001c4e:	0017      	movs	r7, r2
 8001c50:	3b1f      	subs	r3, #31
 8001c52:	40df      	lsrs	r7, r3
 8001c54:	2820      	cmp	r0, #32
 8001c56:	d005      	beq.n	8001c64 <__aeabi_dsub+0x3b0>
 8001c58:	2340      	movs	r3, #64	@ 0x40
 8001c5a:	1a1b      	subs	r3, r3, r0
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	1e53      	subs	r3, r2, #1
 8001c60:	419a      	sbcs	r2, r3
 8001c62:	4317      	orrs	r7, r2
 8001c64:	2500      	movs	r5, #0
 8001c66:	2f00      	cmp	r7, #0
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x3b8>
 8001c6a:	e0e5      	b.n	8001e38 <__aeabi_dsub+0x584>
 8001c6c:	077b      	lsls	r3, r7, #29
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x3be>
 8001c70:	e6ab      	b.n	80019ca <__aeabi_dsub+0x116>
 8001c72:	002c      	movs	r4, r5
 8001c74:	e7c6      	b.n	8001c04 <__aeabi_dsub+0x350>
 8001c76:	08c0      	lsrs	r0, r0, #3
 8001c78:	e7c6      	b.n	8001c08 <__aeabi_dsub+0x354>
 8001c7a:	2700      	movs	r7, #0
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	4dd1      	ldr	r5, [pc, #836]	@ (8001fc4 <__aeabi_dsub+0x710>)
 8001c80:	e7ac      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001c82:	4fd1      	ldr	r7, [pc, #836]	@ (8001fc8 <__aeabi_dsub+0x714>)
 8001c84:	1c6b      	adds	r3, r5, #1
 8001c86:	423b      	tst	r3, r7
 8001c88:	d171      	bne.n	8001d6e <__aeabi_dsub+0x4ba>
 8001c8a:	0023      	movs	r3, r4
 8001c8c:	4303      	orrs	r3, r0
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d000      	beq.n	8001c94 <__aeabi_dsub+0x3e0>
 8001c92:	e14e      	b.n	8001f32 <__aeabi_dsub+0x67e>
 8001c94:	4657      	mov	r7, sl
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x3e8>
 8001c9a:	e1b5      	b.n	8002008 <__aeabi_dsub+0x754>
 8001c9c:	2f00      	cmp	r7, #0
 8001c9e:	d00d      	beq.n	8001cbc <__aeabi_dsub+0x408>
 8001ca0:	1883      	adds	r3, r0, r2
 8001ca2:	4283      	cmp	r3, r0
 8001ca4:	4180      	sbcs	r0, r0
 8001ca6:	445c      	add	r4, fp
 8001ca8:	4240      	negs	r0, r0
 8001caa:	1824      	adds	r4, r4, r0
 8001cac:	0222      	lsls	r2, r4, #8
 8001cae:	d500      	bpl.n	8001cb2 <__aeabi_dsub+0x3fe>
 8001cb0:	e1c8      	b.n	8002044 <__aeabi_dsub+0x790>
 8001cb2:	001f      	movs	r7, r3
 8001cb4:	4698      	mov	r8, r3
 8001cb6:	4327      	orrs	r7, r4
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x408>
 8001cba:	e0bc      	b.n	8001e36 <__aeabi_dsub+0x582>
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	0767      	lsls	r7, r4, #29
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	431f      	orrs	r7, r3
 8001cc4:	08e5      	lsrs	r5, r4, #3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e04c      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001cca:	1a83      	subs	r3, r0, r2
 8001ccc:	4698      	mov	r8, r3
 8001cce:	465b      	mov	r3, fp
 8001cd0:	4540      	cmp	r0, r8
 8001cd2:	41bf      	sbcs	r7, r7
 8001cd4:	1ae3      	subs	r3, r4, r3
 8001cd6:	427f      	negs	r7, r7
 8001cd8:	1bdb      	subs	r3, r3, r7
 8001cda:	021f      	lsls	r7, r3, #8
 8001cdc:	d47c      	bmi.n	8001dd8 <__aeabi_dsub+0x524>
 8001cde:	4647      	mov	r7, r8
 8001ce0:	431f      	orrs	r7, r3
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x432>
 8001ce4:	e0a6      	b.n	8001e34 <__aeabi_dsub+0x580>
 8001ce6:	001c      	movs	r4, r3
 8001ce8:	4647      	mov	r7, r8
 8001cea:	e645      	b.n	8001978 <__aeabi_dsub+0xc4>
 8001cec:	4cb7      	ldr	r4, [pc, #732]	@ (8001fcc <__aeabi_dsub+0x718>)
 8001cee:	1aed      	subs	r5, r5, r3
 8001cf0:	4014      	ands	r4, r2
 8001cf2:	077b      	lsls	r3, r7, #29
 8001cf4:	d000      	beq.n	8001cf8 <__aeabi_dsub+0x444>
 8001cf6:	e780      	b.n	8001bfa <__aeabi_dsub+0x346>
 8001cf8:	e784      	b.n	8001c04 <__aeabi_dsub+0x350>
 8001cfa:	464b      	mov	r3, r9
 8001cfc:	0025      	movs	r5, r4
 8001cfe:	4305      	orrs	r5, r0
 8001d00:	d066      	beq.n	8001dd0 <__aeabi_dsub+0x51c>
 8001d02:	1e5f      	subs	r7, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dsub+0x456>
 8001d08:	e0fc      	b.n	8001f04 <__aeabi_dsub+0x650>
 8001d0a:	4dae      	ldr	r5, [pc, #696]	@ (8001fc4 <__aeabi_dsub+0x710>)
 8001d0c:	42ab      	cmp	r3, r5
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x45e>
 8001d10:	e15e      	b.n	8001fd0 <__aeabi_dsub+0x71c>
 8001d12:	4666      	mov	r6, ip
 8001d14:	2f38      	cmp	r7, #56	@ 0x38
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x466>
 8001d18:	e0b4      	b.n	8001e84 <__aeabi_dsub+0x5d0>
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	1a17      	subs	r7, r2, r0
 8001d1e:	42ba      	cmp	r2, r7
 8001d20:	4192      	sbcs	r2, r2
 8001d22:	465b      	mov	r3, fp
 8001d24:	4252      	negs	r2, r2
 8001d26:	464d      	mov	r5, r9
 8001d28:	1a9c      	subs	r4, r3, r2
 8001d2a:	e620      	b.n	800196e <__aeabi_dsub+0xba>
 8001d2c:	0767      	lsls	r7, r4, #29
 8001d2e:	08c0      	lsrs	r0, r0, #3
 8001d30:	4307      	orrs	r7, r0
 8001d32:	08e5      	lsrs	r5, r4, #3
 8001d34:	e6ba      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001d36:	001f      	movs	r7, r3
 8001d38:	4659      	mov	r1, fp
 8001d3a:	3f20      	subs	r7, #32
 8001d3c:	40f9      	lsrs	r1, r7
 8001d3e:	000f      	movs	r7, r1
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d005      	beq.n	8001d50 <__aeabi_dsub+0x49c>
 8001d44:	2140      	movs	r1, #64	@ 0x40
 8001d46:	1acb      	subs	r3, r1, r3
 8001d48:	4659      	mov	r1, fp
 8001d4a:	4099      	lsls	r1, r3
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	4692      	mov	sl, r2
 8001d50:	4653      	mov	r3, sl
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	4193      	sbcs	r3, r2
 8001d56:	431f      	orrs	r7, r3
 8001d58:	e604      	b.n	8001964 <__aeabi_dsub+0xb0>
 8001d5a:	1aeb      	subs	r3, r5, r3
 8001d5c:	4d9b      	ldr	r5, [pc, #620]	@ (8001fcc <__aeabi_dsub+0x718>)
 8001d5e:	4015      	ands	r5, r2
 8001d60:	076f      	lsls	r7, r5, #29
 8001d62:	08ed      	lsrs	r5, r5, #3
 8001d64:	032c      	lsls	r4, r5, #12
 8001d66:	055d      	lsls	r5, r3, #21
 8001d68:	0b24      	lsrs	r4, r4, #12
 8001d6a:	0d6d      	lsrs	r5, r5, #21
 8001d6c:	e736      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001d6e:	4d95      	ldr	r5, [pc, #596]	@ (8001fc4 <__aeabi_dsub+0x710>)
 8001d70:	42ab      	cmp	r3, r5
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x4c2>
 8001d74:	e0d6      	b.n	8001f24 <__aeabi_dsub+0x670>
 8001d76:	1882      	adds	r2, r0, r2
 8001d78:	0021      	movs	r1, r4
 8001d7a:	4282      	cmp	r2, r0
 8001d7c:	4180      	sbcs	r0, r0
 8001d7e:	4459      	add	r1, fp
 8001d80:	4240      	negs	r0, r0
 8001d82:	1808      	adds	r0, r1, r0
 8001d84:	07c7      	lsls	r7, r0, #31
 8001d86:	0852      	lsrs	r2, r2, #1
 8001d88:	4317      	orrs	r7, r2
 8001d8a:	0844      	lsrs	r4, r0, #1
 8001d8c:	0752      	lsls	r2, r2, #29
 8001d8e:	d400      	bmi.n	8001d92 <__aeabi_dsub+0x4de>
 8001d90:	e185      	b.n	800209e <__aeabi_dsub+0x7ea>
 8001d92:	220f      	movs	r2, #15
 8001d94:	001d      	movs	r5, r3
 8001d96:	403a      	ands	r2, r7
 8001d98:	2a04      	cmp	r2, #4
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_dsub+0x4ea>
 8001d9c:	e61a      	b.n	80019d4 <__aeabi_dsub+0x120>
 8001d9e:	08ff      	lsrs	r7, r7, #3
 8001da0:	0764      	lsls	r4, r4, #29
 8001da2:	4327      	orrs	r7, r4
 8001da4:	0905      	lsrs	r5, r0, #4
 8001da6:	e7dd      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001da8:	465b      	mov	r3, fp
 8001daa:	08d2      	lsrs	r2, r2, #3
 8001dac:	075f      	lsls	r7, r3, #29
 8001dae:	4317      	orrs	r7, r2
 8001db0:	08dd      	lsrs	r5, r3, #3
 8001db2:	e67b      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001db4:	2700      	movs	r7, #0
 8001db6:	2400      	movs	r4, #0
 8001db8:	e710      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dsub+0x50c>
 8001dbe:	e0d6      	b.n	8001f6e <__aeabi_dsub+0x6ba>
 8001dc0:	2900      	cmp	r1, #0
 8001dc2:	d000      	beq.n	8001dc6 <__aeabi_dsub+0x512>
 8001dc4:	e12f      	b.n	8002026 <__aeabi_dsub+0x772>
 8001dc6:	2480      	movs	r4, #128	@ 0x80
 8001dc8:	2600      	movs	r6, #0
 8001dca:	4d7e      	ldr	r5, [pc, #504]	@ (8001fc4 <__aeabi_dsub+0x710>)
 8001dcc:	0324      	lsls	r4, r4, #12
 8001dce:	e705      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001dd0:	4666      	mov	r6, ip
 8001dd2:	465c      	mov	r4, fp
 8001dd4:	08d0      	lsrs	r0, r2, #3
 8001dd6:	e717      	b.n	8001c08 <__aeabi_dsub+0x354>
 8001dd8:	465b      	mov	r3, fp
 8001dda:	1a17      	subs	r7, r2, r0
 8001ddc:	42ba      	cmp	r2, r7
 8001dde:	4192      	sbcs	r2, r2
 8001de0:	1b1c      	subs	r4, r3, r4
 8001de2:	2601      	movs	r6, #1
 8001de4:	4663      	mov	r3, ip
 8001de6:	4252      	negs	r2, r2
 8001de8:	1aa4      	subs	r4, r4, r2
 8001dea:	401e      	ands	r6, r3
 8001dec:	e5c4      	b.n	8001978 <__aeabi_dsub+0xc4>
 8001dee:	1883      	adds	r3, r0, r2
 8001df0:	4283      	cmp	r3, r0
 8001df2:	4180      	sbcs	r0, r0
 8001df4:	445c      	add	r4, fp
 8001df6:	4240      	negs	r0, r0
 8001df8:	1825      	adds	r5, r4, r0
 8001dfa:	022a      	lsls	r2, r5, #8
 8001dfc:	d400      	bmi.n	8001e00 <__aeabi_dsub+0x54c>
 8001dfe:	e0da      	b.n	8001fb6 <__aeabi_dsub+0x702>
 8001e00:	4a72      	ldr	r2, [pc, #456]	@ (8001fcc <__aeabi_dsub+0x718>)
 8001e02:	085b      	lsrs	r3, r3, #1
 8001e04:	4015      	ands	r5, r2
 8001e06:	07ea      	lsls	r2, r5, #31
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	0869      	lsrs	r1, r5, #1
 8001e0c:	075b      	lsls	r3, r3, #29
 8001e0e:	d400      	bmi.n	8001e12 <__aeabi_dsub+0x55e>
 8001e10:	e14a      	b.n	80020a8 <__aeabi_dsub+0x7f4>
 8001e12:	230f      	movs	r3, #15
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x568>
 8001e1a:	e0fc      	b.n	8002016 <__aeabi_dsub+0x762>
 8001e1c:	1d17      	adds	r7, r2, #4
 8001e1e:	4297      	cmp	r7, r2
 8001e20:	41a4      	sbcs	r4, r4
 8001e22:	4264      	negs	r4, r4
 8001e24:	2502      	movs	r5, #2
 8001e26:	1864      	adds	r4, r4, r1
 8001e28:	e6ec      	b.n	8001c04 <__aeabi_dsub+0x350>
 8001e2a:	4647      	mov	r7, r8
 8001e2c:	001c      	movs	r4, r3
 8001e2e:	431f      	orrs	r7, r3
 8001e30:	d000      	beq.n	8001e34 <__aeabi_dsub+0x580>
 8001e32:	e743      	b.n	8001cbc <__aeabi_dsub+0x408>
 8001e34:	2600      	movs	r6, #0
 8001e36:	2500      	movs	r5, #0
 8001e38:	2400      	movs	r4, #0
 8001e3a:	e6cf      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001e3c:	08c0      	lsrs	r0, r0, #3
 8001e3e:	0767      	lsls	r7, r4, #29
 8001e40:	4307      	orrs	r7, r0
 8001e42:	08e5      	lsrs	r5, r4, #3
 8001e44:	e632      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001e46:	1a87      	subs	r7, r0, r2
 8001e48:	465b      	mov	r3, fp
 8001e4a:	42b8      	cmp	r0, r7
 8001e4c:	4180      	sbcs	r0, r0
 8001e4e:	1ae4      	subs	r4, r4, r3
 8001e50:	4240      	negs	r0, r0
 8001e52:	1a24      	subs	r4, r4, r0
 8001e54:	0223      	lsls	r3, r4, #8
 8001e56:	d428      	bmi.n	8001eaa <__aeabi_dsub+0x5f6>
 8001e58:	0763      	lsls	r3, r4, #29
 8001e5a:	08ff      	lsrs	r7, r7, #3
 8001e5c:	431f      	orrs	r7, r3
 8001e5e:	08e5      	lsrs	r5, r4, #3
 8001e60:	2301      	movs	r3, #1
 8001e62:	e77f      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x5b6>
 8001e68:	e673      	b.n	8001b52 <__aeabi_dsub+0x29e>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	1b5f      	subs	r7, r3, r5
 8001e6e:	003b      	movs	r3, r7
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x5c2>
 8001e74:	e742      	b.n	8001cfc <__aeabi_dsub+0x448>
 8001e76:	2f38      	cmp	r7, #56	@ 0x38
 8001e78:	dd00      	ble.n	8001e7c <__aeabi_dsub+0x5c8>
 8001e7a:	e0ec      	b.n	8002056 <__aeabi_dsub+0x7a2>
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	000e      	movs	r6, r1
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	431c      	orrs	r4, r3
 8001e84:	2f1f      	cmp	r7, #31
 8001e86:	dc25      	bgt.n	8001ed4 <__aeabi_dsub+0x620>
 8001e88:	2520      	movs	r5, #32
 8001e8a:	0023      	movs	r3, r4
 8001e8c:	1bed      	subs	r5, r5, r7
 8001e8e:	0001      	movs	r1, r0
 8001e90:	40a8      	lsls	r0, r5
 8001e92:	40ab      	lsls	r3, r5
 8001e94:	40f9      	lsrs	r1, r7
 8001e96:	1e45      	subs	r5, r0, #1
 8001e98:	41a8      	sbcs	r0, r5
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	40fc      	lsrs	r4, r7
 8001e9e:	4318      	orrs	r0, r3
 8001ea0:	465b      	mov	r3, fp
 8001ea2:	1b1b      	subs	r3, r3, r4
 8001ea4:	469b      	mov	fp, r3
 8001ea6:	e739      	b.n	8001d1c <__aeabi_dsub+0x468>
 8001ea8:	4666      	mov	r6, ip
 8001eaa:	2501      	movs	r5, #1
 8001eac:	e562      	b.n	8001974 <__aeabi_dsub+0xc0>
 8001eae:	001f      	movs	r7, r3
 8001eb0:	4659      	mov	r1, fp
 8001eb2:	3f20      	subs	r7, #32
 8001eb4:	40f9      	lsrs	r1, r7
 8001eb6:	468c      	mov	ip, r1
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d005      	beq.n	8001ec8 <__aeabi_dsub+0x614>
 8001ebc:	2740      	movs	r7, #64	@ 0x40
 8001ebe:	4659      	mov	r1, fp
 8001ec0:	1afb      	subs	r3, r7, r3
 8001ec2:	4099      	lsls	r1, r3
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	4692      	mov	sl, r2
 8001ec8:	4657      	mov	r7, sl
 8001eca:	1e7b      	subs	r3, r7, #1
 8001ecc:	419f      	sbcs	r7, r3
 8001ece:	4663      	mov	r3, ip
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e5c1      	b.n	8001a58 <__aeabi_dsub+0x1a4>
 8001ed4:	003b      	movs	r3, r7
 8001ed6:	0025      	movs	r5, r4
 8001ed8:	3b20      	subs	r3, #32
 8001eda:	40dd      	lsrs	r5, r3
 8001edc:	2f20      	cmp	r7, #32
 8001ede:	d004      	beq.n	8001eea <__aeabi_dsub+0x636>
 8001ee0:	2340      	movs	r3, #64	@ 0x40
 8001ee2:	1bdb      	subs	r3, r3, r7
 8001ee4:	409c      	lsls	r4, r3
 8001ee6:	4320      	orrs	r0, r4
 8001ee8:	4680      	mov	r8, r0
 8001eea:	4640      	mov	r0, r8
 8001eec:	1e43      	subs	r3, r0, #1
 8001eee:	4198      	sbcs	r0, r3
 8001ef0:	4328      	orrs	r0, r5
 8001ef2:	e713      	b.n	8001d1c <__aeabi_dsub+0x468>
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	d09d      	beq.n	8001e34 <__aeabi_dsub+0x580>
 8001ef8:	2601      	movs	r6, #1
 8001efa:	4663      	mov	r3, ip
 8001efc:	465c      	mov	r4, fp
 8001efe:	4690      	mov	r8, r2
 8001f00:	401e      	ands	r6, r3
 8001f02:	e6db      	b.n	8001cbc <__aeabi_dsub+0x408>
 8001f04:	1a17      	subs	r7, r2, r0
 8001f06:	465b      	mov	r3, fp
 8001f08:	42ba      	cmp	r2, r7
 8001f0a:	4192      	sbcs	r2, r2
 8001f0c:	1b1c      	subs	r4, r3, r4
 8001f0e:	4252      	negs	r2, r2
 8001f10:	1aa4      	subs	r4, r4, r2
 8001f12:	0223      	lsls	r3, r4, #8
 8001f14:	d4c8      	bmi.n	8001ea8 <__aeabi_dsub+0x5f4>
 8001f16:	0763      	lsls	r3, r4, #29
 8001f18:	08ff      	lsrs	r7, r7, #3
 8001f1a:	431f      	orrs	r7, r3
 8001f1c:	4666      	mov	r6, ip
 8001f1e:	2301      	movs	r3, #1
 8001f20:	08e5      	lsrs	r5, r4, #3
 8001f22:	e71f      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001f24:	001d      	movs	r5, r3
 8001f26:	2400      	movs	r4, #0
 8001f28:	2700      	movs	r7, #0
 8001f2a:	e657      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001f2c:	465c      	mov	r4, fp
 8001f2e:	08d0      	lsrs	r0, r2, #3
 8001f30:	e66a      	b.n	8001c08 <__aeabi_dsub+0x354>
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x684>
 8001f36:	e737      	b.n	8001da8 <__aeabi_dsub+0x4f4>
 8001f38:	4653      	mov	r3, sl
 8001f3a:	08c0      	lsrs	r0, r0, #3
 8001f3c:	0767      	lsls	r7, r4, #29
 8001f3e:	4307      	orrs	r7, r0
 8001f40:	08e5      	lsrs	r5, r4, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x694>
 8001f46:	e5b1      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	031b      	lsls	r3, r3, #12
 8001f4c:	421d      	tst	r5, r3
 8001f4e:	d008      	beq.n	8001f62 <__aeabi_dsub+0x6ae>
 8001f50:	4659      	mov	r1, fp
 8001f52:	08c8      	lsrs	r0, r1, #3
 8001f54:	4218      	tst	r0, r3
 8001f56:	d104      	bne.n	8001f62 <__aeabi_dsub+0x6ae>
 8001f58:	08d2      	lsrs	r2, r2, #3
 8001f5a:	0749      	lsls	r1, r1, #29
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	0017      	movs	r7, r2
 8001f60:	0005      	movs	r5, r0
 8001f62:	0f7b      	lsrs	r3, r7, #29
 8001f64:	00ff      	lsls	r7, r7, #3
 8001f66:	08ff      	lsrs	r7, r7, #3
 8001f68:	075b      	lsls	r3, r3, #29
 8001f6a:	431f      	orrs	r7, r3
 8001f6c:	e59e      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001f6e:	08c0      	lsrs	r0, r0, #3
 8001f70:	0763      	lsls	r3, r4, #29
 8001f72:	4318      	orrs	r0, r3
 8001f74:	08e5      	lsrs	r5, r4, #3
 8001f76:	2900      	cmp	r1, #0
 8001f78:	d053      	beq.n	8002022 <__aeabi_dsub+0x76e>
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	031b      	lsls	r3, r3, #12
 8001f7e:	421d      	tst	r5, r3
 8001f80:	d00a      	beq.n	8001f98 <__aeabi_dsub+0x6e4>
 8001f82:	4659      	mov	r1, fp
 8001f84:	08cc      	lsrs	r4, r1, #3
 8001f86:	421c      	tst	r4, r3
 8001f88:	d106      	bne.n	8001f98 <__aeabi_dsub+0x6e4>
 8001f8a:	2601      	movs	r6, #1
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	0025      	movs	r5, r4
 8001f90:	08d0      	lsrs	r0, r2, #3
 8001f92:	0749      	lsls	r1, r1, #29
 8001f94:	4308      	orrs	r0, r1
 8001f96:	401e      	ands	r6, r3
 8001f98:	0f47      	lsrs	r7, r0, #29
 8001f9a:	00c0      	lsls	r0, r0, #3
 8001f9c:	08c0      	lsrs	r0, r0, #3
 8001f9e:	077f      	lsls	r7, r7, #29
 8001fa0:	4307      	orrs	r7, r0
 8001fa2:	e583      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001fa4:	1883      	adds	r3, r0, r2
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	4192      	sbcs	r2, r2
 8001faa:	445c      	add	r4, fp
 8001fac:	4252      	negs	r2, r2
 8001fae:	18a5      	adds	r5, r4, r2
 8001fb0:	022a      	lsls	r2, r5, #8
 8001fb2:	d500      	bpl.n	8001fb6 <__aeabi_dsub+0x702>
 8001fb4:	e724      	b.n	8001e00 <__aeabi_dsub+0x54c>
 8001fb6:	076f      	lsls	r7, r5, #29
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	431f      	orrs	r7, r3
 8001fbc:	08ed      	lsrs	r5, r5, #3
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e6d0      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	000007ff 	.word	0x000007ff
 8001fc8:	000007fe 	.word	0x000007fe
 8001fcc:	ff7fffff 	.word	0xff7fffff
 8001fd0:	465b      	mov	r3, fp
 8001fd2:	08d2      	lsrs	r2, r2, #3
 8001fd4:	075f      	lsls	r7, r3, #29
 8001fd6:	4666      	mov	r6, ip
 8001fd8:	4317      	orrs	r7, r2
 8001fda:	08dd      	lsrs	r5, r3, #3
 8001fdc:	e566      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001fde:	0025      	movs	r5, r4
 8001fe0:	3b20      	subs	r3, #32
 8001fe2:	40dd      	lsrs	r5, r3
 8001fe4:	4663      	mov	r3, ip
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d005      	beq.n	8001ff6 <__aeabi_dsub+0x742>
 8001fea:	2340      	movs	r3, #64	@ 0x40
 8001fec:	4661      	mov	r1, ip
 8001fee:	1a5b      	subs	r3, r3, r1
 8001ff0:	409c      	lsls	r4, r3
 8001ff2:	4320      	orrs	r0, r4
 8001ff4:	4680      	mov	r8, r0
 8001ff6:	4647      	mov	r7, r8
 8001ff8:	1e7b      	subs	r3, r7, #1
 8001ffa:	419f      	sbcs	r7, r3
 8001ffc:	432f      	orrs	r7, r5
 8001ffe:	e5a0      	b.n	8001b42 <__aeabi_dsub+0x28e>
 8002000:	2120      	movs	r1, #32
 8002002:	2700      	movs	r7, #0
 8002004:	1a09      	subs	r1, r1, r0
 8002006:	e4d2      	b.n	80019ae <__aeabi_dsub+0xfa>
 8002008:	2f00      	cmp	r7, #0
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x75a>
 800200c:	e713      	b.n	8001e36 <__aeabi_dsub+0x582>
 800200e:	465c      	mov	r4, fp
 8002010:	0017      	movs	r7, r2
 8002012:	2500      	movs	r5, #0
 8002014:	e5f6      	b.n	8001c04 <__aeabi_dsub+0x350>
 8002016:	08d7      	lsrs	r7, r2, #3
 8002018:	0749      	lsls	r1, r1, #29
 800201a:	2302      	movs	r3, #2
 800201c:	430f      	orrs	r7, r1
 800201e:	092d      	lsrs	r5, r5, #4
 8002020:	e6a0      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8002022:	0007      	movs	r7, r0
 8002024:	e542      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8002026:	465b      	mov	r3, fp
 8002028:	2601      	movs	r6, #1
 800202a:	075f      	lsls	r7, r3, #29
 800202c:	08dd      	lsrs	r5, r3, #3
 800202e:	4663      	mov	r3, ip
 8002030:	08d2      	lsrs	r2, r2, #3
 8002032:	4317      	orrs	r7, r2
 8002034:	401e      	ands	r6, r3
 8002036:	e539      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8002038:	465b      	mov	r3, fp
 800203a:	08d2      	lsrs	r2, r2, #3
 800203c:	075f      	lsls	r7, r3, #29
 800203e:	4317      	orrs	r7, r2
 8002040:	08dd      	lsrs	r5, r3, #3
 8002042:	e533      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8002044:	4a1e      	ldr	r2, [pc, #120]	@ (80020c0 <__aeabi_dsub+0x80c>)
 8002046:	08db      	lsrs	r3, r3, #3
 8002048:	4022      	ands	r2, r4
 800204a:	0757      	lsls	r7, r2, #29
 800204c:	0252      	lsls	r2, r2, #9
 800204e:	2501      	movs	r5, #1
 8002050:	431f      	orrs	r7, r3
 8002052:	0b14      	lsrs	r4, r2, #12
 8002054:	e5c2      	b.n	8001bdc <__aeabi_dsub+0x328>
 8002056:	000e      	movs	r6, r1
 8002058:	2001      	movs	r0, #1
 800205a:	e65f      	b.n	8001d1c <__aeabi_dsub+0x468>
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00d      	beq.n	800207c <__aeabi_dsub+0x7c8>
 8002060:	464b      	mov	r3, r9
 8002062:	1b5b      	subs	r3, r3, r5
 8002064:	469c      	mov	ip, r3
 8002066:	2d00      	cmp	r5, #0
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0x7b8>
 800206a:	e548      	b.n	8001afe <__aeabi_dsub+0x24a>
 800206c:	2701      	movs	r7, #1
 800206e:	2b38      	cmp	r3, #56	@ 0x38
 8002070:	dd00      	ble.n	8002074 <__aeabi_dsub+0x7c0>
 8002072:	e566      	b.n	8001b42 <__aeabi_dsub+0x28e>
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	431c      	orrs	r4, r3
 800207a:	e550      	b.n	8001b1e <__aeabi_dsub+0x26a>
 800207c:	1c6b      	adds	r3, r5, #1
 800207e:	4d11      	ldr	r5, [pc, #68]	@ (80020c4 <__aeabi_dsub+0x810>)
 8002080:	422b      	tst	r3, r5
 8002082:	d000      	beq.n	8002086 <__aeabi_dsub+0x7d2>
 8002084:	e673      	b.n	8001d6e <__aeabi_dsub+0x4ba>
 8002086:	4659      	mov	r1, fp
 8002088:	0023      	movs	r3, r4
 800208a:	4311      	orrs	r1, r2
 800208c:	468a      	mov	sl, r1
 800208e:	4303      	orrs	r3, r0
 8002090:	e600      	b.n	8001c94 <__aeabi_dsub+0x3e0>
 8002092:	0767      	lsls	r7, r4, #29
 8002094:	08c0      	lsrs	r0, r0, #3
 8002096:	2300      	movs	r3, #0
 8002098:	4307      	orrs	r7, r0
 800209a:	08e5      	lsrs	r5, r4, #3
 800209c:	e662      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 800209e:	0764      	lsls	r4, r4, #29
 80020a0:	08ff      	lsrs	r7, r7, #3
 80020a2:	4327      	orrs	r7, r4
 80020a4:	0905      	lsrs	r5, r0, #4
 80020a6:	e65d      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 80020a8:	08d2      	lsrs	r2, r2, #3
 80020aa:	0749      	lsls	r1, r1, #29
 80020ac:	4311      	orrs	r1, r2
 80020ae:	000f      	movs	r7, r1
 80020b0:	2302      	movs	r3, #2
 80020b2:	092d      	lsrs	r5, r5, #4
 80020b4:	e656      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 80020b6:	0007      	movs	r7, r0
 80020b8:	e5a4      	b.n	8001c04 <__aeabi_dsub+0x350>
 80020ba:	0038      	movs	r0, r7
 80020bc:	e48f      	b.n	80019de <__aeabi_dsub+0x12a>
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	ff7fffff 	.word	0xff7fffff
 80020c4:	000007fe 	.word	0x000007fe

080020c8 <__aeabi_dcmpun>:
 80020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ca:	46c6      	mov	lr, r8
 80020cc:	031e      	lsls	r6, r3, #12
 80020ce:	0b36      	lsrs	r6, r6, #12
 80020d0:	46b0      	mov	r8, r6
 80020d2:	4e0d      	ldr	r6, [pc, #52]	@ (8002108 <__aeabi_dcmpun+0x40>)
 80020d4:	030c      	lsls	r4, r1, #12
 80020d6:	004d      	lsls	r5, r1, #1
 80020d8:	005f      	lsls	r7, r3, #1
 80020da:	b500      	push	{lr}
 80020dc:	0b24      	lsrs	r4, r4, #12
 80020de:	0d6d      	lsrs	r5, r5, #21
 80020e0:	0d7f      	lsrs	r7, r7, #21
 80020e2:	42b5      	cmp	r5, r6
 80020e4:	d00b      	beq.n	80020fe <__aeabi_dcmpun+0x36>
 80020e6:	4908      	ldr	r1, [pc, #32]	@ (8002108 <__aeabi_dcmpun+0x40>)
 80020e8:	2000      	movs	r0, #0
 80020ea:	428f      	cmp	r7, r1
 80020ec:	d104      	bne.n	80020f8 <__aeabi_dcmpun+0x30>
 80020ee:	4646      	mov	r6, r8
 80020f0:	4316      	orrs	r6, r2
 80020f2:	0030      	movs	r0, r6
 80020f4:	1e43      	subs	r3, r0, #1
 80020f6:	4198      	sbcs	r0, r3
 80020f8:	bc80      	pop	{r7}
 80020fa:	46b8      	mov	r8, r7
 80020fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fe:	4304      	orrs	r4, r0
 8002100:	2001      	movs	r0, #1
 8002102:	2c00      	cmp	r4, #0
 8002104:	d1f8      	bne.n	80020f8 <__aeabi_dcmpun+0x30>
 8002106:	e7ee      	b.n	80020e6 <__aeabi_dcmpun+0x1e>
 8002108:	000007ff 	.word	0x000007ff

0800210c <__aeabi_d2iz>:
 800210c:	000b      	movs	r3, r1
 800210e:	0002      	movs	r2, r0
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	4d16      	ldr	r5, [pc, #88]	@ (800216c <__aeabi_d2iz+0x60>)
 8002114:	030c      	lsls	r4, r1, #12
 8002116:	b082      	sub	sp, #8
 8002118:	0049      	lsls	r1, r1, #1
 800211a:	2000      	movs	r0, #0
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	0b24      	lsrs	r4, r4, #12
 8002122:	0d49      	lsrs	r1, r1, #21
 8002124:	0fde      	lsrs	r6, r3, #31
 8002126:	42a9      	cmp	r1, r5
 8002128:	dd04      	ble.n	8002134 <__aeabi_d2iz+0x28>
 800212a:	4811      	ldr	r0, [pc, #68]	@ (8002170 <__aeabi_d2iz+0x64>)
 800212c:	4281      	cmp	r1, r0
 800212e:	dd03      	ble.n	8002138 <__aeabi_d2iz+0x2c>
 8002130:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <__aeabi_d2iz+0x68>)
 8002132:	18f0      	adds	r0, r6, r3
 8002134:	b002      	add	sp, #8
 8002136:	bd70      	pop	{r4, r5, r6, pc}
 8002138:	2080      	movs	r0, #128	@ 0x80
 800213a:	0340      	lsls	r0, r0, #13
 800213c:	4320      	orrs	r0, r4
 800213e:	4c0e      	ldr	r4, [pc, #56]	@ (8002178 <__aeabi_d2iz+0x6c>)
 8002140:	1a64      	subs	r4, r4, r1
 8002142:	2c1f      	cmp	r4, #31
 8002144:	dd08      	ble.n	8002158 <__aeabi_d2iz+0x4c>
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <__aeabi_d2iz+0x70>)
 8002148:	1a5b      	subs	r3, r3, r1
 800214a:	40d8      	lsrs	r0, r3
 800214c:	0003      	movs	r3, r0
 800214e:	4258      	negs	r0, r3
 8002150:	2e00      	cmp	r6, #0
 8002152:	d1ef      	bne.n	8002134 <__aeabi_d2iz+0x28>
 8002154:	0018      	movs	r0, r3
 8002156:	e7ed      	b.n	8002134 <__aeabi_d2iz+0x28>
 8002158:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <__aeabi_d2iz+0x74>)
 800215a:	9a00      	ldr	r2, [sp, #0]
 800215c:	469c      	mov	ip, r3
 800215e:	0003      	movs	r3, r0
 8002160:	4461      	add	r1, ip
 8002162:	408b      	lsls	r3, r1
 8002164:	40e2      	lsrs	r2, r4
 8002166:	4313      	orrs	r3, r2
 8002168:	e7f1      	b.n	800214e <__aeabi_d2iz+0x42>
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	000003fe 	.word	0x000003fe
 8002170:	0000041d 	.word	0x0000041d
 8002174:	7fffffff 	.word	0x7fffffff
 8002178:	00000433 	.word	0x00000433
 800217c:	00000413 	.word	0x00000413
 8002180:	fffffbed 	.word	0xfffffbed

08002184 <__aeabi_i2d>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	2800      	cmp	r0, #0
 8002188:	d016      	beq.n	80021b8 <__aeabi_i2d+0x34>
 800218a:	17c3      	asrs	r3, r0, #31
 800218c:	18c5      	adds	r5, r0, r3
 800218e:	405d      	eors	r5, r3
 8002190:	0fc4      	lsrs	r4, r0, #31
 8002192:	0028      	movs	r0, r5
 8002194:	f000 f848 	bl	8002228 <__clzsi2>
 8002198:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <__aeabi_i2d+0x58>)
 800219a:	1a1b      	subs	r3, r3, r0
 800219c:	055b      	lsls	r3, r3, #21
 800219e:	0d5b      	lsrs	r3, r3, #21
 80021a0:	280a      	cmp	r0, #10
 80021a2:	dc14      	bgt.n	80021ce <__aeabi_i2d+0x4a>
 80021a4:	0002      	movs	r2, r0
 80021a6:	002e      	movs	r6, r5
 80021a8:	3215      	adds	r2, #21
 80021aa:	4096      	lsls	r6, r2
 80021ac:	220b      	movs	r2, #11
 80021ae:	1a12      	subs	r2, r2, r0
 80021b0:	40d5      	lsrs	r5, r2
 80021b2:	032d      	lsls	r5, r5, #12
 80021b4:	0b2d      	lsrs	r5, r5, #12
 80021b6:	e003      	b.n	80021c0 <__aeabi_i2d+0x3c>
 80021b8:	2400      	movs	r4, #0
 80021ba:	2300      	movs	r3, #0
 80021bc:	2500      	movs	r5, #0
 80021be:	2600      	movs	r6, #0
 80021c0:	051b      	lsls	r3, r3, #20
 80021c2:	432b      	orrs	r3, r5
 80021c4:	07e4      	lsls	r4, r4, #31
 80021c6:	4323      	orrs	r3, r4
 80021c8:	0030      	movs	r0, r6
 80021ca:	0019      	movs	r1, r3
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	380b      	subs	r0, #11
 80021d0:	4085      	lsls	r5, r0
 80021d2:	032d      	lsls	r5, r5, #12
 80021d4:	2600      	movs	r6, #0
 80021d6:	0b2d      	lsrs	r5, r5, #12
 80021d8:	e7f2      	b.n	80021c0 <__aeabi_i2d+0x3c>
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	0000041e 	.word	0x0000041e

080021e0 <__aeabi_ui2d>:
 80021e0:	b510      	push	{r4, lr}
 80021e2:	1e04      	subs	r4, r0, #0
 80021e4:	d010      	beq.n	8002208 <__aeabi_ui2d+0x28>
 80021e6:	f000 f81f 	bl	8002228 <__clzsi2>
 80021ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <__aeabi_ui2d+0x44>)
 80021ec:	1a1b      	subs	r3, r3, r0
 80021ee:	055b      	lsls	r3, r3, #21
 80021f0:	0d5b      	lsrs	r3, r3, #21
 80021f2:	280a      	cmp	r0, #10
 80021f4:	dc0f      	bgt.n	8002216 <__aeabi_ui2d+0x36>
 80021f6:	220b      	movs	r2, #11
 80021f8:	0021      	movs	r1, r4
 80021fa:	1a12      	subs	r2, r2, r0
 80021fc:	40d1      	lsrs	r1, r2
 80021fe:	3015      	adds	r0, #21
 8002200:	030a      	lsls	r2, r1, #12
 8002202:	4084      	lsls	r4, r0
 8002204:	0b12      	lsrs	r2, r2, #12
 8002206:	e001      	b.n	800220c <__aeabi_ui2d+0x2c>
 8002208:	2300      	movs	r3, #0
 800220a:	2200      	movs	r2, #0
 800220c:	051b      	lsls	r3, r3, #20
 800220e:	4313      	orrs	r3, r2
 8002210:	0020      	movs	r0, r4
 8002212:	0019      	movs	r1, r3
 8002214:	bd10      	pop	{r4, pc}
 8002216:	0022      	movs	r2, r4
 8002218:	380b      	subs	r0, #11
 800221a:	4082      	lsls	r2, r0
 800221c:	0312      	lsls	r2, r2, #12
 800221e:	2400      	movs	r4, #0
 8002220:	0b12      	lsrs	r2, r2, #12
 8002222:	e7f3      	b.n	800220c <__aeabi_ui2d+0x2c>
 8002224:	0000041e 	.word	0x0000041e

08002228 <__clzsi2>:
 8002228:	211c      	movs	r1, #28
 800222a:	2301      	movs	r3, #1
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	4298      	cmp	r0, r3
 8002230:	d301      	bcc.n	8002236 <__clzsi2+0xe>
 8002232:	0c00      	lsrs	r0, r0, #16
 8002234:	3910      	subs	r1, #16
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	4298      	cmp	r0, r3
 800223a:	d301      	bcc.n	8002240 <__clzsi2+0x18>
 800223c:	0a00      	lsrs	r0, r0, #8
 800223e:	3908      	subs	r1, #8
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	4298      	cmp	r0, r3
 8002244:	d301      	bcc.n	800224a <__clzsi2+0x22>
 8002246:	0900      	lsrs	r0, r0, #4
 8002248:	3904      	subs	r1, #4
 800224a:	a202      	add	r2, pc, #8	@ (adr r2, 8002254 <__clzsi2+0x2c>)
 800224c:	5c10      	ldrb	r0, [r2, r0]
 800224e:	1840      	adds	r0, r0, r1
 8002250:	4770      	bx	lr
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	02020304 	.word	0x02020304
 8002258:	01010101 	.word	0x01010101
	...

08002264 <EnergusConvertToTemp>:
/**
 * Converts voltage read to temperature based on the datasheet
 * from the Energus module.
**/
static int8_t EnergusConvertToTemp(uint16_t Voltage)
{
 8002264:	b5b0      	push	{r4, r5, r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	0002      	movs	r2, r0
 800226c:	1dbb      	adds	r3, r7, #6
 800226e:	801a      	strh	r2, [r3, #0]
	//Force voltage to datasheet limits, if outside.
	if(Voltage > 2440) { Voltage = 2440; }
 8002270:	1dbb      	adds	r3, r7, #6
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	4a38      	ldr	r2, [pc, #224]	@ (8002358 <EnergusConvertToTemp+0xf4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d902      	bls.n	8002280 <EnergusConvertToTemp+0x1c>
 800227a:	1dbb      	adds	r3, r7, #6
 800227c:	4a36      	ldr	r2, [pc, #216]	@ (8002358 <EnergusConvertToTemp+0xf4>)
 800227e:	801a      	strh	r2, [r3, #0]
	if(Voltage < 1300) { Voltage = 1300; }
 8002280:	1dbb      	adds	r3, r7, #6
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	4a35      	ldr	r2, [pc, #212]	@ (800235c <EnergusConvertToTemp+0xf8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d802      	bhi.n	8002290 <EnergusConvertToTemp+0x2c>
 800228a:	1dbb      	adds	r3, r7, #6
 800228c:	4a34      	ldr	r2, [pc, #208]	@ (8002360 <EnergusConvertToTemp+0xfc>)
 800228e:	801a      	strh	r2, [r3, #0]

	return (-(225.7*pow(Voltage/1000.0, 3)) + (1310.6*pow(Voltage/1000.0, 2)) - (2594.8*pow(Voltage/1000.0, 1)) + 1767.8);
 8002290:	1dbb      	adds	r3, r7, #6
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff ff75 	bl	8002184 <__aeabi_i2d>
 800229a:	2200      	movs	r2, #0
 800229c:	4b31      	ldr	r3, [pc, #196]	@ (8002364 <EnergusConvertToTemp+0x100>)
 800229e:	f7fe fbe9 	bl	8000a74 <__aeabi_ddiv>
 80022a2:	0002      	movs	r2, r0
 80022a4:	000b      	movs	r3, r1
 80022a6:	0010      	movs	r0, r2
 80022a8:	0019      	movs	r1, r3
 80022aa:	2200      	movs	r2, #0
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	f005 fd30 	bl	8007d14 <pow>
 80022b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002368 <EnergusConvertToTemp+0x104>)
 80022b6:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <EnergusConvertToTemp+0x108>)
 80022b8:	f7ff f816 	bl	80012e8 <__aeabi_dmul>
 80022bc:	0002      	movs	r2, r0
 80022be:	000b      	movs	r3, r1
 80022c0:	0014      	movs	r4, r2
 80022c2:	001d      	movs	r5, r3
 80022c4:	1dbb      	adds	r3, r7, #6
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7ff ff5b 	bl	8002184 <__aeabi_i2d>
 80022ce:	2200      	movs	r2, #0
 80022d0:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <EnergusConvertToTemp+0x100>)
 80022d2:	f7fe fbcf 	bl	8000a74 <__aeabi_ddiv>
 80022d6:	0002      	movs	r2, r0
 80022d8:	000b      	movs	r3, r1
 80022da:	0010      	movs	r0, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	2200      	movs	r2, #0
 80022e0:	4b23      	ldr	r3, [pc, #140]	@ (8002370 <EnergusConvertToTemp+0x10c>)
 80022e2:	f005 fd17 	bl	8007d14 <pow>
 80022e6:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <EnergusConvertToTemp+0x104>)
 80022e8:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <EnergusConvertToTemp+0x110>)
 80022ea:	f7fe fffd 	bl	80012e8 <__aeabi_dmul>
 80022ee:	0002      	movs	r2, r0
 80022f0:	000b      	movs	r3, r1
 80022f2:	0020      	movs	r0, r4
 80022f4:	0029      	movs	r1, r5
 80022f6:	f7ff fadd 	bl	80018b4 <__aeabi_dsub>
 80022fa:	0002      	movs	r2, r0
 80022fc:	000b      	movs	r3, r1
 80022fe:	0014      	movs	r4, r2
 8002300:	001d      	movs	r5, r3
 8002302:	1dbb      	adds	r3, r7, #6
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	0018      	movs	r0, r3
 8002308:	f7ff ff3c 	bl	8002184 <__aeabi_i2d>
 800230c:	2200      	movs	r2, #0
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <EnergusConvertToTemp+0x100>)
 8002310:	f7fe fbb0 	bl	8000a74 <__aeabi_ddiv>
 8002314:	0002      	movs	r2, r0
 8002316:	000b      	movs	r3, r1
 8002318:	0010      	movs	r0, r2
 800231a:	0019      	movs	r1, r3
 800231c:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <EnergusConvertToTemp+0x114>)
 800231e:	4b17      	ldr	r3, [pc, #92]	@ (800237c <EnergusConvertToTemp+0x118>)
 8002320:	f7fe ffe2 	bl	80012e8 <__aeabi_dmul>
 8002324:	0002      	movs	r2, r0
 8002326:	000b      	movs	r3, r1
 8002328:	0020      	movs	r0, r4
 800232a:	0029      	movs	r1, r5
 800232c:	f7ff fac2 	bl	80018b4 <__aeabi_dsub>
 8002330:	0002      	movs	r2, r0
 8002332:	000b      	movs	r3, r1
 8002334:	0010      	movs	r0, r2
 8002336:	0019      	movs	r1, r3
 8002338:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <EnergusConvertToTemp+0x11c>)
 800233a:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <EnergusConvertToTemp+0x120>)
 800233c:	f7fd ffd4 	bl	80002e8 <__aeabi_dadd>
 8002340:	0002      	movs	r2, r0
 8002342:	000b      	movs	r3, r1
 8002344:	0010      	movs	r0, r2
 8002346:	0019      	movs	r1, r3
 8002348:	f7ff fee0 	bl	800210c <__aeabi_d2iz>
 800234c:	0003      	movs	r3, r0
 800234e:	b25b      	sxtb	r3, r3
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bdb0      	pop	{r4, r5, r7, pc}
 8002358:	00000988 	.word	0x00000988
 800235c:	00000513 	.word	0x00000513
 8002360:	00000514 	.word	0x00000514
 8002364:	408f4000 	.word	0x408f4000
 8002368:	66666666 	.word	0x66666666
 800236c:	40947a66 	.word	0x40947a66
 8002370:	40080000 	.word	0x40080000
 8002374:	406c3666 	.word	0x406c3666
 8002378:	9999999a 	.word	0x9999999a
 800237c:	40a44599 	.word	0x40a44599
 8002380:	33333333 	.word	0x33333333
 8002384:	409b9f33 	.word	0x409b9f33

08002388 <TransmitHeartBeat>:
/**
 * Handles the heartbeat code, and
 * Sets flag to enable the transmission of the heartbeat frame.
**/
void TransmitHeartBeat()
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	//Increment counter by 1, if 255 force to 0
	if(TempModule.HeartBeatCounter == 255)
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <TransmitHeartBeat+0x50>)
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	2bff      	cmp	r3, #255	@ 0xff
 8002392:	d103      	bne.n	800239c <TransmitHeartBeat+0x14>
	{
		TempModule.HeartBeatCounter = 0;
 8002394:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <TransmitHeartBeat+0x50>)
 8002396:	2200      	movs	r2, #0
 8002398:	705a      	strb	r2, [r3, #1]
 800239a:	e005      	b.n	80023a8 <TransmitHeartBeat+0x20>
	}
	else
	{
		TempModule.HeartBeatCounter++;
 800239c:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <TransmitHeartBeat+0x50>)
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	3301      	adds	r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <TransmitHeartBeat+0x50>)
 80023a6:	705a      	strb	r2, [r3, #1]
	}
	TempModule.canHeartBeat.TxData[1] = TempModule.HeartBeatCounter;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <TransmitHeartBeat+0x50>)
 80023aa:	7859      	ldrb	r1, [r3, #1]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <TransmitHeartBeat+0x50>)
 80023ae:	23e2      	movs	r3, #226	@ 0xe2
 80023b0:	33ff      	adds	r3, #255	@ 0xff
 80023b2:	54d1      	strb	r1, [r2, r3]

	//Toggle debug LED
	HAL_GPIO_TogglePin(TempModule.dbgLedPort, TempModule.dbgLedPin);
 80023b4:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <TransmitHeartBeat+0x50>)
 80023b6:	4a09      	ldr	r2, [pc, #36]	@ (80023dc <TransmitHeartBeat+0x54>)
 80023b8:	5898      	ldr	r0, [r3, r2]
 80023ba:	4a07      	ldr	r2, [pc, #28]	@ (80023d8 <TransmitHeartBeat+0x50>)
 80023bc:	23b3      	movs	r3, #179	@ 0xb3
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	5ad3      	ldrh	r3, [r2, r3]
 80023c2:	0019      	movs	r1, r3
 80023c4:	f002 fccd 	bl	8004d62 <HAL_GPIO_TogglePin>

	TempModule.canHeartBeat.transmitFlag = 1;
 80023c8:	4a03      	ldr	r2, [pc, #12]	@ (80023d8 <TransmitHeartBeat+0x50>)
 80023ca:	23f4      	movs	r3, #244	@ 0xf4
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2101      	movs	r1, #1
 80023d0:	54d1      	strb	r1, [r2, r3]
}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000100 	.word	0x20000100
 80023dc:	00000594 	.word	0x00000594

080023e0 <TransmitAnalogue>:

/**
 * Sets flag to enable the transmission of the Analogue frames.
**/
void TransmitAnalogue()
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
	//For each tempbank
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e00f      	b.n	800240e <TransmitAnalogue+0x2e>
	{
		TempModule.canAnalogue[i].transmitFlag = 1;	 //TB 1 - 6
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	490b      	ldr	r1, [pc, #44]	@ (8002420 <TransmitAnalogue+0x40>)
 80023f4:	2387      	movs	r3, #135	@ 0x87
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	2034      	movs	r0, #52	@ 0x34
 80023fa:	4342      	muls	r2, r0
 80023fc:	188a      	adds	r2, r1, r2
 80023fe:	18d3      	adds	r3, r2, r3
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	3201      	adds	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b04      	cmp	r3, #4
 8002414:	d9eb      	bls.n	80023ee <TransmitAnalogue+0xe>
	}
}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	46c0      	nop			@ (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000100 	.word	0x20000100

08002424 <TransmitAnalogueRaw>:

/**
 * Sets flag to enable the transmission of the Analogue RAW frames.
**/
void TransmitAnalogueRaw()
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
	//For each tempbank
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 800242a:	1dfb      	adds	r3, r7, #7
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e01d      	b.n	800246e <TransmitAnalogueRaw+0x4a>
	{
		TempModule.canAnalogueRaw[2*i].transmitFlag = 1;	 //CH 0 - 3
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	005a      	lsls	r2, r3, #1
 8002438:	4911      	ldr	r1, [pc, #68]	@ (8002480 <TransmitAnalogueRaw+0x5c>)
 800243a:	23d5      	movs	r3, #213	@ 0xd5
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	2034      	movs	r0, #52	@ 0x34
 8002440:	4342      	muls	r2, r0
 8002442:	188a      	adds	r2, r1, r2
 8002444:	18d3      	adds	r3, r2, r3
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogueRaw[2*i + 1].transmitFlag = 1; //CH 4 - 7
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	490b      	ldr	r1, [pc, #44]	@ (8002480 <TransmitAnalogueRaw+0x5c>)
 8002454:	23d5      	movs	r3, #213	@ 0xd5
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	2034      	movs	r0, #52	@ 0x34
 800245a:	4342      	muls	r2, r0
 800245c:	188a      	adds	r2, r1, r2
 800245e:	18d3      	adds	r3, r2, r3
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	3201      	adds	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d9dd      	bls.n	8002432 <TransmitAnalogueRaw+0xe>
	}
}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	46c0      	nop			@ (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000100 	.word	0x20000100

08002484 <TransmitCAN>:
/**
 * Handles transmitting the CAN frames. Function ran continuously in main loop.
 * Checks if CAN Tx mailbox is free and if frame needs to be sent.
**/
void TransmitCAN()
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
	//Heartbeat
	if((HAL_FDCAN_GetTxFifoFreeLevel(TempModule.canHeartBeat.canPeripheral) == 3) && (TempModule.canHeartBeat.transmitFlag == 1))
 800248a:	4a64      	ldr	r2, [pc, #400]	@ (800261c <TransmitCAN+0x198>)
 800248c:	23dc      	movs	r3, #220	@ 0xdc
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	58d3      	ldr	r3, [r2, r3]
 8002492:	0018      	movs	r0, r3
 8002494:	f002 f9e3 	bl	800485e <HAL_FDCAN_GetTxFifoFreeLevel>
 8002498:	0003      	movs	r3, r0
 800249a:	2b03      	cmp	r3, #3
 800249c:	d110      	bne.n	80024c0 <TransmitCAN+0x3c>
 800249e:	4a5f      	ldr	r2, [pc, #380]	@ (800261c <TransmitCAN+0x198>)
 80024a0:	23f4      	movs	r3, #244	@ 0xf4
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d10a      	bne.n	80024c0 <TransmitCAN+0x3c>
	{
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TempModule.canHeartBeat.TxHeader, TempModule.canHeartBeat.TxData);
 80024aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002620 <TransmitCAN+0x19c>)
 80024ac:	495d      	ldr	r1, [pc, #372]	@ (8002624 <TransmitCAN+0x1a0>)
 80024ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002628 <TransmitCAN+0x1a4>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f002 f98f 	bl	80047d4 <HAL_FDCAN_AddMessageToTxFifoQ>
		TempModule.canHeartBeat.transmitFlag = 0;
 80024b6:	4a59      	ldr	r2, [pc, #356]	@ (800261c <TransmitCAN+0x198>)
 80024b8:	23f4      	movs	r3, #244	@ 0xf4
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2100      	movs	r1, #0
 80024be:	54d1      	strb	r1, [r2, r3]
	}

	//Analogue frames
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e046      	b.n	8002556 <TransmitCAN+0xd2>
	{
		if((HAL_FDCAN_GetTxFifoFreeLevel(TempModule.canAnalogue[i].canPeripheral) == 3) && (TempModule.canAnalogue[i].transmitFlag == 1))
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	4953      	ldr	r1, [pc, #332]	@ (800261c <TransmitCAN+0x198>)
 80024ce:	23f6      	movs	r3, #246	@ 0xf6
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2034      	movs	r0, #52	@ 0x34
 80024d4:	4342      	muls	r2, r0
 80024d6:	188a      	adds	r2, r1, r2
 80024d8:	18d3      	adds	r3, r2, r3
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0018      	movs	r0, r3
 80024de:	f002 f9be 	bl	800485e <HAL_FDCAN_GetTxFifoFreeLevel>
 80024e2:	0003      	movs	r3, r0
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d131      	bne.n	800254c <TransmitCAN+0xc8>
 80024e8:	1dfb      	adds	r3, r7, #7
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	494b      	ldr	r1, [pc, #300]	@ (800261c <TransmitCAN+0x198>)
 80024ee:	2387      	movs	r3, #135	@ 0x87
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	2034      	movs	r0, #52	@ 0x34
 80024f4:	4342      	muls	r2, r0
 80024f6:	188a      	adds	r2, r1, r2
 80024f8:	18d3      	adds	r3, r2, r3
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d125      	bne.n	800254c <TransmitCAN+0xc8>
		{
			CalculateTemperature();
 8002500:	f000 f9aa 	bl	8002858 <CalculateTemperature>

			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TempModule.canAnalogue[i].TxHeader, TempModule.canAnalogue[i].TxData);
 8002504:	1dfb      	adds	r3, r7, #7
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2234      	movs	r2, #52	@ 0x34
 800250a:	4353      	muls	r3, r2
 800250c:	33e9      	adds	r3, #233	@ 0xe9
 800250e:	33ff      	adds	r3, #255	@ 0xff
 8002510:	001a      	movs	r2, r3
 8002512:	4b42      	ldr	r3, [pc, #264]	@ (800261c <TransmitCAN+0x198>)
 8002514:	18d3      	adds	r3, r2, r3
 8002516:	3308      	adds	r3, #8
 8002518:	0019      	movs	r1, r3
 800251a:	1dfb      	adds	r3, r7, #7
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2234      	movs	r2, #52	@ 0x34
 8002520:	4353      	muls	r3, r2
 8002522:	2284      	movs	r2, #132	@ 0x84
 8002524:	0092      	lsls	r2, r2, #2
 8002526:	189a      	adds	r2, r3, r2
 8002528:	4b3c      	ldr	r3, [pc, #240]	@ (800261c <TransmitCAN+0x198>)
 800252a:	18d3      	adds	r3, r2, r3
 800252c:	1d1a      	adds	r2, r3, #4
 800252e:	4b3e      	ldr	r3, [pc, #248]	@ (8002628 <TransmitCAN+0x1a4>)
 8002530:	0018      	movs	r0, r3
 8002532:	f002 f94f 	bl	80047d4 <HAL_FDCAN_AddMessageToTxFifoQ>
			TempModule.canAnalogue[i].transmitFlag = 0;
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	4938      	ldr	r1, [pc, #224]	@ (800261c <TransmitCAN+0x198>)
 800253c:	2387      	movs	r3, #135	@ 0x87
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	2034      	movs	r0, #52	@ 0x34
 8002542:	4342      	muls	r2, r0
 8002544:	188a      	adds	r2, r1, r2
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 800254c:	1dfb      	adds	r3, r7, #7
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	1dfb      	adds	r3, r7, #7
 8002552:	3201      	adds	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d9b4      	bls.n	80024c8 <TransmitCAN+0x44>
		}
	}

	//Analogue RAW frames
	for(uint8_t i = 0; i < 2*NUM_OF_TEMPBANKS; i++)
 800255e:	1dbb      	adds	r3, r7, #6
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	e04c      	b.n	8002600 <TransmitCAN+0x17c>
	{
		if(TempModule.AverageFlag == 1)
 8002566:	4a2d      	ldr	r2, [pc, #180]	@ (800261c <TransmitCAN+0x198>)
 8002568:	23da      	movs	r3, #218	@ 0xda
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	5cd3      	ldrb	r3, [r2, r3]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <TransmitCAN+0xf2>
		{
			CalculateVoltageReading();
 8002572:	f000 f85b 	bl	800262c <CalculateVoltageReading>
		}

		if((HAL_FDCAN_GetTxFifoFreeLevel(TempModule.canAnalogueRaw[i].canPeripheral) == 3) && (TempModule.canAnalogueRaw[i].transmitFlag == 1))
 8002576:	1dbb      	adds	r3, r7, #6
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	4928      	ldr	r1, [pc, #160]	@ (800261c <TransmitCAN+0x198>)
 800257c:	23c9      	movs	r3, #201	@ 0xc9
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	2034      	movs	r0, #52	@ 0x34
 8002582:	4342      	muls	r2, r0
 8002584:	188a      	adds	r2, r1, r2
 8002586:	18d3      	adds	r3, r2, r3
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	0018      	movs	r0, r3
 800258c:	f002 f967 	bl	800485e <HAL_FDCAN_GetTxFifoFreeLevel>
 8002590:	0003      	movs	r3, r0
 8002592:	2b03      	cmp	r3, #3
 8002594:	d12f      	bne.n	80025f6 <TransmitCAN+0x172>
 8002596:	1dbb      	adds	r3, r7, #6
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	4920      	ldr	r1, [pc, #128]	@ (800261c <TransmitCAN+0x198>)
 800259c:	23d5      	movs	r3, #213	@ 0xd5
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	2034      	movs	r0, #52	@ 0x34
 80025a2:	4342      	muls	r2, r0
 80025a4:	188a      	adds	r2, r1, r2
 80025a6:	18d3      	adds	r3, r2, r3
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d123      	bne.n	80025f6 <TransmitCAN+0x172>
		{
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TempModule.canAnalogueRaw[i].TxHeader, TempModule.canAnalogueRaw[i].TxData);
 80025ae:	1dbb      	adds	r3, r7, #6
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2234      	movs	r2, #52	@ 0x34
 80025b4:	4353      	muls	r3, r2
 80025b6:	22c8      	movs	r2, #200	@ 0xc8
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	189a      	adds	r2, r3, r2
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <TransmitCAN+0x198>)
 80025be:	18d3      	adds	r3, r2, r3
 80025c0:	3308      	adds	r3, #8
 80025c2:	0019      	movs	r1, r3
 80025c4:	1dbb      	adds	r3, r7, #6
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2234      	movs	r2, #52	@ 0x34
 80025ca:	4353      	muls	r3, r2
 80025cc:	22d2      	movs	r2, #210	@ 0xd2
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	189a      	adds	r2, r3, r2
 80025d2:	4b12      	ldr	r3, [pc, #72]	@ (800261c <TransmitCAN+0x198>)
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	1d1a      	adds	r2, r3, #4
 80025d8:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <TransmitCAN+0x1a4>)
 80025da:	0018      	movs	r0, r3
 80025dc:	f002 f8fa 	bl	80047d4 <HAL_FDCAN_AddMessageToTxFifoQ>
			TempModule.canAnalogueRaw[i].transmitFlag = 0;
 80025e0:	1dbb      	adds	r3, r7, #6
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	490d      	ldr	r1, [pc, #52]	@ (800261c <TransmitCAN+0x198>)
 80025e6:	23d5      	movs	r3, #213	@ 0xd5
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	2034      	movs	r0, #52	@ 0x34
 80025ec:	4342      	muls	r2, r0
 80025ee:	188a      	adds	r2, r1, r2
 80025f0:	18d3      	adds	r3, r2, r3
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2*NUM_OF_TEMPBANKS; i++)
 80025f6:	1dbb      	adds	r3, r7, #6
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	1dbb      	adds	r3, r7, #6
 80025fc:	3201      	adds	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b09      	cmp	r3, #9
 8002606:	d9ae      	bls.n	8002566 <TransmitCAN+0xe2>
		}
	}

	TempModule.AverageFlag = 1;
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <TransmitCAN+0x198>)
 800260a:	23da      	movs	r3, #218	@ 0xda
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2101      	movs	r1, #1
 8002610:	54d1      	strb	r1, [r2, r3]
}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	20000100 	.word	0x20000100
 8002620:	200002e0 	.word	0x200002e0
 8002624:	200002bc 	.word	0x200002bc
 8002628:	200007d0 	.word	0x200007d0

0800262c <CalculateVoltageReading>:

void CalculateVoltageReading()
{
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
	//Read voltage from all TempBanks
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e0fe      	b.n	8002838 <CalculateVoltageReading+0x20c>
	{
		for(uint8_t j = 0; j < 8 ; j++)
 800263a:	1dbb      	adds	r3, r7, #6
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e059      	b.n	80026f6 <CalculateVoltageReading+0xca>
		{
			//Compute voltage based on average readings
			TempModule.TempBanks[i].RawVoltages[j] = (TempModule.TempBanks[i].RawVoltagesSum[j])/(TempModule.TempBanks[i].RawVoltageCount[j]);
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	1dbb      	adds	r3, r7, #6
 8002648:	7818      	ldrb	r0, [r3, #0]
 800264a:	4982      	ldr	r1, [pc, #520]	@ (8002854 <CalculateVoltageReading+0x228>)
 800264c:	0013      	movs	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	189b      	adds	r3, r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	181b      	adds	r3, r3, r0
 8002656:	3306      	adds	r3, #6
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	18cb      	adds	r3, r1, r3
 800265c:	3304      	adds	r3, #4
 800265e:	681c      	ldr	r4, [r3, #0]
 8002660:	1dfb      	adds	r3, r7, #7
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	1dbb      	adds	r3, r7, #6
 8002666:	7818      	ldrb	r0, [r3, #0]
 8002668:	497a      	ldr	r1, [pc, #488]	@ (8002854 <CalculateVoltageReading+0x228>)
 800266a:	0013      	movs	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	189b      	adds	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	181b      	adds	r3, r3, r0
 8002674:	331c      	adds	r3, #28
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	18cb      	adds	r3, r1, r3
 800267a:	3304      	adds	r3, #4
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	0019      	movs	r1, r3
 8002680:	0020      	movs	r0, r4
 8002682:	f7fd fd49 	bl	8000118 <__udivsi3>
 8002686:	0003      	movs	r3, r0
 8002688:	0019      	movs	r1, r3
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	1dbb      	adds	r3, r7, #6
 8002690:	7818      	ldrb	r0, [r3, #0]
 8002692:	b28c      	uxth	r4, r1
 8002694:	496f      	ldr	r1, [pc, #444]	@ (8002854 <CalculateVoltageReading+0x228>)
 8002696:	0013      	movs	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	189b      	adds	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	181b      	adds	r3, r3, r0
 80026a0:	3304      	adds	r3, #4
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	18cb      	adds	r3, r1, r3
 80026a6:	3304      	adds	r3, #4
 80026a8:	1c22      	adds	r2, r4, #0
 80026aa:	801a      	strh	r2, [r3, #0]

			//Reset to compute next average
			TempModule.TempBanks[i].RawVoltagesSum[j] = 0;
 80026ac:	1dfb      	adds	r3, r7, #7
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	1dbb      	adds	r3, r7, #6
 80026b2:	7818      	ldrb	r0, [r3, #0]
 80026b4:	4967      	ldr	r1, [pc, #412]	@ (8002854 <CalculateVoltageReading+0x228>)
 80026b6:	0013      	movs	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	189b      	adds	r3, r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	181b      	adds	r3, r3, r0
 80026c0:	3306      	adds	r3, #6
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	18cb      	adds	r3, r1, r3
 80026c6:	3304      	adds	r3, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
			TempModule.TempBanks[i].RawVoltageCount[j] = 0;
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	1dbb      	adds	r3, r7, #6
 80026d2:	7818      	ldrb	r0, [r3, #0]
 80026d4:	495f      	ldr	r1, [pc, #380]	@ (8002854 <CalculateVoltageReading+0x228>)
 80026d6:	0013      	movs	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	189b      	adds	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	181b      	adds	r3, r3, r0
 80026e0:	331c      	adds	r3, #28
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	18cb      	adds	r3, r1, r3
 80026e6:	3304      	adds	r3, #4
 80026e8:	2200      	movs	r2, #0
 80026ea:	801a      	strh	r2, [r3, #0]
		for(uint8_t j = 0; j < 8 ; j++)
 80026ec:	1dbb      	adds	r3, r7, #6
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	1dbb      	adds	r3, r7, #6
 80026f2:	3201      	adds	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	1dbb      	adds	r3, r7, #6
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b07      	cmp	r3, #7
 80026fc:	d9a1      	bls.n	8002642 <CalculateVoltageReading+0x16>
		}

		//Package all RAW voltages to CAN frames
		for(uint8_t j = 0 ; j < 4; j++)
 80026fe:	1d7b      	adds	r3, r7, #5
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e08e      	b.n	8002824 <CalculateVoltageReading+0x1f8>
		{
			//Channels 0 - 3
			TempModule.canAnalogueRaw[2*i].TxData[2*j] = (TempModule.TempBanks[i].RawVoltages[j] >> 8);
 8002706:	1dfb      	adds	r3, r7, #7
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	1d7b      	adds	r3, r7, #5
 800270c:	7818      	ldrb	r0, [r3, #0]
 800270e:	4951      	ldr	r1, [pc, #324]	@ (8002854 <CalculateVoltageReading+0x228>)
 8002710:	0013      	movs	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	189b      	adds	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	181b      	adds	r3, r3, r0
 800271a:	3304      	adds	r3, #4
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	18cb      	adds	r3, r1, r3
 8002720:	3304      	adds	r3, #4
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	b298      	uxth	r0, r3
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	0059      	lsls	r1, r3, #1
 800272e:	1d7b      	adds	r3, r7, #5
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	005a      	lsls	r2, r3, #1
 8002734:	b2c5      	uxtb	r5, r0
 8002736:	4847      	ldr	r0, [pc, #284]	@ (8002854 <CalculateVoltageReading+0x228>)
 8002738:	23d3      	movs	r3, #211	@ 0xd3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	2434      	movs	r4, #52	@ 0x34
 800273e:	4361      	muls	r1, r4
 8002740:	1841      	adds	r1, r0, r1
 8002742:	188a      	adds	r2, r1, r2
 8002744:	18d3      	adds	r3, r2, r3
 8002746:	1c2a      	adds	r2, r5, #0
 8002748:	701a      	strb	r2, [r3, #0]
			TempModule.canAnalogueRaw[2*i].TxData[2*j+1] = (TempModule.TempBanks[i].RawVoltages[j] & 0xFF);
 800274a:	1dfb      	adds	r3, r7, #7
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	1d7b      	adds	r3, r7, #5
 8002750:	7818      	ldrb	r0, [r3, #0]
 8002752:	4940      	ldr	r1, [pc, #256]	@ (8002854 <CalculateVoltageReading+0x228>)
 8002754:	0013      	movs	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	189b      	adds	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	181b      	adds	r3, r3, r0
 800275e:	3304      	adds	r3, #4
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	18cb      	adds	r3, r1, r3
 8002764:	3304      	adds	r3, #4
 8002766:	8818      	ldrh	r0, [r3, #0]
 8002768:	1dfb      	adds	r3, r7, #7
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	0059      	lsls	r1, r3, #1
 800276e:	1d7b      	adds	r3, r7, #5
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	b2c5      	uxtb	r5, r0
 8002778:	4836      	ldr	r0, [pc, #216]	@ (8002854 <CalculateVoltageReading+0x228>)
 800277a:	23d3      	movs	r3, #211	@ 0xd3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	2434      	movs	r4, #52	@ 0x34
 8002780:	4361      	muls	r1, r4
 8002782:	1841      	adds	r1, r0, r1
 8002784:	188a      	adds	r2, r1, r2
 8002786:	18d3      	adds	r3, r2, r3
 8002788:	1c2a      	adds	r2, r5, #0
 800278a:	701a      	strb	r2, [r3, #0]

			//Channels 4 - 7
			TempModule.canAnalogueRaw[2*i + 1].TxData[2*j] = (TempModule.TempBanks[i].RawVoltages[j + 4] >> 8);
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	1d7b      	adds	r3, r7, #5
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	1d18      	adds	r0, r3, #4
 8002796:	492f      	ldr	r1, [pc, #188]	@ (8002854 <CalculateVoltageReading+0x228>)
 8002798:	0013      	movs	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	189b      	adds	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	181b      	adds	r3, r3, r0
 80027a2:	3304      	adds	r3, #4
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	18cb      	adds	r3, r1, r3
 80027a8:	3304      	adds	r3, #4
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	b298      	uxth	r0, r3
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	1c59      	adds	r1, r3, #1
 80027b8:	1d7b      	adds	r3, r7, #5
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	005a      	lsls	r2, r3, #1
 80027be:	b2c5      	uxtb	r5, r0
 80027c0:	4824      	ldr	r0, [pc, #144]	@ (8002854 <CalculateVoltageReading+0x228>)
 80027c2:	23d3      	movs	r3, #211	@ 0xd3
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	2434      	movs	r4, #52	@ 0x34
 80027c8:	4361      	muls	r1, r4
 80027ca:	1841      	adds	r1, r0, r1
 80027cc:	188a      	adds	r2, r1, r2
 80027ce:	18d3      	adds	r3, r2, r3
 80027d0:	1c2a      	adds	r2, r5, #0
 80027d2:	701a      	strb	r2, [r3, #0]
			TempModule.canAnalogueRaw[2*i + 1].TxData[2*j+1] = (TempModule.TempBanks[i].RawVoltages[j + 4] & 0xFF);
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	1d7b      	adds	r3, r7, #5
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	1d18      	adds	r0, r3, #4
 80027de:	491d      	ldr	r1, [pc, #116]	@ (8002854 <CalculateVoltageReading+0x228>)
 80027e0:	0013      	movs	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	189b      	adds	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	181b      	adds	r3, r3, r0
 80027ea:	3304      	adds	r3, #4
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	18cb      	adds	r3, r1, r3
 80027f0:	3304      	adds	r3, #4
 80027f2:	8818      	ldrh	r0, [r3, #0]
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	1d7b      	adds	r3, r7, #5
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	b2c5      	uxtb	r5, r0
 8002806:	4813      	ldr	r0, [pc, #76]	@ (8002854 <CalculateVoltageReading+0x228>)
 8002808:	23d3      	movs	r3, #211	@ 0xd3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	2434      	movs	r4, #52	@ 0x34
 800280e:	4361      	muls	r1, r4
 8002810:	1841      	adds	r1, r0, r1
 8002812:	188a      	adds	r2, r1, r2
 8002814:	18d3      	adds	r3, r2, r3
 8002816:	1c2a      	adds	r2, r5, #0
 8002818:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0 ; j < 4; j++)
 800281a:	1d7b      	adds	r3, r7, #5
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	1d7b      	adds	r3, r7, #5
 8002820:	3201      	adds	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	1d7b      	adds	r3, r7, #5
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d800      	bhi.n	800282e <CalculateVoltageReading+0x202>
 800282c:	e76b      	b.n	8002706 <CalculateVoltageReading+0xda>
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	1dfb      	adds	r3, r7, #7
 8002834:	3201      	adds	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	1dfb      	adds	r3, r7, #7
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d800      	bhi.n	8002842 <CalculateVoltageReading+0x216>
 8002840:	e6fb      	b.n	800263a <CalculateVoltageReading+0xe>
		}
	}

	TempModule.AverageFlag = 0;
 8002842:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <CalculateVoltageReading+0x228>)
 8002844:	23da      	movs	r3, #218	@ 0xda
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2100      	movs	r1, #0
 800284a:	54d1      	strb	r1, [r2, r3]
}
 800284c:	46c0      	nop			@ (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bdb0      	pop	{r4, r5, r7, pc}
 8002854:	20000100 	.word	0x20000100

08002858 <CalculateTemperature>:

void CalculateTemperature()
{
 8002858:	b5b0      	push	{r4, r5, r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	//Read voltage from all TempBanks
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 800285e:	1dfb      	adds	r3, r7, #7
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e050      	b.n	8002908 <CalculateTemperature+0xb0>
	{
		for(uint8_t j = 0; j< 8 ; j++)
 8002866:	1dbb      	adds	r3, r7, #6
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
 800286c:	e043      	b.n	80028f6 <CalculateTemperature+0x9e>
		{
			TempModule.TempBanks[i].Temperature[j] = EnergusConvertToTemp(TempModule.TempBanks[i].RawVoltages[j]);
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	1dbb      	adds	r3, r7, #6
 8002874:	7818      	ldrb	r0, [r3, #0]
 8002876:	4929      	ldr	r1, [pc, #164]	@ (800291c <CalculateTemperature+0xc4>)
 8002878:	0013      	movs	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	189b      	adds	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	181b      	adds	r3, r3, r0
 8002882:	3304      	adds	r3, #4
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	18cb      	adds	r3, r1, r3
 8002888:	3304      	adds	r3, #4
 800288a:	881a      	ldrh	r2, [r3, #0]
 800288c:	1dfb      	adds	r3, r7, #7
 800288e:	781c      	ldrb	r4, [r3, #0]
 8002890:	1dbb      	adds	r3, r7, #6
 8002892:	781d      	ldrb	r5, [r3, #0]
 8002894:	0010      	movs	r0, r2
 8002896:	f7ff fce5 	bl	8002264 <EnergusConvertToTemp>
 800289a:	0003      	movs	r3, r0
 800289c:	0019      	movs	r1, r3
 800289e:	4a1f      	ldr	r2, [pc, #124]	@ (800291c <CalculateTemperature+0xc4>)
 80028a0:	0023      	movs	r3, r4
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	191b      	adds	r3, r3, r4
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	18d3      	adds	r3, r2, r3
 80028aa:	195b      	adds	r3, r3, r5
 80028ac:	3304      	adds	r3, #4
 80028ae:	1c0a      	adds	r2, r1, #0
 80028b0:	701a      	strb	r2, [r3, #0]
			TempModule.canAnalogue[i].TxData[j] = TempModule.TempBanks[i].Temperature[j];
 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	1dbb      	adds	r3, r7, #6
 80028b8:	7819      	ldrb	r1, [r3, #0]
 80028ba:	4818      	ldr	r0, [pc, #96]	@ (800291c <CalculateTemperature+0xc4>)
 80028bc:	0013      	movs	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	189b      	adds	r3, r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	18c3      	adds	r3, r0, r3
 80028c6:	185b      	adds	r3, r3, r1
 80028c8:	3304      	adds	r3, #4
 80028ca:	2000      	movs	r0, #0
 80028cc:	5618      	ldrsb	r0, [r3, r0]
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	7819      	ldrb	r1, [r3, #0]
 80028d2:	1dbb      	adds	r3, r7, #6
 80028d4:	781a      	ldrb	r2, [r3, #0]
 80028d6:	b2c5      	uxtb	r5, r0
 80028d8:	4810      	ldr	r0, [pc, #64]	@ (800291c <CalculateTemperature+0xc4>)
 80028da:	2385      	movs	r3, #133	@ 0x85
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	2434      	movs	r4, #52	@ 0x34
 80028e0:	4361      	muls	r1, r4
 80028e2:	1841      	adds	r1, r0, r1
 80028e4:	188a      	adds	r2, r1, r2
 80028e6:	18d3      	adds	r3, r2, r3
 80028e8:	1c2a      	adds	r2, r5, #0
 80028ea:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j< 8 ; j++)
 80028ec:	1dbb      	adds	r3, r7, #6
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	1dbb      	adds	r3, r7, #6
 80028f2:	3201      	adds	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	1dbb      	adds	r3, r7, #6
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b07      	cmp	r3, #7
 80028fc:	d9b7      	bls.n	800286e <CalculateTemperature+0x16>
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	3201      	adds	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d9aa      	bls.n	8002866 <CalculateTemperature+0xe>
		}
	}
}
 8002910:	46c0      	nop			@ (mov r8, r8)
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bdb0      	pop	{r4, r5, r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	20000100 	.word	0x20000100

08002920 <UpdateAnalogue>:

void UpdateAnalogue()
{
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
	uint16_t TempBankVDD[6] = {TB1_VDD, TB2_VDD, TB3_VDD, TB4_VDD, TB5_VDD};
 8002926:	2408      	movs	r4, #8
 8002928:	2508      	movs	r5, #8
 800292a:	1963      	adds	r3, r4, r5
 800292c:	19db      	adds	r3, r3, r7
 800292e:	0018      	movs	r0, r3
 8002930:	230c      	movs	r3, #12
 8002932:	001a      	movs	r2, r3
 8002934:	2100      	movs	r1, #0
 8002936:	f004 fb5d 	bl	8006ff4 <memset>
 800293a:	0021      	movs	r1, r4
 800293c:	0028      	movs	r0, r5
 800293e:	180b      	adds	r3, r1, r0
 8002940:	19db      	adds	r3, r3, r7
 8002942:	4a78      	ldr	r2, [pc, #480]	@ (8002b24 <UpdateAnalogue+0x204>)
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	180b      	adds	r3, r1, r0
 8002948:	19db      	adds	r3, r3, r7
 800294a:	4a77      	ldr	r2, [pc, #476]	@ (8002b28 <UpdateAnalogue+0x208>)
 800294c:	805a      	strh	r2, [r3, #2]
 800294e:	180b      	adds	r3, r1, r0
 8002950:	19db      	adds	r3, r3, r7
 8002952:	4a76      	ldr	r2, [pc, #472]	@ (8002b2c <UpdateAnalogue+0x20c>)
 8002954:	809a      	strh	r2, [r3, #4]
 8002956:	180b      	adds	r3, r1, r0
 8002958:	19db      	adds	r3, r3, r7
 800295a:	4a75      	ldr	r2, [pc, #468]	@ (8002b30 <UpdateAnalogue+0x210>)
 800295c:	80da      	strh	r2, [r3, #6]
 800295e:	180b      	adds	r3, r1, r0
 8002960:	19db      	adds	r3, r3, r7
 8002962:	4a74      	ldr	r2, [pc, #464]	@ (8002b34 <UpdateAnalogue+0x214>)
 8002964:	811a      	strh	r2, [r3, #8]
	uint8_t test[2] = { 0xAA, 0xAA};
 8002966:	230c      	movs	r3, #12
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	4a73      	ldr	r2, [pc, #460]	@ (8002b38 <UpdateAnalogue+0x218>)
 800296c:	801a      	strh	r2, [r3, #0]
	uint8_t testRX[2] = { 0, 0 };
 800296e:	183b      	adds	r3, r7, r0
 8002970:	2200      	movs	r2, #0
 8002972:	801a      	strh	r2, [r3, #0]

	//Read voltage from all TempBanks
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 8002974:	2317      	movs	r3, #23
 8002976:	181b      	adds	r3, r3, r0
 8002978:	19db      	adds	r3, r3, r7
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e0c3      	b.n	8002b08 <UpdateAnalogue+0x1e8>
	{
		for(uint8_t j = 0; j< 8 ; j++)
 8002980:	2316      	movs	r3, #22
 8002982:	2208      	movs	r2, #8
 8002984:	189b      	adds	r3, r3, r2
 8002986:	19db      	adds	r3, r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e0ac      	b.n	8002ae8 <UpdateAnalogue+0x1c8>
		{
			writeSingleRegister(&TempModule.ADC_Bank[i], CHANNEL_SEL_ADDRESS, j);
 800298e:	2617      	movs	r6, #23
 8002990:	2108      	movs	r1, #8
 8002992:	1873      	adds	r3, r6, r1
 8002994:	19db      	adds	r3, r3, r7
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	0013      	movs	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	189b      	adds	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	24b3      	movs	r4, #179	@ 0xb3
 80029a2:	00e4      	lsls	r4, r4, #3
 80029a4:	191a      	adds	r2, r3, r4
 80029a6:	4b65      	ldr	r3, [pc, #404]	@ (8002b3c <UpdateAnalogue+0x21c>)
 80029a8:	18d3      	adds	r3, r2, r3
 80029aa:	1d18      	adds	r0, r3, #4
 80029ac:	2516      	movs	r5, #22
 80029ae:	186b      	adds	r3, r5, r1
 80029b0:	19db      	adds	r3, r3, r7
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	001a      	movs	r2, r3
 80029b6:	2111      	movs	r1, #17
 80029b8:	f000 fc76 	bl	80032a8 <writeSingleRegister>
			spiSendReceiveArray(&TempModule.ADC_Bank[i], test, testRX, 2);
 80029bc:	2108      	movs	r1, #8
 80029be:	1873      	adds	r3, r6, r1
 80029c0:	19db      	adds	r3, r3, r7
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	0013      	movs	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	189b      	adds	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	191a      	adds	r2, r3, r4
 80029ce:	4b5b      	ldr	r3, [pc, #364]	@ (8002b3c <UpdateAnalogue+0x21c>)
 80029d0:	18d3      	adds	r3, r2, r3
 80029d2:	1d18      	adds	r0, r3, #4
 80029d4:	000c      	movs	r4, r1
 80029d6:	187a      	adds	r2, r7, r1
 80029d8:	230c      	movs	r3, #12
 80029da:	18f9      	adds	r1, r7, r3
 80029dc:	2302      	movs	r3, #2
 80029de:	f000 fb35 	bl	800304c <spiSendReceiveArray>
			TempModule.TempBanks[i].RawVoltagesSum[j] += (TempBankVDD[i]*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 80029e2:	0021      	movs	r1, r4
 80029e4:	1873      	adds	r3, r6, r1
 80029e6:	19db      	adds	r3, r3, r7
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	186b      	adds	r3, r5, r1
 80029ec:	19db      	adds	r3, r3, r7
 80029ee:	7818      	ldrb	r0, [r3, #0]
 80029f0:	4952      	ldr	r1, [pc, #328]	@ (8002b3c <UpdateAnalogue+0x21c>)
 80029f2:	0013      	movs	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	181b      	adds	r3, r3, r0
 80029fc:	3306      	adds	r3, #6
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	18cb      	adds	r3, r1, r3
 8002a02:	3304      	adds	r3, #4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7ff fbea 	bl	80021e0 <__aeabi_ui2d>
 8002a0c:	0004      	movs	r4, r0
 8002a0e:	000d      	movs	r5, r1
 8002a10:	2108      	movs	r1, #8
 8002a12:	1873      	adds	r3, r6, r1
 8002a14:	19db      	adds	r3, r3, r7
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	2308      	movs	r3, #8
 8002a1a:	185b      	adds	r3, r3, r1
 8002a1c:	19db      	adds	r3, r3, r7
 8002a1e:	0052      	lsls	r2, r2, #1
 8002a20:	5ad3      	ldrh	r3, [r2, r3]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f7ff fbae 	bl	8002184 <__aeabi_i2d>
 8002a28:	6038      	str	r0, [r7, #0]
 8002a2a:	6079      	str	r1, [r7, #4]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	18bb      	adds	r3, r7, r2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	18ba      	adds	r2, r7, r2
 8002a36:	7852      	ldrb	r2, [r2, #1]
 8002a38:	189b      	adds	r3, r3, r2
 8002a3a:	111b      	asrs	r3, r3, #4
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7ff fba1 	bl	8002184 <__aeabi_i2d>
 8002a42:	2200      	movs	r2, #0
 8002a44:	4b3e      	ldr	r3, [pc, #248]	@ (8002b40 <UpdateAnalogue+0x220>)
 8002a46:	f7fe f815 	bl	8000a74 <__aeabi_ddiv>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	000b      	movs	r3, r1
 8002a4e:	6838      	ldr	r0, [r7, #0]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	f7fe fc49 	bl	80012e8 <__aeabi_dmul>
 8002a56:	0002      	movs	r2, r0
 8002a58:	000b      	movs	r3, r1
 8002a5a:	0020      	movs	r0, r4
 8002a5c:	0029      	movs	r1, r5
 8002a5e:	f7fd fc43 	bl	80002e8 <__aeabi_dadd>
 8002a62:	0002      	movs	r2, r0
 8002a64:	000b      	movs	r3, r1
 8002a66:	2008      	movs	r0, #8
 8002a68:	1831      	adds	r1, r6, r0
 8002a6a:	19c9      	adds	r1, r1, r7
 8002a6c:	780c      	ldrb	r4, [r1, #0]
 8002a6e:	2516      	movs	r5, #22
 8002a70:	182d      	adds	r5, r5, r0
 8002a72:	19e9      	adds	r1, r5, r7
 8002a74:	780d      	ldrb	r5, [r1, #0]
 8002a76:	0010      	movs	r0, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	f7fd fc17 	bl	80002ac <__aeabi_d2uiz>
 8002a7e:	0001      	movs	r1, r0
 8002a80:	4a2e      	ldr	r2, [pc, #184]	@ (8002b3c <UpdateAnalogue+0x21c>)
 8002a82:	0023      	movs	r3, r4
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	191b      	adds	r3, r3, r4
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	195b      	adds	r3, r3, r5
 8002a8c:	3306      	adds	r3, #6
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	18d3      	adds	r3, r2, r3
 8002a92:	3304      	adds	r3, #4
 8002a94:	6019      	str	r1, [r3, #0]
			TempModule.TempBanks[i].RawVoltageCount[j]++;
 8002a96:	2108      	movs	r1, #8
 8002a98:	1873      	adds	r3, r6, r1
 8002a9a:	19db      	adds	r3, r3, r7
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	2516      	movs	r5, #22
 8002aa0:	000e      	movs	r6, r1
 8002aa2:	186b      	adds	r3, r5, r1
 8002aa4:	19db      	adds	r3, r3, r7
 8002aa6:	7819      	ldrb	r1, [r3, #0]
 8002aa8:	4824      	ldr	r0, [pc, #144]	@ (8002b3c <UpdateAnalogue+0x21c>)
 8002aaa:	0013      	movs	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	189b      	adds	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	185b      	adds	r3, r3, r1
 8002ab4:	331c      	adds	r3, #28
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	18c3      	adds	r3, r0, r3
 8002aba:	3304      	adds	r3, #4
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b29c      	uxth	r4, r3
 8002ac2:	481e      	ldr	r0, [pc, #120]	@ (8002b3c <UpdateAnalogue+0x21c>)
 8002ac4:	0013      	movs	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	189b      	adds	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	185b      	adds	r3, r3, r1
 8002ace:	331c      	adds	r3, #28
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	18c3      	adds	r3, r0, r3
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	1c22      	adds	r2, r4, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
		for(uint8_t j = 0; j< 8 ; j++)
 8002ada:	19ab      	adds	r3, r5, r6
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	19ab      	adds	r3, r5, r6
 8002ae2:	19db      	adds	r3, r3, r7
 8002ae4:	3201      	adds	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	2316      	movs	r3, #22
 8002aea:	2008      	movs	r0, #8
 8002aec:	181b      	adds	r3, r3, r0
 8002aee:	19db      	adds	r3, r3, r7
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b07      	cmp	r3, #7
 8002af4:	d800      	bhi.n	8002af8 <UpdateAnalogue+0x1d8>
 8002af6:	e74a      	b.n	800298e <UpdateAnalogue+0x6e>
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 8002af8:	2117      	movs	r1, #23
 8002afa:	180b      	adds	r3, r1, r0
 8002afc:	19db      	adds	r3, r3, r7
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	180b      	adds	r3, r1, r0
 8002b02:	19db      	adds	r3, r3, r7
 8002b04:	3201      	adds	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	2317      	movs	r3, #23
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	189b      	adds	r3, r3, r2
 8002b0e:	19db      	adds	r3, r3, r7
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d800      	bhi.n	8002b18 <UpdateAnalogue+0x1f8>
 8002b16:	e733      	b.n	8002980 <UpdateAnalogue+0x60>
		}
	}
}
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b009      	add	sp, #36	@ 0x24
 8002b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	0000140b 	.word	0x0000140b
 8002b28:	000013ed 	.word	0x000013ed
 8002b2c:	0000139b 	.word	0x0000139b
 8002b30:	000013d6 	.word	0x000013d6
 8002b34:	00001373 	.word	0x00001373
 8002b38:	ffffaaaa 	.word	0xffffaaaa
 8002b3c:	20000100 	.word	0x20000100
 8002b40:	40b00000 	.word	0x40b00000

08002b44 <canFramesDefine>:

void canFramesDefine()
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0

	//Heartbeat
	TempModule.canHeartBeat.canPeripheral = &hfdcan2;
 8002b4a:	4a9d      	ldr	r2, [pc, #628]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002b4c:	23dc      	movs	r3, #220	@ 0xdc
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	499c      	ldr	r1, [pc, #624]	@ (8002dc4 <canFramesDefine+0x280>)
 8002b52:	50d1      	str	r1, [r2, r3]
	TempModule.canHeartBeat.TxHeader.IdType = FDCAN_STANDARD_ID;
 8002b54:	4a9a      	ldr	r2, [pc, #616]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002b56:	23e0      	movs	r3, #224	@ 0xe0
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	50d1      	str	r1, [r2, r3]
	TempModule.canHeartBeat.TxHeader.Identifier = 0x110;
 8002b5e:	4a98      	ldr	r2, [pc, #608]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002b60:	23de      	movs	r3, #222	@ 0xde
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	2188      	movs	r1, #136	@ 0x88
 8002b66:	0049      	lsls	r1, r1, #1
 8002b68:	50d1      	str	r1, [r2, r3]
	TempModule.canHeartBeat.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002b6a:	4a95      	ldr	r2, [pc, #596]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002b6c:	23e2      	movs	r3, #226	@ 0xe2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2100      	movs	r1, #0
 8002b72:	50d1      	str	r1, [r2, r3]
	TempModule.canHeartBeat.TxHeader.DataLength = 0x02;
 8002b74:	4a92      	ldr	r2, [pc, #584]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002b76:	23e4      	movs	r3, #228	@ 0xe4
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	50d1      	str	r1, [r2, r3]
	TempModule.canHeartBeat.TxData[0] = 0;
 8002b7e:	4a90      	ldr	r2, [pc, #576]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002b80:	23f0      	movs	r3, #240	@ 0xf0
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	2100      	movs	r1, #0
 8002b86:	54d1      	strb	r1, [r2, r3]
	TempModule.canHeartBeat.TxData[1] = 0;
 8002b88:	4a8d      	ldr	r2, [pc, #564]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002b8a:	23e2      	movs	r3, #226	@ 0xe2
 8002b8c:	33ff      	adds	r3, #255	@ 0xff
 8002b8e:	2100      	movs	r1, #0
 8002b90:	54d1      	strb	r1, [r2, r3]

	//Analogue
	for(int i = 0; i < NUM_OF_TEMPBANKS; i++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	e081      	b.n	8002c9c <canFramesDefine+0x158>
	{
		TempModule.canAnalogue[i].canPeripheral = &hfdcan2;
 8002b98:	4989      	ldr	r1, [pc, #548]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	23f6      	movs	r3, #246	@ 0xf6
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	2034      	movs	r0, #52	@ 0x34
 8002ba2:	4342      	muls	r2, r0
 8002ba4:	188a      	adds	r2, r1, r2
 8002ba6:	18d3      	adds	r3, r2, r3
 8002ba8:	4a86      	ldr	r2, [pc, #536]	@ (8002dc4 <canFramesDefine+0x280>)
 8002baa:	601a      	str	r2, [r3, #0]
		TempModule.canAnalogue[i].TxHeader.IdType = FDCAN_STANDARD_ID;
 8002bac:	4984      	ldr	r1, [pc, #528]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	23fa      	movs	r3, #250	@ 0xfa
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2034      	movs	r0, #52	@ 0x34
 8002bb6:	4342      	muls	r2, r0
 8002bb8:	188a      	adds	r2, r1, r2
 8002bba:	18d3      	adds	r3, r2, r3
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
		TempModule.canAnalogue[i].TxHeader.Identifier = 0x120 + i;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3321      	adds	r3, #33	@ 0x21
 8002bc4:	33ff      	adds	r3, #255	@ 0xff
 8002bc6:	001c      	movs	r4, r3
 8002bc8:	497d      	ldr	r1, [pc, #500]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	23f8      	movs	r3, #248	@ 0xf8
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2034      	movs	r0, #52	@ 0x34
 8002bd2:	4342      	muls	r2, r0
 8002bd4:	188a      	adds	r2, r1, r2
 8002bd6:	18d3      	adds	r3, r2, r3
 8002bd8:	601c      	str	r4, [r3, #0]
		TempModule.canAnalogue[i].TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002bda:	4979      	ldr	r1, [pc, #484]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	23fc      	movs	r3, #252	@ 0xfc
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2034      	movs	r0, #52	@ 0x34
 8002be4:	4342      	muls	r2, r0
 8002be6:	188a      	adds	r2, r1, r2
 8002be8:	18d3      	adds	r3, r2, r3
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
		TempModule.canAnalogue[i].TxHeader.DataLength = 0x08;
 8002bee:	4974      	ldr	r1, [pc, #464]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	23fe      	movs	r3, #254	@ 0xfe
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2034      	movs	r0, #52	@ 0x34
 8002bf8:	4342      	muls	r2, r0
 8002bfa:	188a      	adds	r2, r1, r2
 8002bfc:	18d3      	adds	r3, r2, r3
 8002bfe:	2208      	movs	r2, #8
 8002c00:	601a      	str	r2, [r3, #0]
		TempModule.canAnalogue[i].TxData[0] = 0;
 8002c02:	496f      	ldr	r1, [pc, #444]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	2385      	movs	r3, #133	@ 0x85
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	2034      	movs	r0, #52	@ 0x34
 8002c0c:	4342      	muls	r2, r0
 8002c0e:	188a      	adds	r2, r1, r2
 8002c10:	18d3      	adds	r3, r2, r3
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogue[i].TxData[1] = 0;
 8002c16:	4a6a      	ldr	r2, [pc, #424]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	496b      	ldr	r1, [pc, #428]	@ (8002dc8 <canFramesDefine+0x284>)
 8002c1c:	2034      	movs	r0, #52	@ 0x34
 8002c1e:	4343      	muls	r3, r0
 8002c20:	18d3      	adds	r3, r2, r3
 8002c22:	185b      	adds	r3, r3, r1
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogue[i].TxData[2] = 0;
 8002c28:	4a65      	ldr	r2, [pc, #404]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4967      	ldr	r1, [pc, #412]	@ (8002dcc <canFramesDefine+0x288>)
 8002c2e:	2034      	movs	r0, #52	@ 0x34
 8002c30:	4343      	muls	r3, r0
 8002c32:	18d3      	adds	r3, r2, r3
 8002c34:	185b      	adds	r3, r3, r1
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogue[i].TxData[3] = 0;
 8002c3a:	4a61      	ldr	r2, [pc, #388]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4964      	ldr	r1, [pc, #400]	@ (8002dd0 <canFramesDefine+0x28c>)
 8002c40:	2034      	movs	r0, #52	@ 0x34
 8002c42:	4343      	muls	r3, r0
 8002c44:	18d3      	adds	r3, r2, r3
 8002c46:	185b      	adds	r3, r3, r1
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogue[i].TxData[4] = 0;
 8002c4c:	495c      	ldr	r1, [pc, #368]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	2386      	movs	r3, #134	@ 0x86
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	2034      	movs	r0, #52	@ 0x34
 8002c56:	4342      	muls	r2, r0
 8002c58:	188a      	adds	r2, r1, r2
 8002c5a:	18d3      	adds	r3, r2, r3
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogue[i].TxData[5] = 0;
 8002c60:	4a57      	ldr	r2, [pc, #348]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	495b      	ldr	r1, [pc, #364]	@ (8002dd4 <canFramesDefine+0x290>)
 8002c66:	2034      	movs	r0, #52	@ 0x34
 8002c68:	4343      	muls	r3, r0
 8002c6a:	18d3      	adds	r3, r2, r3
 8002c6c:	185b      	adds	r3, r3, r1
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogue[i].TxData[6] = 0;
 8002c72:	4a53      	ldr	r2, [pc, #332]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4958      	ldr	r1, [pc, #352]	@ (8002dd8 <canFramesDefine+0x294>)
 8002c78:	2034      	movs	r0, #52	@ 0x34
 8002c7a:	4343      	muls	r3, r0
 8002c7c:	18d3      	adds	r3, r2, r3
 8002c7e:	185b      	adds	r3, r3, r1
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogue[i].TxData[7] = 0;
 8002c84:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4954      	ldr	r1, [pc, #336]	@ (8002ddc <canFramesDefine+0x298>)
 8002c8a:	2034      	movs	r0, #52	@ 0x34
 8002c8c:	4343      	muls	r3, r0
 8002c8e:	18d3      	adds	r3, r2, r3
 8002c90:	185b      	adds	r3, r3, r1
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_TEMPBANKS; i++)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	dc00      	bgt.n	8002ca4 <canFramesDefine+0x160>
 8002ca2:	e779      	b.n	8002b98 <canFramesDefine+0x54>
	}

	//Analogue RAW
	for(int i = 0; i < 2*NUM_OF_TEMPBANKS; i++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	e081      	b.n	8002dae <canFramesDefine+0x26a>
	{
		TempModule.canAnalogueRaw[i].canPeripheral = &hfdcan2;
 8002caa:	4945      	ldr	r1, [pc, #276]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	23c9      	movs	r3, #201	@ 0xc9
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	2034      	movs	r0, #52	@ 0x34
 8002cb4:	4342      	muls	r2, r0
 8002cb6:	188a      	adds	r2, r1, r2
 8002cb8:	18d3      	adds	r3, r2, r3
 8002cba:	4a42      	ldr	r2, [pc, #264]	@ (8002dc4 <canFramesDefine+0x280>)
 8002cbc:	601a      	str	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxHeader.IdType = FDCAN_STANDARD_ID;
 8002cbe:	4940      	ldr	r1, [pc, #256]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	23cb      	movs	r3, #203	@ 0xcb
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	2034      	movs	r0, #52	@ 0x34
 8002cc8:	4342      	muls	r2, r0
 8002cca:	188a      	adds	r2, r1, r2
 8002ccc:	18d3      	adds	r3, r2, r3
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxHeader.Identifier = 0x130 + i;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	3331      	adds	r3, #49	@ 0x31
 8002cd6:	33ff      	adds	r3, #255	@ 0xff
 8002cd8:	001c      	movs	r4, r3
 8002cda:	4939      	ldr	r1, [pc, #228]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	23ca      	movs	r3, #202	@ 0xca
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	2034      	movs	r0, #52	@ 0x34
 8002ce4:	4342      	muls	r2, r0
 8002ce6:	188a      	adds	r2, r1, r2
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	601c      	str	r4, [r3, #0]
		TempModule.canAnalogueRaw[i].TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002cec:	4934      	ldr	r1, [pc, #208]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	23cc      	movs	r3, #204	@ 0xcc
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	2034      	movs	r0, #52	@ 0x34
 8002cf6:	4342      	muls	r2, r0
 8002cf8:	188a      	adds	r2, r1, r2
 8002cfa:	18d3      	adds	r3, r2, r3
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxHeader.DataLength = 0x08;
 8002d00:	492f      	ldr	r1, [pc, #188]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	23cd      	movs	r3, #205	@ 0xcd
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	2034      	movs	r0, #52	@ 0x34
 8002d0a:	4342      	muls	r2, r0
 8002d0c:	188a      	adds	r2, r1, r2
 8002d0e:	18d3      	adds	r3, r2, r3
 8002d10:	2208      	movs	r2, #8
 8002d12:	601a      	str	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxData[0] = 0;
 8002d14:	492a      	ldr	r1, [pc, #168]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	23d3      	movs	r3, #211	@ 0xd3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	2034      	movs	r0, #52	@ 0x34
 8002d1e:	4342      	muls	r2, r0
 8002d20:	188a      	adds	r2, r1, r2
 8002d22:	18d3      	adds	r3, r2, r3
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxData[1] = 0;
 8002d28:	4a25      	ldr	r2, [pc, #148]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	492c      	ldr	r1, [pc, #176]	@ (8002de0 <canFramesDefine+0x29c>)
 8002d2e:	2034      	movs	r0, #52	@ 0x34
 8002d30:	4343      	muls	r3, r0
 8002d32:	18d3      	adds	r3, r2, r3
 8002d34:	185b      	adds	r3, r3, r1
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxData[2] = 0;
 8002d3a:	4a21      	ldr	r2, [pc, #132]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4929      	ldr	r1, [pc, #164]	@ (8002de4 <canFramesDefine+0x2a0>)
 8002d40:	2034      	movs	r0, #52	@ 0x34
 8002d42:	4343      	muls	r3, r0
 8002d44:	18d3      	adds	r3, r2, r3
 8002d46:	185b      	adds	r3, r3, r1
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxData[3] = 0;
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	4925      	ldr	r1, [pc, #148]	@ (8002de8 <canFramesDefine+0x2a4>)
 8002d52:	2034      	movs	r0, #52	@ 0x34
 8002d54:	4343      	muls	r3, r0
 8002d56:	18d3      	adds	r3, r2, r3
 8002d58:	185b      	adds	r3, r3, r1
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxData[4] = 0;
 8002d5e:	4918      	ldr	r1, [pc, #96]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	23d4      	movs	r3, #212	@ 0xd4
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	2034      	movs	r0, #52	@ 0x34
 8002d68:	4342      	muls	r2, r0
 8002d6a:	188a      	adds	r2, r1, r2
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxData[5] = 0;
 8002d72:	4a13      	ldr	r2, [pc, #76]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	491d      	ldr	r1, [pc, #116]	@ (8002dec <canFramesDefine+0x2a8>)
 8002d78:	2034      	movs	r0, #52	@ 0x34
 8002d7a:	4343      	muls	r3, r0
 8002d7c:	18d3      	adds	r3, r2, r3
 8002d7e:	185b      	adds	r3, r3, r1
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxData[6] = 0;
 8002d84:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	4919      	ldr	r1, [pc, #100]	@ (8002df0 <canFramesDefine+0x2ac>)
 8002d8a:	2034      	movs	r0, #52	@ 0x34
 8002d8c:	4343      	muls	r3, r0
 8002d8e:	18d3      	adds	r3, r2, r3
 8002d90:	185b      	adds	r3, r3, r1
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
		TempModule.canAnalogueRaw[i].TxData[7] = 0;
 8002d96:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <canFramesDefine+0x27c>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4916      	ldr	r1, [pc, #88]	@ (8002df4 <canFramesDefine+0x2b0>)
 8002d9c:	2034      	movs	r0, #52	@ 0x34
 8002d9e:	4343      	muls	r3, r0
 8002da0:	18d3      	adds	r3, r2, r3
 8002da2:	185b      	adds	r3, r3, r1
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2*NUM_OF_TEMPBANKS; i++)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b09      	cmp	r3, #9
 8002db2:	dc00      	bgt.n	8002db6 <canFramesDefine+0x272>
 8002db4:	e779      	b.n	8002caa <canFramesDefine+0x166>
	}
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b003      	add	sp, #12
 8002dbe:	bd90      	pop	{r4, r7, pc}
 8002dc0:	20000100 	.word	0x20000100
 8002dc4:	200007d0 	.word	0x200007d0
 8002dc8:	00000215 	.word	0x00000215
 8002dcc:	00000216 	.word	0x00000216
 8002dd0:	00000217 	.word	0x00000217
 8002dd4:	00000219 	.word	0x00000219
 8002dd8:	0000021a 	.word	0x0000021a
 8002ddc:	0000021b 	.word	0x0000021b
 8002de0:	0000034d 	.word	0x0000034d
 8002de4:	0000034e 	.word	0x0000034e
 8002de8:	0000034f 	.word	0x0000034f
 8002dec:	00000351 	.word	0x00000351
 8002df0:	00000352 	.word	0x00000352
 8002df4:	00000353 	.word	0x00000353

08002df8 <ioAssign>:

void ioAssign()
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	//Temp Bank 1
	TempModule.ADC_Bank[0].SPI_Handle = &hspi1;
 8002dfc:	4b30      	ldr	r3, [pc, #192]	@ (8002ec0 <ioAssign+0xc8>)
 8002dfe:	4931      	ldr	r1, [pc, #196]	@ (8002ec4 <ioAssign+0xcc>)
 8002e00:	4a31      	ldr	r2, [pc, #196]	@ (8002ec8 <ioAssign+0xd0>)
 8002e02:	505a      	str	r2, [r3, r1]
	TempModule.ADC_Bank[0].CS_Port = GPIOB;
 8002e04:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec0 <ioAssign+0xc8>)
 8002e06:	23b4      	movs	r3, #180	@ 0xb4
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4930      	ldr	r1, [pc, #192]	@ (8002ecc <ioAssign+0xd4>)
 8002e0c:	50d1      	str	r1, [r2, r3]
	TempModule.ADC_Bank[0].CS_Pin = GPIO_PIN_2;
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec0 <ioAssign+0xc8>)
 8002e10:	4a2f      	ldr	r2, [pc, #188]	@ (8002ed0 <ioAssign+0xd8>)
 8002e12:	2104      	movs	r1, #4
 8002e14:	5299      	strh	r1, [r3, r2]

	//Temp Bank 2
	TempModule.ADC_Bank[1].SPI_Handle = &hspi1;
 8002e16:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec0 <ioAssign+0xc8>)
 8002e18:	23b5      	movs	r3, #181	@ 0xb5
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	492a      	ldr	r1, [pc, #168]	@ (8002ec8 <ioAssign+0xd0>)
 8002e1e:	50d1      	str	r1, [r2, r3]
	TempModule.ADC_Bank[1].CS_Port = GPIOA;
 8002e20:	4b27      	ldr	r3, [pc, #156]	@ (8002ec0 <ioAssign+0xc8>)
 8002e22:	492c      	ldr	r1, [pc, #176]	@ (8002ed4 <ioAssign+0xdc>)
 8002e24:	22a0      	movs	r2, #160	@ 0xa0
 8002e26:	05d2      	lsls	r2, r2, #23
 8002e28:	505a      	str	r2, [r3, r1]
	TempModule.ADC_Bank[1].CS_Pin = GPIO_PIN_8;
 8002e2a:	4a25      	ldr	r2, [pc, #148]	@ (8002ec0 <ioAssign+0xc8>)
 8002e2c:	23b6      	movs	r3, #182	@ 0xb6
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	2180      	movs	r1, #128	@ 0x80
 8002e32:	0049      	lsls	r1, r1, #1
 8002e34:	52d1      	strh	r1, [r2, r3]

	//Temp Bank 3
	TempModule.ADC_Bank[2].SPI_Handle = &hspi1;
 8002e36:	4b22      	ldr	r3, [pc, #136]	@ (8002ec0 <ioAssign+0xc8>)
 8002e38:	4927      	ldr	r1, [pc, #156]	@ (8002ed8 <ioAssign+0xe0>)
 8002e3a:	4a23      	ldr	r2, [pc, #140]	@ (8002ec8 <ioAssign+0xd0>)
 8002e3c:	505a      	str	r2, [r3, r1]
	TempModule.ADC_Bank[2].CS_Port = GPIOA;
 8002e3e:	4a20      	ldr	r2, [pc, #128]	@ (8002ec0 <ioAssign+0xc8>)
 8002e40:	23b7      	movs	r3, #183	@ 0xb7
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	21a0      	movs	r1, #160	@ 0xa0
 8002e46:	05c9      	lsls	r1, r1, #23
 8002e48:	50d1      	str	r1, [r2, r3]
	TempModule.ADC_Bank[2].CS_Pin = GPIO_PIN_9;
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec0 <ioAssign+0xc8>)
 8002e4c:	4a23      	ldr	r2, [pc, #140]	@ (8002edc <ioAssign+0xe4>)
 8002e4e:	2180      	movs	r1, #128	@ 0x80
 8002e50:	0089      	lsls	r1, r1, #2
 8002e52:	5299      	strh	r1, [r3, r2]

	//Temp Bank 4
	TempModule.ADC_Bank[3].SPI_Handle = &hspi1;
 8002e54:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec0 <ioAssign+0xc8>)
 8002e56:	23b8      	movs	r3, #184	@ 0xb8
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	491b      	ldr	r1, [pc, #108]	@ (8002ec8 <ioAssign+0xd0>)
 8002e5c:	50d1      	str	r1, [r2, r3]
	TempModule.ADC_Bank[3].CS_Port = GPIOC;
 8002e5e:	4b18      	ldr	r3, [pc, #96]	@ (8002ec0 <ioAssign+0xc8>)
 8002e60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee0 <ioAssign+0xe8>)
 8002e62:	4920      	ldr	r1, [pc, #128]	@ (8002ee4 <ioAssign+0xec>)
 8002e64:	5099      	str	r1, [r3, r2]
	TempModule.ADC_Bank[3].CS_Pin = GPIO_PIN_6;
 8002e66:	4a16      	ldr	r2, [pc, #88]	@ (8002ec0 <ioAssign+0xc8>)
 8002e68:	23b9      	movs	r3, #185	@ 0xb9
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	2140      	movs	r1, #64	@ 0x40
 8002e6e:	52d1      	strh	r1, [r2, r3]

	//Temp Bank 5
	TempModule.ADC_Bank[4].SPI_Handle = &hspi1;
 8002e70:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <ioAssign+0xc8>)
 8002e72:	491d      	ldr	r1, [pc, #116]	@ (8002ee8 <ioAssign+0xf0>)
 8002e74:	4a14      	ldr	r2, [pc, #80]	@ (8002ec8 <ioAssign+0xd0>)
 8002e76:	505a      	str	r2, [r3, r1]
	TempModule.ADC_Bank[4].CS_Port = GPIOA;
 8002e78:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <ioAssign+0xc8>)
 8002e7a:	23ba      	movs	r3, #186	@ 0xba
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	21a0      	movs	r1, #160	@ 0xa0
 8002e80:	05c9      	lsls	r1, r1, #23
 8002e82:	50d1      	str	r1, [r2, r3]
	TempModule.ADC_Bank[4].CS_Pin = GPIO_PIN_10;
 8002e84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <ioAssign+0xc8>)
 8002e86:	4a19      	ldr	r2, [pc, #100]	@ (8002eec <ioAssign+0xf4>)
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	00c9      	lsls	r1, r1, #3
 8002e8c:	5299      	strh	r1, [r3, r2]
	TempModule.ADC_Bank[5].CS_Port = GPIOB;
	TempModule.ADC_Bank[5].CS_Pin = GPIO_PIN_6;
	*/

	//Outputs
	TempModule.dbgLedPort = GPIOA;
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <ioAssign+0xc8>)
 8002e90:	4917      	ldr	r1, [pc, #92]	@ (8002ef0 <ioAssign+0xf8>)
 8002e92:	22a0      	movs	r2, #160	@ 0xa0
 8002e94:	05d2      	lsls	r2, r2, #23
 8002e96:	505a      	str	r2, [r3, r1]
	TempModule.dbgLedPin = GPIO_PIN_5;
 8002e98:	4a09      	ldr	r2, [pc, #36]	@ (8002ec0 <ioAssign+0xc8>)
 8002e9a:	23b3      	movs	r3, #179	@ 0xb3
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	2120      	movs	r1, #32
 8002ea0:	52d1      	strh	r1, [r2, r3]
	HAL_GPIO_WritePin(TempModule.dbgLedPort, TempModule.dbgLedPin, GPIO_PIN_RESET); //LED on (default)
 8002ea2:	4b07      	ldr	r3, [pc, #28]	@ (8002ec0 <ioAssign+0xc8>)
 8002ea4:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <ioAssign+0xf8>)
 8002ea6:	5898      	ldr	r0, [r3, r2]
 8002ea8:	4a05      	ldr	r2, [pc, #20]	@ (8002ec0 <ioAssign+0xc8>)
 8002eaa:	23b3      	movs	r3, #179	@ 0xb3
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	5ad3      	ldrh	r3, [r2, r3]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	f001 ff38 	bl	8004d28 <HAL_GPIO_WritePin>
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	20000100 	.word	0x20000100
 8002ec4:	0000059c 	.word	0x0000059c
 8002ec8:	20000834 	.word	0x20000834
 8002ecc:	50000400 	.word	0x50000400
 8002ed0:	000005a4 	.word	0x000005a4
 8002ed4:	000005ac 	.word	0x000005ac
 8002ed8:	000005b4 	.word	0x000005b4
 8002edc:	000005bc 	.word	0x000005bc
 8002ee0:	000005c4 	.word	0x000005c4
 8002ee4:	50000800 	.word	0x50000800
 8002ee8:	000005cc 	.word	0x000005cc
 8002eec:	000005d4 	.word	0x000005d4
 8002ef0:	00000594 	.word	0x00000594

08002ef4 <initialiseADC>:

void initialiseADC()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8002efa:	2032      	movs	r0, #50	@ 0x32
 8002efc:	f001 f9c6 	bl	800428c <HAL_Delay>

	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e016      	b.n	8002f36 <initialiseADC+0x42>
	{
		initADS7028(&TempModule.ADC_Bank[i]);
 8002f08:	1dfb      	adds	r3, r7, #7
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	189b      	adds	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	22b3      	movs	r2, #179	@ 0xb3
 8002f16:	00d2      	lsls	r2, r2, #3
 8002f18:	189a      	adds	r2, r3, r2
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <initialiseADC+0x5c>)
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	3304      	adds	r3, #4
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 f8c7 	bl	80030b4 <initADS7028>
		HAL_Delay(50);
 8002f26:	2032      	movs	r0, #50	@ 0x32
 8002f28:	f001 f9b0 	bl	800428c <HAL_Delay>
	for(uint8_t i = 0; i < NUM_OF_TEMPBANKS; i++)
 8002f2c:	1dfb      	adds	r3, r7, #7
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	3201      	adds	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d9e4      	bls.n	8002f08 <initialiseADC+0x14>
	}

	HAL_Delay(1000);
 8002f3e:	23fa      	movs	r3, #250	@ 0xfa
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	0018      	movs	r0, r3
 8002f44:	f001 f9a2 	bl	800428c <HAL_Delay>
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000100 	.word	0x20000100

08002f54 <TickerAttach>:
#include "Ticker.h"

TickerInfo_t Ticker = {-1, 0, 0, NULL};

void TickerAttach(TickerInfo_t* Ticker, fpointer FunctionCallback, uint32_t interval)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
    if (Ticker->tickers == MAX_NUMBER_OF_TICKERS - 1) return; //Check if max number of tickers have been reached.
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b09      	cmp	r3, #9
 8002f66:	d018      	beq.n	8002f9a <TickerAttach+0x46>

    Ticker->tickers++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	701a      	strb	r2, [r3, #0]
    Ticker->intervals[Ticker->tickers] = interval;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	330a      	adds	r3, #10
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	18d3      	adds	r3, r2, r3
 8002f80:	3304      	adds	r3, #4
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	601a      	str	r2, [r3, #0]
    Ticker->callbackFunctions[Ticker->tickers] = FunctionCallback;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	18d3      	adds	r3, r2, r3
 8002f92:	3304      	adds	r3, #4
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e000      	b.n	8002f9c <TickerAttach+0x48>
    if (Ticker->tickers == MAX_NUMBER_OF_TICKERS - 1) return; //Check if max number of tickers have been reached.
 8002f9a:	46c0      	nop			@ (mov r8, r8)
}
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <TickerHandler>:

void TickerHandler(TickerInfo_t* Ticker)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < Ticker->tickers + 1; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	e02d      	b.n	800300c <TickerHandler+0x6a>
    {
        Ticker->counter[i]++;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	18d3      	adds	r3, r2, r3
 8002fb8:	3304      	adds	r3, #4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	18cb      	adds	r3, r1, r3
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	601a      	str	r2, [r3, #0]

        if (Ticker->counter[i]/ Ticker->intervals[i] >= 1)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	18d3      	adds	r3, r2, r3
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	330a      	adds	r3, #10
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	18cb      	adds	r3, r1, r3
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d30e      	bcc.n	8003006 <TickerHandler+0x64>
        {
            Ticker->counter[i] = 0;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	18d3      	adds	r3, r2, r3
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
            Ticker->callbackFunctions[i]();
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	18d3      	adds	r3, r2, r3
 8003000:	3304      	adds	r3, #4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4798      	blx	r3
    for (int i = 0; i < Ticker->tickers + 1; i++)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3301      	adds	r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	001a      	movs	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4293      	cmp	r3, r2
 8003016:	ddcb      	ble.n	8002fb0 <TickerHandler+0xe>
        }
    }
}
 8003018:	46c0      	nop			@ (mov r8, r8)
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}

08003022 <setCS>:

/* -------------------------------------------------------------------------- */
/*                 Other functions added in to help this works                */
/* -------------------------------------------------------------------------- */
void setCS(ADS7028_HandleTypeDef *ADC_handle, uint8_t state)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	000a      	movs	r2, r1
 800302c:	1cfb      	adds	r3, r7, #3
 800302e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ADC_handle->CS_Port, ADC_handle->CS_Pin, state);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6858      	ldr	r0, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	8919      	ldrh	r1, [r3, #8]
 8003038:	1cfb      	adds	r3, r7, #3
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	001a      	movs	r2, r3
 800303e:	f001 fe73 	bl	8004d28 <HAL_GPIO_WritePin>
};
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <spiSendReceiveArray>:

void spiSendReceiveArray(ADS7028_HandleTypeDef *ADC_handle, uint8_t *dataTx, uint8_t *dataRx, uint8_t numberOfBytes)
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b087      	sub	sp, #28
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	001a      	movs	r2, r3
 800305a:	1cfb      	adds	r3, r7, #3
 800305c:	701a      	strb	r2, [r3, #0]
    // Require that dataTx and dataRx are not NULL pointers
    assert(dataTx && dataRx);   
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <spiSendReceiveArray+0x1e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <spiSendReceiveArray+0x2a>
 800306a:	4b0f      	ldr	r3, [pc, #60]	@ (80030a8 <spiSendReceiveArray+0x5c>)
 800306c:	4a0f      	ldr	r2, [pc, #60]	@ (80030ac <spiSendReceiveArray+0x60>)
 800306e:	4810      	ldr	r0, [pc, #64]	@ (80030b0 <spiSendReceiveArray+0x64>)
 8003070:	2131      	movs	r1, #49	@ 0x31
 8003072:	f003 fe81 	bl	8006d78 <__assert_func>
    // Set the nCS pin LOW

    setCS(ADC_handle, 0);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2100      	movs	r1, #0
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff ffd1 	bl	8003022 <setCS>
    //HAL_Delay(1);

    HAL_SPI_TransmitReceive(ADC_handle->SPI_Handle, dataTx, dataRx, numberOfBytes, 100);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	1cfb      	adds	r3, r7, #3
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	2464      	movs	r4, #100	@ 0x64
 8003090:	9400      	str	r4, [sp, #0]
 8003092:	f002 fe9f 	bl	8005dd4 <HAL_SPI_TransmitReceive>

    //HAL_Delay(1);
    setCS(ADC_handle, 1);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2101      	movs	r1, #1
 800309a:	0018      	movs	r0, r3
 800309c:	f7ff ffc1 	bl	8003022 <setCS>
};
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b005      	add	sp, #20
 80030a6:	bd90      	pop	{r4, r7, pc}
 80030a8:	08008b50 	.word	0x08008b50
 80030ac:	08008c00 	.word	0x08008c00
 80030b0:	08008b64 	.word	0x08008b64

080030b4 <initADS7028>:
//!
//! \return None.
//
//*****************************************************************************
void initADS7028(ADS7028_HandleTypeDef *ADC_handle)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    // (OPTIONAL) Provide additional delay time for power supply settling
    HAL_Delay(50);
 80030bc:	2032      	movs	r0, #50	@ 0x32
 80030be:	f001 f8e5 	bl	800428c <HAL_Delay>

    // Reset device
    resetDevice(ADC_handle);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 f80a 	bl	80030de <resetDevice>

    // Clear BOR flag
    setRegisterBits(ADC_handle, SYSTEM_STATUS_ADDRESS, SYSTEM_STATUS_BOR_MASK);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	2100      	movs	r1, #0
 80030d0:	0018      	movs	r0, r3
 80030d2:	f000 f981 	bl	80033d8 <setRegisterBits>

    // (RECOMMENDED) If you plan to modify the CRC_EN or CPOL_CPHA bits,
    // do so here (and only here) to be simplify the code implementation.
    // (OPTIONAL) Read back registers and check STATUS register for faults

}
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}

080030de <resetDevice>:
//!
//! \return None
//
//*****************************************************************************
void resetDevice(ADS7028_HandleTypeDef *ADC_handle)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
    // Set the RST bit high to reset the device
    setRegisterBits(ADC_handle, GENERAL_CFG_ADDRESS, GENERAL_CFG_RST_MASK);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	2101      	movs	r1, #1
 80030ec:	0018      	movs	r0, r3
 80030ee:	f000 f973 	bl	80033d8 <setRegisterBits>

    // Update internal register map array
    restoreRegisterDefaults();
 80030f2:	f000 fa49 	bl	8003588 <restoreRegisterDefaults>
}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b002      	add	sp, #8
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <readSingleRegister>:
//!
//! \return Returns the 8-bit register read result.
//
//*****************************************************************************
uint8_t readSingleRegister(ADS7028_HandleTypeDef *ADC_handle, uint8_t address)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	000a      	movs	r2, r1
 800310a:	1cfb      	adds	r3, r7, #3
 800310c:	701a      	strb	r2, [r3, #0]
    // Check that the register address is in range
    assert(address <= MAX_REGISTER_ADDRESS);
 800310e:	1cfb      	adds	r3, r7, #3
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2beb      	cmp	r3, #235	@ 0xeb
 8003114:	d905      	bls.n	8003122 <readSingleRegister+0x22>
 8003116:	4b4f      	ldr	r3, [pc, #316]	@ (8003254 <readSingleRegister+0x154>)
 8003118:	4a4f      	ldr	r2, [pc, #316]	@ (8003258 <readSingleRegister+0x158>)
 800311a:	4850      	ldr	r0, [pc, #320]	@ (800325c <readSingleRegister+0x15c>)
 800311c:	21e2      	movs	r1, #226	@ 0xe2
 800311e:	f003 fe2b 	bl	8006d78 <__assert_func>

    uint8_t dataTx[4] = {0};
 8003122:	2310      	movs	r3, #16
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
    uint8_t dataRx[4] = {0};
 800312a:	230c      	movs	r3, #12
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
    uint8_t numberOfBytes = SPI_CRC_ENABLED ? 4 : 3;
 8003132:	2001      	movs	r0, #1
 8003134:	f000 f896 	bl	8003264 <getRegisterValue>
 8003138:	0003      	movs	r3, r0
 800313a:	001a      	movs	r2, r3
 800313c:	2340      	movs	r3, #64	@ 0x40
 800313e:	4013      	ands	r3, r2
 8003140:	d001      	beq.n	8003146 <readSingleRegister+0x46>
 8003142:	2204      	movs	r2, #4
 8003144:	e000      	b.n	8003148 <readSingleRegister+0x48>
 8003146:	2203      	movs	r2, #3
 8003148:	2516      	movs	r5, #22
 800314a:	197b      	adds	r3, r7, r5
 800314c:	701a      	strb	r2, [r3, #0]
    bool crcError = false;
 800314e:	2317      	movs	r3, #23
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]

    //
    // [FRAME 1] RREG command
    //
    dataTx[0] = OPCODE_RREG;
 8003156:	2410      	movs	r4, #16
 8003158:	193b      	adds	r3, r7, r4
 800315a:	2210      	movs	r2, #16
 800315c:	701a      	strb	r2, [r3, #0]
    dataTx[1] = address;
 800315e:	193b      	adds	r3, r7, r4
 8003160:	1cfa      	adds	r2, r7, #3
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	705a      	strb	r2, [r3, #1]
    dataTx[2] = OPCODE_NULL;
 8003166:	193b      	adds	r3, r7, r4
 8003168:	2200      	movs	r2, #0
 800316a:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 800316c:	2001      	movs	r0, #1
 800316e:	f000 f879 	bl	8003264 <getRegisterValue>
 8003172:	0003      	movs	r3, r0
 8003174:	001a      	movs	r2, r3
 8003176:	2340      	movs	r3, #64	@ 0x40
 8003178:	4013      	ands	r3, r2
 800317a:	d00c      	beq.n	8003196 <readSingleRegister+0x96>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 800317c:	197b      	adds	r3, r7, r5
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	3b01      	subs	r3, #1
 8003182:	b2d9      	uxtb	r1, r3
 8003184:	193b      	adds	r3, r7, r4
 8003186:	2200      	movs	r2, #0
 8003188:	0018      	movs	r0, r3
 800318a:	f000 f995 	bl	80034b8 <calculateCRC>
 800318e:	0003      	movs	r3, r0
 8003190:	001a      	movs	r2, r3
 8003192:	193b      	adds	r3, r7, r4
 8003194:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 8003196:	2516      	movs	r5, #22
 8003198:	197b      	adds	r3, r7, r5
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	220c      	movs	r2, #12
 800319e:	18ba      	adds	r2, r7, r2
 80031a0:	2410      	movs	r4, #16
 80031a2:	1939      	adds	r1, r7, r4
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff51 	bl	800304c <spiSendReceiveArray>

    //
    // [FRAME 2] NULL command
    //
    dataTx[0] = OPCODE_NULL;
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
    dataTx[1] = OPCODE_NULL;
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	2200      	movs	r2, #0
 80031b4:	705a      	strb	r2, [r3, #1]
    dataTx[2] = OPCODE_NULL;
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	2200      	movs	r2, #0
 80031ba:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 80031bc:	2001      	movs	r0, #1
 80031be:	f000 f851 	bl	8003264 <getRegisterValue>
 80031c2:	0003      	movs	r3, r0
 80031c4:	001a      	movs	r2, r3
 80031c6:	2340      	movs	r3, #64	@ 0x40
 80031c8:	4013      	ands	r3, r2
 80031ca:	d00c      	beq.n	80031e6 <readSingleRegister+0xe6>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 80031cc:	197b      	adds	r3, r7, r5
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b2d9      	uxtb	r1, r3
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	2200      	movs	r2, #0
 80031d8:	0018      	movs	r0, r3
 80031da:	f000 f96d 	bl	80034b8 <calculateCRC>
 80031de:	0003      	movs	r3, r0
 80031e0:	001a      	movs	r2, r3
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 80031e6:	2316      	movs	r3, #22
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	240c      	movs	r4, #12
 80031ee:	193a      	adds	r2, r7, r4
 80031f0:	2110      	movs	r1, #16
 80031f2:	1879      	adds	r1, r7, r1
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff29 	bl	800304c <spiSendReceiveArray>

    // Check for CRC error
    if (SPI_CRC_ENABLED)
 80031fa:	2001      	movs	r0, #1
 80031fc:	f000 f832 	bl	8003264 <getRegisterValue>
 8003200:	0003      	movs	r3, r0
 8003202:	001a      	movs	r2, r3
 8003204:	2340      	movs	r3, #64	@ 0x40
 8003206:	4013      	ands	r3, r2
 8003208:	d00c      	beq.n	8003224 <readSingleRegister+0x124>
    {
        // To check the CRC validity you can test either of the following conditions:
        // 1) "dataRx[1] == calculateCRC(dataRx, 1, CRC_INITIAL_SEED)" - true means no CRC error occurred.
        // 2) "0x00 == calculateCRC(dataRx, 2, CRC_INITIAL_SEED) - including the CRC byte in the calculation should return 0x00.
        crcError = (bool) calculateCRC(dataRx, 2, CRC_INITIAL_SEED);
 800320a:	193b      	adds	r3, r7, r4
 800320c:	2200      	movs	r2, #0
 800320e:	2102      	movs	r1, #2
 8003210:	0018      	movs	r0, r3
 8003212:	f000 f951 	bl	80034b8 <calculateCRC>
 8003216:	0003      	movs	r3, r0
 8003218:	001a      	movs	r2, r3
 800321a:	2317      	movs	r3, #23
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	1e51      	subs	r1, r2, #1
 8003220:	418a      	sbcs	r2, r1
 8003222:	701a      	strb	r2, [r3, #0]
    }
    if (crcError)
 8003224:	2317      	movs	r3, #23
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <readSingleRegister+0x136>
    {
        // Update internal register array
        registerMap[SYSTEM_STATUS_ADDRESS] = registerMap[SYSTEM_STATUS_ADDRESS] || SYSTEM_STATUS_CRCERR_IN_MASK;
 800322e:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <readSingleRegister+0x160>)
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e006      	b.n	8003244 <readSingleRegister+0x144>

        // (OPTIONAL) Consider notifying the system of the error and repeating the previous command.
    }
    else
    {
        registerMap[address] = dataRx[0];
 8003236:	1cfb      	adds	r3, r7, #3
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	220c      	movs	r2, #12
 800323c:	18ba      	adds	r2, r7, r2
 800323e:	7811      	ldrb	r1, [r2, #0]
 8003240:	4a07      	ldr	r2, [pc, #28]	@ (8003260 <readSingleRegister+0x160>)
 8003242:	54d1      	strb	r1, [r2, r3]
    }

    return registerMap[address];
 8003244:	1cfb      	adds	r3, r7, #3
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <readSingleRegister+0x160>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b006      	add	sp, #24
 8003252:	bdb0      	pop	{r4, r5, r7, pc}
 8003254:	08008b7c 	.word	0x08008b7c
 8003258:	08008c14 	.word	0x08008c14
 800325c:	08008b64 	.word	0x08008b64
 8003260:	200006e4 	.word	0x200006e4

08003264 <getRegisterValue>:
//!
//! \return unsigned 8-bit register value.
//
//*****************************************************************************
uint8_t getRegisterValue(uint8_t address)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	0002      	movs	r2, r0
 800326c:	1dfb      	adds	r3, r7, #7
 800326e:	701a      	strb	r2, [r3, #0]
    assert(address <= MAX_REGISTER_ADDRESS);
 8003270:	1dfb      	adds	r3, r7, #7
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2beb      	cmp	r3, #235	@ 0xeb
 8003276:	d906      	bls.n	8003286 <getRegisterValue+0x22>
 8003278:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <getRegisterValue+0x34>)
 800327a:	4a08      	ldr	r2, [pc, #32]	@ (800329c <getRegisterValue+0x38>)
 800327c:	212c      	movs	r1, #44	@ 0x2c
 800327e:	31ff      	adds	r1, #255	@ 0xff
 8003280:	4807      	ldr	r0, [pc, #28]	@ (80032a0 <getRegisterValue+0x3c>)
 8003282:	f003 fd79 	bl	8006d78 <__assert_func>
    return registerMap[address];
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	4a06      	ldr	r2, [pc, #24]	@ (80032a4 <getRegisterValue+0x40>)
 800328c:	5cd3      	ldrb	r3, [r2, r3]
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b002      	add	sp, #8
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	08008b7c 	.word	0x08008b7c
 800329c:	08008c28 	.word	0x08008c28
 80032a0:	08008b64 	.word	0x08008b64
 80032a4:	200006e4 	.word	0x200006e4

080032a8 <writeSingleRegister>:
//!
//! \return None.
//
//*****************************************************************************
void writeSingleRegister(ADS7028_HandleTypeDef *ADC_handle, uint8_t address, uint8_t data)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	0008      	movs	r0, r1
 80032b2:	0011      	movs	r1, r2
 80032b4:	1cfb      	adds	r3, r7, #3
 80032b6:	1c02      	adds	r2, r0, #0
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	1cbb      	adds	r3, r7, #2
 80032bc:	1c0a      	adds	r2, r1, #0
 80032be:	701a      	strb	r2, [r3, #0]
    // Check that the register address is in range
    assert(address <= MAX_REGISTER_ADDRESS);
 80032c0:	1cfb      	adds	r3, r7, #3
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2beb      	cmp	r3, #235	@ 0xeb
 80032c6:	d906      	bls.n	80032d6 <writeSingleRegister+0x2e>
 80032c8:	4b3f      	ldr	r3, [pc, #252]	@ (80033c8 <writeSingleRegister+0x120>)
 80032ca:	4a40      	ldr	r2, [pc, #256]	@ (80033cc <writeSingleRegister+0x124>)
 80032cc:	2140      	movs	r1, #64	@ 0x40
 80032ce:	31ff      	adds	r1, #255	@ 0xff
 80032d0:	483f      	ldr	r0, [pc, #252]	@ (80033d0 <writeSingleRegister+0x128>)
 80032d2:	f003 fd51 	bl	8006d78 <__assert_func>

    uint8_t dataTx[4] = { 0 };
 80032d6:	2310      	movs	r3, #16
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    uint8_t dataRx[4] = { 0 };
 80032de:	230c      	movs	r3, #12
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
    uint8_t numberOfBytes = SPI_CRC_ENABLED ? 4 : 3;
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7ff ffbc 	bl	8003264 <getRegisterValue>
 80032ec:	0003      	movs	r3, r0
 80032ee:	001a      	movs	r2, r3
 80032f0:	2340      	movs	r3, #64	@ 0x40
 80032f2:	4013      	ands	r3, r2
 80032f4:	d001      	beq.n	80032fa <writeSingleRegister+0x52>
 80032f6:	2204      	movs	r2, #4
 80032f8:	e000      	b.n	80032fc <writeSingleRegister+0x54>
 80032fa:	2203      	movs	r2, #3
 80032fc:	2317      	movs	r3, #23
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	701a      	strb	r2, [r3, #0]

    // (OPTIONAL) Check for and clear CRC error to proceed with register write.
    // Once a CRC error has occurred, writes are only allowed to the SYSTEM_STATUS and GENERAL_CFG registers
    if (SPI_CRC_ENABLED && (address > GENERAL_CFG_ADDRESS))
 8003302:	2001      	movs	r0, #1
 8003304:	f7ff ffae 	bl	8003264 <getRegisterValue>
 8003308:	0003      	movs	r3, r0
 800330a:	001a      	movs	r2, r3
 800330c:	2340      	movs	r3, #64	@ 0x40
 800330e:	4013      	ands	r3, r2
 8003310:	d016      	beq.n	8003340 <writeSingleRegister+0x98>
 8003312:	1cfb      	adds	r3, r7, #3
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d912      	bls.n	8003340 <writeSingleRegister+0x98>
    {
        // Read STATUS register to check whether CRC error has occurred or not.
        readSingleRegister(ADC_handle, SYSTEM_STATUS_ADDRESS);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2100      	movs	r1, #0
 800331e:	0018      	movs	r0, r3
 8003320:	f7ff feee 	bl	8003100 <readSingleRegister>
        if (SPI_CRCERR_IN)
 8003324:	2000      	movs	r0, #0
 8003326:	f7ff ff9d 	bl	8003264 <getRegisterValue>
 800332a:	0003      	movs	r3, r0
 800332c:	001a      	movs	r2, r3
 800332e:	2302      	movs	r3, #2
 8003330:	4013      	ands	r3, r2
 8003332:	d005      	beq.n	8003340 <writeSingleRegister+0x98>
        {
            // (OPTIONAL) Clear the CRC error by writing 1b to CRCERR_IN bit
            setRegisterBits(ADC_handle, SYSTEM_STATUS_ADDRESS, SYSTEM_STATUS_CRCERR_IN_MASK);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	2100      	movs	r1, #0
 800333a:	0018      	movs	r0, r3
 800333c:	f000 f84c 	bl	80033d8 <setRegisterBits>
            // (OPTIONAL) Consider notifying the system of the error and repeating the previous command.
        }
    }

    // WREG command
    dataTx[0] = OPCODE_WREG;
 8003340:	2410      	movs	r4, #16
 8003342:	193b      	adds	r3, r7, r4
 8003344:	2208      	movs	r2, #8
 8003346:	701a      	strb	r2, [r3, #0]
    dataTx[1] = address;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	1cfa      	adds	r2, r7, #3
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	705a      	strb	r2, [r3, #1]
    dataTx[2] = data;
 8003350:	193b      	adds	r3, r7, r4
 8003352:	1cba      	adds	r2, r7, #2
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 8003358:	2001      	movs	r0, #1
 800335a:	f7ff ff83 	bl	8003264 <getRegisterValue>
 800335e:	0003      	movs	r3, r0
 8003360:	001a      	movs	r2, r3
 8003362:	2340      	movs	r3, #64	@ 0x40
 8003364:	4013      	ands	r3, r2
 8003366:	d00d      	beq.n	8003384 <writeSingleRegister+0xdc>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 8003368:	2317      	movs	r3, #23
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	3b01      	subs	r3, #1
 8003370:	b2d9      	uxtb	r1, r3
 8003372:	193b      	adds	r3, r7, r4
 8003374:	2200      	movs	r2, #0
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f89e 	bl	80034b8 <calculateCRC>
 800337c:	0003      	movs	r3, r0
 800337e:	001a      	movs	r2, r3
 8003380:	193b      	adds	r3, r7, r4
 8003382:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 8003384:	2317      	movs	r3, #23
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	220c      	movs	r2, #12
 800338c:	18ba      	adds	r2, r7, r2
 800338e:	2110      	movs	r1, #16
 8003390:	1879      	adds	r1, r7, r1
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff fe5a 	bl	800304c <spiSendReceiveArray>

    // Update internal register map array (assume command was successful).
    // NOTE: This is required for writing to the CRC_EN bit to ensure read back uses the correct mode.
    registerMap[address] = data;
 8003398:	1cfb      	adds	r3, r7, #3
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4a0d      	ldr	r2, [pc, #52]	@ (80033d4 <writeSingleRegister+0x12c>)
 800339e:	1cb9      	adds	r1, r7, #2
 80033a0:	7809      	ldrb	r1, [r1, #0]
 80033a2:	54d1      	strb	r1, [r2, r3]

    // NOTE: If you modify the CPOL_CPHA bits in the DATA_CFG register, the SPI perhiperal will need to be reconfigured here.

    // (RECOMMENDED) Read back register to confirm register write was successful
    registerMap[address] = readSingleRegister(ADC_handle, address);
 80033a4:	1cfb      	adds	r3, r7, #3
 80033a6:	781c      	ldrb	r4, [r3, #0]
 80033a8:	1cfb      	adds	r3, r7, #3
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0011      	movs	r1, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff fea5 	bl	8003100 <readSingleRegister>
 80033b6:	0003      	movs	r3, r0
 80033b8:	001a      	movs	r2, r3
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <writeSingleRegister+0x12c>)
 80033bc:	551a      	strb	r2, [r3, r4]
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b007      	add	sp, #28
 80033c4:	bd90      	pop	{r4, r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	08008b7c 	.word	0x08008b7c
 80033cc:	08008c3c 	.word	0x08008c3c
 80033d0:	08008b64 	.word	0x08008b64
 80033d4:	200006e4 	.word	0x200006e4

080033d8 <setRegisterBits>:
//!
//! \return None.
//
//*****************************************************************************
void setRegisterBits(ADS7028_HandleTypeDef *ADC_handle, uint8_t address, uint8_t bitMask)
{
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	0008      	movs	r0, r1
 80033e2:	0011      	movs	r1, r2
 80033e4:	1cfb      	adds	r3, r7, #3
 80033e6:	1c02      	adds	r2, r0, #0
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	1cbb      	adds	r3, r7, #2
 80033ec:	1c0a      	adds	r2, r1, #0
 80033ee:	701a      	strb	r2, [r3, #0]
    // Check that the register address is in range
    assert(address <= MAX_REGISTER_ADDRESS);
 80033f0:	1cfb      	adds	r3, r7, #3
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2beb      	cmp	r3, #235	@ 0xeb
 80033f6:	d906      	bls.n	8003406 <setRegisterBits+0x2e>
 80033f8:	4b2b      	ldr	r3, [pc, #172]	@ (80034a8 <setRegisterBits+0xd0>)
 80033fa:	4a2c      	ldr	r2, [pc, #176]	@ (80034ac <setRegisterBits+0xd4>)
 80033fc:	21bc      	movs	r1, #188	@ 0xbc
 80033fe:	0049      	lsls	r1, r1, #1
 8003400:	482b      	ldr	r0, [pc, #172]	@ (80034b0 <setRegisterBits+0xd8>)
 8003402:	f003 fcb9 	bl	8006d78 <__assert_func>

    uint8_t dataTx[4] = {0};
 8003406:	2310      	movs	r3, #16
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
    uint8_t dataRx[4] = {0};
 800340e:	230c      	movs	r3, #12
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
    uint8_t numberOfBytes = SPI_CRC_ENABLED ? 4 : 3;
 8003416:	2001      	movs	r0, #1
 8003418:	f7ff ff24 	bl	8003264 <getRegisterValue>
 800341c:	0003      	movs	r3, r0
 800341e:	001a      	movs	r2, r3
 8003420:	2340      	movs	r3, #64	@ 0x40
 8003422:	4013      	ands	r3, r2
 8003424:	d001      	beq.n	800342a <setRegisterBits+0x52>
 8003426:	2204      	movs	r2, #4
 8003428:	e000      	b.n	800342c <setRegisterBits+0x54>
 800342a:	2203      	movs	r2, #3
 800342c:	2517      	movs	r5, #23
 800342e:	197b      	adds	r3, r7, r5
 8003430:	701a      	strb	r2, [r3, #0]

    // SETBIT command
    dataTx[0] = OPCODE_SETBIT;
 8003432:	2410      	movs	r4, #16
 8003434:	193b      	adds	r3, r7, r4
 8003436:	2218      	movs	r2, #24
 8003438:	701a      	strb	r2, [r3, #0]
    dataTx[1] = address;
 800343a:	193b      	adds	r3, r7, r4
 800343c:	1cfa      	adds	r2, r7, #3
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	705a      	strb	r2, [r3, #1]
    dataTx[2] = bitMask;
 8003442:	193b      	adds	r3, r7, r4
 8003444:	1cba      	adds	r2, r7, #2
 8003446:	7812      	ldrb	r2, [r2, #0]
 8003448:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 800344a:	2001      	movs	r0, #1
 800344c:	f7ff ff0a 	bl	8003264 <getRegisterValue>
 8003450:	0003      	movs	r3, r0
 8003452:	001a      	movs	r2, r3
 8003454:	2340      	movs	r3, #64	@ 0x40
 8003456:	4013      	ands	r3, r2
 8003458:	d00c      	beq.n	8003474 <setRegisterBits+0x9c>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 800345a:	197b      	adds	r3, r7, r5
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	3b01      	subs	r3, #1
 8003460:	b2d9      	uxtb	r1, r3
 8003462:	193b      	adds	r3, r7, r4
 8003464:	2200      	movs	r2, #0
 8003466:	0018      	movs	r0, r3
 8003468:	f000 f826 	bl	80034b8 <calculateCRC>
 800346c:	0003      	movs	r3, r0
 800346e:	001a      	movs	r2, r3
 8003470:	193b      	adds	r3, r7, r4
 8003472:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 8003474:	2317      	movs	r3, #23
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	220c      	movs	r2, #12
 800347c:	18ba      	adds	r2, r7, r2
 800347e:	2110      	movs	r1, #16
 8003480:	1879      	adds	r1, r7, r1
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fde2 	bl	800304c <spiSendReceiveArray>

    // Update internal register map array (assume command was successful).
    // NOTE: This is required for writing to the CRC_EN bit to ensure read back uses the correct mode.
    registerMap[address] = registerMap[address] | bitMask;
 8003488:	1cfb      	adds	r3, r7, #3
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4a09      	ldr	r2, [pc, #36]	@ (80034b4 <setRegisterBits+0xdc>)
 800348e:	5cd1      	ldrb	r1, [r2, r3]
 8003490:	1cfb      	adds	r3, r7, #3
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	1cba      	adds	r2, r7, #2
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	b2d1      	uxtb	r1, r2
 800349c:	4a05      	ldr	r2, [pc, #20]	@ (80034b4 <setRegisterBits+0xdc>)
 800349e:	54d1      	strb	r1, [r2, r3]

    // (OPTIONAL) Check if a CRC error occurred
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b006      	add	sp, #24
 80034a6:	bdb0      	pop	{r4, r5, r7, pc}
 80034a8:	08008b7c 	.word	0x08008b7c
 80034ac:	08008c50 	.word	0x08008c50
 80034b0:	08008b64 	.word	0x08008b64
 80034b4:	200006e4 	.word	0x200006e4

080034b8 <calculateCRC>:
//!
//! \return 8-bit calculated CRC word
//
//*****************************************************************************
uint8_t calculateCRC(const uint8_t dataBytes[], uint8_t numberBytes, uint8_t initialValue)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	0008      	movs	r0, r1
 80034c2:	0011      	movs	r1, r2
 80034c4:	1cfb      	adds	r3, r7, #3
 80034c6:	1c02      	adds	r2, r0, #0
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	1cbb      	adds	r3, r7, #2
 80034cc:	1c0a      	adds	r2, r1, #0
 80034ce:	701a      	strb	r2, [r3, #0]
    // Check that "dataBytes" is not a null pointer
    assert(dataBytes != 0x00);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <calculateCRC+0x2c>
 80034d6:	4b29      	ldr	r3, [pc, #164]	@ (800357c <calculateCRC+0xc4>)
 80034d8:	4a29      	ldr	r2, [pc, #164]	@ (8003580 <calculateCRC+0xc8>)
 80034da:	21e5      	movs	r1, #229	@ 0xe5
 80034dc:	0049      	lsls	r1, r1, #1
 80034de:	4829      	ldr	r0, [pc, #164]	@ (8003584 <calculateCRC+0xcc>)
 80034e0:	f003 fc4a 	bl	8006d78 <__assert_func>
    bool        dataMSb;                        /* Most significant bit of data byte */
    bool        crcMSb;                         /* Most significant bit of crc byte  */

    // Initial value of crc register
    // Use 0x00 when starting a new computation OR provide result of previous CRC calculation when continuing an on-going calculation.
    uint8_t crc = initialValue;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	1cba      	adds	r2, r7, #2
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	701a      	strb	r2, [r3, #0]

    // CRC polynomial = x^8 + x^2 + x^1 + 1
    const uint8_t poly = 0x07;
 80034ee:	230e      	movs	r3, #14
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2207      	movs	r2, #7
 80034f4:	701a      	strb	r2, [r3, #0]

    /* CRC algorithm */

    // Loop through all bytes in the dataBytes[] array
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	e033      	b.n	8003564 <calculateCRC+0xac>
    {
        // Point to MSb in byte
        bitIndex = 0x80u;
 80034fc:	2380      	movs	r3, #128	@ 0x80
 80034fe:	617b      	str	r3, [r7, #20]

        // Loop through all bits in the current byte
        while (bitIndex > 0)
 8003500:	e02a      	b.n	8003558 <calculateCRC+0xa0>
        {
            // Check MSB's of data and crc
            dataMSb = (bool) (dataBytes[byteIndex] & bitIndex);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	18d3      	adds	r3, r2, r3
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	001a      	movs	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	401a      	ands	r2, r3
 8003510:	200d      	movs	r0, #13
 8003512:	183b      	adds	r3, r7, r0
 8003514:	1e51      	subs	r1, r2, #1
 8003516:	418a      	sbcs	r2, r1
 8003518:	701a      	strb	r2, [r3, #0]
            crcMSb  = (bool) (crc & 0x80u);
 800351a:	210f      	movs	r1, #15
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2200      	movs	r2, #0
 8003520:	569a      	ldrsb	r2, [r3, r2]
 8003522:	240c      	movs	r4, #12
 8003524:	193b      	adds	r3, r7, r4
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	09d2      	lsrs	r2, r2, #7
 800352a:	701a      	strb	r2, [r3, #0]

            // Update crc register
            crc <<= 1;
 800352c:	187a      	adds	r2, r7, r1
 800352e:	187b      	adds	r3, r7, r1
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	18db      	adds	r3, r3, r3
 8003534:	7013      	strb	r3, [r2, #0]
            if (dataMSb ^ crcMSb) { crc ^= poly; }
 8003536:	183a      	adds	r2, r7, r0
 8003538:	193b      	adds	r3, r7, r4
 800353a:	7812      	ldrb	r2, [r2, #0]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d007      	beq.n	8003552 <calculateCRC+0x9a>
 8003542:	187b      	adds	r3, r7, r1
 8003544:	1879      	adds	r1, r7, r1
 8003546:	220e      	movs	r2, #14
 8003548:	18ba      	adds	r2, r7, r2
 800354a:	7809      	ldrb	r1, [r1, #0]
 800354c:	7812      	ldrb	r2, [r2, #0]
 800354e:	404a      	eors	r2, r1
 8003550:	701a      	strb	r2, [r3, #0]

            // Shift MSb pointer to the next data bit
            bitIndex >>= 1;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	105b      	asrs	r3, r3, #1
 8003556:	617b      	str	r3, [r7, #20]
        while (bitIndex > 0)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	dcd1      	bgt.n	8003502 <calculateCRC+0x4a>
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	3301      	adds	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	1cfb      	adds	r3, r7, #3
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	429a      	cmp	r2, r3
 800356c:	dbc6      	blt.n	80034fc <calculateCRC+0x44>
        }
    }

    return crc;
 800356e:	230f      	movs	r3, #15
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	781b      	ldrb	r3, [r3, #0]
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b007      	add	sp, #28
 800357a:	bd90      	pop	{r4, r7, pc}
 800357c:	08008b9c 	.word	0x08008b9c
 8003580:	08008c60 	.word	0x08008c60
 8003584:	08008b64 	.word	0x08008b64

08003588 <restoreRegisterDefaults>:
//!
//! \return None.
//
//*****************************************************************************
static void restoreRegisterDefaults(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
    registerMap[SYSTEM_STATUS_ADDRESS]          = SYSTEM_STATUS_DEFAULT;
 800358c:	4bd3      	ldr	r3, [pc, #844]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800358e:	2281      	movs	r2, #129	@ 0x81
 8003590:	701a      	strb	r2, [r3, #0]
    registerMap[GENERAL_CFG_ADDRESS]            = GENERAL_CFG_DEFAULT;
 8003592:	4bd2      	ldr	r3, [pc, #840]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003594:	2200      	movs	r2, #0
 8003596:	705a      	strb	r2, [r3, #1]

    registerMap[DATA_CFG_ADDRESS]               = DATA_CFG_DEFAULT;
 8003598:	4bd0      	ldr	r3, [pc, #832]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800359a:	2200      	movs	r2, #0
 800359c:	709a      	strb	r2, [r3, #2]
    registerMap[OSR_CFG_ADDRESS]                = OSR_CFG_DEFAULT;
 800359e:	4bcf      	ldr	r3, [pc, #828]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	70da      	strb	r2, [r3, #3]
    registerMap[OPMODE_CFG_ADDRESS]             = OPMODE_CFG_DEFAULT;
 80035a4:	4bcd      	ldr	r3, [pc, #820]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	711a      	strb	r2, [r3, #4]
    registerMap[PIN_CFG_ADDRESS]                = PIN_CFG_DEFAULT;
 80035aa:	4bcc      	ldr	r3, [pc, #816]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	715a      	strb	r2, [r3, #5]

    registerMap[GPIO_CFG_ADDRESS]               = GPIO_CFG_DEFAULT;
 80035b0:	4bca      	ldr	r3, [pc, #808]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	71da      	strb	r2, [r3, #7]
    registerMap[GPO_DRIVE_CFG_ADDRESS]          = GPO_DRIVE_CFG_DEFAULT;
 80035b6:	4bc9      	ldr	r3, [pc, #804]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	725a      	strb	r2, [r3, #9]
    registerMap[GPO_OUTPUT_VALUE_ADDRESS]       = GPO_OUTPUT_VALUE_DEFAULT;
 80035bc:	4bc7      	ldr	r3, [pc, #796]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035be:	2200      	movs	r2, #0
 80035c0:	72da      	strb	r2, [r3, #11]
    registerMap[GPI_VALUE_ADDRESS]              = GPI_VALUE_DEFAULT;
 80035c2:	4bc6      	ldr	r3, [pc, #792]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	735a      	strb	r2, [r3, #13]

    registerMap[SEQUENCE_CFG_ADDRESS]           = SEQUENCE_CFG_DEFAULT;
 80035c8:	4bc4      	ldr	r3, [pc, #784]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	741a      	strb	r2, [r3, #16]
    registerMap[CHANNEL_SEL_ADDRESS]            = CHANNEL_SEL_DEFAULT;
 80035ce:	4bc3      	ldr	r3, [pc, #780]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	745a      	strb	r2, [r3, #17]
    registerMap[AUTO_SEQ_CHSEL_ADDRESS]         = AUTO_SEQ_CHSEL_DEFAULT;
 80035d4:	4bc1      	ldr	r3, [pc, #772]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	749a      	strb	r2, [r3, #18]

    registerMap[ALERT_CH_SEL_ADDRESS]           = ALERT_CH_SEL_DEFAULT;
 80035da:	4bc0      	ldr	r3, [pc, #768]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035dc:	2200      	movs	r2, #0
 80035de:	751a      	strb	r2, [r3, #20]
    registerMap[ALERT_MAP_ADDRESS]              = ALERT_MAP_DEFAULT;
 80035e0:	4bbe      	ldr	r3, [pc, #760]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	759a      	strb	r2, [r3, #22]
    registerMap[ALERT_PIN_CFG_ADDRESS]          = ALERT_PIN_CFG_DEFAULT;
 80035e6:	4bbd      	ldr	r3, [pc, #756]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	75da      	strb	r2, [r3, #23]

    registerMap[EVENT_FLAG_ADDRESS]             = EVENT_FLAG_DEFAULT;
 80035ec:	4bbb      	ldr	r3, [pc, #748]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	761a      	strb	r2, [r3, #24]
    registerMap[EVENT_HIGH_FLAG_ADDRESS]        = EVENT_HIGH_FLAG_DEFAULT;
 80035f2:	4bba      	ldr	r3, [pc, #744]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	769a      	strb	r2, [r3, #26]
    registerMap[EVENT_LOW_FLAG_ADDRESS]         = EVENT_LOW_FLAG_DEFAULT;
 80035f8:	4bb8      	ldr	r3, [pc, #736]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	771a      	strb	r2, [r3, #28]
    registerMap[EVENT_RGN_ADDRESS]              = EVENT_RGN_DEFAULT;
 80035fe:	4bb7      	ldr	r3, [pc, #732]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003600:	2200      	movs	r2, #0
 8003602:	779a      	strb	r2, [r3, #30]

    registerMap[HYSTERESIS_CH0_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8003604:	4bb5      	ldr	r3, [pc, #724]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003606:	2220      	movs	r2, #32
 8003608:	21f0      	movs	r1, #240	@ 0xf0
 800360a:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH1_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 800360c:	4bb3      	ldr	r3, [pc, #716]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800360e:	2224      	movs	r2, #36	@ 0x24
 8003610:	21f0      	movs	r1, #240	@ 0xf0
 8003612:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH2_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8003614:	4bb1      	ldr	r3, [pc, #708]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003616:	2228      	movs	r2, #40	@ 0x28
 8003618:	21f0      	movs	r1, #240	@ 0xf0
 800361a:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH3_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 800361c:	4baf      	ldr	r3, [pc, #700]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800361e:	222c      	movs	r2, #44	@ 0x2c
 8003620:	21f0      	movs	r1, #240	@ 0xf0
 8003622:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH4_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8003624:	4bad      	ldr	r3, [pc, #692]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003626:	2230      	movs	r2, #48	@ 0x30
 8003628:	21f0      	movs	r1, #240	@ 0xf0
 800362a:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH5_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 800362c:	4bab      	ldr	r3, [pc, #684]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800362e:	2234      	movs	r2, #52	@ 0x34
 8003630:	21f0      	movs	r1, #240	@ 0xf0
 8003632:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH6_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8003634:	4ba9      	ldr	r3, [pc, #676]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003636:	2238      	movs	r2, #56	@ 0x38
 8003638:	21f0      	movs	r1, #240	@ 0xf0
 800363a:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH7_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 800363c:	4ba7      	ldr	r3, [pc, #668]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800363e:	223c      	movs	r2, #60	@ 0x3c
 8003640:	21f0      	movs	r1, #240	@ 0xf0
 8003642:	5499      	strb	r1, [r3, r2]

    registerMap[EVENT_COUNT_CH0_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8003644:	4ba5      	ldr	r3, [pc, #660]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003646:	2222      	movs	r2, #34	@ 0x22
 8003648:	2100      	movs	r1, #0
 800364a:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH1_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 800364c:	4ba3      	ldr	r3, [pc, #652]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800364e:	2226      	movs	r2, #38	@ 0x26
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH2_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8003654:	4ba1      	ldr	r3, [pc, #644]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003656:	222a      	movs	r2, #42	@ 0x2a
 8003658:	2100      	movs	r1, #0
 800365a:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH3_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 800365c:	4b9f      	ldr	r3, [pc, #636]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800365e:	222e      	movs	r2, #46	@ 0x2e
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH4_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8003664:	4b9d      	ldr	r3, [pc, #628]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003666:	2232      	movs	r2, #50	@ 0x32
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH5_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 800366c:	4b9b      	ldr	r3, [pc, #620]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800366e:	2236      	movs	r2, #54	@ 0x36
 8003670:	2100      	movs	r1, #0
 8003672:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH6_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8003674:	4b99      	ldr	r3, [pc, #612]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003676:	223a      	movs	r2, #58	@ 0x3a
 8003678:	2100      	movs	r1, #0
 800367a:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH7_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 800367c:	4b97      	ldr	r3, [pc, #604]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800367e:	223e      	movs	r2, #62	@ 0x3e
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

    registerMap[HIGH_TH_CH0_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 8003684:	4b95      	ldr	r3, [pc, #596]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003686:	2221      	movs	r2, #33	@ 0x21
 8003688:	21ff      	movs	r1, #255	@ 0xff
 800368a:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH1_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 800368c:	4b93      	ldr	r3, [pc, #588]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800368e:	2225      	movs	r2, #37	@ 0x25
 8003690:	21ff      	movs	r1, #255	@ 0xff
 8003692:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH2_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 8003694:	4b91      	ldr	r3, [pc, #580]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003696:	2229      	movs	r2, #41	@ 0x29
 8003698:	21ff      	movs	r1, #255	@ 0xff
 800369a:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH3_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 800369c:	4b8f      	ldr	r3, [pc, #572]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800369e:	222d      	movs	r2, #45	@ 0x2d
 80036a0:	21ff      	movs	r1, #255	@ 0xff
 80036a2:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH4_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80036a4:	4b8d      	ldr	r3, [pc, #564]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036a6:	2231      	movs	r2, #49	@ 0x31
 80036a8:	21ff      	movs	r1, #255	@ 0xff
 80036aa:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH5_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80036ac:	4b8b      	ldr	r3, [pc, #556]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036ae:	2235      	movs	r2, #53	@ 0x35
 80036b0:	21ff      	movs	r1, #255	@ 0xff
 80036b2:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH6_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80036b4:	4b89      	ldr	r3, [pc, #548]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036b6:	2239      	movs	r2, #57	@ 0x39
 80036b8:	21ff      	movs	r1, #255	@ 0xff
 80036ba:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH7_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80036bc:	4b87      	ldr	r3, [pc, #540]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036be:	223d      	movs	r2, #61	@ 0x3d
 80036c0:	21ff      	movs	r1, #255	@ 0xff
 80036c2:	5499      	strb	r1, [r3, r2]

    registerMap[LOW_TH_CH0_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80036c4:	4b85      	ldr	r3, [pc, #532]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036c6:	2223      	movs	r2, #35	@ 0x23
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH1_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80036cc:	4b83      	ldr	r3, [pc, #524]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036ce:	2227      	movs	r2, #39	@ 0x27
 80036d0:	2100      	movs	r1, #0
 80036d2:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH2_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80036d4:	4b81      	ldr	r3, [pc, #516]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036d6:	222b      	movs	r2, #43	@ 0x2b
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH3_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80036dc:	4b7f      	ldr	r3, [pc, #508]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036de:	222f      	movs	r2, #47	@ 0x2f
 80036e0:	2100      	movs	r1, #0
 80036e2:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH4_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80036e4:	4b7d      	ldr	r3, [pc, #500]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036e6:	2233      	movs	r2, #51	@ 0x33
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH5_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80036ec:	4b7b      	ldr	r3, [pc, #492]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036ee:	2237      	movs	r2, #55	@ 0x37
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH6_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80036f4:	4b79      	ldr	r3, [pc, #484]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036f6:	223b      	movs	r2, #59	@ 0x3b
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH7_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80036fc:	4b77      	ldr	r3, [pc, #476]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80036fe:	223f      	movs	r2, #63	@ 0x3f
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]

    registerMap[MAX_CH0_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8003704:	4b75      	ldr	r3, [pc, #468]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003706:	2260      	movs	r2, #96	@ 0x60
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH1_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 800370c:	4b73      	ldr	r3, [pc, #460]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800370e:	2262      	movs	r2, #98	@ 0x62
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH2_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8003714:	4b71      	ldr	r3, [pc, #452]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003716:	2264      	movs	r2, #100	@ 0x64
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH3_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 800371c:	4b6f      	ldr	r3, [pc, #444]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800371e:	2266      	movs	r2, #102	@ 0x66
 8003720:	2100      	movs	r1, #0
 8003722:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH4_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8003724:	4b6d      	ldr	r3, [pc, #436]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003726:	2268      	movs	r2, #104	@ 0x68
 8003728:	2100      	movs	r1, #0
 800372a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH5_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 800372c:	4b6b      	ldr	r3, [pc, #428]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800372e:	226a      	movs	r2, #106	@ 0x6a
 8003730:	2100      	movs	r1, #0
 8003732:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH6_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8003734:	4b69      	ldr	r3, [pc, #420]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003736:	226c      	movs	r2, #108	@ 0x6c
 8003738:	2100      	movs	r1, #0
 800373a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH7_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 800373c:	4b67      	ldr	r3, [pc, #412]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800373e:	226e      	movs	r2, #110	@ 0x6e
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]

    registerMap[MAX_CH0_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8003744:	4b65      	ldr	r3, [pc, #404]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003746:	2261      	movs	r2, #97	@ 0x61
 8003748:	2100      	movs	r1, #0
 800374a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH1_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 800374c:	4b63      	ldr	r3, [pc, #396]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800374e:	2263      	movs	r2, #99	@ 0x63
 8003750:	2100      	movs	r1, #0
 8003752:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH2_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8003754:	4b61      	ldr	r3, [pc, #388]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003756:	2265      	movs	r2, #101	@ 0x65
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH3_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 800375c:	4b5f      	ldr	r3, [pc, #380]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800375e:	2267      	movs	r2, #103	@ 0x67
 8003760:	2100      	movs	r1, #0
 8003762:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH4_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8003764:	4b5d      	ldr	r3, [pc, #372]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003766:	2269      	movs	r2, #105	@ 0x69
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH5_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 800376c:	4b5b      	ldr	r3, [pc, #364]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800376e:	226b      	movs	r2, #107	@ 0x6b
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH6_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8003774:	4b59      	ldr	r3, [pc, #356]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003776:	226d      	movs	r2, #109	@ 0x6d
 8003778:	2100      	movs	r1, #0
 800377a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH7_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 800377c:	4b57      	ldr	r3, [pc, #348]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800377e:	226f      	movs	r2, #111	@ 0x6f
 8003780:	2100      	movs	r1, #0
 8003782:	5499      	strb	r1, [r3, r2]

    registerMap[MIN_CH0_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 8003784:	4b55      	ldr	r3, [pc, #340]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003786:	2280      	movs	r2, #128	@ 0x80
 8003788:	21ff      	movs	r1, #255	@ 0xff
 800378a:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH1_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 800378c:	4b53      	ldr	r3, [pc, #332]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800378e:	2282      	movs	r2, #130	@ 0x82
 8003790:	21ff      	movs	r1, #255	@ 0xff
 8003792:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH2_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 8003794:	4b51      	ldr	r3, [pc, #324]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003796:	2284      	movs	r2, #132	@ 0x84
 8003798:	21ff      	movs	r1, #255	@ 0xff
 800379a:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH3_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 800379c:	4b4f      	ldr	r3, [pc, #316]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800379e:	2286      	movs	r2, #134	@ 0x86
 80037a0:	21ff      	movs	r1, #255	@ 0xff
 80037a2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH4_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80037a4:	4b4d      	ldr	r3, [pc, #308]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037a6:	2288      	movs	r2, #136	@ 0x88
 80037a8:	21ff      	movs	r1, #255	@ 0xff
 80037aa:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH5_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80037ac:	4b4b      	ldr	r3, [pc, #300]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037ae:	228a      	movs	r2, #138	@ 0x8a
 80037b0:	21ff      	movs	r1, #255	@ 0xff
 80037b2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH6_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80037b4:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037b6:	228c      	movs	r2, #140	@ 0x8c
 80037b8:	21ff      	movs	r1, #255	@ 0xff
 80037ba:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH7_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80037bc:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037be:	228e      	movs	r2, #142	@ 0x8e
 80037c0:	21ff      	movs	r1, #255	@ 0xff
 80037c2:	5499      	strb	r1, [r3, r2]

    registerMap[MIN_CH0_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80037c4:	4b45      	ldr	r3, [pc, #276]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037c6:	2281      	movs	r2, #129	@ 0x81
 80037c8:	21ff      	movs	r1, #255	@ 0xff
 80037ca:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH1_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80037cc:	4b43      	ldr	r3, [pc, #268]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037ce:	2283      	movs	r2, #131	@ 0x83
 80037d0:	21ff      	movs	r1, #255	@ 0xff
 80037d2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH2_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80037d4:	4b41      	ldr	r3, [pc, #260]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037d6:	2285      	movs	r2, #133	@ 0x85
 80037d8:	21ff      	movs	r1, #255	@ 0xff
 80037da:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH3_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80037dc:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037de:	2287      	movs	r2, #135	@ 0x87
 80037e0:	21ff      	movs	r1, #255	@ 0xff
 80037e2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH4_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80037e4:	4b3d      	ldr	r3, [pc, #244]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037e6:	2289      	movs	r2, #137	@ 0x89
 80037e8:	21ff      	movs	r1, #255	@ 0xff
 80037ea:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH5_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80037ec:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037ee:	228b      	movs	r2, #139	@ 0x8b
 80037f0:	21ff      	movs	r1, #255	@ 0xff
 80037f2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH6_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80037f4:	4b39      	ldr	r3, [pc, #228]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037f6:	228d      	movs	r2, #141	@ 0x8d
 80037f8:	21ff      	movs	r1, #255	@ 0xff
 80037fa:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH7_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80037fc:	4b37      	ldr	r3, [pc, #220]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80037fe:	228f      	movs	r2, #143	@ 0x8f
 8003800:	21ff      	movs	r1, #255	@ 0xff
 8003802:	5499      	strb	r1, [r3, r2]

    registerMap[RECENT_CH0_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8003804:	4b35      	ldr	r3, [pc, #212]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003806:	22a0      	movs	r2, #160	@ 0xa0
 8003808:	2100      	movs	r1, #0
 800380a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH1_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 800380c:	4b33      	ldr	r3, [pc, #204]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800380e:	22a2      	movs	r2, #162	@ 0xa2
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH2_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8003814:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003816:	22a4      	movs	r2, #164	@ 0xa4
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH3_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 800381c:	4b2f      	ldr	r3, [pc, #188]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800381e:	22a6      	movs	r2, #166	@ 0xa6
 8003820:	2100      	movs	r1, #0
 8003822:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH4_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8003824:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003826:	22a8      	movs	r2, #168	@ 0xa8
 8003828:	2100      	movs	r1, #0
 800382a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH5_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 800382c:	4b2b      	ldr	r3, [pc, #172]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800382e:	22aa      	movs	r2, #170	@ 0xaa
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH6_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8003834:	4b29      	ldr	r3, [pc, #164]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003836:	22ac      	movs	r2, #172	@ 0xac
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH7_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 800383c:	4b27      	ldr	r3, [pc, #156]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800383e:	22ae      	movs	r2, #174	@ 0xae
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]

    registerMap[RECENT_CH0_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8003844:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003846:	22a1      	movs	r2, #161	@ 0xa1
 8003848:	2100      	movs	r1, #0
 800384a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH1_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 800384c:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800384e:	22a3      	movs	r2, #163	@ 0xa3
 8003850:	2100      	movs	r1, #0
 8003852:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH2_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8003854:	4b21      	ldr	r3, [pc, #132]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003856:	22a5      	movs	r2, #165	@ 0xa5
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH3_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 800385c:	4b1f      	ldr	r3, [pc, #124]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800385e:	22a7      	movs	r2, #167	@ 0xa7
 8003860:	2100      	movs	r1, #0
 8003862:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH4_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8003864:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003866:	22a9      	movs	r2, #169	@ 0xa9
 8003868:	2100      	movs	r1, #0
 800386a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH5_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 800386c:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800386e:	22ab      	movs	r2, #171	@ 0xab
 8003870:	2100      	movs	r1, #0
 8003872:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH6_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8003874:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003876:	22ad      	movs	r2, #173	@ 0xad
 8003878:	2100      	movs	r1, #0
 800387a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH7_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 800387c:	4b17      	ldr	r3, [pc, #92]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800387e:	22af      	movs	r2, #175	@ 0xaf
 8003880:	2100      	movs	r1, #0
 8003882:	5499      	strb	r1, [r3, r2]

    registerMap[GPO0_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 8003884:	4b15      	ldr	r3, [pc, #84]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003886:	22c3      	movs	r2, #195	@ 0xc3
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]
    registerMap[GPO1_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 800388c:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800388e:	22c5      	movs	r2, #197	@ 0xc5
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]
    registerMap[GPO2_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 8003894:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <restoreRegisterDefaults+0x354>)
 8003896:	22c7      	movs	r2, #199	@ 0xc7
 8003898:	2100      	movs	r1, #0
 800389a:	5499      	strb	r1, [r3, r2]
    registerMap[GPO3_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 800389c:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <restoreRegisterDefaults+0x354>)
 800389e:	22c9      	movs	r2, #201	@ 0xc9
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]
    registerMap[GPO4_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80038a4:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80038a6:	22cb      	movs	r2, #203	@ 0xcb
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]
    registerMap[GPO5_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80038ae:	22cd      	movs	r2, #205	@ 0xcd
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]
    registerMap[GPO6_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80038b4:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80038b6:	22cf      	movs	r2, #207	@ 0xcf
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]
    registerMap[GPO7_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80038bc:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80038be:	22d1      	movs	r2, #209	@ 0xd1
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]

    registerMap[GPO_TRIGGER_CFG_ADDRESS]        = GPO_TRIGGER_CFG_DEFAULT;
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80038c6:	22e9      	movs	r2, #233	@ 0xe9
 80038c8:	2100      	movs	r1, #0
 80038ca:	5499      	strb	r1, [r3, r2]
    registerMap[GPO_VALUE_TRIG_ADDRESS]         = GPO_VALUE_TRIG_DEFAULT;
 80038cc:	4b03      	ldr	r3, [pc, #12]	@ (80038dc <restoreRegisterDefaults+0x354>)
 80038ce:	22eb      	movs	r2, #235	@ 0xeb
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]
}
 80038d4:	46c0      	nop			@ (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	200006e4 	.word	0x200006e4

080038e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038e4:	f000 fc4c 	bl	8004180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038e8:	f000 f84e 	bl	8003988 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_FDCAN_MspInit(&hfdcan2);
 80038ec:	4b1f      	ldr	r3, [pc, #124]	@ (800396c <main+0x8c>)
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 fa4c 	bl	8003d8c <HAL_FDCAN_MspInit>
  HAL_SPI_MspInit(&hspi1);
 80038f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <main+0x90>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 faaa 	bl	8003e50 <HAL_SPI_MspInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038fc:	f000 f97e 	bl	8003bfc <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8003900:	f000 f8a2 	bl	8003a48 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8003904:	f000 f8e8 	bl	8003ad8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8003908:	f000 f924 	bl	8003b54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  canFramesDefine();
 800390c:	f7ff f91a 	bl	8002b44 <canFramesDefine>
  ioAssign();
 8003910:	f7ff fa72 	bl	8002df8 <ioAssign>
  initialiseADC();
 8003914:	f7ff faee 	bl	8002ef4 <initialiseADC>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //LED on (default)
 8003918:	23a0      	movs	r3, #160	@ 0xa0
 800391a:	05db      	lsls	r3, r3, #23
 800391c:	2200      	movs	r2, #0
 800391e:	2120      	movs	r1, #32
 8003920:	0018      	movs	r0, r3
 8003922:	f001 fa01 	bl	8004d28 <HAL_GPIO_WritePin>

  TickerAttach(&Ticker, &TransmitHeartBeat, CAN_RATE_1000MS);
 8003926:	23fa      	movs	r3, #250	@ 0xfa
 8003928:	009a      	lsls	r2, r3, #2
 800392a:	4912      	ldr	r1, [pc, #72]	@ (8003974 <main+0x94>)
 800392c:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <main+0x98>)
 800392e:	0018      	movs	r0, r3
 8003930:	f7ff fb10 	bl	8002f54 <TickerAttach>
  TickerAttach(&Ticker, &TransmitAnalogue, CAN_RATE_1000MS);
 8003934:	23fa      	movs	r3, #250	@ 0xfa
 8003936:	009a      	lsls	r2, r3, #2
 8003938:	4910      	ldr	r1, [pc, #64]	@ (800397c <main+0x9c>)
 800393a:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <main+0x98>)
 800393c:	0018      	movs	r0, r3
 800393e:	f7ff fb09 	bl	8002f54 <TickerAttach>
  TickerAttach(&Ticker, &TransmitAnalogueRaw, CAN_RATE_1000MS);
 8003942:	23fa      	movs	r3, #250	@ 0xfa
 8003944:	009a      	lsls	r2, r3, #2
 8003946:	490e      	ldr	r1, [pc, #56]	@ (8003980 <main+0xa0>)
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <main+0x98>)
 800394a:	0018      	movs	r0, r3
 800394c:	f7ff fb02 	bl	8002f54 <TickerAttach>

  HAL_FDCAN_Start(&hfdcan2);
 8003950:	4b06      	ldr	r3, [pc, #24]	@ (800396c <main+0x8c>)
 8003952:	0018      	movs	r0, r3
 8003954:	f000 ff18 	bl	8004788 <HAL_FDCAN_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8003958:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <main+0xa4>)
 800395a:	0018      	movs	r0, r3
 800395c:	f002 fdea 	bl	8006534 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  UpdateAnalogue();
 8003960:	f7fe ffde 	bl	8002920 <UpdateAnalogue>
	  TransmitCAN();
 8003964:	f7fe fd8e 	bl	8002484 <TransmitCAN>
	  UpdateAnalogue();
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	e7f9      	b.n	8003960 <main+0x80>
 800396c:	200007d0 	.word	0x200007d0
 8003970:	20000834 	.word	0x20000834
 8003974:	08002389 	.word	0x08002389
 8003978:	20000000 	.word	0x20000000
 800397c:	080023e1 	.word	0x080023e1
 8003980:	08002425 	.word	0x08002425
 8003984:	20000898 	.word	0x20000898

08003988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b095      	sub	sp, #84	@ 0x54
 800398c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800398e:	2414      	movs	r4, #20
 8003990:	193b      	adds	r3, r7, r4
 8003992:	0018      	movs	r0, r3
 8003994:	233c      	movs	r3, #60	@ 0x3c
 8003996:	001a      	movs	r2, r3
 8003998:	2100      	movs	r1, #0
 800399a:	f003 fb2b 	bl	8006ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	0018      	movs	r0, r3
 80039a2:	2310      	movs	r3, #16
 80039a4:	001a      	movs	r2, r3
 80039a6:	2100      	movs	r1, #0
 80039a8:	f003 fb24 	bl	8006ff4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ac:	2380      	movs	r3, #128	@ 0x80
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	0018      	movs	r0, r3
 80039b2:	f001 f9f1 	bl	8004d98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039b6:	193b      	adds	r3, r7, r4
 80039b8:	2202      	movs	r2, #2
 80039ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039bc:	193b      	adds	r3, r7, r4
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	0052      	lsls	r2, r2, #1
 80039c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80039c4:	0021      	movs	r1, r4
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	2240      	movs	r2, #64	@ 0x40
 80039d0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d2:	187b      	adds	r3, r7, r1
 80039d4:	2202      	movs	r2, #2
 80039d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	2202      	movs	r2, #2
 80039dc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	2200      	movs	r2, #0
 80039e2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	2208      	movs	r2, #8
 80039e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	2280      	movs	r2, #128	@ 0x80
 80039ee:	0292      	lsls	r2, r2, #10
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	2280      	movs	r2, #128	@ 0x80
 80039f6:	0492      	lsls	r2, r2, #18
 80039f8:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	2280      	movs	r2, #128	@ 0x80
 80039fe:	0592      	lsls	r2, r2, #22
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	0018      	movs	r0, r3
 8003a06:	f001 fa07 	bl	8004e18 <HAL_RCC_OscConfig>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d001      	beq.n	8003a12 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003a0e:	f000 f98f 	bl	8003d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	2207      	movs	r2, #7
 8003a16:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	2280      	movs	r2, #128	@ 0x80
 8003a28:	01d2      	lsls	r2, r2, #7
 8003a2a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	2102      	movs	r1, #2
 8003a30:	0018      	movs	r0, r3
 8003a32:	f001 fd51 	bl	80054d8 <HAL_RCC_ClockConfig>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003a3a:	f000 f979 	bl	8003d30 <Error_Handler>
  }
}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b015      	add	sp, #84	@ 0x54
 8003a44:	bd90      	pop	{r4, r7, pc}
	...

08003a48 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003a4c:	4b20      	ldr	r3, [pc, #128]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a4e:	4a21      	ldr	r2, [pc, #132]	@ (8003ad4 <MX_FDCAN2_Init+0x8c>)
 8003a50:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003a52:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003a58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8003a64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003a6a:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003a70:	4b17      	ldr	r3, [pc, #92]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 4;
 8003a76:	4b16      	ldr	r3, [pc, #88]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a78:	2204      	movs	r2, #4
 8003a7a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003a7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 11;
 8003a82:	4b13      	ldr	r3, [pc, #76]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a84:	220b      	movs	r2, #11
 8003a86:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 4;
 8003a88:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003a8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003a94:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003aac:	4b08      	ldr	r3, [pc, #32]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003ab2:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003ab8:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <MX_FDCAN2_Init+0x88>)
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 fcfe 	bl	80044bc <HAL_FDCAN_Init>
 8003ac0:	1e03      	subs	r3, r0, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8003ac4:	f000 f934 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003ac8:	46c0      	nop			@ (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	200007d0 	.word	0x200007d0
 8003ad4:	40006800 	.word	0x40006800

08003ad8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003ade:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <MX_SPI1_Init+0x78>)
 8003ae0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003ae4:	2282      	movs	r2, #130	@ 0x82
 8003ae6:	0052      	lsls	r2, r2, #1
 8003ae8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003aea:	4b18      	ldr	r3, [pc, #96]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003af0:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003af2:	22e0      	movs	r2, #224	@ 0xe0
 8003af4:	00d2      	lsls	r2, r2, #3
 8003af6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af8:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003afe:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b04:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b06:	2280      	movs	r2, #128	@ 0x80
 8003b08:	0092      	lsls	r2, r2, #2
 8003b0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b0e:	2228      	movs	r2, #40	@ 0x28
 8003b10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b12:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b18:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b24:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b26:	2207      	movs	r2, #7
 8003b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b2a:	4b08      	ldr	r3, [pc, #32]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b30:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b32:	2208      	movs	r2, #8
 8003b34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b36:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <MX_SPI1_Init+0x74>)
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f002 f893 	bl	8005c64 <HAL_SPI_Init>
 8003b3e:	1e03      	subs	r3, r0, #0
 8003b40:	d001      	beq.n	8003b46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003b42:	f000 f8f5 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000834 	.word	0x20000834
 8003b50:	40013000 	.word	0x40013000

08003b54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	0018      	movs	r0, r3
 8003b60:	2310      	movs	r3, #16
 8003b62:	001a      	movs	r2, r3
 8003b64:	2100      	movs	r1, #0
 8003b66:	f003 fa45 	bl	8006ff4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6a:	1d3b      	adds	r3, r7, #4
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	230c      	movs	r3, #12
 8003b70:	001a      	movs	r2, r3
 8003b72:	2100      	movs	r1, #0
 8003b74:	f003 fa3e 	bl	8006ff4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b78:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf4 <MX_TIM2_Init+0xa0>)
 8003b7a:	2280      	movs	r2, #128	@ 0x80
 8003b7c:	05d2      	lsls	r2, r2, #23
 8003b7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003b80:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf4 <MX_TIM2_Init+0xa0>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b86:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <MX_TIM2_Init+0xa0>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8003b8c:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <MX_TIM2_Init+0xa0>)
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf8 <MX_TIM2_Init+0xa4>)
 8003b90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b92:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <MX_TIM2_Init+0xa0>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b98:	4b16      	ldr	r3, [pc, #88]	@ (8003bf4 <MX_TIM2_Init+0xa0>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b9e:	4b15      	ldr	r3, [pc, #84]	@ (8003bf4 <MX_TIM2_Init+0xa0>)
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f002 fc6f 	bl	8006484 <HAL_TIM_Base_Init>
 8003ba6:	1e03      	subs	r3, r0, #0
 8003ba8:	d001      	beq.n	8003bae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003baa:	f000 f8c1 	bl	8003d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bae:	2110      	movs	r1, #16
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	2280      	movs	r2, #128	@ 0x80
 8003bb4:	0152      	lsls	r2, r2, #5
 8003bb6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bb8:	187a      	adds	r2, r7, r1
 8003bba:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <MX_TIM2_Init+0xa0>)
 8003bbc:	0011      	movs	r1, r2
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f002 fe22 	bl	8006808 <HAL_TIM_ConfigClockSource>
 8003bc4:	1e03      	subs	r3, r0, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003bc8:	f000 f8b2 	bl	8003d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bd2:	1d3b      	adds	r3, r7, #4
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bd8:	1d3a      	adds	r2, r7, #4
 8003bda:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <MX_TIM2_Init+0xa0>)
 8003bdc:	0011      	movs	r1, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f003 f83c 	bl	8006c5c <HAL_TIMEx_MasterConfigSynchronization>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d001      	beq.n	8003bec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003be8:	f000 f8a2 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003bec:	46c0      	nop			@ (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b008      	add	sp, #32
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000898 	.word	0x20000898
 8003bf8:	0000f9ff 	.word	0x0000f9ff

08003bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b089      	sub	sp, #36	@ 0x24
 8003c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c02:	240c      	movs	r4, #12
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	0018      	movs	r0, r3
 8003c08:	2314      	movs	r3, #20
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	f003 f9f1 	bl	8006ff4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c12:	4b39      	ldr	r3, [pc, #228]	@ (8003cf8 <MX_GPIO_Init+0xfc>)
 8003c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c16:	4b38      	ldr	r3, [pc, #224]	@ (8003cf8 <MX_GPIO_Init+0xfc>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c1e:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <MX_GPIO_Init+0xfc>)
 8003c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c22:	2201      	movs	r2, #1
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	4b33      	ldr	r3, [pc, #204]	@ (8003cf8 <MX_GPIO_Init+0xfc>)
 8003c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c2e:	4b32      	ldr	r3, [pc, #200]	@ (8003cf8 <MX_GPIO_Init+0xfc>)
 8003c30:	2102      	movs	r1, #2
 8003c32:	430a      	orrs	r2, r1
 8003c34:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c36:	4b30      	ldr	r3, [pc, #192]	@ (8003cf8 <MX_GPIO_Init+0xfc>)
 8003c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c42:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf8 <MX_GPIO_Init+0xfc>)
 8003c44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c46:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf8 <MX_GPIO_Init+0xfc>)
 8003c48:	2104      	movs	r1, #4
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf8 <MX_GPIO_Init+0xfc>)
 8003c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c52:	2204      	movs	r2, #4
 8003c54:	4013      	ands	r3, r2
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003c5a:	4928      	ldr	r1, [pc, #160]	@ (8003cfc <MX_GPIO_Init+0x100>)
 8003c5c:	23a0      	movs	r3, #160	@ 0xa0
 8003c5e:	05db      	lsls	r3, r3, #23
 8003c60:	2200      	movs	r2, #0
 8003c62:	0018      	movs	r0, r3
 8003c64:	f001 f860 	bl	8004d28 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003c68:	4b25      	ldr	r3, [pc, #148]	@ (8003d00 <MX_GPIO_Init+0x104>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2104      	movs	r1, #4
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f001 f85a 	bl	8004d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8003c74:	4b23      	ldr	r3, [pc, #140]	@ (8003d04 <MX_GPIO_Init+0x108>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	2140      	movs	r1, #64	@ 0x40
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f001 f854 	bl	8004d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003c80:	193b      	adds	r3, r7, r4
 8003c82:	4a1e      	ldr	r2, [pc, #120]	@ (8003cfc <MX_GPIO_Init+0x100>)
 8003c84:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c86:	193b      	adds	r3, r7, r4
 8003c88:	2201      	movs	r2, #1
 8003c8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	193b      	adds	r3, r7, r4
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c92:	193b      	adds	r3, r7, r4
 8003c94:	2200      	movs	r2, #0
 8003c96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c98:	193a      	adds	r2, r7, r4
 8003c9a:	23a0      	movs	r3, #160	@ 0xa0
 8003c9c:	05db      	lsls	r3, r3, #23
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 fed5 	bl	8004a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ca6:	193b      	adds	r3, r7, r4
 8003ca8:	2204      	movs	r2, #4
 8003caa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cac:	193b      	adds	r3, r7, r4
 8003cae:	2201      	movs	r2, #1
 8003cb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	193b      	adds	r3, r7, r4
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d00 <MX_GPIO_Init+0x104>)
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	0010      	movs	r0, r2
 8003cc6:	f000 fec3 	bl	8004a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003cca:	0021      	movs	r1, r4
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2240      	movs	r2, #64	@ 0x40
 8003cd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cde:	187b      	adds	r3, r7, r1
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	4a07      	ldr	r2, [pc, #28]	@ (8003d04 <MX_GPIO_Init+0x108>)
 8003ce8:	0019      	movs	r1, r3
 8003cea:	0010      	movs	r0, r2
 8003cec:	f000 feb0 	bl	8004a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b009      	add	sp, #36	@ 0x24
 8003cf6:	bd90      	pop	{r4, r7, pc}
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	00008720 	.word	0x00008720
 8003d00:	50000400 	.word	0x50000400
 8003d04:	50000800 	.word	0x50000800

08003d08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	05db      	lsls	r3, r3, #23
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d103      	bne.n	8003d24 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		TickerHandler(&Ticker);
 8003d1c:	4b03      	ldr	r3, [pc, #12]	@ (8003d2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7ff f93f 	bl	8002fa2 <TickerHandler>
	}
}
 8003d24:	46c0      	nop			@ (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b002      	add	sp, #8
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000000 	.word	0x20000000

08003d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d34:	b672      	cpsid	i
}
 8003d36:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d38:	46c0      	nop			@ (mov r8, r8)
 8003d3a:	e7fd      	b.n	8003d38 <Error_Handler+0x8>

08003d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d42:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2201      	movs	r2, #1
 8003d54:	4013      	ands	r3, r2
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d60:	2180      	movs	r1, #128	@ 0x80
 8003d62:	0549      	lsls	r1, r1, #21
 8003d64:	430a      	orrs	r2, r1
 8003d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d68:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d6c:	2380      	movs	r3, #128	@ 0x80
 8003d6e:	055b      	lsls	r3, r3, #21
 8003d70:	4013      	ands	r3, r2
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8003d76:	2380      	movs	r3, #128	@ 0x80
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f000 faaa 	bl	80042d4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d80:	46c0      	nop			@ (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000

08003d8c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b09d      	sub	sp, #116	@ 0x74
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d94:	235c      	movs	r3, #92	@ 0x5c
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	0018      	movs	r0, r3
 8003d9a:	2314      	movs	r3, #20
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	2100      	movs	r1, #0
 8003da0:	f003 f928 	bl	8006ff4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003da4:	2410      	movs	r4, #16
 8003da6:	193b      	adds	r3, r7, r4
 8003da8:	0018      	movs	r0, r3
 8003daa:	234c      	movs	r3, #76	@ 0x4c
 8003dac:	001a      	movs	r2, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	f003 f920 	bl	8006ff4 <memset>
  if(hfdcan->Instance==FDCAN2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a22      	ldr	r2, [pc, #136]	@ (8003e44 <HAL_FDCAN_MspInit+0xb8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d13e      	bne.n	8003e3c <HAL_FDCAN_MspInit+0xb0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003dbe:	193b      	adds	r3, r7, r4
 8003dc0:	2280      	movs	r2, #128	@ 0x80
 8003dc2:	0492      	lsls	r2, r2, #18
 8003dc4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003dc6:	193b      	adds	r3, r7, r4
 8003dc8:	2200      	movs	r2, #0
 8003dca:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dcc:	193b      	adds	r3, r7, r4
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f001 fd0c 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003dd8:	f7ff ffaa 	bl	8003d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e48 <HAL_FDCAN_MspInit+0xbc>)
 8003dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de0:	4b19      	ldr	r3, [pc, #100]	@ (8003e48 <HAL_FDCAN_MspInit+0xbc>)
 8003de2:	2180      	movs	r1, #128	@ 0x80
 8003de4:	0149      	lsls	r1, r1, #5
 8003de6:	430a      	orrs	r2, r1
 8003de8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003dea:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <HAL_FDCAN_MspInit+0xbc>)
 8003dec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	015b      	lsls	r3, r3, #5
 8003df2:	4013      	ands	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df8:	4b13      	ldr	r3, [pc, #76]	@ (8003e48 <HAL_FDCAN_MspInit+0xbc>)
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dfc:	4b12      	ldr	r3, [pc, #72]	@ (8003e48 <HAL_FDCAN_MspInit+0xbc>)
 8003dfe:	2102      	movs	r1, #2
 8003e00:	430a      	orrs	r2, r1
 8003e02:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e04:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <HAL_FDCAN_MspInit+0xbc>)
 8003e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e08:	2202      	movs	r2, #2
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e10:	215c      	movs	r1, #92	@ 0x5c
 8003e12:	187b      	adds	r3, r7, r1
 8003e14:	2203      	movs	r2, #3
 8003e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	2200      	movs	r2, #0
 8003e28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e30:	187b      	adds	r3, r7, r1
 8003e32:	4a06      	ldr	r2, [pc, #24]	@ (8003e4c <HAL_FDCAN_MspInit+0xc0>)
 8003e34:	0019      	movs	r1, r3
 8003e36:	0010      	movs	r0, r2
 8003e38:	f000 fe0a 	bl	8004a50 <HAL_GPIO_Init>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b01d      	add	sp, #116	@ 0x74
 8003e42:	bd90      	pop	{r4, r7, pc}
 8003e44:	40006800 	.word	0x40006800
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	50000400 	.word	0x50000400

08003e50 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b08b      	sub	sp, #44	@ 0x2c
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	2414      	movs	r4, #20
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	2314      	movs	r3, #20
 8003e60:	001a      	movs	r2, r3
 8003e62:	2100      	movs	r1, #0
 8003e64:	f003 f8c6 	bl	8006ff4 <memset>
  if(hspi->Instance==SPI1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	@ (8003f04 <HAL_SPI_MspInit+0xb4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d144      	bne.n	8003efc <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e72:	4b25      	ldr	r3, [pc, #148]	@ (8003f08 <HAL_SPI_MspInit+0xb8>)
 8003e74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e76:	4b24      	ldr	r3, [pc, #144]	@ (8003f08 <HAL_SPI_MspInit+0xb8>)
 8003e78:	2180      	movs	r1, #128	@ 0x80
 8003e7a:	0149      	lsls	r1, r1, #5
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e80:	4b21      	ldr	r3, [pc, #132]	@ (8003f08 <HAL_SPI_MspInit+0xb8>)
 8003e82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e84:	2380      	movs	r3, #128	@ 0x80
 8003e86:	015b      	lsls	r3, r3, #5
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <HAL_SPI_MspInit+0xb8>)
 8003e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e92:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <HAL_SPI_MspInit+0xb8>)
 8003e94:	2102      	movs	r1, #2
 8003e96:	430a      	orrs	r2, r1
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <HAL_SPI_MspInit+0xb8>)
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003ea6:	193b      	adds	r3, r7, r4
 8003ea8:	2228      	movs	r2, #40	@ 0x28
 8003eaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	193b      	adds	r3, r7, r4
 8003eae:	2202      	movs	r2, #2
 8003eb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	193b      	adds	r3, r7, r4
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb8:	193b      	adds	r3, r7, r4
 8003eba:	2200      	movs	r2, #0
 8003ebc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ebe:	193b      	adds	r3, r7, r4
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec4:	193b      	adds	r3, r7, r4
 8003ec6:	4a11      	ldr	r2, [pc, #68]	@ (8003f0c <HAL_SPI_MspInit+0xbc>)
 8003ec8:	0019      	movs	r1, r3
 8003eca:	0010      	movs	r0, r2
 8003ecc:	f000 fdc0 	bl	8004a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ed0:	0021      	movs	r1, r4
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2202      	movs	r2, #2
 8003edc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	2200      	movs	r2, #0
 8003eee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef0:	187b      	adds	r3, r7, r1
 8003ef2:	4a06      	ldr	r2, [pc, #24]	@ (8003f0c <HAL_SPI_MspInit+0xbc>)
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	0010      	movs	r0, r2
 8003ef8:	f000 fdaa 	bl	8004a50 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b00b      	add	sp, #44	@ 0x2c
 8003f02:	bd90      	pop	{r4, r7, pc}
 8003f04:	40013000 	.word	0x40013000
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	50000400 	.word	0x50000400

08003f10 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	@ 0x80
 8003f1e:	05db      	lsls	r3, r3, #23
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d113      	bne.n	8003f4c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f24:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_TIM_Base_MspInit+0x44>)
 8003f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f28:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <HAL_TIM_Base_MspInit+0x44>)
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f30:	4b08      	ldr	r3, [pc, #32]	@ (8003f54 <HAL_TIM_Base_MspInit+0x44>)
 8003f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f34:	2201      	movs	r2, #1
 8003f36:	4013      	ands	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2100      	movs	r1, #0
 8003f40:	200f      	movs	r0, #15
 8003f42:	f000 fa89 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f46:	200f      	movs	r0, #15
 8003f48:	f000 fa9b 	bl	8004482 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b004      	add	sp, #16
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000

08003f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	e7fd      	b.n	8003f5c <NMI_Handler+0x4>

08003f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f64:	46c0      	nop			@ (mov r8, r8)
 8003f66:	e7fd      	b.n	8003f64 <HardFault_Handler+0x4>

08003f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003f6c:	46c0      	nop			@ (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f80:	f000 f968 	bl	8004254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f84:	46c0      	nop			@ (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f90:	4b03      	ldr	r3, [pc, #12]	@ (8003fa0 <TIM2_IRQHandler+0x14>)
 8003f92:	0018      	movs	r0, r3
 8003f94:	f002 fb30 	bl	80065f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f98:	46c0      	nop			@ (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	20000898 	.word	0x20000898

08003fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  return 1;
 8003fa8:	2301      	movs	r3, #1
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_kill>:

int _kill(int pid, int sig)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fba:	f003 f871 	bl	80070a0 <__errno>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	2216      	movs	r2, #22
 8003fc2:	601a      	str	r2, [r3, #0]
  return -1;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	425b      	negs	r3, r3
}
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <_exit>:

void _exit (int status)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fd8:	2301      	movs	r3, #1
 8003fda:	425a      	negs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	0011      	movs	r1, r2
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7ff ffe5 	bl	8003fb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	e7fd      	b.n	8003fe6 <_exit+0x16>

08003fea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b086      	sub	sp, #24
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e00a      	b.n	8004012 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ffc:	e000      	b.n	8004000 <_read+0x16>
 8003ffe:	bf00      	nop
 8004000:	0001      	movs	r1, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	60ba      	str	r2, [r7, #8]
 8004008:	b2ca      	uxtb	r2, r1
 800400a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3301      	adds	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	429a      	cmp	r2, r3
 8004018:	dbf0      	blt.n	8003ffc <_read+0x12>
  }

  return len;
 800401a:	687b      	ldr	r3, [r7, #4]
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	b006      	add	sp, #24
 8004022:	bd80      	pop	{r7, pc}

08004024 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e009      	b.n	800404a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	60ba      	str	r2, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	0018      	movs	r0, r3
 8004040:	e000      	b.n	8004044 <_write+0x20>
 8004042:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3301      	adds	r3, #1
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	429a      	cmp	r2, r3
 8004050:	dbf1      	blt.n	8004036 <_write+0x12>
  }
  return len;
 8004052:	687b      	ldr	r3, [r7, #4]
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b006      	add	sp, #24
 800405a:	bd80      	pop	{r7, pc}

0800405c <_close>:

int _close(int file)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004064:	2301      	movs	r3, #1
 8004066:	425b      	negs	r3, r3
}
 8004068:	0018      	movs	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	b002      	add	sp, #8
 800406e:	bd80      	pop	{r7, pc}

08004070 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2280      	movs	r2, #128	@ 0x80
 800407e:	0192      	lsls	r2, r2, #6
 8004080:	605a      	str	r2, [r3, #4]
  return 0;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}

0800408c <_isatty>:

int _isatty(int file)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004094:	2301      	movs	r3, #1
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b002      	add	sp, #8
 800409c:	bd80      	pop	{r7, pc}

0800409e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b004      	add	sp, #16
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040bc:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <_sbrk+0x5c>)
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <_sbrk+0x60>)
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040c8:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <_sbrk+0x64>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <_sbrk+0x64>)
 80040d2:	4a12      	ldr	r2, [pc, #72]	@ (800411c <_sbrk+0x68>)
 80040d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040d6:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <_sbrk+0x64>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	18d3      	adds	r3, r2, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d207      	bcs.n	80040f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040e4:	f002 ffdc 	bl	80070a0 <__errno>
 80040e8:	0003      	movs	r3, r0
 80040ea:	220c      	movs	r2, #12
 80040ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	425b      	negs	r3, r3
 80040f2:	e009      	b.n	8004108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040f4:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <_sbrk+0x64>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040fa:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <_sbrk+0x64>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	18d2      	adds	r2, r2, r3
 8004102:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <_sbrk+0x64>)
 8004104:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b006      	add	sp, #24
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20024000 	.word	0x20024000
 8004114:	00000400 	.word	0x00000400
 8004118:	200008e4 	.word	0x200008e4
 800411c:	20000a38 	.word	0x20000a38

08004120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004124:	46c0      	nop			@ (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800412c:	480d      	ldr	r0, [pc, #52]	@ (8004164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800412e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004130:	f7ff fff6 	bl	8004120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004134:	480c      	ldr	r0, [pc, #48]	@ (8004168 <LoopForever+0x6>)
  ldr r1, =_edata
 8004136:	490d      	ldr	r1, [pc, #52]	@ (800416c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004138:	4a0d      	ldr	r2, [pc, #52]	@ (8004170 <LoopForever+0xe>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800413c:	e002      	b.n	8004144 <LoopCopyDataInit>

0800413e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800413e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004142:	3304      	adds	r3, #4

08004144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004148:	d3f9      	bcc.n	800413e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800414a:	4a0a      	ldr	r2, [pc, #40]	@ (8004174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800414c:	4c0a      	ldr	r4, [pc, #40]	@ (8004178 <LoopForever+0x16>)
  movs r3, #0
 800414e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004150:	e001      	b.n	8004156 <LoopFillZerobss>

08004152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004154:	3204      	adds	r2, #4

08004156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004158:	d3fb      	bcc.n	8004152 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800415a:	f002 ffa7 	bl	80070ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800415e:	f7ff fbbf 	bl	80038e0 <main>

08004162 <LoopForever>:

LoopForever:
  b LoopForever
 8004162:	e7fe      	b.n	8004162 <LoopForever>
  ldr   r0, =_estack
 8004164:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800416c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8004170:	08008d78 	.word	0x08008d78
  ldr r2, =_sbss
 8004174:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8004178:	20000a38 	.word	0x20000a38

0800417c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800417c:	e7fe      	b.n	800417c <ADC1_COMP_IRQHandler>
	...

08004180 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004186:	1dfb      	adds	r3, r7, #7
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800418c:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_Init+0x3c>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <HAL_Init+0x3c>)
 8004192:	2180      	movs	r1, #128	@ 0x80
 8004194:	0049      	lsls	r1, r1, #1
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800419a:	2003      	movs	r0, #3
 800419c:	f000 f810 	bl	80041c0 <HAL_InitTick>
 80041a0:	1e03      	subs	r3, r0, #0
 80041a2:	d003      	beq.n	80041ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80041a4:	1dfb      	adds	r3, r7, #7
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e001      	b.n	80041b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80041ac:	f7ff fdc6 	bl	8003d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041b0:	1dfb      	adds	r3, r7, #7
 80041b2:	781b      	ldrb	r3, [r3, #0]
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40022000 	.word	0x40022000

080041c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041c8:	230f      	movs	r3, #15
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80041d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004248 <HAL_InitTick+0x88>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d02b      	beq.n	8004230 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80041d8:	4b1c      	ldr	r3, [pc, #112]	@ (800424c <HAL_InitTick+0x8c>)
 80041da:	681c      	ldr	r4, [r3, #0]
 80041dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004248 <HAL_InitTick+0x88>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	0019      	movs	r1, r3
 80041e2:	23fa      	movs	r3, #250	@ 0xfa
 80041e4:	0098      	lsls	r0, r3, #2
 80041e6:	f7fb ff97 	bl	8000118 <__udivsi3>
 80041ea:	0003      	movs	r3, r0
 80041ec:	0019      	movs	r1, r3
 80041ee:	0020      	movs	r0, r4
 80041f0:	f7fb ff92 	bl	8000118 <__udivsi3>
 80041f4:	0003      	movs	r3, r0
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f953 	bl	80044a2 <HAL_SYSTICK_Config>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d112      	bne.n	8004226 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d80a      	bhi.n	800421c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	2301      	movs	r3, #1
 800420a:	425b      	negs	r3, r3
 800420c:	2200      	movs	r2, #0
 800420e:	0018      	movs	r0, r3
 8004210:	f000 f922 	bl	8004458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004214:	4b0e      	ldr	r3, [pc, #56]	@ (8004250 <HAL_InitTick+0x90>)
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e00d      	b.n	8004238 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800421c:	230f      	movs	r3, #15
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e008      	b.n	8004238 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004226:	230f      	movs	r3, #15
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e003      	b.n	8004238 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004230:	230f      	movs	r3, #15
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004238:	230f      	movs	r3, #15
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	781b      	ldrb	r3, [r3, #0]
}
 800423e:	0018      	movs	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	b005      	add	sp, #20
 8004244:	bd90      	pop	{r4, r7, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	20000084 	.word	0x20000084
 800424c:	2000007c 	.word	0x2000007c
 8004250:	20000080 	.word	0x20000080

08004254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_IncTick+0x1c>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	001a      	movs	r2, r3
 800425e:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_IncTick+0x20>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	18d2      	adds	r2, r2, r3
 8004264:	4b03      	ldr	r3, [pc, #12]	@ (8004274 <HAL_IncTick+0x20>)
 8004266:	601a      	str	r2, [r3, #0]
}
 8004268:	46c0      	nop			@ (mov r8, r8)
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	20000084 	.word	0x20000084
 8004274:	200008e8 	.word	0x200008e8

08004278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  return uwTick;
 800427c:	4b02      	ldr	r3, [pc, #8]	@ (8004288 <HAL_GetTick+0x10>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	200008e8 	.word	0x200008e8

0800428c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004294:	f7ff fff0 	bl	8004278 <HAL_GetTick>
 8004298:	0003      	movs	r3, r0
 800429a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	d005      	beq.n	80042b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a6:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <HAL_Delay+0x44>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	001a      	movs	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	f7ff ffe0 	bl	8004278 <HAL_GetTick>
 80042b8:	0002      	movs	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d8f7      	bhi.n	80042b4 <HAL_Delay+0x28>
  {
  }
}
 80042c4:	46c0      	nop			@ (mov r8, r8)
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	20000084 	.word	0x20000084

080042d4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80042dc:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a06      	ldr	r2, [pc, #24]	@ (80042fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b002      	add	sp, #8
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	40010000 	.word	0x40010000
 80042fc:	fffff9ff 	.word	0xfffff9ff

08004300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	0002      	movs	r2, r0
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800430c:	1dfb      	adds	r3, r7, #7
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b7f      	cmp	r3, #127	@ 0x7f
 8004312:	d809      	bhi.n	8004328 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004314:	1dfb      	adds	r3, r7, #7
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	001a      	movs	r2, r3
 800431a:	231f      	movs	r3, #31
 800431c:	401a      	ands	r2, r3
 800431e:	4b04      	ldr	r3, [pc, #16]	@ (8004330 <__NVIC_EnableIRQ+0x30>)
 8004320:	2101      	movs	r1, #1
 8004322:	4091      	lsls	r1, r2
 8004324:	000a      	movs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004328:	46c0      	nop			@ (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}
 8004330:	e000e100 	.word	0xe000e100

08004334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	0002      	movs	r2, r0
 800433c:	6039      	str	r1, [r7, #0]
 800433e:	1dfb      	adds	r3, r7, #7
 8004340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004342:	1dfb      	adds	r3, r7, #7
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b7f      	cmp	r3, #127	@ 0x7f
 8004348:	d828      	bhi.n	800439c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800434a:	4a2f      	ldr	r2, [pc, #188]	@ (8004408 <__NVIC_SetPriority+0xd4>)
 800434c:	1dfb      	adds	r3, r7, #7
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b25b      	sxtb	r3, r3
 8004352:	089b      	lsrs	r3, r3, #2
 8004354:	33c0      	adds	r3, #192	@ 0xc0
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	589b      	ldr	r3, [r3, r2]
 800435a:	1dfa      	adds	r2, r7, #7
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	0011      	movs	r1, r2
 8004360:	2203      	movs	r2, #3
 8004362:	400a      	ands	r2, r1
 8004364:	00d2      	lsls	r2, r2, #3
 8004366:	21ff      	movs	r1, #255	@ 0xff
 8004368:	4091      	lsls	r1, r2
 800436a:	000a      	movs	r2, r1
 800436c:	43d2      	mvns	r2, r2
 800436e:	401a      	ands	r2, r3
 8004370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	019b      	lsls	r3, r3, #6
 8004376:	22ff      	movs	r2, #255	@ 0xff
 8004378:	401a      	ands	r2, r3
 800437a:	1dfb      	adds	r3, r7, #7
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	0018      	movs	r0, r3
 8004380:	2303      	movs	r3, #3
 8004382:	4003      	ands	r3, r0
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004388:	481f      	ldr	r0, [pc, #124]	@ (8004408 <__NVIC_SetPriority+0xd4>)
 800438a:	1dfb      	adds	r3, r7, #7
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	b25b      	sxtb	r3, r3
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	430a      	orrs	r2, r1
 8004394:	33c0      	adds	r3, #192	@ 0xc0
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800439a:	e031      	b.n	8004400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800439c:	4a1b      	ldr	r2, [pc, #108]	@ (800440c <__NVIC_SetPriority+0xd8>)
 800439e:	1dfb      	adds	r3, r7, #7
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	0019      	movs	r1, r3
 80043a4:	230f      	movs	r3, #15
 80043a6:	400b      	ands	r3, r1
 80043a8:	3b08      	subs	r3, #8
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3306      	adds	r3, #6
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	18d3      	adds	r3, r2, r3
 80043b2:	3304      	adds	r3, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	1dfa      	adds	r2, r7, #7
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	0011      	movs	r1, r2
 80043bc:	2203      	movs	r2, #3
 80043be:	400a      	ands	r2, r1
 80043c0:	00d2      	lsls	r2, r2, #3
 80043c2:	21ff      	movs	r1, #255	@ 0xff
 80043c4:	4091      	lsls	r1, r2
 80043c6:	000a      	movs	r2, r1
 80043c8:	43d2      	mvns	r2, r2
 80043ca:	401a      	ands	r2, r3
 80043cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	22ff      	movs	r2, #255	@ 0xff
 80043d4:	401a      	ands	r2, r3
 80043d6:	1dfb      	adds	r3, r7, #7
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	0018      	movs	r0, r3
 80043dc:	2303      	movs	r3, #3
 80043de:	4003      	ands	r3, r0
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043e4:	4809      	ldr	r0, [pc, #36]	@ (800440c <__NVIC_SetPriority+0xd8>)
 80043e6:	1dfb      	adds	r3, r7, #7
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	001c      	movs	r4, r3
 80043ec:	230f      	movs	r3, #15
 80043ee:	4023      	ands	r3, r4
 80043f0:	3b08      	subs	r3, #8
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	430a      	orrs	r2, r1
 80043f6:	3306      	adds	r3, #6
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	18c3      	adds	r3, r0, r3
 80043fc:	3304      	adds	r3, #4
 80043fe:	601a      	str	r2, [r3, #0]
}
 8004400:	46c0      	nop			@ (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	b003      	add	sp, #12
 8004406:	bd90      	pop	{r4, r7, pc}
 8004408:	e000e100 	.word	0xe000e100
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	1e5a      	subs	r2, r3, #1
 800441c:	2380      	movs	r3, #128	@ 0x80
 800441e:	045b      	lsls	r3, r3, #17
 8004420:	429a      	cmp	r2, r3
 8004422:	d301      	bcc.n	8004428 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004424:	2301      	movs	r3, #1
 8004426:	e010      	b.n	800444a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004428:	4b0a      	ldr	r3, [pc, #40]	@ (8004454 <SysTick_Config+0x44>)
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	3a01      	subs	r2, #1
 800442e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004430:	2301      	movs	r3, #1
 8004432:	425b      	negs	r3, r3
 8004434:	2103      	movs	r1, #3
 8004436:	0018      	movs	r0, r3
 8004438:	f7ff ff7c 	bl	8004334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800443c:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <SysTick_Config+0x44>)
 800443e:	2200      	movs	r2, #0
 8004440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004442:	4b04      	ldr	r3, [pc, #16]	@ (8004454 <SysTick_Config+0x44>)
 8004444:	2207      	movs	r2, #7
 8004446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004448:	2300      	movs	r3, #0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b002      	add	sp, #8
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	e000e010 	.word	0xe000e010

08004458 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	210f      	movs	r1, #15
 8004464:	187b      	adds	r3, r7, r1
 8004466:	1c02      	adds	r2, r0, #0
 8004468:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	187b      	adds	r3, r7, r1
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b25b      	sxtb	r3, r3
 8004472:	0011      	movs	r1, r2
 8004474:	0018      	movs	r0, r3
 8004476:	f7ff ff5d 	bl	8004334 <__NVIC_SetPriority>
}
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b004      	add	sp, #16
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	0002      	movs	r2, r0
 800448a:	1dfb      	adds	r3, r7, #7
 800448c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800448e:	1dfb      	adds	r3, r7, #7
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	b25b      	sxtb	r3, r3
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff ff33 	bl	8004300 <__NVIC_EnableIRQ>
}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b002      	add	sp, #8
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7ff ffaf 	bl	8004410 <SysTick_Config>
 80044b2:	0003      	movs	r3, r0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e14e      	b.n	800476c <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	225c      	movs	r2, #92	@ 0x5c
 80044d2:	5c9b      	ldrb	r3, [r3, r2]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d107      	bne.n	80044ea <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	225d      	movs	r2, #93	@ 0x5d
 80044de:	2100      	movs	r1, #0
 80044e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7ff fc51 	bl	8003d8c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699a      	ldr	r2, [r3, #24]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2110      	movs	r1, #16
 80044f6:	438a      	bics	r2, r1
 80044f8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044fa:	f7ff febd 	bl	8004278 <HAL_GetTick>
 80044fe:	0003      	movs	r3, r0
 8004500:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004502:	e012      	b.n	800452a <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004504:	f7ff feb8 	bl	8004278 <HAL_GetTick>
 8004508:	0002      	movs	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b0a      	cmp	r3, #10
 8004510:	d90b      	bls.n	800452a <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004516:	2201      	movs	r2, #1
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	225c      	movs	r2, #92	@ 0x5c
 8004522:	2103      	movs	r1, #3
 8004524:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e120      	b.n	800476c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2208      	movs	r2, #8
 8004532:	4013      	ands	r3, r2
 8004534:	2b08      	cmp	r3, #8
 8004536:	d0e5      	beq.n	8004504 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2101      	movs	r1, #1
 8004544:	430a      	orrs	r2, r1
 8004546:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004548:	f7ff fe96 	bl	8004278 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004550:	e012      	b.n	8004578 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004552:	f7ff fe91 	bl	8004278 <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b0a      	cmp	r3, #10
 800455e:	d90b      	bls.n	8004578 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004564:	2201      	movs	r2, #1
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	225c      	movs	r2, #92	@ 0x5c
 8004570:	2103      	movs	r1, #3
 8004572:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0f9      	b.n	800476c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2201      	movs	r2, #1
 8004580:	4013      	ands	r3, r2
 8004582:	d0e6      	beq.n	8004552 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2102      	movs	r1, #2
 8004590:	430a      	orrs	r2, r1
 8004592:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a76      	ldr	r2, [pc, #472]	@ (8004774 <HAL_FDCAN_Init+0x2b8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d103      	bne.n	80045a6 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800459e:	4a76      	ldr	r2, [pc, #472]	@ (8004778 <HAL_FDCAN_Init+0x2bc>)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7c1b      	ldrb	r3, [r3, #16]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d108      	bne.n	80045c0 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2140      	movs	r1, #64	@ 0x40
 80045ba:	438a      	bics	r2, r1
 80045bc:	619a      	str	r2, [r3, #24]
 80045be:	e007      	b.n	80045d0 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2140      	movs	r1, #64	@ 0x40
 80045cc:	430a      	orrs	r2, r1
 80045ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	7c5b      	ldrb	r3, [r3, #17]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d109      	bne.n	80045ec <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2180      	movs	r1, #128	@ 0x80
 80045e4:	01c9      	lsls	r1, r1, #7
 80045e6:	430a      	orrs	r2, r1
 80045e8:	619a      	str	r2, [r3, #24]
 80045ea:	e007      	b.n	80045fc <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4961      	ldr	r1, [pc, #388]	@ (800477c <HAL_FDCAN_Init+0x2c0>)
 80045f8:	400a      	ands	r2, r1
 80045fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	7c9b      	ldrb	r3, [r3, #18]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d108      	bne.n	8004616 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	495c      	ldr	r1, [pc, #368]	@ (8004780 <HAL_FDCAN_Init+0x2c4>)
 8004610:	400a      	ands	r2, r1
 8004612:	619a      	str	r2, [r3, #24]
 8004614:	e008      	b.n	8004628 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2180      	movs	r1, #128	@ 0x80
 8004622:	0149      	lsls	r1, r1, #5
 8004624:	430a      	orrs	r2, r1
 8004626:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	4a55      	ldr	r2, [pc, #340]	@ (8004784 <HAL_FDCAN_Init+0x2c8>)
 8004630:	4013      	ands	r3, r2
 8004632:	0019      	movs	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	21a4      	movs	r1, #164	@ 0xa4
 800464c:	438a      	bics	r2, r1
 800464e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2110      	movs	r1, #16
 800465c:	438a      	bics	r2, r1
 800465e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d108      	bne.n	800467a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2104      	movs	r1, #4
 8004674:	430a      	orrs	r2, r1
 8004676:	619a      	str	r2, [r3, #24]
 8004678:	e02c      	b.n	80046d4 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d028      	beq.n	80046d4 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d01c      	beq.n	80046c4 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2180      	movs	r1, #128	@ 0x80
 8004696:	430a      	orrs	r2, r1
 8004698:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2110      	movs	r1, #16
 80046a6:	430a      	orrs	r2, r1
 80046a8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d110      	bne.n	80046d4 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2120      	movs	r1, #32
 80046be:	430a      	orrs	r2, r1
 80046c0:	619a      	str	r2, [r3, #24]
 80046c2:	e007      	b.n	80046d4 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2120      	movs	r1, #32
 80046d0:	430a      	orrs	r2, r1
 80046d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	3b01      	subs	r3, #1
 80046da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046ec:	431a      	orrs	r2, r3
 80046ee:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	23c0      	movs	r3, #192	@ 0xc0
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	429a      	cmp	r2, r3
 800470a:	d115      	bne.n	8004738 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004716:	3b01      	subs	r3, #1
 8004718:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800471a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	3b01      	subs	r3, #1
 8004722:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004724:	431a      	orrs	r2, r3
 8004726:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	3b01      	subs	r3, #1
 800472e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004734:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004736:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	22c0      	movs	r2, #192	@ 0xc0
 800473e:	5899      	ldr	r1, [r3, r2]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	21c0      	movs	r1, #192	@ 0xc0
 800474c:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 f895 	bl	8004880 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	225c      	movs	r2, #92	@ 0x5c
 8004766:	2101      	movs	r1, #1
 8004768:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b004      	add	sp, #16
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40006400 	.word	0x40006400
 8004778:	40006500 	.word	0x40006500
 800477c:	ffffbfff 	.word	0xffffbfff
 8004780:	ffffefff 	.word	0xffffefff
 8004784:	fffffcff 	.word	0xfffffcff

08004788 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	225c      	movs	r2, #92	@ 0x5c
 8004794:	5c9b      	ldrb	r3, [r3, r2]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d110      	bne.n	80047be <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	225c      	movs	r2, #92	@ 0x5c
 80047a0:	2102      	movs	r1, #2
 80047a2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2101      	movs	r1, #1
 80047b0:	438a      	bics	r2, r1
 80047b2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e006      	b.n	80047cc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c2:	2204      	movs	r2, #4
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
  }
}
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b002      	add	sp, #8
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	225c      	movs	r2, #92	@ 0x5c
 80047e4:	5c9b      	ldrb	r3, [r3, r2]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d12d      	bne.n	8004848 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	22c4      	movs	r2, #196	@ 0xc4
 80047f2:	589a      	ldr	r2, [r3, r2]
 80047f4:	2380      	movs	r3, #128	@ 0x80
 80047f6:	039b      	lsls	r3, r3, #14
 80047f8:	4013      	ands	r3, r2
 80047fa:	d008      	beq.n	800480e <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004800:	2280      	movs	r2, #128	@ 0x80
 8004802:	0092      	lsls	r2, r2, #2
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e023      	b.n	8004856 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	22c4      	movs	r2, #196	@ 0xc4
 8004814:	589b      	ldr	r3, [r3, r2]
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	2203      	movs	r2, #3
 800481a:	4013      	ands	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f897 	bl	8004958 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2101      	movs	r1, #1
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4091      	lsls	r1, r2
 8004834:	000a      	movs	r2, r1
 8004836:	21cc      	movs	r1, #204	@ 0xcc
 8004838:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800483a:	2201      	movs	r2, #1
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	409a      	lsls	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e006      	b.n	8004856 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800484c:	2208      	movs	r2, #8
 800484e:	431a      	orrs	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
  }
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b006      	add	sp, #24
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	22c4      	movs	r2, #196	@ 0xc4
 800486c:	589b      	ldr	r3, [r3, r2]
 800486e:	2207      	movs	r2, #7
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8004874:	68fb      	ldr	r3, [r7, #12]
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b004      	add	sp, #16
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004888:	4b2f      	ldr	r3, [pc, #188]	@ (8004948 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 800488a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2e      	ldr	r2, [pc, #184]	@ (800494c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d105      	bne.n	80048a2 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	22d4      	movs	r2, #212	@ 0xd4
 800489a:	0092      	lsls	r2, r2, #2
 800489c:	4694      	mov	ip, r2
 800489e:	4463      	add	r3, ip
 80048a0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2280      	movs	r2, #128	@ 0x80
 80048ae:	589b      	ldr	r3, [r3, r2]
 80048b0:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	0019      	movs	r1, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ba:	041a      	lsls	r2, r3, #16
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	2180      	movs	r1, #128	@ 0x80
 80048c4:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	3370      	adds	r3, #112	@ 0x70
 80048ca:	001a      	movs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2280      	movs	r2, #128	@ 0x80
 80048d6:	589b      	ldr	r3, [r3, r2]
 80048d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004954 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80048da:	4013      	ands	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	061a      	lsls	r2, r3, #24
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	2180      	movs	r1, #128	@ 0x80
 80048ec:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	33b0      	adds	r3, #176	@ 0xb0
 80048f2:	001a      	movs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	3389      	adds	r3, #137	@ 0x89
 80048fc:	33ff      	adds	r3, #255	@ 0xff
 80048fe:	001a      	movs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2298      	movs	r2, #152	@ 0x98
 8004908:	0092      	lsls	r2, r2, #2
 800490a:	189a      	adds	r2, r3, r2
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	229e      	movs	r2, #158	@ 0x9e
 8004914:	0092      	lsls	r2, r2, #2
 8004916:	189a      	adds	r2, r3, r2
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e005      	b.n	800492e <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3304      	adds	r3, #4
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	22d4      	movs	r2, #212	@ 0xd4
 8004932:	0092      	lsls	r2, r2, #2
 8004934:	4694      	mov	ip, r2
 8004936:	4463      	add	r3, ip
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	429a      	cmp	r2, r3
 800493c:	d3f1      	bcc.n	8004922 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	46bd      	mov	sp, r7
 8004944:	b004      	add	sp, #16
 8004946:	bd80      	pop	{r7, pc}
 8004948:	4000b400 	.word	0x4000b400
 800494c:	40006800 	.word	0x40006800
 8004950:	ffe0ffff 	.word	0xffe0ffff
 8004954:	f0ffffff 	.word	0xf0ffffff

08004958 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004976:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800497e:	4313      	orrs	r3, r2
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e00b      	b.n	800499c <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800498c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004992:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004994:	2280      	movs	r2, #128	@ 0x80
 8004996:	05d2      	lsls	r2, r2, #23
 8004998:	4313      	orrs	r3, r2
 800499a:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80049a6:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80049ac:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80049b2:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	0013      	movs	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	189b      	adds	r3, r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	18cb      	adds	r3, r1, r3
 80049ce:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	3304      	adds	r3, #4
 80049da:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	3304      	adds	r3, #4
 80049e6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e020      	b.n	8004a30 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	3303      	adds	r3, #3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	18d3      	adds	r3, r2, r3
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	3302      	adds	r3, #2
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	18cb      	adds	r3, r1, r3
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a06:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	18cb      	adds	r3, r1, r3
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004a14:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	188a      	adds	r2, r1, r2
 8004a1c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004a1e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	3304      	adds	r3, #4
 8004a28:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a05      	ldr	r2, [pc, #20]	@ (8004a4c <FDCAN_CopyMessageToRAM+0xf4>)
 8004a36:	5cd3      	ldrb	r3, [r2, r3]
 8004a38:	001a      	movs	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d3d6      	bcc.n	80049ee <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004a40:	46c0      	nop			@ (mov r8, r8)
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b008      	add	sp, #32
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	08008cb0 	.word	0x08008cb0

08004a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a5e:	e14d      	b.n	8004cfc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2101      	movs	r1, #1
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4091      	lsls	r1, r2
 8004a6a:	000a      	movs	r2, r1
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d100      	bne.n	8004a78 <HAL_GPIO_Init+0x28>
 8004a76:	e13e      	b.n	8004cf6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d005      	beq.n	8004a90 <HAL_GPIO_Init+0x40>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2203      	movs	r2, #3
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d130      	bne.n	8004af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	0013      	movs	r3, r2
 8004aa0:	43da      	mvns	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	0013      	movs	r3, r2
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	409a      	lsls	r2, r3
 8004acc:	0013      	movs	r3, r2
 8004ace:	43da      	mvns	r2, r3
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	091b      	lsrs	r3, r3, #4
 8004adc:	2201      	movs	r2, #1
 8004ade:	401a      	ands	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	0013      	movs	r3, r2
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2203      	movs	r2, #3
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d017      	beq.n	8004b2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	2203      	movs	r2, #3
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	0013      	movs	r3, r2
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	0013      	movs	r3, r2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2203      	movs	r2, #3
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d123      	bne.n	8004b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	08da      	lsrs	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3208      	adds	r2, #8
 8004b42:	0092      	lsls	r2, r2, #2
 8004b44:	58d3      	ldr	r3, [r2, r3]
 8004b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2207      	movs	r2, #7
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	220f      	movs	r2, #15
 8004b52:	409a      	lsls	r2, r3
 8004b54:	0013      	movs	r3, r2
 8004b56:	43da      	mvns	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2107      	movs	r1, #7
 8004b66:	400b      	ands	r3, r1
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	0013      	movs	r3, r2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	08da      	lsrs	r2, r3, #3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3208      	adds	r2, #8
 8004b7c:	0092      	lsls	r2, r2, #2
 8004b7e:	6939      	ldr	r1, [r7, #16]
 8004b80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	0013      	movs	r3, r2
 8004b92:	43da      	mvns	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4013      	ands	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	401a      	ands	r2, r3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	0013      	movs	r3, r2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	23c0      	movs	r3, #192	@ 0xc0
 8004bbc:	029b      	lsls	r3, r3, #10
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d100      	bne.n	8004bc4 <HAL_GPIO_Init+0x174>
 8004bc2:	e098      	b.n	8004cf6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004bc4:	4a53      	ldr	r2, [pc, #332]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	3318      	adds	r3, #24
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	589b      	ldr	r3, [r3, r2]
 8004bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	220f      	movs	r2, #15
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	0013      	movs	r3, r2
 8004be0:	43da      	mvns	r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	23a0      	movs	r3, #160	@ 0xa0
 8004bec:	05db      	lsls	r3, r3, #23
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d019      	beq.n	8004c26 <HAL_GPIO_Init+0x1d6>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a48      	ldr	r2, [pc, #288]	@ (8004d18 <HAL_GPIO_Init+0x2c8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <HAL_GPIO_Init+0x1d2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a47      	ldr	r2, [pc, #284]	@ (8004d1c <HAL_GPIO_Init+0x2cc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00d      	beq.n	8004c1e <HAL_GPIO_Init+0x1ce>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a46      	ldr	r2, [pc, #280]	@ (8004d20 <HAL_GPIO_Init+0x2d0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <HAL_GPIO_Init+0x1ca>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a45      	ldr	r2, [pc, #276]	@ (8004d24 <HAL_GPIO_Init+0x2d4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d101      	bne.n	8004c16 <HAL_GPIO_Init+0x1c6>
 8004c12:	2304      	movs	r3, #4
 8004c14:	e008      	b.n	8004c28 <HAL_GPIO_Init+0x1d8>
 8004c16:	2305      	movs	r3, #5
 8004c18:	e006      	b.n	8004c28 <HAL_GPIO_Init+0x1d8>
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e004      	b.n	8004c28 <HAL_GPIO_Init+0x1d8>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e002      	b.n	8004c28 <HAL_GPIO_Init+0x1d8>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_GPIO_Init+0x1d8>
 8004c26:	2300      	movs	r3, #0
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	2103      	movs	r1, #3
 8004c2c:	400a      	ands	r2, r1
 8004c2e:	00d2      	lsls	r2, r2, #3
 8004c30:	4093      	lsls	r3, r2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004c38:	4936      	ldr	r1, [pc, #216]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	089b      	lsrs	r3, r3, #2
 8004c3e:	3318      	adds	r3, #24
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c46:	4b33      	ldr	r3, [pc, #204]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	2380      	movs	r3, #128	@ 0x80
 8004c5c:	035b      	lsls	r3, r3, #13
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004c70:	4b28      	ldr	r3, [pc, #160]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43da      	mvns	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	2380      	movs	r3, #128	@ 0x80
 8004c86:	039b      	lsls	r3, r3, #14
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c94:	4b1f      	ldr	r3, [pc, #124]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004c9c:	2384      	movs	r3, #132	@ 0x84
 8004c9e:	58d3      	ldr	r3, [r2, r3]
 8004ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	43da      	mvns	r2, r3
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	029b      	lsls	r3, r3, #10
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cc0:	4914      	ldr	r1, [pc, #80]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004cc2:	2284      	movs	r2, #132	@ 0x84
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004cc8:	4a12      	ldr	r2, [pc, #72]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004cca:	2380      	movs	r3, #128	@ 0x80
 8004ccc:	58d3      	ldr	r3, [r2, r3]
 8004cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	025b      	lsls	r3, r3, #9
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d003      	beq.n	8004cee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cee:	4909      	ldr	r1, [pc, #36]	@ (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004cf0:	2280      	movs	r2, #128	@ 0x80
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	40da      	lsrs	r2, r3
 8004d04:	1e13      	subs	r3, r2, #0
 8004d06:	d000      	beq.n	8004d0a <HAL_GPIO_Init+0x2ba>
 8004d08:	e6aa      	b.n	8004a60 <HAL_GPIO_Init+0x10>
  }
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	46c0      	nop			@ (mov r8, r8)
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b006      	add	sp, #24
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021800 	.word	0x40021800
 8004d18:	50000400 	.word	0x50000400
 8004d1c:	50000800 	.word	0x50000800
 8004d20:	50000c00 	.word	0x50000c00
 8004d24:	50001000 	.word	0x50001000

08004d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	0008      	movs	r0, r1
 8004d32:	0011      	movs	r1, r2
 8004d34:	1cbb      	adds	r3, r7, #2
 8004d36:	1c02      	adds	r2, r0, #0
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	1c7b      	adds	r3, r7, #1
 8004d3c:	1c0a      	adds	r2, r1, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d40:	1c7b      	adds	r3, r7, #1
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d004      	beq.n	8004d52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d48:	1cbb      	adds	r3, r7, #2
 8004d4a:	881a      	ldrh	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d50:	e003      	b.n	8004d5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d52:	1cbb      	adds	r3, r7, #2
 8004d54:	881a      	ldrh	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b002      	add	sp, #8
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	000a      	movs	r2, r1
 8004d6c:	1cbb      	adds	r3, r7, #2
 8004d6e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d76:	1cbb      	adds	r3, r7, #2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	041a      	lsls	r2, r3, #16
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	43db      	mvns	r3, r3
 8004d84:	1cb9      	adds	r1, r7, #2
 8004d86:	8809      	ldrh	r1, [r1, #0]
 8004d88:	400b      	ands	r3, r1
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	619a      	str	r2, [r3, #24]
}
 8004d90:	46c0      	nop			@ (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b004      	add	sp, #16
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004da0:	4b19      	ldr	r3, [pc, #100]	@ (8004e08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a19      	ldr	r2, [pc, #100]	@ (8004e0c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	4b17      	ldr	r3, [pc, #92]	@ (8004e08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d11f      	bne.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004dbc:	4b14      	ldr	r3, [pc, #80]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	0013      	movs	r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	189b      	adds	r3, r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4912      	ldr	r1, [pc, #72]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f7fb f9a4 	bl	8000118 <__udivsi3>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dd6:	e008      	b.n	8004dea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e001      	b.n	8004dea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e009      	b.n	8004dfe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dea:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	2380      	movs	r3, #128	@ 0x80
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	401a      	ands	r2, r3
 8004df4:	2380      	movs	r3, #128	@ 0x80
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d0ed      	beq.n	8004dd8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b004      	add	sp, #16
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	40007000 	.word	0x40007000
 8004e0c:	fffff9ff 	.word	0xfffff9ff
 8004e10:	2000007c 	.word	0x2000007c
 8004e14:	000f4240 	.word	0x000f4240

08004e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f000 fb50 	bl	80054cc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2201      	movs	r2, #1
 8004e32:	4013      	ands	r3, r2
 8004e34:	d100      	bne.n	8004e38 <HAL_RCC_OscConfig+0x20>
 8004e36:	e07c      	b.n	8004f32 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e38:	4bc3      	ldr	r3, [pc, #780]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2238      	movs	r2, #56	@ 0x38
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e42:	4bc1      	ldr	r3, [pc, #772]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2203      	movs	r2, #3
 8004e48:	4013      	ands	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d102      	bne.n	8004e58 <HAL_RCC_OscConfig+0x40>
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d002      	beq.n	8004e5e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d10b      	bne.n	8004e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5e:	4bba      	ldr	r3, [pc, #744]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	029b      	lsls	r3, r3, #10
 8004e66:	4013      	ands	r3, r2
 8004e68:	d062      	beq.n	8004f30 <HAL_RCC_OscConfig+0x118>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d15e      	bne.n	8004f30 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e32a      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	2380      	movs	r3, #128	@ 0x80
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d107      	bne.n	8004e92 <HAL_RCC_OscConfig+0x7a>
 8004e82:	4bb1      	ldr	r3, [pc, #708]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4bb0      	ldr	r3, [pc, #704]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004e88:	2180      	movs	r1, #128	@ 0x80
 8004e8a:	0249      	lsls	r1, r1, #9
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e020      	b.n	8004ed4 <HAL_RCC_OscConfig+0xbc>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	23a0      	movs	r3, #160	@ 0xa0
 8004e98:	02db      	lsls	r3, r3, #11
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d10e      	bne.n	8004ebc <HAL_RCC_OscConfig+0xa4>
 8004e9e:	4baa      	ldr	r3, [pc, #680]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4ba9      	ldr	r3, [pc, #676]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004ea4:	2180      	movs	r1, #128	@ 0x80
 8004ea6:	02c9      	lsls	r1, r1, #11
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	4ba6      	ldr	r3, [pc, #664]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4ba5      	ldr	r3, [pc, #660]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004eb2:	2180      	movs	r1, #128	@ 0x80
 8004eb4:	0249      	lsls	r1, r1, #9
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCC_OscConfig+0xbc>
 8004ebc:	4ba2      	ldr	r3, [pc, #648]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004ec2:	49a2      	ldr	r1, [pc, #648]	@ (800514c <HAL_RCC_OscConfig+0x334>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	4b9f      	ldr	r3, [pc, #636]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4b9e      	ldr	r3, [pc, #632]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004ece:	49a0      	ldr	r1, [pc, #640]	@ (8005150 <HAL_RCC_OscConfig+0x338>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d014      	beq.n	8004f06 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7ff f9cc 	bl	8004278 <HAL_GetTick>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ee6:	f7ff f9c7 	bl	8004278 <HAL_GetTick>
 8004eea:	0002      	movs	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b64      	cmp	r3, #100	@ 0x64
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e2e9      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ef8:	4b93      	ldr	r3, [pc, #588]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	029b      	lsls	r3, r3, #10
 8004f00:	4013      	ands	r3, r2
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0xce>
 8004f04:	e015      	b.n	8004f32 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7ff f9b7 	bl	8004278 <HAL_GetTick>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f10:	f7ff f9b2 	bl	8004278 <HAL_GetTick>
 8004f14:	0002      	movs	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	@ 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e2d4      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f22:	4b89      	ldr	r3, [pc, #548]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	2380      	movs	r3, #128	@ 0x80
 8004f28:	029b      	lsls	r3, r3, #10
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0xf8>
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f30:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2202      	movs	r2, #2
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <HAL_RCC_OscConfig+0x126>
 8004f3c:	e099      	b.n	8005072 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3e:	4b82      	ldr	r3, [pc, #520]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2238      	movs	r2, #56	@ 0x38
 8004f44:	4013      	ands	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f48:	4b7f      	ldr	r3, [pc, #508]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	4013      	ands	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d102      	bne.n	8004f5e <HAL_RCC_OscConfig+0x146>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d002      	beq.n	8004f64 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d135      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f64:	4b78      	ldr	r3, [pc, #480]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	2380      	movs	r3, #128	@ 0x80
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_OscConfig+0x164>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e2a7      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7c:	4b72      	ldr	r3, [pc, #456]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4a74      	ldr	r2, [pc, #464]	@ (8005154 <HAL_RCC_OscConfig+0x33c>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	0019      	movs	r1, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	021a      	lsls	r2, r3, #8
 8004f8c:	4b6e      	ldr	r3, [pc, #440]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d112      	bne.n	8004fbe <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004f98:	4b6b      	ldr	r3, [pc, #428]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8005158 <HAL_RCC_OscConfig+0x340>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	4b68      	ldr	r3, [pc, #416]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004fac:	4b66      	ldr	r3, [pc, #408]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0adb      	lsrs	r3, r3, #11
 8004fb2:	2207      	movs	r2, #7
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	4a69      	ldr	r2, [pc, #420]	@ (800515c <HAL_RCC_OscConfig+0x344>)
 8004fb8:	40da      	lsrs	r2, r3
 8004fba:	4b69      	ldr	r3, [pc, #420]	@ (8005160 <HAL_RCC_OscConfig+0x348>)
 8004fbc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fbe:	4b69      	ldr	r3, [pc, #420]	@ (8005164 <HAL_RCC_OscConfig+0x34c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7ff f8fc 	bl	80041c0 <HAL_InitTick>
 8004fc8:	1e03      	subs	r3, r0, #0
 8004fca:	d051      	beq.n	8005070 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e27d      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d030      	beq.n	800503a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a5e      	ldr	r2, [pc, #376]	@ (8005158 <HAL_RCC_OscConfig+0x340>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	4b58      	ldr	r3, [pc, #352]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004fec:	4b56      	ldr	r3, [pc, #344]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b55      	ldr	r3, [pc, #340]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8004ff2:	2180      	movs	r1, #128	@ 0x80
 8004ff4:	0049      	lsls	r1, r1, #1
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7ff f93d 	bl	8004278 <HAL_GetTick>
 8004ffe:	0003      	movs	r3, r0
 8005000:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005004:	f7ff f938 	bl	8004278 <HAL_GetTick>
 8005008:	0002      	movs	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e25a      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005016:	4b4c      	ldr	r3, [pc, #304]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	2380      	movs	r3, #128	@ 0x80
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4013      	ands	r3, r2
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005022:	4b49      	ldr	r3, [pc, #292]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4a4b      	ldr	r2, [pc, #300]	@ (8005154 <HAL_RCC_OscConfig+0x33c>)
 8005028:	4013      	ands	r3, r2
 800502a:	0019      	movs	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	021a      	lsls	r2, r3, #8
 8005032:	4b45      	ldr	r3, [pc, #276]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
 8005038:	e01b      	b.n	8005072 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800503a:	4b43      	ldr	r3, [pc, #268]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b42      	ldr	r3, [pc, #264]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8005040:	4949      	ldr	r1, [pc, #292]	@ (8005168 <HAL_RCC_OscConfig+0x350>)
 8005042:	400a      	ands	r2, r1
 8005044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7ff f917 	bl	8004278 <HAL_GetTick>
 800504a:	0003      	movs	r3, r0
 800504c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005050:	f7ff f912 	bl	8004278 <HAL_GetTick>
 8005054:	0002      	movs	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e234      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005062:	4b39      	ldr	r3, [pc, #228]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	2380      	movs	r3, #128	@ 0x80
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4013      	ands	r3, r2
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x238>
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005070:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2208      	movs	r2, #8
 8005078:	4013      	ands	r3, r2
 800507a:	d047      	beq.n	800510c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800507c:	4b32      	ldr	r3, [pc, #200]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2238      	movs	r2, #56	@ 0x38
 8005082:	4013      	ands	r3, r2
 8005084:	2b18      	cmp	r3, #24
 8005086:	d10a      	bne.n	800509e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005088:	4b2f      	ldr	r3, [pc, #188]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 800508a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508c:	2202      	movs	r2, #2
 800508e:	4013      	ands	r3, r2
 8005090:	d03c      	beq.n	800510c <HAL_RCC_OscConfig+0x2f4>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d138      	bne.n	800510c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e216      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d019      	beq.n	80050da <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80050a6:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 80050a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050aa:	4b27      	ldr	r3, [pc, #156]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 80050ac:	2101      	movs	r1, #1
 80050ae:	430a      	orrs	r2, r1
 80050b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7ff f8e1 	bl	8004278 <HAL_GetTick>
 80050b6:	0003      	movs	r3, r0
 80050b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050bc:	f7ff f8dc 	bl	8004278 <HAL_GetTick>
 80050c0:	0002      	movs	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e1fe      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 80050d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d2:	2202      	movs	r2, #2
 80050d4:	4013      	ands	r3, r2
 80050d6:	d0f1      	beq.n	80050bc <HAL_RCC_OscConfig+0x2a4>
 80050d8:	e018      	b.n	800510c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80050da:	4b1b      	ldr	r3, [pc, #108]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 80050dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050de:	4b1a      	ldr	r3, [pc, #104]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 80050e0:	2101      	movs	r1, #1
 80050e2:	438a      	bics	r2, r1
 80050e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e6:	f7ff f8c7 	bl	8004278 <HAL_GetTick>
 80050ea:	0003      	movs	r3, r0
 80050ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f0:	f7ff f8c2 	bl	8004278 <HAL_GetTick>
 80050f4:	0002      	movs	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e1e4      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005102:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8005104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005106:	2202      	movs	r2, #2
 8005108:	4013      	ands	r3, r2
 800510a:	d1f1      	bne.n	80050f0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2204      	movs	r2, #4
 8005112:	4013      	ands	r3, r2
 8005114:	d100      	bne.n	8005118 <HAL_RCC_OscConfig+0x300>
 8005116:	e0c7      	b.n	80052a8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005118:	231f      	movs	r3, #31
 800511a:	18fb      	adds	r3, r7, r3
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005120:	4b09      	ldr	r3, [pc, #36]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2238      	movs	r2, #56	@ 0x38
 8005126:	4013      	ands	r3, r2
 8005128:	2b20      	cmp	r3, #32
 800512a:	d11f      	bne.n	800516c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800512c:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <HAL_RCC_OscConfig+0x330>)
 800512e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005130:	2202      	movs	r2, #2
 8005132:	4013      	ands	r3, r2
 8005134:	d100      	bne.n	8005138 <HAL_RCC_OscConfig+0x320>
 8005136:	e0b7      	b.n	80052a8 <HAL_RCC_OscConfig+0x490>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d000      	beq.n	8005142 <HAL_RCC_OscConfig+0x32a>
 8005140:	e0b2      	b.n	80052a8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e1c2      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	40021000 	.word	0x40021000
 800514c:	fffeffff 	.word	0xfffeffff
 8005150:	fffbffff 	.word	0xfffbffff
 8005154:	ffff80ff 	.word	0xffff80ff
 8005158:	ffffc7ff 	.word	0xffffc7ff
 800515c:	00f42400 	.word	0x00f42400
 8005160:	2000007c 	.word	0x2000007c
 8005164:	20000080 	.word	0x20000080
 8005168:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800516c:	4bb5      	ldr	r3, [pc, #724]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800516e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	055b      	lsls	r3, r3, #21
 8005174:	4013      	ands	r3, r2
 8005176:	d101      	bne.n	800517c <HAL_RCC_OscConfig+0x364>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x366>
 800517c:	2300      	movs	r3, #0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d011      	beq.n	80051a6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005182:	4bb0      	ldr	r3, [pc, #704]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005184:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005186:	4baf      	ldr	r3, [pc, #700]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005188:	2180      	movs	r1, #128	@ 0x80
 800518a:	0549      	lsls	r1, r1, #21
 800518c:	430a      	orrs	r2, r1
 800518e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005190:	4bac      	ldr	r3, [pc, #688]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005192:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	055b      	lsls	r3, r3, #21
 8005198:	4013      	ands	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800519e:	231f      	movs	r3, #31
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	2201      	movs	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a6:	4ba8      	ldr	r3, [pc, #672]	@ (8005448 <HAL_RCC_OscConfig+0x630>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	2380      	movs	r3, #128	@ 0x80
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	4013      	ands	r3, r2
 80051b0:	d11a      	bne.n	80051e8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051b2:	4ba5      	ldr	r3, [pc, #660]	@ (8005448 <HAL_RCC_OscConfig+0x630>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4ba4      	ldr	r3, [pc, #656]	@ (8005448 <HAL_RCC_OscConfig+0x630>)
 80051b8:	2180      	movs	r1, #128	@ 0x80
 80051ba:	0049      	lsls	r1, r1, #1
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80051c0:	f7ff f85a 	bl	8004278 <HAL_GetTick>
 80051c4:	0003      	movs	r3, r0
 80051c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ca:	f7ff f855 	bl	8004278 <HAL_GetTick>
 80051ce:	0002      	movs	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e177      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051dc:	4b9a      	ldr	r3, [pc, #616]	@ (8005448 <HAL_RCC_OscConfig+0x630>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	2380      	movs	r3, #128	@ 0x80
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4013      	ands	r3, r2
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d106      	bne.n	80051fe <HAL_RCC_OscConfig+0x3e6>
 80051f0:	4b94      	ldr	r3, [pc, #592]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80051f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051f4:	4b93      	ldr	r3, [pc, #588]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80051f6:	2101      	movs	r1, #1
 80051f8:	430a      	orrs	r2, r1
 80051fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051fc:	e01c      	b.n	8005238 <HAL_RCC_OscConfig+0x420>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b05      	cmp	r3, #5
 8005204:	d10c      	bne.n	8005220 <HAL_RCC_OscConfig+0x408>
 8005206:	4b8f      	ldr	r3, [pc, #572]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005208:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800520a:	4b8e      	ldr	r3, [pc, #568]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800520c:	2104      	movs	r1, #4
 800520e:	430a      	orrs	r2, r1
 8005210:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005212:	4b8c      	ldr	r3, [pc, #560]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005214:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005216:	4b8b      	ldr	r3, [pc, #556]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005218:	2101      	movs	r1, #1
 800521a:	430a      	orrs	r2, r1
 800521c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800521e:	e00b      	b.n	8005238 <HAL_RCC_OscConfig+0x420>
 8005220:	4b88      	ldr	r3, [pc, #544]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005222:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005224:	4b87      	ldr	r3, [pc, #540]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005226:	2101      	movs	r1, #1
 8005228:	438a      	bics	r2, r1
 800522a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800522c:	4b85      	ldr	r3, [pc, #532]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800522e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005230:	4b84      	ldr	r3, [pc, #528]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005232:	2104      	movs	r1, #4
 8005234:	438a      	bics	r2, r1
 8005236:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d014      	beq.n	800526a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7ff f81a 	bl	8004278 <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005248:	e009      	b.n	800525e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524a:	f7ff f815 	bl	8004278 <HAL_GetTick>
 800524e:	0002      	movs	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	4a7d      	ldr	r2, [pc, #500]	@ (800544c <HAL_RCC_OscConfig+0x634>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e136      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800525e:	4b79      	ldr	r3, [pc, #484]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005262:	2202      	movs	r2, #2
 8005264:	4013      	ands	r3, r2
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x432>
 8005268:	e013      	b.n	8005292 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7ff f805 	bl	8004278 <HAL_GetTick>
 800526e:	0003      	movs	r3, r0
 8005270:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005272:	e009      	b.n	8005288 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7ff f800 	bl	8004278 <HAL_GetTick>
 8005278:	0002      	movs	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	4a73      	ldr	r2, [pc, #460]	@ (800544c <HAL_RCC_OscConfig+0x634>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e121      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005288:	4b6e      	ldr	r3, [pc, #440]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800528a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800528c:	2202      	movs	r2, #2
 800528e:	4013      	ands	r3, r2
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005292:	231f      	movs	r3, #31
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800529c:	4b69      	ldr	r3, [pc, #420]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800529e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052a0:	4b68      	ldr	r3, [pc, #416]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80052a2:	496b      	ldr	r1, [pc, #428]	@ (8005450 <HAL_RCC_OscConfig+0x638>)
 80052a4:	400a      	ands	r2, r1
 80052a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2220      	movs	r2, #32
 80052ae:	4013      	ands	r3, r2
 80052b0:	d039      	beq.n	8005326 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01b      	beq.n	80052f2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052ba:	4b62      	ldr	r3, [pc, #392]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b61      	ldr	r3, [pc, #388]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80052c0:	2180      	movs	r1, #128	@ 0x80
 80052c2:	03c9      	lsls	r1, r1, #15
 80052c4:	430a      	orrs	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c8:	f7fe ffd6 	bl	8004278 <HAL_GetTick>
 80052cc:	0003      	movs	r3, r0
 80052ce:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052d2:	f7fe ffd1 	bl	8004278 <HAL_GetTick>
 80052d6:	0002      	movs	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e0f3      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052e4:	4b57      	ldr	r3, [pc, #348]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	2380      	movs	r3, #128	@ 0x80
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	4013      	ands	r3, r2
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x4ba>
 80052f0:	e019      	b.n	8005326 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052f2:	4b54      	ldr	r3, [pc, #336]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4b53      	ldr	r3, [pc, #332]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80052f8:	4956      	ldr	r1, [pc, #344]	@ (8005454 <HAL_RCC_OscConfig+0x63c>)
 80052fa:	400a      	ands	r2, r1
 80052fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fe:	f7fe ffbb 	bl	8004278 <HAL_GetTick>
 8005302:	0003      	movs	r3, r0
 8005304:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005308:	f7fe ffb6 	bl	8004278 <HAL_GetTick>
 800530c:	0002      	movs	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0d8      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800531a:	4b4a      	ldr	r3, [pc, #296]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	2380      	movs	r3, #128	@ 0x80
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	4013      	ands	r3, r2
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d100      	bne.n	8005330 <HAL_RCC_OscConfig+0x518>
 800532e:	e0cc      	b.n	80054ca <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005330:	4b44      	ldr	r3, [pc, #272]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2238      	movs	r2, #56	@ 0x38
 8005336:	4013      	ands	r3, r2
 8005338:	2b10      	cmp	r3, #16
 800533a:	d100      	bne.n	800533e <HAL_RCC_OscConfig+0x526>
 800533c:	e07b      	b.n	8005436 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d156      	bne.n	80053f4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b3f      	ldr	r3, [pc, #252]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4b3e      	ldr	r3, [pc, #248]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800534c:	4942      	ldr	r1, [pc, #264]	@ (8005458 <HAL_RCC_OscConfig+0x640>)
 800534e:	400a      	ands	r2, r1
 8005350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005352:	f7fe ff91 	bl	8004278 <HAL_GetTick>
 8005356:	0003      	movs	r3, r0
 8005358:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535c:	f7fe ff8c 	bl	8004278 <HAL_GetTick>
 8005360:	0002      	movs	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e0ae      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800536e:	4b35      	ldr	r3, [pc, #212]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	2380      	movs	r3, #128	@ 0x80
 8005374:	049b      	lsls	r3, r3, #18
 8005376:	4013      	ands	r3, r2
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800537a:	4b32      	ldr	r3, [pc, #200]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	4a37      	ldr	r2, [pc, #220]	@ (800545c <HAL_RCC_OscConfig+0x644>)
 8005380:	4013      	ands	r3, r2
 8005382:	0019      	movs	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	431a      	orrs	r2, r3
 80053a8:	4b26      	ldr	r3, [pc, #152]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80053aa:	430a      	orrs	r2, r1
 80053ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ae:	4b25      	ldr	r3, [pc, #148]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b24      	ldr	r3, [pc, #144]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80053b4:	2180      	movs	r1, #128	@ 0x80
 80053b6:	0449      	lsls	r1, r1, #17
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80053bc:	4b21      	ldr	r3, [pc, #132]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	4b20      	ldr	r3, [pc, #128]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80053c2:	2180      	movs	r1, #128	@ 0x80
 80053c4:	0549      	lsls	r1, r1, #21
 80053c6:	430a      	orrs	r2, r1
 80053c8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fe ff55 	bl	8004278 <HAL_GetTick>
 80053ce:	0003      	movs	r3, r0
 80053d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d4:	f7fe ff50 	bl	8004278 <HAL_GetTick>
 80053d8:	0002      	movs	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e072      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053e6:	4b17      	ldr	r3, [pc, #92]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	2380      	movs	r3, #128	@ 0x80
 80053ec:	049b      	lsls	r3, r3, #18
 80053ee:	4013      	ands	r3, r2
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0x5bc>
 80053f2:	e06a      	b.n	80054ca <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f4:	4b13      	ldr	r3, [pc, #76]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 80053fa:	4917      	ldr	r1, [pc, #92]	@ (8005458 <HAL_RCC_OscConfig+0x640>)
 80053fc:	400a      	ands	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fe ff3a 	bl	8004278 <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540a:	f7fe ff35 	bl	8004278 <HAL_GetTick>
 800540e:	0002      	movs	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e057      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800541c:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	2380      	movs	r3, #128	@ 0x80
 8005422:	049b      	lsls	r3, r3, #18
 8005424:	4013      	ands	r3, r2
 8005426:	d1f0      	bne.n	800540a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005428:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_RCC_OscConfig+0x62c>)
 800542e:	490c      	ldr	r1, [pc, #48]	@ (8005460 <HAL_RCC_OscConfig+0x648>)
 8005430:	400a      	ands	r2, r1
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	e049      	b.n	80054ca <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d112      	bne.n	8005464 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e044      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	40021000 	.word	0x40021000
 8005448:	40007000 	.word	0x40007000
 800544c:	00001388 	.word	0x00001388
 8005450:	efffffff 	.word	0xefffffff
 8005454:	ffbfffff 	.word	0xffbfffff
 8005458:	feffffff 	.word	0xfeffffff
 800545c:	11c1808c 	.word	0x11c1808c
 8005460:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005464:	4b1b      	ldr	r3, [pc, #108]	@ (80054d4 <HAL_RCC_OscConfig+0x6bc>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2203      	movs	r2, #3
 800546e:	401a      	ands	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	429a      	cmp	r2, r3
 8005476:	d126      	bne.n	80054c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2270      	movs	r2, #112	@ 0x70
 800547c:	401a      	ands	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d11f      	bne.n	80054c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	23fe      	movs	r3, #254	@ 0xfe
 800548a:	01db      	lsls	r3, r3, #7
 800548c:	401a      	ands	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005492:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005494:	429a      	cmp	r2, r3
 8005496:	d116      	bne.n	80054c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	23f8      	movs	r3, #248	@ 0xf8
 800549c:	039b      	lsls	r3, r3, #14
 800549e:	401a      	ands	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d10e      	bne.n	80054c6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	23e0      	movs	r3, #224	@ 0xe0
 80054ac:	051b      	lsls	r3, r3, #20
 80054ae:	401a      	ands	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d106      	bne.n	80054c6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	0f5b      	lsrs	r3, r3, #29
 80054bc:	075a      	lsls	r2, r3, #29
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b008      	add	sp, #32
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40021000 	.word	0x40021000

080054d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0e9      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054ec:	4b76      	ldr	r3, [pc, #472]	@ (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2207      	movs	r2, #7
 80054f2:	4013      	ands	r3, r2
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d91e      	bls.n	8005538 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fa:	4b73      	ldr	r3, [pc, #460]	@ (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2207      	movs	r2, #7
 8005500:	4393      	bics	r3, r2
 8005502:	0019      	movs	r1, r3
 8005504:	4b70      	ldr	r3, [pc, #448]	@ (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800550c:	f7fe feb4 	bl	8004278 <HAL_GetTick>
 8005510:	0003      	movs	r3, r0
 8005512:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005514:	e009      	b.n	800552a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005516:	f7fe feaf 	bl	8004278 <HAL_GetTick>
 800551a:	0002      	movs	r2, r0
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	4a6a      	ldr	r2, [pc, #424]	@ (80056cc <HAL_RCC_ClockConfig+0x1f4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d901      	bls.n	800552a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0ca      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800552a:	4b67      	ldr	r3, [pc, #412]	@ (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2207      	movs	r2, #7
 8005530:	4013      	ands	r3, r2
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d1ee      	bne.n	8005516 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2202      	movs	r2, #2
 800553e:	4013      	ands	r3, r2
 8005540:	d015      	beq.n	800556e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2204      	movs	r2, #4
 8005548:	4013      	ands	r3, r2
 800554a:	d006      	beq.n	800555a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800554c:	4b60      	ldr	r3, [pc, #384]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	4b5f      	ldr	r3, [pc, #380]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005552:	21e0      	movs	r1, #224	@ 0xe0
 8005554:	01c9      	lsls	r1, r1, #7
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800555a:	4b5d      	ldr	r3, [pc, #372]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	4a5d      	ldr	r2, [pc, #372]	@ (80056d4 <HAL_RCC_ClockConfig+0x1fc>)
 8005560:	4013      	ands	r3, r2
 8005562:	0019      	movs	r1, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	4b59      	ldr	r3, [pc, #356]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 800556a:	430a      	orrs	r2, r1
 800556c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	4013      	ands	r3, r2
 8005576:	d057      	beq.n	8005628 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d107      	bne.n	8005590 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005580:	4b53      	ldr	r3, [pc, #332]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	2380      	movs	r3, #128	@ 0x80
 8005586:	029b      	lsls	r3, r3, #10
 8005588:	4013      	ands	r3, r2
 800558a:	d12b      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e097      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005598:	4b4d      	ldr	r3, [pc, #308]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	2380      	movs	r3, #128	@ 0x80
 800559e:	049b      	lsls	r3, r3, #18
 80055a0:	4013      	ands	r3, r2
 80055a2:	d11f      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e08b      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b0:	4b47      	ldr	r3, [pc, #284]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	2380      	movs	r3, #128	@ 0x80
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4013      	ands	r3, r2
 80055ba:	d113      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e07f      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d106      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055c8:	4b41      	ldr	r3, [pc, #260]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 80055ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055cc:	2202      	movs	r2, #2
 80055ce:	4013      	ands	r3, r2
 80055d0:	d108      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e074      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d6:	4b3e      	ldr	r3, [pc, #248]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	2202      	movs	r2, #2
 80055dc:	4013      	ands	r3, r2
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e06d      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055e4:	4b3a      	ldr	r3, [pc, #232]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2207      	movs	r2, #7
 80055ea:	4393      	bics	r3, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	4b37      	ldr	r3, [pc, #220]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 80055f4:	430a      	orrs	r2, r1
 80055f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f8:	f7fe fe3e 	bl	8004278 <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005600:	e009      	b.n	8005616 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005602:	f7fe fe39 	bl	8004278 <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	4a2f      	ldr	r2, [pc, #188]	@ (80056cc <HAL_RCC_ClockConfig+0x1f4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e054      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	4b2e      	ldr	r3, [pc, #184]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2238      	movs	r2, #56	@ 0x38
 800561c:	401a      	ands	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	429a      	cmp	r2, r3
 8005626:	d1ec      	bne.n	8005602 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005628:	4b27      	ldr	r3, [pc, #156]	@ (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2207      	movs	r2, #7
 800562e:	4013      	ands	r3, r2
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d21e      	bcs.n	8005674 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2207      	movs	r2, #7
 800563c:	4393      	bics	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	4b21      	ldr	r3, [pc, #132]	@ (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005648:	f7fe fe16 	bl	8004278 <HAL_GetTick>
 800564c:	0003      	movs	r3, r0
 800564e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005650:	e009      	b.n	8005666 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005652:	f7fe fe11 	bl	8004278 <HAL_GetTick>
 8005656:	0002      	movs	r2, r0
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <HAL_RCC_ClockConfig+0x1f4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e02c      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005666:	4b18      	ldr	r3, [pc, #96]	@ (80056c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2207      	movs	r2, #7
 800566c:	4013      	ands	r3, r2
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d1ee      	bne.n	8005652 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2204      	movs	r2, #4
 800567a:	4013      	ands	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800567e:	4b14      	ldr	r3, [pc, #80]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	4a15      	ldr	r2, [pc, #84]	@ (80056d8 <HAL_RCC_ClockConfig+0x200>)
 8005684:	4013      	ands	r3, r2
 8005686:	0019      	movs	r1, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	4b10      	ldr	r3, [pc, #64]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 800568e:	430a      	orrs	r2, r1
 8005690:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005692:	f000 f829 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 8005696:	0001      	movs	r1, r0
 8005698:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <HAL_RCC_ClockConfig+0x1f8>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	220f      	movs	r2, #15
 80056a0:	401a      	ands	r2, r3
 80056a2:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <HAL_RCC_ClockConfig+0x204>)
 80056a4:	0092      	lsls	r2, r2, #2
 80056a6:	58d3      	ldr	r3, [r2, r3]
 80056a8:	221f      	movs	r2, #31
 80056aa:	4013      	ands	r3, r2
 80056ac:	000a      	movs	r2, r1
 80056ae:	40da      	lsrs	r2, r3
 80056b0:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <HAL_RCC_ClockConfig+0x208>)
 80056b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056b4:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <HAL_RCC_ClockConfig+0x20c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f7fe fd81 	bl	80041c0 <HAL_InitTick>
 80056be:	0003      	movs	r3, r0
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b004      	add	sp, #16
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40022000 	.word	0x40022000
 80056cc:	00001388 	.word	0x00001388
 80056d0:	40021000 	.word	0x40021000
 80056d4:	fffff0ff 	.word	0xfffff0ff
 80056d8:	ffff8fff 	.word	0xffff8fff
 80056dc:	08008c70 	.word	0x08008c70
 80056e0:	2000007c 	.word	0x2000007c
 80056e4:	20000080 	.word	0x20000080

080056e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056ee:	4b3c      	ldr	r3, [pc, #240]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2238      	movs	r2, #56	@ 0x38
 80056f4:	4013      	ands	r3, r2
 80056f6:	d10f      	bne.n	8005718 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80056f8:	4b39      	ldr	r3, [pc, #228]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	0adb      	lsrs	r3, r3, #11
 80056fe:	2207      	movs	r2, #7
 8005700:	4013      	ands	r3, r2
 8005702:	2201      	movs	r2, #1
 8005704:	409a      	lsls	r2, r3
 8005706:	0013      	movs	r3, r2
 8005708:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	4835      	ldr	r0, [pc, #212]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800570e:	f7fa fd03 	bl	8000118 <__udivsi3>
 8005712:	0003      	movs	r3, r0
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e05d      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005718:	4b31      	ldr	r3, [pc, #196]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2238      	movs	r2, #56	@ 0x38
 800571e:	4013      	ands	r3, r2
 8005720:	2b08      	cmp	r3, #8
 8005722:	d102      	bne.n	800572a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005724:	4b30      	ldr	r3, [pc, #192]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	e054      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800572a:	4b2d      	ldr	r3, [pc, #180]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2238      	movs	r2, #56	@ 0x38
 8005730:	4013      	ands	r3, r2
 8005732:	2b10      	cmp	r3, #16
 8005734:	d138      	bne.n	80057a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005736:	4b2a      	ldr	r3, [pc, #168]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2203      	movs	r2, #3
 800573c:	4013      	ands	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005740:	4b27      	ldr	r3, [pc, #156]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	2207      	movs	r2, #7
 8005748:	4013      	ands	r3, r2
 800574a:	3301      	adds	r3, #1
 800574c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d10d      	bne.n	8005770 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	4824      	ldr	r0, [pc, #144]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005758:	f7fa fcde 	bl	8000118 <__udivsi3>
 800575c:	0003      	movs	r3, r0
 800575e:	0019      	movs	r1, r3
 8005760:	4b1f      	ldr	r3, [pc, #124]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	0a1b      	lsrs	r3, r3, #8
 8005766:	227f      	movs	r2, #127	@ 0x7f
 8005768:	4013      	ands	r3, r2
 800576a:	434b      	muls	r3, r1
 800576c:	617b      	str	r3, [r7, #20]
        break;
 800576e:	e00d      	b.n	800578c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	481c      	ldr	r0, [pc, #112]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005774:	f7fa fcd0 	bl	8000118 <__udivsi3>
 8005778:	0003      	movs	r3, r0
 800577a:	0019      	movs	r1, r3
 800577c:	4b18      	ldr	r3, [pc, #96]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	227f      	movs	r2, #127	@ 0x7f
 8005784:	4013      	ands	r3, r2
 8005786:	434b      	muls	r3, r1
 8005788:	617b      	str	r3, [r7, #20]
        break;
 800578a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800578c:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	0f5b      	lsrs	r3, r3, #29
 8005792:	2207      	movs	r2, #7
 8005794:	4013      	ands	r3, r2
 8005796:	3301      	adds	r3, #1
 8005798:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	6978      	ldr	r0, [r7, #20]
 800579e:	f7fa fcbb 	bl	8000118 <__udivsi3>
 80057a2:	0003      	movs	r3, r0
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	e015      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057a8:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	2238      	movs	r2, #56	@ 0x38
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d103      	bne.n	80057bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80057b4:	2380      	movs	r3, #128	@ 0x80
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	e00b      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80057bc:	4b08      	ldr	r3, [pc, #32]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2238      	movs	r2, #56	@ 0x38
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b18      	cmp	r3, #24
 80057c6:	d103      	bne.n	80057d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80057c8:	23fa      	movs	r3, #250	@ 0xfa
 80057ca:	01db      	lsls	r3, r3, #7
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	e001      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057d4:	693b      	ldr	r3, [r7, #16]
}
 80057d6:	0018      	movs	r0, r3
 80057d8:	46bd      	mov	sp, r7
 80057da:	b006      	add	sp, #24
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	40021000 	.word	0x40021000
 80057e4:	00f42400 	.word	0x00f42400
 80057e8:	007a1200 	.word	0x007a1200

080057ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80057f4:	2313      	movs	r3, #19
 80057f6:	18fb      	adds	r3, r7, r3
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057fc:	2312      	movs	r3, #18
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	2380      	movs	r3, #128	@ 0x80
 800580a:	029b      	lsls	r3, r3, #10
 800580c:	4013      	ands	r3, r2
 800580e:	d100      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005810:	e0ad      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005812:	2011      	movs	r0, #17
 8005814:	183b      	adds	r3, r7, r0
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800581a:	4b47      	ldr	r3, [pc, #284]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800581c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800581e:	2380      	movs	r3, #128	@ 0x80
 8005820:	055b      	lsls	r3, r3, #21
 8005822:	4013      	ands	r3, r2
 8005824:	d110      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005826:	4b44      	ldr	r3, [pc, #272]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800582a:	4b43      	ldr	r3, [pc, #268]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800582c:	2180      	movs	r1, #128	@ 0x80
 800582e:	0549      	lsls	r1, r1, #21
 8005830:	430a      	orrs	r2, r1
 8005832:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005834:	4b40      	ldr	r3, [pc, #256]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005838:	2380      	movs	r3, #128	@ 0x80
 800583a:	055b      	lsls	r3, r3, #21
 800583c:	4013      	ands	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005842:	183b      	adds	r3, r7, r0
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005848:	4b3c      	ldr	r3, [pc, #240]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b3b      	ldr	r3, [pc, #236]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800584e:	2180      	movs	r1, #128	@ 0x80
 8005850:	0049      	lsls	r1, r1, #1
 8005852:	430a      	orrs	r2, r1
 8005854:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005856:	f7fe fd0f 	bl	8004278 <HAL_GetTick>
 800585a:	0003      	movs	r3, r0
 800585c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800585e:	e00b      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005860:	f7fe fd0a 	bl	8004278 <HAL_GetTick>
 8005864:	0002      	movs	r2, r0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d904      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800586e:	2313      	movs	r3, #19
 8005870:	18fb      	adds	r3, r7, r3
 8005872:	2203      	movs	r2, #3
 8005874:	701a      	strb	r2, [r3, #0]
        break;
 8005876:	e005      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005878:	4b30      	ldr	r3, [pc, #192]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	2380      	movs	r3, #128	@ 0x80
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4013      	ands	r3, r2
 8005882:	d0ed      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005884:	2313      	movs	r3, #19
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d15e      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800588e:	4b2a      	ldr	r3, [pc, #168]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005890:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005892:	23c0      	movs	r3, #192	@ 0xc0
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4013      	ands	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d019      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d014      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058aa:	4b23      	ldr	r3, [pc, #140]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ae:	4a24      	ldr	r2, [pc, #144]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058b4:	4b20      	ldr	r3, [pc, #128]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80058b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058ba:	2180      	movs	r1, #128	@ 0x80
 80058bc:	0249      	lsls	r1, r1, #9
 80058be:	430a      	orrs	r2, r1
 80058c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80058c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058c8:	491e      	ldr	r1, [pc, #120]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80058ca:	400a      	ands	r2, r1
 80058cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2201      	movs	r2, #1
 80058d8:	4013      	ands	r3, r2
 80058da:	d016      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fe fccc 	bl	8004278 <HAL_GetTick>
 80058e0:	0003      	movs	r3, r0
 80058e2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e4:	e00c      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fe fcc7 	bl	8004278 <HAL_GetTick>
 80058ea:	0002      	movs	r2, r0
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d904      	bls.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80058f6:	2313      	movs	r3, #19
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	2203      	movs	r2, #3
 80058fc:	701a      	strb	r2, [r3, #0]
            break;
 80058fe:	e004      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005900:	4b0d      	ldr	r3, [pc, #52]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005904:	2202      	movs	r2, #2
 8005906:	4013      	ands	r3, r2
 8005908:	d0ed      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800590a:	2313      	movs	r3, #19
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005914:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005918:	4a09      	ldr	r2, [pc, #36]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800591a:	4013      	ands	r3, r2
 800591c:	0019      	movs	r1, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005922:	4b05      	ldr	r3, [pc, #20]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005924:	430a      	orrs	r2, r1
 8005926:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005928:	e016      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800592a:	2312      	movs	r3, #18
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	2213      	movs	r2, #19
 8005930:	18ba      	adds	r2, r7, r2
 8005932:	7812      	ldrb	r2, [r2, #0]
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e00f      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005938:	40021000 	.word	0x40021000
 800593c:	40007000 	.word	0x40007000
 8005940:	fffffcff 	.word	0xfffffcff
 8005944:	fffeffff 	.word	0xfffeffff
 8005948:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	2312      	movs	r3, #18
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	2213      	movs	r2, #19
 8005952:	18ba      	adds	r2, r7, r2
 8005954:	7812      	ldrb	r2, [r2, #0]
 8005956:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005958:	2311      	movs	r3, #17
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d105      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005962:	4bb6      	ldr	r3, [pc, #728]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005966:	4bb5      	ldr	r3, [pc, #724]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005968:	49b5      	ldr	r1, [pc, #724]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800596a:	400a      	ands	r2, r1
 800596c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	4013      	ands	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005978:	4bb0      	ldr	r3, [pc, #704]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800597a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597c:	2203      	movs	r2, #3
 800597e:	4393      	bics	r3, r2
 8005980:	0019      	movs	r1, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	4bad      	ldr	r3, [pc, #692]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005988:	430a      	orrs	r2, r1
 800598a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2202      	movs	r2, #2
 8005992:	4013      	ands	r3, r2
 8005994:	d009      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005996:	4ba9      	ldr	r3, [pc, #676]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599a:	220c      	movs	r2, #12
 800599c:	4393      	bics	r3, r2
 800599e:	0019      	movs	r1, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	4ba5      	ldr	r3, [pc, #660]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059a6:	430a      	orrs	r2, r1
 80059a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2204      	movs	r2, #4
 80059b0:	4013      	ands	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059b4:	4ba1      	ldr	r3, [pc, #644]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b8:	2230      	movs	r2, #48	@ 0x30
 80059ba:	4393      	bics	r3, r2
 80059bc:	0019      	movs	r1, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	4b9e      	ldr	r3, [pc, #632]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059c4:	430a      	orrs	r2, r1
 80059c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2210      	movs	r2, #16
 80059ce:	4013      	ands	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059d2:	4b9a      	ldr	r3, [pc, #616]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	4a9b      	ldr	r2, [pc, #620]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059d8:	4013      	ands	r3, r2
 80059da:	0019      	movs	r1, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	4b96      	ldr	r3, [pc, #600]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059e2:	430a      	orrs	r2, r1
 80059e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	2380      	movs	r3, #128	@ 0x80
 80059ec:	015b      	lsls	r3, r3, #5
 80059ee:	4013      	ands	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80059f2:	4b92      	ldr	r3, [pc, #584]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f6:	4a94      	ldr	r2, [pc, #592]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	0019      	movs	r1, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	4b8e      	ldr	r3, [pc, #568]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a02:	430a      	orrs	r2, r1
 8005a04:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	2380      	movs	r3, #128	@ 0x80
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a12:	4b8a      	ldr	r3, [pc, #552]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a16:	4a8d      	ldr	r2, [pc, #564]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a20:	4b86      	ldr	r3, [pc, #536]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a22:	430a      	orrs	r2, r1
 8005a24:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	2380      	movs	r3, #128	@ 0x80
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a32:	4b82      	ldr	r3, [pc, #520]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a36:	4a86      	ldr	r2, [pc, #536]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	0019      	movs	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a40:	4b7e      	ldr	r3, [pc, #504]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a42:	430a      	orrs	r2, r1
 8005a44:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a50:	4b7a      	ldr	r3, [pc, #488]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a54:	4a7f      	ldr	r2, [pc, #508]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	0019      	movs	r1, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	4b77      	ldr	r3, [pc, #476]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a60:	430a      	orrs	r2, r1
 8005a62:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2240      	movs	r2, #64	@ 0x40
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a6e:	4b73      	ldr	r3, [pc, #460]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a72:	4a79      	ldr	r2, [pc, #484]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	0019      	movs	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	2380      	movs	r3, #128	@ 0x80
 8005a88:	01db      	lsls	r3, r3, #7
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d015      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	0899      	lsrs	r1, r3, #2
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a9a:	4b68      	ldr	r3, [pc, #416]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aa4:	2380      	movs	r3, #128	@ 0x80
 8005aa6:	05db      	lsls	r3, r3, #23
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d106      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005aac:	4b63      	ldr	r3, [pc, #396]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	4b62      	ldr	r3, [pc, #392]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ab2:	2180      	movs	r1, #128	@ 0x80
 8005ab4:	0249      	lsls	r1, r1, #9
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	2380      	movs	r3, #128	@ 0x80
 8005ac0:	031b      	lsls	r3, r3, #12
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d009      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aca:	2240      	movs	r2, #64	@ 0x40
 8005acc:	4393      	bics	r3, r2
 8005ace:	0019      	movs	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ad4:	4b59      	ldr	r3, [pc, #356]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	2380      	movs	r3, #128	@ 0x80
 8005ae0:	039b      	lsls	r3, r3, #14
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d016      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ae6:	4b55      	ldr	r3, [pc, #340]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aea:	4a5c      	ldr	r2, [pc, #368]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	0019      	movs	r1, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005af4:	4b51      	ldr	r3, [pc, #324]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005af6:	430a      	orrs	r2, r1
 8005af8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005afe:	2380      	movs	r3, #128	@ 0x80
 8005b00:	03db      	lsls	r3, r3, #15
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d106      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b06:	4b4d      	ldr	r3, [pc, #308]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	4b4c      	ldr	r3, [pc, #304]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b0c:	2180      	movs	r1, #128	@ 0x80
 8005b0e:	0449      	lsls	r1, r1, #17
 8005b10:	430a      	orrs	r2, r1
 8005b12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	2380      	movs	r3, #128	@ 0x80
 8005b1a:	03db      	lsls	r3, r3, #15
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d016      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b20:	4b46      	ldr	r3, [pc, #280]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b24:	4a4e      	ldr	r2, [pc, #312]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	0019      	movs	r1, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b2e:	4b43      	ldr	r3, [pc, #268]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b30:	430a      	orrs	r2, r1
 8005b32:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b38:	2380      	movs	r3, #128	@ 0x80
 8005b3a:	045b      	lsls	r3, r3, #17
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b40:	4b3e      	ldr	r3, [pc, #248]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	4b3d      	ldr	r3, [pc, #244]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b46:	2180      	movs	r1, #128	@ 0x80
 8005b48:	0449      	lsls	r1, r1, #17
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	2380      	movs	r3, #128	@ 0x80
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	4013      	ands	r3, r2
 8005b58:	d014      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005b5a:	4b38      	ldr	r3, [pc, #224]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	2203      	movs	r2, #3
 8005b60:	4393      	bics	r3, r2
 8005b62:	0019      	movs	r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	4b34      	ldr	r3, [pc, #208]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d106      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005b76:	4b31      	ldr	r3, [pc, #196]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	4b30      	ldr	r3, [pc, #192]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b7c:	2180      	movs	r1, #128	@ 0x80
 8005b7e:	0249      	lsls	r1, r1, #9
 8005b80:	430a      	orrs	r2, r1
 8005b82:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	019b      	lsls	r3, r3, #6
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d014      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005b90:	4b2a      	ldr	r3, [pc, #168]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b94:	220c      	movs	r2, #12
 8005b96:	4393      	bics	r3, r2
 8005b98:	0019      	movs	r1, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b9e:	4b27      	ldr	r3, [pc, #156]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d106      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bac:	4b23      	ldr	r3, [pc, #140]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	4b22      	ldr	r3, [pc, #136]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bb2:	2180      	movs	r1, #128	@ 0x80
 8005bb4:	0249      	lsls	r1, r1, #9
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	045b      	lsls	r3, r3, #17
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d016      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bca:	4a22      	ldr	r2, [pc, #136]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	0019      	movs	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bd4:	4b19      	ldr	r3, [pc, #100]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bde:	2380      	movs	r3, #128	@ 0x80
 8005be0:	019b      	lsls	r3, r3, #6
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d106      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005be6:	4b15      	ldr	r3, [pc, #84]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	4b14      	ldr	r3, [pc, #80]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bec:	2180      	movs	r1, #128	@ 0x80
 8005bee:	0449      	lsls	r1, r1, #17
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	049b      	lsls	r3, r3, #18
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d016      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c00:	4b0e      	ldr	r3, [pc, #56]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c04:	4a10      	ldr	r2, [pc, #64]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	0019      	movs	r1, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c10:	430a      	orrs	r2, r1
 8005c12:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c18:	2380      	movs	r3, #128	@ 0x80
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d106      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c20:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	4b05      	ldr	r3, [pc, #20]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c26:	2180      	movs	r1, #128	@ 0x80
 8005c28:	0449      	lsls	r1, r1, #17
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005c2e:	2312      	movs	r3, #18
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	781b      	ldrb	r3, [r3, #0]
}
 8005c34:	0018      	movs	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b006      	add	sp, #24
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	efffffff 	.word	0xefffffff
 8005c44:	fffff3ff 	.word	0xfffff3ff
 8005c48:	fffffcff 	.word	0xfffffcff
 8005c4c:	fff3ffff 	.word	0xfff3ffff
 8005c50:	ffcfffff 	.word	0xffcfffff
 8005c54:	ffffcfff 	.word	0xffffcfff
 8005c58:	ffff3fff 	.word	0xffff3fff
 8005c5c:	ffbfffff 	.word	0xffbfffff
 8005c60:	feffffff 	.word	0xfeffffff

08005c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e0a8      	b.n	8005dc8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	2382      	movs	r3, #130	@ 0x82
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d009      	beq.n	8005c9e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	61da      	str	r2, [r3, #28]
 8005c90:	e005      	b.n	8005c9e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	225d      	movs	r2, #93	@ 0x5d
 8005ca8:	5c9b      	ldrb	r3, [r3, r2]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	225c      	movs	r2, #92	@ 0x5c
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7fe f8c8 	bl	8003e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	225d      	movs	r2, #93	@ 0x5d
 8005cc4:	2102      	movs	r1, #2
 8005cc6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2140      	movs	r1, #64	@ 0x40
 8005cd4:	438a      	bics	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	23e0      	movs	r3, #224	@ 0xe0
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d902      	bls.n	8005cea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	e002      	b.n	8005cf0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cea:	2380      	movs	r3, #128	@ 0x80
 8005cec:	015b      	lsls	r3, r3, #5
 8005cee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	23f0      	movs	r3, #240	@ 0xf0
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d008      	beq.n	8005d0e <HAL_SPI_Init+0xaa>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	23e0      	movs	r3, #224	@ 0xe0
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d002      	beq.n	8005d0e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	2382      	movs	r3, #130	@ 0x82
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	401a      	ands	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6899      	ldr	r1, [r3, #8]
 8005d1c:	2384      	movs	r3, #132	@ 0x84
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	400b      	ands	r3, r1
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2102      	movs	r1, #2
 8005d2a:	400b      	ands	r3, r1
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	2101      	movs	r1, #1
 8005d34:	400b      	ands	r3, r1
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6999      	ldr	r1, [r3, #24]
 8005d3c:	2380      	movs	r3, #128	@ 0x80
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	400b      	ands	r3, r1
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	2138      	movs	r1, #56	@ 0x38
 8005d4a:	400b      	ands	r3, r1
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	2180      	movs	r1, #128	@ 0x80
 8005d54:	400b      	ands	r3, r1
 8005d56:	431a      	orrs	r2, r3
 8005d58:	0011      	movs	r1, r2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d5e:	2380      	movs	r3, #128	@ 0x80
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	401a      	ands	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	0c1b      	lsrs	r3, r3, #16
 8005d72:	2204      	movs	r2, #4
 8005d74:	401a      	ands	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	2110      	movs	r1, #16
 8005d7c:	400b      	ands	r3, r1
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d84:	2108      	movs	r1, #8
 8005d86:	400b      	ands	r3, r1
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68d9      	ldr	r1, [r3, #12]
 8005d8e:	23f0      	movs	r3, #240	@ 0xf0
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	400b      	ands	r3, r1
 8005d94:	431a      	orrs	r2, r3
 8005d96:	0011      	movs	r1, r2
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	2380      	movs	r3, #128	@ 0x80
 8005d9c:	015b      	lsls	r3, r3, #5
 8005d9e:	401a      	ands	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4907      	ldr	r1, [pc, #28]	@ (8005dd0 <HAL_SPI_Init+0x16c>)
 8005db4:	400a      	ands	r2, r1
 8005db6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	225d      	movs	r2, #93	@ 0x5d
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	0018      	movs	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b004      	add	sp, #16
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	fffff7ff 	.word	0xfffff7ff

08005dd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	@ 0x28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	001a      	movs	r2, r3
 8005de2:	1cbb      	adds	r3, r7, #2
 8005de4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005de6:	2301      	movs	r3, #1
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005dea:	2323      	movs	r3, #35	@ 0x23
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	225c      	movs	r2, #92	@ 0x5c
 8005df6:	5c9b      	ldrb	r3, [r3, r2]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x2c>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e1c4      	b.n	800618a <HAL_SPI_TransmitReceive+0x3b6>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	225c      	movs	r2, #92	@ 0x5c
 8005e04:	2101      	movs	r1, #1
 8005e06:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e08:	f7fe fa36 	bl	8004278 <HAL_GetTick>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e10:	201b      	movs	r0, #27
 8005e12:	183b      	adds	r3, r7, r0
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	215d      	movs	r1, #93	@ 0x5d
 8005e18:	5c52      	ldrb	r2, [r2, r1]
 8005e1a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e22:	2312      	movs	r3, #18
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	1cba      	adds	r2, r7, #2
 8005e28:	8812      	ldrh	r2, [r2, #0]
 8005e2a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e2c:	183b      	adds	r3, r7, r0
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d011      	beq.n	8005e58 <HAL_SPI_TransmitReceive+0x84>
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	2382      	movs	r3, #130	@ 0x82
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d107      	bne.n	8005e4e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <HAL_SPI_TransmitReceive+0x7a>
 8005e46:	183b      	adds	r3, r7, r0
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d004      	beq.n	8005e58 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005e4e:	2323      	movs	r3, #35	@ 0x23
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	2202      	movs	r2, #2
 8005e54:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e56:	e191      	b.n	800617c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <HAL_SPI_TransmitReceive+0x98>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_SPI_TransmitReceive+0x98>
 8005e64:	1cbb      	adds	r3, r7, #2
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005e6c:	2323      	movs	r3, #35	@ 0x23
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e74:	e182      	b.n	800617c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	225d      	movs	r2, #93	@ 0x5d
 8005e7a:	5c9b      	ldrb	r3, [r3, r2]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d003      	beq.n	8005e8a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	225d      	movs	r2, #93	@ 0x5d
 8005e86:	2105      	movs	r1, #5
 8005e88:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1cba      	adds	r2, r7, #2
 8005e9a:	2146      	movs	r1, #70	@ 0x46
 8005e9c:	8812      	ldrh	r2, [r2, #0]
 8005e9e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	1cba      	adds	r2, r7, #2
 8005ea4:	2144      	movs	r1, #68	@ 0x44
 8005ea6:	8812      	ldrh	r2, [r2, #0]
 8005ea8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	1cba      	adds	r2, r7, #2
 8005eb4:	8812      	ldrh	r2, [r2, #0]
 8005eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	1cba      	adds	r2, r7, #2
 8005ebc:	8812      	ldrh	r2, [r2, #0]
 8005ebe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	23e0      	movs	r3, #224	@ 0xe0
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d908      	bls.n	8005eea <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	49ac      	ldr	r1, [pc, #688]	@ (8006194 <HAL_SPI_TransmitReceive+0x3c0>)
 8005ee4:	400a      	ands	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	e008      	b.n	8005efc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2180      	movs	r1, #128	@ 0x80
 8005ef6:	0149      	lsls	r1, r1, #5
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2240      	movs	r2, #64	@ 0x40
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b40      	cmp	r3, #64	@ 0x40
 8005f08:	d007      	beq.n	8005f1a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2140      	movs	r1, #64	@ 0x40
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	23e0      	movs	r3, #224	@ 0xe0
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d800      	bhi.n	8005f28 <HAL_SPI_TransmitReceive+0x154>
 8005f26:	e083      	b.n	8006030 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <HAL_SPI_TransmitReceive+0x168>
 8005f30:	2312      	movs	r3, #18
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d000      	beq.n	8005f3c <HAL_SPI_TransmitReceive+0x168>
 8005f3a:	e06d      	b.n	8006018 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	881a      	ldrh	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	1c9a      	adds	r2, r3, #2
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f60:	e05a      	b.n	8006018 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x1d4>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d016      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x1d4>
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d113      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	881a      	ldrh	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	1c9a      	adds	r2, r3, #2
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d11c      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x21c>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2246      	movs	r2, #70	@ 0x46
 8005fba:	5a9b      	ldrh	r3, [r3, r2]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	b292      	uxth	r2, r2
 8005fce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd4:	1c9a      	adds	r2, r3, #2
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2246      	movs	r2, #70	@ 0x46
 8005fde:	5a9b      	ldrh	r3, [r3, r2]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b299      	uxth	r1, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2246      	movs	r2, #70	@ 0x46
 8005fea:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fec:	2301      	movs	r3, #1
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ff0:	f7fe f942 	bl	8004278 <HAL_GetTick>
 8005ff4:	0002      	movs	r2, r0
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d80b      	bhi.n	8006018 <HAL_SPI_TransmitReceive+0x244>
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	3301      	adds	r3, #1
 8006004:	d008      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8006006:	2323      	movs	r3, #35	@ 0x23
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	2203      	movs	r2, #3
 800600c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	225d      	movs	r2, #93	@ 0x5d
 8006012:	2101      	movs	r1, #1
 8006014:	5499      	strb	r1, [r3, r2]
        goto error;
 8006016:	e0b1      	b.n	800617c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d19f      	bne.n	8005f62 <HAL_SPI_TransmitReceive+0x18e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2246      	movs	r2, #70	@ 0x46
 8006026:	5a9b      	ldrh	r3, [r3, r2]
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d199      	bne.n	8005f62 <HAL_SPI_TransmitReceive+0x18e>
 800602e:	e089      	b.n	8006144 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x270>
 8006038:	2312      	movs	r3, #18
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d000      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x270>
 8006042:	e074      	b.n	800612e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	330c      	adds	r3, #12
 800604e:	7812      	ldrb	r2, [r2, #0]
 8006050:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800606a:	e060      	b.n	800612e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2202      	movs	r2, #2
 8006074:	4013      	ands	r3, r2
 8006076:	2b02      	cmp	r3, #2
 8006078:	d11c      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x2e0>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d017      	beq.n	80060b4 <HAL_SPI_TransmitReceive+0x2e0>
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	2b01      	cmp	r3, #1
 8006088:	d114      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	330c      	adds	r3, #12
 8006094:	7812      	ldrb	r2, [r2, #0]
 8006096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2201      	movs	r2, #1
 80060bc:	4013      	ands	r3, r2
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d11e      	bne.n	8006100 <HAL_SPI_TransmitReceive+0x32c>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2246      	movs	r2, #70	@ 0x46
 80060c6:	5a9b      	ldrh	r3, [r3, r2]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d018      	beq.n	8006100 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	330c      	adds	r3, #12
 80060d4:	001a      	movs	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060da:	7812      	ldrb	r2, [r2, #0]
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2246      	movs	r2, #70	@ 0x46
 80060ee:	5a9b      	ldrh	r3, [r3, r2]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b299      	uxth	r1, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2246      	movs	r2, #70	@ 0x46
 80060fa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060fc:	2301      	movs	r3, #1
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006100:	f7fe f8ba 	bl	8004278 <HAL_GetTick>
 8006104:	0002      	movs	r2, r0
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800610c:	429a      	cmp	r2, r3
 800610e:	d802      	bhi.n	8006116 <HAL_SPI_TransmitReceive+0x342>
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	3301      	adds	r3, #1
 8006114:	d102      	bne.n	800611c <HAL_SPI_TransmitReceive+0x348>
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	2b00      	cmp	r3, #0
 800611a:	d108      	bne.n	800612e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800611c:	2323      	movs	r3, #35	@ 0x23
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	2203      	movs	r2, #3
 8006122:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	225d      	movs	r2, #93	@ 0x5d
 8006128:	2101      	movs	r1, #1
 800612a:	5499      	strb	r1, [r3, r2]
        goto error;
 800612c:	e026      	b.n	800617c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d199      	bne.n	800606c <HAL_SPI_TransmitReceive+0x298>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2246      	movs	r2, #70	@ 0x46
 800613c:	5a9b      	ldrh	r3, [r3, r2]
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d193      	bne.n	800606c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	0018      	movs	r0, r3
 800614c:	f000 f954 	bl	80063f8 <SPI_EndRxTxTransaction>
 8006150:	1e03      	subs	r3, r0, #0
 8006152:	d006      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8006154:	2323      	movs	r3, #35	@ 0x23
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800616a:	2323      	movs	r3, #35	@ 0x23
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	e003      	b.n	800617c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	225d      	movs	r2, #93	@ 0x5d
 8006178:	2101      	movs	r1, #1
 800617a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	225c      	movs	r2, #92	@ 0x5c
 8006180:	2100      	movs	r1, #0
 8006182:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006184:	2323      	movs	r3, #35	@ 0x23
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	781b      	ldrb	r3, [r3, #0]
}
 800618a:	0018      	movs	r0, r3
 800618c:	46bd      	mov	sp, r7
 800618e:	b00a      	add	sp, #40	@ 0x28
 8006190:	bd80      	pop	{r7, pc}
 8006192:	46c0      	nop			@ (mov r8, r8)
 8006194:	ffffefff 	.word	0xffffefff

08006198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	1dfb      	adds	r3, r7, #7
 80061a6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061a8:	f7fe f866 	bl	8004278 <HAL_GetTick>
 80061ac:	0002      	movs	r2, r0
 80061ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	18d3      	adds	r3, r2, r3
 80061b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061b8:	f7fe f85e 	bl	8004278 <HAL_GetTick>
 80061bc:	0003      	movs	r3, r0
 80061be:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061c0:	4b3a      	ldr	r3, [pc, #232]	@ (80062ac <SPI_WaitFlagStateUntilTimeout+0x114>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	015b      	lsls	r3, r3, #5
 80061c6:	0d1b      	lsrs	r3, r3, #20
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	4353      	muls	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ce:	e058      	b.n	8006282 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	d055      	beq.n	8006282 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d6:	f7fe f84f 	bl	8004278 <HAL_GetTick>
 80061da:	0002      	movs	r2, r0
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d902      	bls.n	80061ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d142      	bne.n	8006272 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	21e0      	movs	r1, #224	@ 0xe0
 80061f8:	438a      	bics	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	2382      	movs	r3, #130	@ 0x82
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	429a      	cmp	r2, r3
 8006206:	d113      	bne.n	8006230 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	2380      	movs	r3, #128	@ 0x80
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	429a      	cmp	r2, r3
 8006212:	d005      	beq.n	8006220 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	2380      	movs	r3, #128	@ 0x80
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	429a      	cmp	r2, r3
 800621e:	d107      	bne.n	8006230 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2140      	movs	r1, #64	@ 0x40
 800622c:	438a      	bics	r2, r1
 800622e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006234:	2380      	movs	r3, #128	@ 0x80
 8006236:	019b      	lsls	r3, r3, #6
 8006238:	429a      	cmp	r2, r3
 800623a:	d110      	bne.n	800625e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	491a      	ldr	r1, [pc, #104]	@ (80062b0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006248:	400a      	ands	r2, r1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2180      	movs	r1, #128	@ 0x80
 8006258:	0189      	lsls	r1, r1, #6
 800625a:	430a      	orrs	r2, r1
 800625c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	225d      	movs	r2, #93	@ 0x5d
 8006262:	2101      	movs	r1, #1
 8006264:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	225c      	movs	r2, #92	@ 0x5c
 800626a:	2100      	movs	r1, #0
 800626c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e017      	b.n	80062a2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	3b01      	subs	r3, #1
 8006280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	4013      	ands	r3, r2
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	425a      	negs	r2, r3
 8006292:	4153      	adcs	r3, r2
 8006294:	b2db      	uxtb	r3, r3
 8006296:	001a      	movs	r2, r3
 8006298:	1dfb      	adds	r3, r7, #7
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d197      	bne.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	0018      	movs	r0, r3
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b008      	add	sp, #32
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	46c0      	nop			@ (mov r8, r8)
 80062ac:	2000007c 	.word	0x2000007c
 80062b0:	ffffdfff 	.word	0xffffdfff

080062b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	@ 0x28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062c2:	2317      	movs	r3, #23
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062ca:	f7fd ffd5 	bl	8004278 <HAL_GetTick>
 80062ce:	0002      	movs	r2, r0
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	18d3      	adds	r3, r2, r3
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80062da:	f7fd ffcd 	bl	8004278 <HAL_GetTick>
 80062de:	0003      	movs	r3, r0
 80062e0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	330c      	adds	r3, #12
 80062e8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062ea:	4b41      	ldr	r3, [pc, #260]	@ (80063f0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	0013      	movs	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	189b      	adds	r3, r3, r2
 80062f4:	00da      	lsls	r2, r3, #3
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	0d1b      	lsrs	r3, r3, #20
 80062fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fc:	4353      	muls	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006300:	e068      	b.n	80063d4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	23c0      	movs	r3, #192	@ 0xc0
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	429a      	cmp	r2, r3
 800630a:	d10a      	bne.n	8006322 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d107      	bne.n	8006322 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	2117      	movs	r1, #23
 800631a:	187b      	adds	r3, r7, r1
 800631c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800631e:	187b      	adds	r3, r7, r1
 8006320:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	d055      	beq.n	80063d4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006328:	f7fd ffa6 	bl	8004278 <HAL_GetTick>
 800632c:	0002      	movs	r2, r0
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006334:	429a      	cmp	r2, r3
 8006336:	d902      	bls.n	800633e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d142      	bne.n	80063c4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	21e0      	movs	r1, #224	@ 0xe0
 800634a:	438a      	bics	r2, r1
 800634c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	2382      	movs	r3, #130	@ 0x82
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	429a      	cmp	r2, r3
 8006358:	d113      	bne.n	8006382 <SPI_WaitFifoStateUntilTimeout+0xce>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	2380      	movs	r3, #128	@ 0x80
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	429a      	cmp	r2, r3
 8006364:	d005      	beq.n	8006372 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	2380      	movs	r3, #128	@ 0x80
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	429a      	cmp	r2, r3
 8006370:	d107      	bne.n	8006382 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2140      	movs	r1, #64	@ 0x40
 800637e:	438a      	bics	r2, r1
 8006380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006386:	2380      	movs	r3, #128	@ 0x80
 8006388:	019b      	lsls	r3, r3, #6
 800638a:	429a      	cmp	r2, r3
 800638c:	d110      	bne.n	80063b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4916      	ldr	r1, [pc, #88]	@ (80063f4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800639a:	400a      	ands	r2, r1
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2180      	movs	r1, #128	@ 0x80
 80063aa:	0189      	lsls	r1, r1, #6
 80063ac:	430a      	orrs	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	225d      	movs	r2, #93	@ 0x5d
 80063b4:	2101      	movs	r1, #1
 80063b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	225c      	movs	r2, #92	@ 0x5c
 80063bc:	2100      	movs	r1, #0
 80063be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e010      	b.n	80063e6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4013      	ands	r3, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d18e      	bne.n	8006302 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	0018      	movs	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b00a      	add	sp, #40	@ 0x28
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	2000007c 	.word	0x2000007c
 80063f4:	ffffdfff 	.word	0xffffdfff

080063f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	23c0      	movs	r3, #192	@ 0xc0
 8006408:	0159      	lsls	r1, r3, #5
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	0013      	movs	r3, r2
 8006412:	2200      	movs	r2, #0
 8006414:	f7ff ff4e 	bl	80062b4 <SPI_WaitFifoStateUntilTimeout>
 8006418:	1e03      	subs	r3, r0, #0
 800641a:	d007      	beq.n	800642c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006420:	2220      	movs	r2, #32
 8006422:	431a      	orrs	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e027      	b.n	800647c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	0013      	movs	r3, r2
 8006436:	2200      	movs	r2, #0
 8006438:	2180      	movs	r1, #128	@ 0x80
 800643a:	f7ff fead 	bl	8006198 <SPI_WaitFlagStateUntilTimeout>
 800643e:	1e03      	subs	r3, r0, #0
 8006440:	d007      	beq.n	8006452 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006446:	2220      	movs	r2, #32
 8006448:	431a      	orrs	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e014      	b.n	800647c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	23c0      	movs	r3, #192	@ 0xc0
 8006456:	00d9      	lsls	r1, r3, #3
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	0013      	movs	r3, r2
 8006460:	2200      	movs	r2, #0
 8006462:	f7ff ff27 	bl	80062b4 <SPI_WaitFifoStateUntilTimeout>
 8006466:	1e03      	subs	r3, r0, #0
 8006468:	d007      	beq.n	800647a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646e:	2220      	movs	r2, #32
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e000      	b.n	800647c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	b004      	add	sp, #16
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e04a      	b.n	800652c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	223d      	movs	r2, #61	@ 0x3d
 800649a:	5c9b      	ldrb	r3, [r3, r2]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d107      	bne.n	80064b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	223c      	movs	r2, #60	@ 0x3c
 80064a6:	2100      	movs	r1, #0
 80064a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	0018      	movs	r0, r3
 80064ae:	f7fd fd2f 	bl	8003f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	223d      	movs	r2, #61	@ 0x3d
 80064b6:	2102      	movs	r1, #2
 80064b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3304      	adds	r3, #4
 80064c2:	0019      	movs	r1, r3
 80064c4:	0010      	movs	r0, r2
 80064c6:	f000 fa95 	bl	80069f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2248      	movs	r2, #72	@ 0x48
 80064ce:	2101      	movs	r1, #1
 80064d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	223e      	movs	r2, #62	@ 0x3e
 80064d6:	2101      	movs	r1, #1
 80064d8:	5499      	strb	r1, [r3, r2]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	223f      	movs	r2, #63	@ 0x3f
 80064de:	2101      	movs	r1, #1
 80064e0:	5499      	strb	r1, [r3, r2]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2240      	movs	r2, #64	@ 0x40
 80064e6:	2101      	movs	r1, #1
 80064e8:	5499      	strb	r1, [r3, r2]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2241      	movs	r2, #65	@ 0x41
 80064ee:	2101      	movs	r1, #1
 80064f0:	5499      	strb	r1, [r3, r2]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2242      	movs	r2, #66	@ 0x42
 80064f6:	2101      	movs	r1, #1
 80064f8:	5499      	strb	r1, [r3, r2]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2243      	movs	r2, #67	@ 0x43
 80064fe:	2101      	movs	r1, #1
 8006500:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2244      	movs	r2, #68	@ 0x44
 8006506:	2101      	movs	r1, #1
 8006508:	5499      	strb	r1, [r3, r2]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2245      	movs	r2, #69	@ 0x45
 800650e:	2101      	movs	r1, #1
 8006510:	5499      	strb	r1, [r3, r2]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2246      	movs	r2, #70	@ 0x46
 8006516:	2101      	movs	r1, #1
 8006518:	5499      	strb	r1, [r3, r2]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2247      	movs	r2, #71	@ 0x47
 800651e:	2101      	movs	r1, #1
 8006520:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	223d      	movs	r2, #61	@ 0x3d
 8006526:	2101      	movs	r1, #1
 8006528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	0018      	movs	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	b002      	add	sp, #8
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	223d      	movs	r2, #61	@ 0x3d
 8006540:	5c9b      	ldrb	r3, [r3, r2]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d001      	beq.n	800654c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e047      	b.n	80065dc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	223d      	movs	r2, #61	@ 0x3d
 8006550:	2102      	movs	r1, #2
 8006552:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2101      	movs	r1, #1
 8006560:	430a      	orrs	r2, r1
 8006562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1e      	ldr	r2, [pc, #120]	@ (80065e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d014      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x64>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	05db      	lsls	r3, r3, #23
 8006576:	429a      	cmp	r2, r3
 8006578:	d00e      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x64>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1a      	ldr	r2, [pc, #104]	@ (80065e8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d009      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x64>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a18      	ldr	r2, [pc, #96]	@ (80065ec <HAL_TIM_Base_Start_IT+0xb8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x64>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a17      	ldr	r2, [pc, #92]	@ (80065f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d116      	bne.n	80065c6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	4a15      	ldr	r2, [pc, #84]	@ (80065f4 <HAL_TIM_Base_Start_IT+0xc0>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b06      	cmp	r3, #6
 80065a8:	d016      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0xa4>
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	2380      	movs	r3, #128	@ 0x80
 80065ae:	025b      	lsls	r3, r3, #9
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d011      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2101      	movs	r1, #1
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c4:	e008      	b.n	80065d8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2101      	movs	r1, #1
 80065d2:	430a      	orrs	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e000      	b.n	80065da <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	0018      	movs	r0, r3
 80065de:	46bd      	mov	sp, r7
 80065e0:	b004      	add	sp, #16
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40012c00 	.word	0x40012c00
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40014000 	.word	0x40014000
 80065f4:	00010007 	.word	0x00010007

080065f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2202      	movs	r2, #2
 8006614:	4013      	ands	r3, r2
 8006616:	d021      	beq.n	800665c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2202      	movs	r2, #2
 800661c:	4013      	ands	r3, r2
 800661e:	d01d      	beq.n	800665c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2203      	movs	r2, #3
 8006626:	4252      	negs	r2, r2
 8006628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2203      	movs	r2, #3
 8006638:	4013      	ands	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	0018      	movs	r0, r3
 8006640:	f000 f9c0 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 8006644:	e007      	b.n	8006656 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	0018      	movs	r0, r3
 800664a:	f000 f9b3 	bl	80069b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f000 f9bf 	bl	80069d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2204      	movs	r2, #4
 8006660:	4013      	ands	r3, r2
 8006662:	d022      	beq.n	80066aa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2204      	movs	r2, #4
 8006668:	4013      	ands	r3, r2
 800666a:	d01e      	beq.n	80066aa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2205      	movs	r2, #5
 8006672:	4252      	negs	r2, r2
 8006674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	23c0      	movs	r3, #192	@ 0xc0
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4013      	ands	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	0018      	movs	r0, r3
 800668e:	f000 f999 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 8006692:	e007      	b.n	80066a4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	0018      	movs	r0, r3
 8006698:	f000 f98c 	bl	80069b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	0018      	movs	r0, r3
 80066a0:	f000 f998 	bl	80069d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2208      	movs	r2, #8
 80066ae:	4013      	ands	r3, r2
 80066b0:	d021      	beq.n	80066f6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2208      	movs	r2, #8
 80066b6:	4013      	ands	r3, r2
 80066b8:	d01d      	beq.n	80066f6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2209      	movs	r2, #9
 80066c0:	4252      	negs	r2, r2
 80066c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2204      	movs	r2, #4
 80066c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	2203      	movs	r2, #3
 80066d2:	4013      	ands	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	0018      	movs	r0, r3
 80066da:	f000 f973 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 80066de:	e007      	b.n	80066f0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	0018      	movs	r0, r3
 80066e4:	f000 f966 	bl	80069b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	0018      	movs	r0, r3
 80066ec:	f000 f972 	bl	80069d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2210      	movs	r2, #16
 80066fa:	4013      	ands	r3, r2
 80066fc:	d022      	beq.n	8006744 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2210      	movs	r2, #16
 8006702:	4013      	ands	r3, r2
 8006704:	d01e      	beq.n	8006744 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2211      	movs	r2, #17
 800670c:	4252      	negs	r2, r2
 800670e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2208      	movs	r2, #8
 8006714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	23c0      	movs	r3, #192	@ 0xc0
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4013      	ands	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	0018      	movs	r0, r3
 8006728:	f000 f94c 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 800672c:	e007      	b.n	800673e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	0018      	movs	r0, r3
 8006732:	f000 f93f 	bl	80069b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	0018      	movs	r0, r3
 800673a:	f000 f94b 	bl	80069d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2201      	movs	r2, #1
 8006748:	4013      	ands	r3, r2
 800674a:	d00c      	beq.n	8006766 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	4013      	ands	r3, r2
 8006752:	d008      	beq.n	8006766 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2202      	movs	r2, #2
 800675a:	4252      	negs	r2, r2
 800675c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	0018      	movs	r0, r3
 8006762:	f7fd fad1 	bl	8003d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2280      	movs	r2, #128	@ 0x80
 800676a:	4013      	ands	r3, r2
 800676c:	d104      	bne.n	8006778 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	2380      	movs	r3, #128	@ 0x80
 8006772:	019b      	lsls	r3, r3, #6
 8006774:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006776:	d00b      	beq.n	8006790 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2280      	movs	r2, #128	@ 0x80
 800677c:	4013      	ands	r3, r2
 800677e:	d007      	beq.n	8006790 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1e      	ldr	r2, [pc, #120]	@ (8006800 <HAL_TIM_IRQHandler+0x208>)
 8006786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	0018      	movs	r0, r3
 800678c:	f000 fae4 	bl	8006d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	2380      	movs	r3, #128	@ 0x80
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	4013      	ands	r3, r2
 8006798:	d00b      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2280      	movs	r2, #128	@ 0x80
 800679e:	4013      	ands	r3, r2
 80067a0:	d007      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a17      	ldr	r2, [pc, #92]	@ (8006804 <HAL_TIM_IRQHandler+0x20c>)
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	0018      	movs	r0, r3
 80067ae:	f000 fadb 	bl	8006d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2240      	movs	r2, #64	@ 0x40
 80067b6:	4013      	ands	r3, r2
 80067b8:	d00c      	beq.n	80067d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2240      	movs	r2, #64	@ 0x40
 80067be:	4013      	ands	r3, r2
 80067c0:	d008      	beq.n	80067d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2241      	movs	r2, #65	@ 0x41
 80067c8:	4252      	negs	r2, r2
 80067ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 f908 	bl	80069e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2220      	movs	r2, #32
 80067d8:	4013      	ands	r3, r2
 80067da:	d00c      	beq.n	80067f6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	4013      	ands	r3, r2
 80067e2:	d008      	beq.n	80067f6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2221      	movs	r2, #33	@ 0x21
 80067ea:	4252      	negs	r2, r2
 80067ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	0018      	movs	r0, r3
 80067f2:	f000 faa9 	bl	8006d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067f6:	46c0      	nop			@ (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b004      	add	sp, #16
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	ffffdf7f 	.word	0xffffdf7f
 8006804:	fffffeff 	.word	0xfffffeff

08006808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006812:	230f      	movs	r3, #15
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	223c      	movs	r2, #60	@ 0x3c
 800681e:	5c9b      	ldrb	r3, [r3, r2]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_TIM_ConfigClockSource+0x20>
 8006824:	2302      	movs	r3, #2
 8006826:	e0bc      	b.n	80069a2 <HAL_TIM_ConfigClockSource+0x19a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	223c      	movs	r2, #60	@ 0x3c
 800682c:	2101      	movs	r1, #1
 800682e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	223d      	movs	r2, #61	@ 0x3d
 8006834:	2102      	movs	r1, #2
 8006836:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4a5a      	ldr	r2, [pc, #360]	@ (80069ac <HAL_TIM_ConfigClockSource+0x1a4>)
 8006844:	4013      	ands	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4a59      	ldr	r2, [pc, #356]	@ (80069b0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800684c:	4013      	ands	r3, r2
 800684e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2280      	movs	r2, #128	@ 0x80
 800685e:	0192      	lsls	r2, r2, #6
 8006860:	4293      	cmp	r3, r2
 8006862:	d040      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0xde>
 8006864:	2280      	movs	r2, #128	@ 0x80
 8006866:	0192      	lsls	r2, r2, #6
 8006868:	4293      	cmp	r3, r2
 800686a:	d900      	bls.n	800686e <HAL_TIM_ConfigClockSource+0x66>
 800686c:	e088      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x178>
 800686e:	2280      	movs	r2, #128	@ 0x80
 8006870:	0152      	lsls	r2, r2, #5
 8006872:	4293      	cmp	r3, r2
 8006874:	d100      	bne.n	8006878 <HAL_TIM_ConfigClockSource+0x70>
 8006876:	e088      	b.n	800698a <HAL_TIM_ConfigClockSource+0x182>
 8006878:	2280      	movs	r2, #128	@ 0x80
 800687a:	0152      	lsls	r2, r2, #5
 800687c:	4293      	cmp	r3, r2
 800687e:	d900      	bls.n	8006882 <HAL_TIM_ConfigClockSource+0x7a>
 8006880:	e07e      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x178>
 8006882:	2b70      	cmp	r3, #112	@ 0x70
 8006884:	d018      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0xb0>
 8006886:	d900      	bls.n	800688a <HAL_TIM_ConfigClockSource+0x82>
 8006888:	e07a      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x178>
 800688a:	2b60      	cmp	r3, #96	@ 0x60
 800688c:	d04f      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x126>
 800688e:	d900      	bls.n	8006892 <HAL_TIM_ConfigClockSource+0x8a>
 8006890:	e076      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x178>
 8006892:	2b50      	cmp	r3, #80	@ 0x50
 8006894:	d03b      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x106>
 8006896:	d900      	bls.n	800689a <HAL_TIM_ConfigClockSource+0x92>
 8006898:	e072      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x178>
 800689a:	2b40      	cmp	r3, #64	@ 0x40
 800689c:	d057      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x146>
 800689e:	d900      	bls.n	80068a2 <HAL_TIM_ConfigClockSource+0x9a>
 80068a0:	e06e      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x178>
 80068a2:	2b30      	cmp	r3, #48	@ 0x30
 80068a4:	d063      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x166>
 80068a6:	d86b      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x178>
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d060      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x166>
 80068ac:	d868      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x178>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d05d      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x166>
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d05b      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x166>
 80068b6:	e063      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068c8:	f000 f9a8 	bl	8006c1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2277      	movs	r2, #119	@ 0x77
 80068d8:	4313      	orrs	r3, r2
 80068da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	609a      	str	r2, [r3, #8]
      break;
 80068e4:	e052      	b.n	800698c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068f6:	f000 f991 	bl	8006c1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2180      	movs	r1, #128	@ 0x80
 8006906:	01c9      	lsls	r1, r1, #7
 8006908:	430a      	orrs	r2, r1
 800690a:	609a      	str	r2, [r3, #8]
      break;
 800690c:	e03e      	b.n	800698c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800691a:	001a      	movs	r2, r3
 800691c:	f000 f902 	bl	8006b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2150      	movs	r1, #80	@ 0x50
 8006926:	0018      	movs	r0, r3
 8006928:	f000 f95c 	bl	8006be4 <TIM_ITRx_SetConfig>
      break;
 800692c:	e02e      	b.n	800698c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800693a:	001a      	movs	r2, r3
 800693c:	f000 f920 	bl	8006b80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2160      	movs	r1, #96	@ 0x60
 8006946:	0018      	movs	r0, r3
 8006948:	f000 f94c 	bl	8006be4 <TIM_ITRx_SetConfig>
      break;
 800694c:	e01e      	b.n	800698c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800695a:	001a      	movs	r2, r3
 800695c:	f000 f8e2 	bl	8006b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2140      	movs	r1, #64	@ 0x40
 8006966:	0018      	movs	r0, r3
 8006968:	f000 f93c 	bl	8006be4 <TIM_ITRx_SetConfig>
      break;
 800696c:	e00e      	b.n	800698c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	0019      	movs	r1, r3
 8006978:	0010      	movs	r0, r2
 800697a:	f000 f933 	bl	8006be4 <TIM_ITRx_SetConfig>
      break;
 800697e:	e005      	b.n	800698c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006980:	230f      	movs	r3, #15
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	2201      	movs	r2, #1
 8006986:	701a      	strb	r2, [r3, #0]
      break;
 8006988:	e000      	b.n	800698c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800698a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	223d      	movs	r2, #61	@ 0x3d
 8006990:	2101      	movs	r1, #1
 8006992:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	223c      	movs	r2, #60	@ 0x3c
 8006998:	2100      	movs	r1, #0
 800699a:	5499      	strb	r1, [r3, r2]

  return status;
 800699c:	230f      	movs	r3, #15
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	781b      	ldrb	r3, [r3, #0]
}
 80069a2:	0018      	movs	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	b004      	add	sp, #16
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	46c0      	nop			@ (mov r8, r8)
 80069ac:	ffceff88 	.word	0xffceff88
 80069b0:	ffff00ff 	.word	0xffff00ff

080069b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069bc:	46c0      	nop			@ (mov r8, r8)
 80069be:	46bd      	mov	sp, r7
 80069c0:	b002      	add	sp, #8
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069cc:	46c0      	nop			@ (mov r8, r8)
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b002      	add	sp, #8
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069dc:	46c0      	nop			@ (mov r8, r8)
 80069de:	46bd      	mov	sp, r7
 80069e0:	b002      	add	sp, #8
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069ec:	46c0      	nop			@ (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3f      	ldr	r2, [pc, #252]	@ (8006b04 <TIM_Base_SetConfig+0x110>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00c      	beq.n	8006a26 <TIM_Base_SetConfig+0x32>
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	2380      	movs	r3, #128	@ 0x80
 8006a10:	05db      	lsls	r3, r3, #23
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d007      	beq.n	8006a26 <TIM_Base_SetConfig+0x32>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a3b      	ldr	r2, [pc, #236]	@ (8006b08 <TIM_Base_SetConfig+0x114>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_Base_SetConfig+0x32>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a3a      	ldr	r2, [pc, #232]	@ (8006b0c <TIM_Base_SetConfig+0x118>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d108      	bne.n	8006a38 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2270      	movs	r2, #112	@ 0x70
 8006a2a:	4393      	bics	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a32      	ldr	r2, [pc, #200]	@ (8006b04 <TIM_Base_SetConfig+0x110>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d01c      	beq.n	8006a7a <TIM_Base_SetConfig+0x86>
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	2380      	movs	r3, #128	@ 0x80
 8006a44:	05db      	lsls	r3, r3, #23
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d017      	beq.n	8006a7a <TIM_Base_SetConfig+0x86>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8006b08 <TIM_Base_SetConfig+0x114>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <TIM_Base_SetConfig+0x86>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2d      	ldr	r2, [pc, #180]	@ (8006b0c <TIM_Base_SetConfig+0x118>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00f      	beq.n	8006a7a <TIM_Base_SetConfig+0x86>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8006b10 <TIM_Base_SetConfig+0x11c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00b      	beq.n	8006a7a <TIM_Base_SetConfig+0x86>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a2b      	ldr	r2, [pc, #172]	@ (8006b14 <TIM_Base_SetConfig+0x120>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d007      	beq.n	8006a7a <TIM_Base_SetConfig+0x86>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8006b18 <TIM_Base_SetConfig+0x124>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d003      	beq.n	8006a7a <TIM_Base_SetConfig+0x86>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a29      	ldr	r2, [pc, #164]	@ (8006b1c <TIM_Base_SetConfig+0x128>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d108      	bne.n	8006a8c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a28      	ldr	r2, [pc, #160]	@ (8006b20 <TIM_Base_SetConfig+0x12c>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2280      	movs	r2, #128	@ 0x80
 8006a90:	4393      	bics	r3, r2
 8006a92:	001a      	movs	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a13      	ldr	r2, [pc, #76]	@ (8006b04 <TIM_Base_SetConfig+0x110>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00b      	beq.n	8006ad2 <TIM_Base_SetConfig+0xde>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a15      	ldr	r2, [pc, #84]	@ (8006b14 <TIM_Base_SetConfig+0x120>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d007      	beq.n	8006ad2 <TIM_Base_SetConfig+0xde>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a14      	ldr	r2, [pc, #80]	@ (8006b18 <TIM_Base_SetConfig+0x124>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_Base_SetConfig+0xde>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a13      	ldr	r2, [pc, #76]	@ (8006b1c <TIM_Base_SetConfig+0x128>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d103      	bne.n	8006ada <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d106      	bne.n	8006afa <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2201      	movs	r2, #1
 8006af2:	4393      	bics	r3, r2
 8006af4:	001a      	movs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	611a      	str	r2, [r3, #16]
  }
}
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b004      	add	sp, #16
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	46c0      	nop			@ (mov r8, r8)
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40002000 	.word	0x40002000
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40014400 	.word	0x40014400
 8006b1c:	40014800 	.word	0x40014800
 8006b20:	fffffcff 	.word	0xfffffcff

08006b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	4393      	bics	r3, r2
 8006b3e:	001a      	movs	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	22f0      	movs	r2, #240	@ 0xf0
 8006b4e:	4393      	bics	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	220a      	movs	r2, #10
 8006b60:	4393      	bics	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	621a      	str	r2, [r3, #32]
}
 8006b78:	46c0      	nop			@ (mov r8, r8)
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b006      	add	sp, #24
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	2210      	movs	r2, #16
 8006b98:	4393      	bics	r3, r2
 8006b9a:	001a      	movs	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8006be0 <TIM_TI2_ConfigInputStage+0x60>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	031b      	lsls	r3, r3, #12
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	22a0      	movs	r2, #160	@ 0xa0
 8006bbc:	4393      	bics	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	46c0      	nop			@ (mov r8, r8)
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b006      	add	sp, #24
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	ffff0fff 	.word	0xffff0fff

08006be4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4a08      	ldr	r2, [pc, #32]	@ (8006c18 <TIM_ITRx_SetConfig+0x34>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	2207      	movs	r2, #7
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	609a      	str	r2, [r3, #8]
}
 8006c0e:	46c0      	nop			@ (mov r8, r8)
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b004      	add	sp, #16
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			@ (mov r8, r8)
 8006c18:	ffcfff8f 	.word	0xffcfff8f

08006c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4a09      	ldr	r2, [pc, #36]	@ (8006c58 <TIM_ETR_SetConfig+0x3c>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	021a      	lsls	r2, r3, #8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	609a      	str	r2, [r3, #8]
}
 8006c50:	46c0      	nop			@ (mov r8, r8)
 8006c52:	46bd      	mov	sp, r7
 8006c54:	b006      	add	sp, #24
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	ffff00ff 	.word	0xffff00ff

08006c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	223c      	movs	r2, #60	@ 0x3c
 8006c6a:	5c9b      	ldrb	r3, [r3, r2]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e05a      	b.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	223c      	movs	r2, #60	@ 0x3c
 8006c78:	2101      	movs	r1, #1
 8006c7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	223d      	movs	r2, #61	@ 0x3d
 8006c80:	2102      	movs	r1, #2
 8006c82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a26      	ldr	r2, [pc, #152]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d108      	bne.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a25      	ldr	r2, [pc, #148]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2270      	movs	r2, #112	@ 0x70
 8006cb4:	4393      	bics	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a19      	ldr	r2, [pc, #100]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d014      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	2380      	movs	r3, #128	@ 0x80
 8006cda:	05db      	lsls	r3, r3, #23
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d00e      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a15      	ldr	r2, [pc, #84]	@ (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a14      	ldr	r2, [pc, #80]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a12      	ldr	r2, [pc, #72]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10c      	bne.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2280      	movs	r2, #128	@ 0x80
 8006d02:	4393      	bics	r3, r2
 8006d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	223d      	movs	r2, #61	@ 0x3d
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	223c      	movs	r2, #60	@ 0x3c
 8006d24:	2100      	movs	r1, #0
 8006d26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b004      	add	sp, #16
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			@ (mov r8, r8)
 8006d34:	40012c00 	.word	0x40012c00
 8006d38:	ff0fffff 	.word	0xff0fffff
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40014000 	.word	0x40014000

08006d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d50:	46c0      	nop			@ (mov r8, r8)
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b002      	add	sp, #8
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d60:	46c0      	nop			@ (mov r8, r8)
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d70:	46c0      	nop			@ (mov r8, r8)
 8006d72:	46bd      	mov	sp, r7
 8006d74:	b002      	add	sp, #8
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <__assert_func>:
 8006d78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006d7a:	0014      	movs	r4, r2
 8006d7c:	001a      	movs	r2, r3
 8006d7e:	4b09      	ldr	r3, [pc, #36]	@ (8006da4 <__assert_func+0x2c>)
 8006d80:	0005      	movs	r5, r0
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	000e      	movs	r6, r1
 8006d86:	68d8      	ldr	r0, [r3, #12]
 8006d88:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <__assert_func+0x30>)
 8006d8a:	2c00      	cmp	r4, #0
 8006d8c:	d101      	bne.n	8006d92 <__assert_func+0x1a>
 8006d8e:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <__assert_func+0x34>)
 8006d90:	001c      	movs	r4, r3
 8006d92:	4907      	ldr	r1, [pc, #28]	@ (8006db0 <__assert_func+0x38>)
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	9402      	str	r4, [sp, #8]
 8006d98:	002b      	movs	r3, r5
 8006d9a:	9600      	str	r6, [sp, #0]
 8006d9c:	f000 f8b2 	bl	8006f04 <fiprintf>
 8006da0:	f000 f9ab 	bl	80070fa <abort>
 8006da4:	20000094 	.word	0x20000094
 8006da8:	08008cc0 	.word	0x08008cc0
 8006dac:	08008cfb 	.word	0x08008cfb
 8006db0:	08008ccd 	.word	0x08008ccd

08006db4 <std>:
 8006db4:	2300      	movs	r3, #0
 8006db6:	b510      	push	{r4, lr}
 8006db8:	0004      	movs	r4, r0
 8006dba:	6003      	str	r3, [r0, #0]
 8006dbc:	6043      	str	r3, [r0, #4]
 8006dbe:	6083      	str	r3, [r0, #8]
 8006dc0:	8181      	strh	r1, [r0, #12]
 8006dc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dc4:	81c2      	strh	r2, [r0, #14]
 8006dc6:	6103      	str	r3, [r0, #16]
 8006dc8:	6143      	str	r3, [r0, #20]
 8006dca:	6183      	str	r3, [r0, #24]
 8006dcc:	0019      	movs	r1, r3
 8006dce:	2208      	movs	r2, #8
 8006dd0:	305c      	adds	r0, #92	@ 0x5c
 8006dd2:	f000 f90f 	bl	8006ff4 <memset>
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <std+0x50>)
 8006dd8:	6224      	str	r4, [r4, #32]
 8006dda:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e08 <std+0x54>)
 8006dde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006de0:	4b0a      	ldr	r3, [pc, #40]	@ (8006e0c <std+0x58>)
 8006de2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006de4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <std+0x5c>)
 8006de6:	6323      	str	r3, [r4, #48]	@ 0x30
 8006de8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e14 <std+0x60>)
 8006dea:	429c      	cmp	r4, r3
 8006dec:	d005      	beq.n	8006dfa <std+0x46>
 8006dee:	4b0a      	ldr	r3, [pc, #40]	@ (8006e18 <std+0x64>)
 8006df0:	429c      	cmp	r4, r3
 8006df2:	d002      	beq.n	8006dfa <std+0x46>
 8006df4:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <std+0x68>)
 8006df6:	429c      	cmp	r4, r3
 8006df8:	d103      	bne.n	8006e02 <std+0x4e>
 8006dfa:	0020      	movs	r0, r4
 8006dfc:	3058      	adds	r0, #88	@ 0x58
 8006dfe:	f000 f979 	bl	80070f4 <__retarget_lock_init_recursive>
 8006e02:	bd10      	pop	{r4, pc}
 8006e04:	08006f5d 	.word	0x08006f5d
 8006e08:	08006f85 	.word	0x08006f85
 8006e0c:	08006fbd 	.word	0x08006fbd
 8006e10:	08006fe9 	.word	0x08006fe9
 8006e14:	200008ec 	.word	0x200008ec
 8006e18:	20000954 	.word	0x20000954
 8006e1c:	200009bc 	.word	0x200009bc

08006e20 <stdio_exit_handler>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	4a03      	ldr	r2, [pc, #12]	@ (8006e30 <stdio_exit_handler+0x10>)
 8006e24:	4903      	ldr	r1, [pc, #12]	@ (8006e34 <stdio_exit_handler+0x14>)
 8006e26:	4804      	ldr	r0, [pc, #16]	@ (8006e38 <stdio_exit_handler+0x18>)
 8006e28:	f000 f87c 	bl	8006f24 <_fwalk_sglue>
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	20000088 	.word	0x20000088
 8006e34:	0800798d 	.word	0x0800798d
 8006e38:	20000098 	.word	0x20000098

08006e3c <cleanup_stdio>:
 8006e3c:	6841      	ldr	r1, [r0, #4]
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e6c <cleanup_stdio+0x30>)
 8006e40:	b510      	push	{r4, lr}
 8006e42:	0004      	movs	r4, r0
 8006e44:	4299      	cmp	r1, r3
 8006e46:	d001      	beq.n	8006e4c <cleanup_stdio+0x10>
 8006e48:	f000 fda0 	bl	800798c <_fflush_r>
 8006e4c:	68a1      	ldr	r1, [r4, #8]
 8006e4e:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <cleanup_stdio+0x34>)
 8006e50:	4299      	cmp	r1, r3
 8006e52:	d002      	beq.n	8006e5a <cleanup_stdio+0x1e>
 8006e54:	0020      	movs	r0, r4
 8006e56:	f000 fd99 	bl	800798c <_fflush_r>
 8006e5a:	68e1      	ldr	r1, [r4, #12]
 8006e5c:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <cleanup_stdio+0x38>)
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	d002      	beq.n	8006e68 <cleanup_stdio+0x2c>
 8006e62:	0020      	movs	r0, r4
 8006e64:	f000 fd92 	bl	800798c <_fflush_r>
 8006e68:	bd10      	pop	{r4, pc}
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	200008ec 	.word	0x200008ec
 8006e70:	20000954 	.word	0x20000954
 8006e74:	200009bc 	.word	0x200009bc

08006e78 <global_stdio_init.part.0>:
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <global_stdio_init.part.0+0x28>)
 8006e7c:	4a09      	ldr	r2, [pc, #36]	@ (8006ea4 <global_stdio_init.part.0+0x2c>)
 8006e7e:	2104      	movs	r1, #4
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	4809      	ldr	r0, [pc, #36]	@ (8006ea8 <global_stdio_init.part.0+0x30>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	f7ff ff95 	bl	8006db4 <std>
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	2109      	movs	r1, #9
 8006e8e:	4807      	ldr	r0, [pc, #28]	@ (8006eac <global_stdio_init.part.0+0x34>)
 8006e90:	f7ff ff90 	bl	8006db4 <std>
 8006e94:	2202      	movs	r2, #2
 8006e96:	2112      	movs	r1, #18
 8006e98:	4805      	ldr	r0, [pc, #20]	@ (8006eb0 <global_stdio_init.part.0+0x38>)
 8006e9a:	f7ff ff8b 	bl	8006db4 <std>
 8006e9e:	bd10      	pop	{r4, pc}
 8006ea0:	20000a24 	.word	0x20000a24
 8006ea4:	08006e21 	.word	0x08006e21
 8006ea8:	200008ec 	.word	0x200008ec
 8006eac:	20000954 	.word	0x20000954
 8006eb0:	200009bc 	.word	0x200009bc

08006eb4 <__sfp_lock_acquire>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	4802      	ldr	r0, [pc, #8]	@ (8006ec0 <__sfp_lock_acquire+0xc>)
 8006eb8:	f000 f91d 	bl	80070f6 <__retarget_lock_acquire_recursive>
 8006ebc:	bd10      	pop	{r4, pc}
 8006ebe:	46c0      	nop			@ (mov r8, r8)
 8006ec0:	20000a2d 	.word	0x20000a2d

08006ec4 <__sfp_lock_release>:
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	4802      	ldr	r0, [pc, #8]	@ (8006ed0 <__sfp_lock_release+0xc>)
 8006ec8:	f000 f916 	bl	80070f8 <__retarget_lock_release_recursive>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	20000a2d 	.word	0x20000a2d

08006ed4 <__sinit>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	0004      	movs	r4, r0
 8006ed8:	f7ff ffec 	bl	8006eb4 <__sfp_lock_acquire>
 8006edc:	6a23      	ldr	r3, [r4, #32]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <__sinit+0x14>
 8006ee2:	f7ff ffef 	bl	8006ec4 <__sfp_lock_release>
 8006ee6:	bd10      	pop	{r4, pc}
 8006ee8:	4b04      	ldr	r3, [pc, #16]	@ (8006efc <__sinit+0x28>)
 8006eea:	6223      	str	r3, [r4, #32]
 8006eec:	4b04      	ldr	r3, [pc, #16]	@ (8006f00 <__sinit+0x2c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f6      	bne.n	8006ee2 <__sinit+0xe>
 8006ef4:	f7ff ffc0 	bl	8006e78 <global_stdio_init.part.0>
 8006ef8:	e7f3      	b.n	8006ee2 <__sinit+0xe>
 8006efa:	46c0      	nop			@ (mov r8, r8)
 8006efc:	08006e3d 	.word	0x08006e3d
 8006f00:	20000a24 	.word	0x20000a24

08006f04 <fiprintf>:
 8006f04:	b40e      	push	{r1, r2, r3}
 8006f06:	b517      	push	{r0, r1, r2, r4, lr}
 8006f08:	4c05      	ldr	r4, [pc, #20]	@ (8006f20 <fiprintf+0x1c>)
 8006f0a:	ab05      	add	r3, sp, #20
 8006f0c:	cb04      	ldmia	r3!, {r2}
 8006f0e:	0001      	movs	r1, r0
 8006f10:	6820      	ldr	r0, [r4, #0]
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	f000 fa1c 	bl	8007350 <_vfiprintf_r>
 8006f18:	bc1e      	pop	{r1, r2, r3, r4}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	b003      	add	sp, #12
 8006f1e:	4718      	bx	r3
 8006f20:	20000094 	.word	0x20000094

08006f24 <_fwalk_sglue>:
 8006f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f26:	0014      	movs	r4, r2
 8006f28:	2600      	movs	r6, #0
 8006f2a:	9000      	str	r0, [sp, #0]
 8006f2c:	9101      	str	r1, [sp, #4]
 8006f2e:	68a5      	ldr	r5, [r4, #8]
 8006f30:	6867      	ldr	r7, [r4, #4]
 8006f32:	3f01      	subs	r7, #1
 8006f34:	d504      	bpl.n	8006f40 <_fwalk_sglue+0x1c>
 8006f36:	6824      	ldr	r4, [r4, #0]
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	d1f8      	bne.n	8006f2e <_fwalk_sglue+0xa>
 8006f3c:	0030      	movs	r0, r6
 8006f3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f40:	89ab      	ldrh	r3, [r5, #12]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d908      	bls.n	8006f58 <_fwalk_sglue+0x34>
 8006f46:	220e      	movs	r2, #14
 8006f48:	5eab      	ldrsh	r3, [r5, r2]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	d004      	beq.n	8006f58 <_fwalk_sglue+0x34>
 8006f4e:	0029      	movs	r1, r5
 8006f50:	9800      	ldr	r0, [sp, #0]
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	4798      	blx	r3
 8006f56:	4306      	orrs	r6, r0
 8006f58:	3568      	adds	r5, #104	@ 0x68
 8006f5a:	e7ea      	b.n	8006f32 <_fwalk_sglue+0xe>

08006f5c <__sread>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	000c      	movs	r4, r1
 8006f60:	250e      	movs	r5, #14
 8006f62:	5f49      	ldrsh	r1, [r1, r5]
 8006f64:	f000 f874 	bl	8007050 <_read_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	db03      	blt.n	8006f74 <__sread+0x18>
 8006f6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006f6e:	181b      	adds	r3, r3, r0
 8006f70:	6563      	str	r3, [r4, #84]	@ 0x54
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	4a02      	ldr	r2, [pc, #8]	@ (8006f80 <__sread+0x24>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	e7f9      	b.n	8006f72 <__sread+0x16>
 8006f7e:	46c0      	nop			@ (mov r8, r8)
 8006f80:	ffffefff 	.word	0xffffefff

08006f84 <__swrite>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	001f      	movs	r7, r3
 8006f88:	898b      	ldrh	r3, [r1, #12]
 8006f8a:	0005      	movs	r5, r0
 8006f8c:	000c      	movs	r4, r1
 8006f8e:	0016      	movs	r6, r2
 8006f90:	05db      	lsls	r3, r3, #23
 8006f92:	d505      	bpl.n	8006fa0 <__swrite+0x1c>
 8006f94:	230e      	movs	r3, #14
 8006f96:	5ec9      	ldrsh	r1, [r1, r3]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	f000 f844 	bl	8007028 <_lseek_r>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	4a05      	ldr	r2, [pc, #20]	@ (8006fb8 <__swrite+0x34>)
 8006fa4:	0028      	movs	r0, r5
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	0032      	movs	r2, r6
 8006fac:	230e      	movs	r3, #14
 8006fae:	5ee1      	ldrsh	r1, [r4, r3]
 8006fb0:	003b      	movs	r3, r7
 8006fb2:	f000 f861 	bl	8007078 <_write_r>
 8006fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb8:	ffffefff 	.word	0xffffefff

08006fbc <__sseek>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	000c      	movs	r4, r1
 8006fc0:	250e      	movs	r5, #14
 8006fc2:	5f49      	ldrsh	r1, [r1, r5]
 8006fc4:	f000 f830 	bl	8007028 <_lseek_r>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	1c42      	adds	r2, r0, #1
 8006fcc:	d103      	bne.n	8006fd6 <__sseek+0x1a>
 8006fce:	4a05      	ldr	r2, [pc, #20]	@ (8006fe4 <__sseek+0x28>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	bd70      	pop	{r4, r5, r6, pc}
 8006fd6:	2280      	movs	r2, #128	@ 0x80
 8006fd8:	0152      	lsls	r2, r2, #5
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fe0:	e7f8      	b.n	8006fd4 <__sseek+0x18>
 8006fe2:	46c0      	nop			@ (mov r8, r8)
 8006fe4:	ffffefff 	.word	0xffffefff

08006fe8 <__sclose>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	230e      	movs	r3, #14
 8006fec:	5ec9      	ldrsh	r1, [r1, r3]
 8006fee:	f000 f809 	bl	8007004 <_close_r>
 8006ff2:	bd10      	pop	{r4, pc}

08006ff4 <memset>:
 8006ff4:	0003      	movs	r3, r0
 8006ff6:	1882      	adds	r2, r0, r2
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d100      	bne.n	8006ffe <memset+0xa>
 8006ffc:	4770      	bx	lr
 8006ffe:	7019      	strb	r1, [r3, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	e7f9      	b.n	8006ff8 <memset+0x4>

08007004 <_close_r>:
 8007004:	2300      	movs	r3, #0
 8007006:	b570      	push	{r4, r5, r6, lr}
 8007008:	4d06      	ldr	r5, [pc, #24]	@ (8007024 <_close_r+0x20>)
 800700a:	0004      	movs	r4, r0
 800700c:	0008      	movs	r0, r1
 800700e:	602b      	str	r3, [r5, #0]
 8007010:	f7fd f824 	bl	800405c <_close>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d103      	bne.n	8007020 <_close_r+0x1c>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d000      	beq.n	8007020 <_close_r+0x1c>
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	46c0      	nop			@ (mov r8, r8)
 8007024:	20000a28 	.word	0x20000a28

08007028 <_lseek_r>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	0004      	movs	r4, r0
 800702c:	0008      	movs	r0, r1
 800702e:	0011      	movs	r1, r2
 8007030:	001a      	movs	r2, r3
 8007032:	2300      	movs	r3, #0
 8007034:	4d05      	ldr	r5, [pc, #20]	@ (800704c <_lseek_r+0x24>)
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	f7fd f831 	bl	800409e <_lseek>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d103      	bne.n	8007048 <_lseek_r+0x20>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d000      	beq.n	8007048 <_lseek_r+0x20>
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	bd70      	pop	{r4, r5, r6, pc}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	20000a28 	.word	0x20000a28

08007050 <_read_r>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	0004      	movs	r4, r0
 8007054:	0008      	movs	r0, r1
 8007056:	0011      	movs	r1, r2
 8007058:	001a      	movs	r2, r3
 800705a:	2300      	movs	r3, #0
 800705c:	4d05      	ldr	r5, [pc, #20]	@ (8007074 <_read_r+0x24>)
 800705e:	602b      	str	r3, [r5, #0]
 8007060:	f7fc ffc3 	bl	8003fea <_read>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d103      	bne.n	8007070 <_read_r+0x20>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d000      	beq.n	8007070 <_read_r+0x20>
 800706e:	6023      	str	r3, [r4, #0]
 8007070:	bd70      	pop	{r4, r5, r6, pc}
 8007072:	46c0      	nop			@ (mov r8, r8)
 8007074:	20000a28 	.word	0x20000a28

08007078 <_write_r>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	0004      	movs	r4, r0
 800707c:	0008      	movs	r0, r1
 800707e:	0011      	movs	r1, r2
 8007080:	001a      	movs	r2, r3
 8007082:	2300      	movs	r3, #0
 8007084:	4d05      	ldr	r5, [pc, #20]	@ (800709c <_write_r+0x24>)
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	f7fc ffcc 	bl	8004024 <_write>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d103      	bne.n	8007098 <_write_r+0x20>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d000      	beq.n	8007098 <_write_r+0x20>
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	bd70      	pop	{r4, r5, r6, pc}
 800709a:	46c0      	nop			@ (mov r8, r8)
 800709c:	20000a28 	.word	0x20000a28

080070a0 <__errno>:
 80070a0:	4b01      	ldr	r3, [pc, #4]	@ (80070a8 <__errno+0x8>)
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	4770      	bx	lr
 80070a6:	46c0      	nop			@ (mov r8, r8)
 80070a8:	20000094 	.word	0x20000094

080070ac <__libc_init_array>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	2600      	movs	r6, #0
 80070b0:	4c0c      	ldr	r4, [pc, #48]	@ (80070e4 <__libc_init_array+0x38>)
 80070b2:	4d0d      	ldr	r5, [pc, #52]	@ (80070e8 <__libc_init_array+0x3c>)
 80070b4:	1b64      	subs	r4, r4, r5
 80070b6:	10a4      	asrs	r4, r4, #2
 80070b8:	42a6      	cmp	r6, r4
 80070ba:	d109      	bne.n	80070d0 <__libc_init_array+0x24>
 80070bc:	2600      	movs	r6, #0
 80070be:	f001 fd39 	bl	8008b34 <_init>
 80070c2:	4c0a      	ldr	r4, [pc, #40]	@ (80070ec <__libc_init_array+0x40>)
 80070c4:	4d0a      	ldr	r5, [pc, #40]	@ (80070f0 <__libc_init_array+0x44>)
 80070c6:	1b64      	subs	r4, r4, r5
 80070c8:	10a4      	asrs	r4, r4, #2
 80070ca:	42a6      	cmp	r6, r4
 80070cc:	d105      	bne.n	80070da <__libc_init_array+0x2e>
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	00b3      	lsls	r3, r6, #2
 80070d2:	58eb      	ldr	r3, [r5, r3]
 80070d4:	4798      	blx	r3
 80070d6:	3601      	adds	r6, #1
 80070d8:	e7ee      	b.n	80070b8 <__libc_init_array+0xc>
 80070da:	00b3      	lsls	r3, r6, #2
 80070dc:	58eb      	ldr	r3, [r5, r3]
 80070de:	4798      	blx	r3
 80070e0:	3601      	adds	r6, #1
 80070e2:	e7f2      	b.n	80070ca <__libc_init_array+0x1e>
 80070e4:	08008d70 	.word	0x08008d70
 80070e8:	08008d70 	.word	0x08008d70
 80070ec:	08008d74 	.word	0x08008d74
 80070f0:	08008d70 	.word	0x08008d70

080070f4 <__retarget_lock_init_recursive>:
 80070f4:	4770      	bx	lr

080070f6 <__retarget_lock_acquire_recursive>:
 80070f6:	4770      	bx	lr

080070f8 <__retarget_lock_release_recursive>:
 80070f8:	4770      	bx	lr

080070fa <abort>:
 80070fa:	2006      	movs	r0, #6
 80070fc:	b510      	push	{r4, lr}
 80070fe:	f000 fd3b 	bl	8007b78 <raise>
 8007102:	2001      	movs	r0, #1
 8007104:	f7fc ff64 	bl	8003fd0 <_exit>

08007108 <_free_r>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	0005      	movs	r5, r0
 800710c:	1e0c      	subs	r4, r1, #0
 800710e:	d010      	beq.n	8007132 <_free_r+0x2a>
 8007110:	3c04      	subs	r4, #4
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	da00      	bge.n	800711a <_free_r+0x12>
 8007118:	18e4      	adds	r4, r4, r3
 800711a:	0028      	movs	r0, r5
 800711c:	f000 f8e0 	bl	80072e0 <__malloc_lock>
 8007120:	4a1d      	ldr	r2, [pc, #116]	@ (8007198 <_free_r+0x90>)
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <_free_r+0x2c>
 8007128:	6063      	str	r3, [r4, #4]
 800712a:	6014      	str	r4, [r2, #0]
 800712c:	0028      	movs	r0, r5
 800712e:	f000 f8df 	bl	80072f0 <__malloc_unlock>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	42a3      	cmp	r3, r4
 8007136:	d908      	bls.n	800714a <_free_r+0x42>
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	1821      	adds	r1, r4, r0
 800713c:	428b      	cmp	r3, r1
 800713e:	d1f3      	bne.n	8007128 <_free_r+0x20>
 8007140:	6819      	ldr	r1, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	1809      	adds	r1, r1, r0
 8007146:	6021      	str	r1, [r4, #0]
 8007148:	e7ee      	b.n	8007128 <_free_r+0x20>
 800714a:	001a      	movs	r2, r3
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <_free_r+0x4e>
 8007152:	42a3      	cmp	r3, r4
 8007154:	d9f9      	bls.n	800714a <_free_r+0x42>
 8007156:	6811      	ldr	r1, [r2, #0]
 8007158:	1850      	adds	r0, r2, r1
 800715a:	42a0      	cmp	r0, r4
 800715c:	d10b      	bne.n	8007176 <_free_r+0x6e>
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	1809      	adds	r1, r1, r0
 8007162:	1850      	adds	r0, r2, r1
 8007164:	6011      	str	r1, [r2, #0]
 8007166:	4283      	cmp	r3, r0
 8007168:	d1e0      	bne.n	800712c <_free_r+0x24>
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	1841      	adds	r1, r0, r1
 8007170:	6011      	str	r1, [r2, #0]
 8007172:	6053      	str	r3, [r2, #4]
 8007174:	e7da      	b.n	800712c <_free_r+0x24>
 8007176:	42a0      	cmp	r0, r4
 8007178:	d902      	bls.n	8007180 <_free_r+0x78>
 800717a:	230c      	movs	r3, #12
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	e7d5      	b.n	800712c <_free_r+0x24>
 8007180:	6820      	ldr	r0, [r4, #0]
 8007182:	1821      	adds	r1, r4, r0
 8007184:	428b      	cmp	r3, r1
 8007186:	d103      	bne.n	8007190 <_free_r+0x88>
 8007188:	6819      	ldr	r1, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	1809      	adds	r1, r1, r0
 800718e:	6021      	str	r1, [r4, #0]
 8007190:	6063      	str	r3, [r4, #4]
 8007192:	6054      	str	r4, [r2, #4]
 8007194:	e7ca      	b.n	800712c <_free_r+0x24>
 8007196:	46c0      	nop			@ (mov r8, r8)
 8007198:	20000a34 	.word	0x20000a34

0800719c <sbrk_aligned>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4e0f      	ldr	r6, [pc, #60]	@ (80071dc <sbrk_aligned+0x40>)
 80071a0:	000d      	movs	r5, r1
 80071a2:	6831      	ldr	r1, [r6, #0]
 80071a4:	0004      	movs	r4, r0
 80071a6:	2900      	cmp	r1, #0
 80071a8:	d102      	bne.n	80071b0 <sbrk_aligned+0x14>
 80071aa:	f000 fd05 	bl	8007bb8 <_sbrk_r>
 80071ae:	6030      	str	r0, [r6, #0]
 80071b0:	0029      	movs	r1, r5
 80071b2:	0020      	movs	r0, r4
 80071b4:	f000 fd00 	bl	8007bb8 <_sbrk_r>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d103      	bne.n	80071c4 <sbrk_aligned+0x28>
 80071bc:	2501      	movs	r5, #1
 80071be:	426d      	negs	r5, r5
 80071c0:	0028      	movs	r0, r5
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	2303      	movs	r3, #3
 80071c6:	1cc5      	adds	r5, r0, #3
 80071c8:	439d      	bics	r5, r3
 80071ca:	42a8      	cmp	r0, r5
 80071cc:	d0f8      	beq.n	80071c0 <sbrk_aligned+0x24>
 80071ce:	1a29      	subs	r1, r5, r0
 80071d0:	0020      	movs	r0, r4
 80071d2:	f000 fcf1 	bl	8007bb8 <_sbrk_r>
 80071d6:	3001      	adds	r0, #1
 80071d8:	d1f2      	bne.n	80071c0 <sbrk_aligned+0x24>
 80071da:	e7ef      	b.n	80071bc <sbrk_aligned+0x20>
 80071dc:	20000a30 	.word	0x20000a30

080071e0 <_malloc_r>:
 80071e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071e2:	2203      	movs	r2, #3
 80071e4:	1ccb      	adds	r3, r1, #3
 80071e6:	4393      	bics	r3, r2
 80071e8:	3308      	adds	r3, #8
 80071ea:	0005      	movs	r5, r0
 80071ec:	001f      	movs	r7, r3
 80071ee:	2b0c      	cmp	r3, #12
 80071f0:	d234      	bcs.n	800725c <_malloc_r+0x7c>
 80071f2:	270c      	movs	r7, #12
 80071f4:	42b9      	cmp	r1, r7
 80071f6:	d833      	bhi.n	8007260 <_malloc_r+0x80>
 80071f8:	0028      	movs	r0, r5
 80071fa:	f000 f871 	bl	80072e0 <__malloc_lock>
 80071fe:	4e37      	ldr	r6, [pc, #220]	@ (80072dc <_malloc_r+0xfc>)
 8007200:	6833      	ldr	r3, [r6, #0]
 8007202:	001c      	movs	r4, r3
 8007204:	2c00      	cmp	r4, #0
 8007206:	d12f      	bne.n	8007268 <_malloc_r+0x88>
 8007208:	0039      	movs	r1, r7
 800720a:	0028      	movs	r0, r5
 800720c:	f7ff ffc6 	bl	800719c <sbrk_aligned>
 8007210:	0004      	movs	r4, r0
 8007212:	1c43      	adds	r3, r0, #1
 8007214:	d15f      	bne.n	80072d6 <_malloc_r+0xf6>
 8007216:	6834      	ldr	r4, [r6, #0]
 8007218:	9400      	str	r4, [sp, #0]
 800721a:	9b00      	ldr	r3, [sp, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d14a      	bne.n	80072b6 <_malloc_r+0xd6>
 8007220:	2c00      	cmp	r4, #0
 8007222:	d052      	beq.n	80072ca <_malloc_r+0xea>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	0028      	movs	r0, r5
 8007228:	18e3      	adds	r3, r4, r3
 800722a:	9900      	ldr	r1, [sp, #0]
 800722c:	9301      	str	r3, [sp, #4]
 800722e:	f000 fcc3 	bl	8007bb8 <_sbrk_r>
 8007232:	9b01      	ldr	r3, [sp, #4]
 8007234:	4283      	cmp	r3, r0
 8007236:	d148      	bne.n	80072ca <_malloc_r+0xea>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	0028      	movs	r0, r5
 800723c:	1aff      	subs	r7, r7, r3
 800723e:	0039      	movs	r1, r7
 8007240:	f7ff ffac 	bl	800719c <sbrk_aligned>
 8007244:	3001      	adds	r0, #1
 8007246:	d040      	beq.n	80072ca <_malloc_r+0xea>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	19db      	adds	r3, r3, r7
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	6833      	ldr	r3, [r6, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	2a00      	cmp	r2, #0
 8007254:	d133      	bne.n	80072be <_malloc_r+0xde>
 8007256:	9b00      	ldr	r3, [sp, #0]
 8007258:	6033      	str	r3, [r6, #0]
 800725a:	e019      	b.n	8007290 <_malloc_r+0xb0>
 800725c:	2b00      	cmp	r3, #0
 800725e:	dac9      	bge.n	80071f4 <_malloc_r+0x14>
 8007260:	230c      	movs	r3, #12
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	2000      	movs	r0, #0
 8007266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007268:	6821      	ldr	r1, [r4, #0]
 800726a:	1bc9      	subs	r1, r1, r7
 800726c:	d420      	bmi.n	80072b0 <_malloc_r+0xd0>
 800726e:	290b      	cmp	r1, #11
 8007270:	d90a      	bls.n	8007288 <_malloc_r+0xa8>
 8007272:	19e2      	adds	r2, r4, r7
 8007274:	6027      	str	r7, [r4, #0]
 8007276:	42a3      	cmp	r3, r4
 8007278:	d104      	bne.n	8007284 <_malloc_r+0xa4>
 800727a:	6032      	str	r2, [r6, #0]
 800727c:	6863      	ldr	r3, [r4, #4]
 800727e:	6011      	str	r1, [r2, #0]
 8007280:	6053      	str	r3, [r2, #4]
 8007282:	e005      	b.n	8007290 <_malloc_r+0xb0>
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	e7f9      	b.n	800727c <_malloc_r+0x9c>
 8007288:	6862      	ldr	r2, [r4, #4]
 800728a:	42a3      	cmp	r3, r4
 800728c:	d10e      	bne.n	80072ac <_malloc_r+0xcc>
 800728e:	6032      	str	r2, [r6, #0]
 8007290:	0028      	movs	r0, r5
 8007292:	f000 f82d 	bl	80072f0 <__malloc_unlock>
 8007296:	0020      	movs	r0, r4
 8007298:	2207      	movs	r2, #7
 800729a:	300b      	adds	r0, #11
 800729c:	1d23      	adds	r3, r4, #4
 800729e:	4390      	bics	r0, r2
 80072a0:	1ac2      	subs	r2, r0, r3
 80072a2:	4298      	cmp	r0, r3
 80072a4:	d0df      	beq.n	8007266 <_malloc_r+0x86>
 80072a6:	1a1b      	subs	r3, r3, r0
 80072a8:	50a3      	str	r3, [r4, r2]
 80072aa:	e7dc      	b.n	8007266 <_malloc_r+0x86>
 80072ac:	605a      	str	r2, [r3, #4]
 80072ae:	e7ef      	b.n	8007290 <_malloc_r+0xb0>
 80072b0:	0023      	movs	r3, r4
 80072b2:	6864      	ldr	r4, [r4, #4]
 80072b4:	e7a6      	b.n	8007204 <_malloc_r+0x24>
 80072b6:	9c00      	ldr	r4, [sp, #0]
 80072b8:	6863      	ldr	r3, [r4, #4]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	e7ad      	b.n	800721a <_malloc_r+0x3a>
 80072be:	001a      	movs	r2, r3
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	42a3      	cmp	r3, r4
 80072c4:	d1fb      	bne.n	80072be <_malloc_r+0xde>
 80072c6:	2300      	movs	r3, #0
 80072c8:	e7da      	b.n	8007280 <_malloc_r+0xa0>
 80072ca:	230c      	movs	r3, #12
 80072cc:	0028      	movs	r0, r5
 80072ce:	602b      	str	r3, [r5, #0]
 80072d0:	f000 f80e 	bl	80072f0 <__malloc_unlock>
 80072d4:	e7c6      	b.n	8007264 <_malloc_r+0x84>
 80072d6:	6007      	str	r7, [r0, #0]
 80072d8:	e7da      	b.n	8007290 <_malloc_r+0xb0>
 80072da:	46c0      	nop			@ (mov r8, r8)
 80072dc:	20000a34 	.word	0x20000a34

080072e0 <__malloc_lock>:
 80072e0:	b510      	push	{r4, lr}
 80072e2:	4802      	ldr	r0, [pc, #8]	@ (80072ec <__malloc_lock+0xc>)
 80072e4:	f7ff ff07 	bl	80070f6 <__retarget_lock_acquire_recursive>
 80072e8:	bd10      	pop	{r4, pc}
 80072ea:	46c0      	nop			@ (mov r8, r8)
 80072ec:	20000a2c 	.word	0x20000a2c

080072f0 <__malloc_unlock>:
 80072f0:	b510      	push	{r4, lr}
 80072f2:	4802      	ldr	r0, [pc, #8]	@ (80072fc <__malloc_unlock+0xc>)
 80072f4:	f7ff ff00 	bl	80070f8 <__retarget_lock_release_recursive>
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	46c0      	nop			@ (mov r8, r8)
 80072fc:	20000a2c 	.word	0x20000a2c

08007300 <__sfputc_r>:
 8007300:	6893      	ldr	r3, [r2, #8]
 8007302:	b510      	push	{r4, lr}
 8007304:	3b01      	subs	r3, #1
 8007306:	6093      	str	r3, [r2, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	da04      	bge.n	8007316 <__sfputc_r+0x16>
 800730c:	6994      	ldr	r4, [r2, #24]
 800730e:	42a3      	cmp	r3, r4
 8007310:	db07      	blt.n	8007322 <__sfputc_r+0x22>
 8007312:	290a      	cmp	r1, #10
 8007314:	d005      	beq.n	8007322 <__sfputc_r+0x22>
 8007316:	6813      	ldr	r3, [r2, #0]
 8007318:	1c58      	adds	r0, r3, #1
 800731a:	6010      	str	r0, [r2, #0]
 800731c:	7019      	strb	r1, [r3, #0]
 800731e:	0008      	movs	r0, r1
 8007320:	bd10      	pop	{r4, pc}
 8007322:	f000 fb5e 	bl	80079e2 <__swbuf_r>
 8007326:	0001      	movs	r1, r0
 8007328:	e7f9      	b.n	800731e <__sfputc_r+0x1e>

0800732a <__sfputs_r>:
 800732a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732c:	0006      	movs	r6, r0
 800732e:	000f      	movs	r7, r1
 8007330:	0014      	movs	r4, r2
 8007332:	18d5      	adds	r5, r2, r3
 8007334:	42ac      	cmp	r4, r5
 8007336:	d101      	bne.n	800733c <__sfputs_r+0x12>
 8007338:	2000      	movs	r0, #0
 800733a:	e007      	b.n	800734c <__sfputs_r+0x22>
 800733c:	7821      	ldrb	r1, [r4, #0]
 800733e:	003a      	movs	r2, r7
 8007340:	0030      	movs	r0, r6
 8007342:	f7ff ffdd 	bl	8007300 <__sfputc_r>
 8007346:	3401      	adds	r4, #1
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d1f3      	bne.n	8007334 <__sfputs_r+0xa>
 800734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007350 <_vfiprintf_r>:
 8007350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007352:	b0a1      	sub	sp, #132	@ 0x84
 8007354:	000f      	movs	r7, r1
 8007356:	0015      	movs	r5, r2
 8007358:	001e      	movs	r6, r3
 800735a:	9003      	str	r0, [sp, #12]
 800735c:	2800      	cmp	r0, #0
 800735e:	d004      	beq.n	800736a <_vfiprintf_r+0x1a>
 8007360:	6a03      	ldr	r3, [r0, #32]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <_vfiprintf_r+0x1a>
 8007366:	f7ff fdb5 	bl	8006ed4 <__sinit>
 800736a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800736c:	07db      	lsls	r3, r3, #31
 800736e:	d405      	bmi.n	800737c <_vfiprintf_r+0x2c>
 8007370:	89bb      	ldrh	r3, [r7, #12]
 8007372:	059b      	lsls	r3, r3, #22
 8007374:	d402      	bmi.n	800737c <_vfiprintf_r+0x2c>
 8007376:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007378:	f7ff febd 	bl	80070f6 <__retarget_lock_acquire_recursive>
 800737c:	89bb      	ldrh	r3, [r7, #12]
 800737e:	071b      	lsls	r3, r3, #28
 8007380:	d502      	bpl.n	8007388 <_vfiprintf_r+0x38>
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d113      	bne.n	80073b0 <_vfiprintf_r+0x60>
 8007388:	0039      	movs	r1, r7
 800738a:	9803      	ldr	r0, [sp, #12]
 800738c:	f000 fb6c 	bl	8007a68 <__swsetup_r>
 8007390:	2800      	cmp	r0, #0
 8007392:	d00d      	beq.n	80073b0 <_vfiprintf_r+0x60>
 8007394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007396:	07db      	lsls	r3, r3, #31
 8007398:	d503      	bpl.n	80073a2 <_vfiprintf_r+0x52>
 800739a:	2001      	movs	r0, #1
 800739c:	4240      	negs	r0, r0
 800739e:	b021      	add	sp, #132	@ 0x84
 80073a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a2:	89bb      	ldrh	r3, [r7, #12]
 80073a4:	059b      	lsls	r3, r3, #22
 80073a6:	d4f8      	bmi.n	800739a <_vfiprintf_r+0x4a>
 80073a8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80073aa:	f7ff fea5 	bl	80070f8 <__retarget_lock_release_recursive>
 80073ae:	e7f4      	b.n	800739a <_vfiprintf_r+0x4a>
 80073b0:	2300      	movs	r3, #0
 80073b2:	ac08      	add	r4, sp, #32
 80073b4:	6163      	str	r3, [r4, #20]
 80073b6:	3320      	adds	r3, #32
 80073b8:	7663      	strb	r3, [r4, #25]
 80073ba:	3310      	adds	r3, #16
 80073bc:	76a3      	strb	r3, [r4, #26]
 80073be:	9607      	str	r6, [sp, #28]
 80073c0:	002e      	movs	r6, r5
 80073c2:	7833      	ldrb	r3, [r6, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <_vfiprintf_r+0x7c>
 80073c8:	2b25      	cmp	r3, #37	@ 0x25
 80073ca:	d148      	bne.n	800745e <_vfiprintf_r+0x10e>
 80073cc:	1b73      	subs	r3, r6, r5
 80073ce:	9305      	str	r3, [sp, #20]
 80073d0:	42ae      	cmp	r6, r5
 80073d2:	d00b      	beq.n	80073ec <_vfiprintf_r+0x9c>
 80073d4:	002a      	movs	r2, r5
 80073d6:	0039      	movs	r1, r7
 80073d8:	9803      	ldr	r0, [sp, #12]
 80073da:	f7ff ffa6 	bl	800732a <__sfputs_r>
 80073de:	3001      	adds	r0, #1
 80073e0:	d100      	bne.n	80073e4 <_vfiprintf_r+0x94>
 80073e2:	e0ae      	b.n	8007542 <_vfiprintf_r+0x1f2>
 80073e4:	6963      	ldr	r3, [r4, #20]
 80073e6:	9a05      	ldr	r2, [sp, #20]
 80073e8:	189b      	adds	r3, r3, r2
 80073ea:	6163      	str	r3, [r4, #20]
 80073ec:	7833      	ldrb	r3, [r6, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d100      	bne.n	80073f4 <_vfiprintf_r+0xa4>
 80073f2:	e0a6      	b.n	8007542 <_vfiprintf_r+0x1f2>
 80073f4:	2201      	movs	r2, #1
 80073f6:	2300      	movs	r3, #0
 80073f8:	4252      	negs	r2, r2
 80073fa:	6062      	str	r2, [r4, #4]
 80073fc:	a904      	add	r1, sp, #16
 80073fe:	3254      	adds	r2, #84	@ 0x54
 8007400:	1852      	adds	r2, r2, r1
 8007402:	1c75      	adds	r5, r6, #1
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	60e3      	str	r3, [r4, #12]
 8007408:	60a3      	str	r3, [r4, #8]
 800740a:	7013      	strb	r3, [r2, #0]
 800740c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800740e:	4b59      	ldr	r3, [pc, #356]	@ (8007574 <_vfiprintf_r+0x224>)
 8007410:	2205      	movs	r2, #5
 8007412:	0018      	movs	r0, r3
 8007414:	7829      	ldrb	r1, [r5, #0]
 8007416:	9305      	str	r3, [sp, #20]
 8007418:	f000 fbe0 	bl	8007bdc <memchr>
 800741c:	1c6e      	adds	r6, r5, #1
 800741e:	2800      	cmp	r0, #0
 8007420:	d11f      	bne.n	8007462 <_vfiprintf_r+0x112>
 8007422:	6822      	ldr	r2, [r4, #0]
 8007424:	06d3      	lsls	r3, r2, #27
 8007426:	d504      	bpl.n	8007432 <_vfiprintf_r+0xe2>
 8007428:	2353      	movs	r3, #83	@ 0x53
 800742a:	a904      	add	r1, sp, #16
 800742c:	185b      	adds	r3, r3, r1
 800742e:	2120      	movs	r1, #32
 8007430:	7019      	strb	r1, [r3, #0]
 8007432:	0713      	lsls	r3, r2, #28
 8007434:	d504      	bpl.n	8007440 <_vfiprintf_r+0xf0>
 8007436:	2353      	movs	r3, #83	@ 0x53
 8007438:	a904      	add	r1, sp, #16
 800743a:	185b      	adds	r3, r3, r1
 800743c:	212b      	movs	r1, #43	@ 0x2b
 800743e:	7019      	strb	r1, [r3, #0]
 8007440:	782b      	ldrb	r3, [r5, #0]
 8007442:	2b2a      	cmp	r3, #42	@ 0x2a
 8007444:	d016      	beq.n	8007474 <_vfiprintf_r+0x124>
 8007446:	002e      	movs	r6, r5
 8007448:	2100      	movs	r1, #0
 800744a:	200a      	movs	r0, #10
 800744c:	68e3      	ldr	r3, [r4, #12]
 800744e:	7832      	ldrb	r2, [r6, #0]
 8007450:	1c75      	adds	r5, r6, #1
 8007452:	3a30      	subs	r2, #48	@ 0x30
 8007454:	2a09      	cmp	r2, #9
 8007456:	d950      	bls.n	80074fa <_vfiprintf_r+0x1aa>
 8007458:	2900      	cmp	r1, #0
 800745a:	d111      	bne.n	8007480 <_vfiprintf_r+0x130>
 800745c:	e017      	b.n	800748e <_vfiprintf_r+0x13e>
 800745e:	3601      	adds	r6, #1
 8007460:	e7af      	b.n	80073c2 <_vfiprintf_r+0x72>
 8007462:	9b05      	ldr	r3, [sp, #20]
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	1ac0      	subs	r0, r0, r3
 8007468:	2301      	movs	r3, #1
 800746a:	4083      	lsls	r3, r0
 800746c:	4313      	orrs	r3, r2
 800746e:	0035      	movs	r5, r6
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	e7cc      	b.n	800740e <_vfiprintf_r+0xbe>
 8007474:	9b07      	ldr	r3, [sp, #28]
 8007476:	1d19      	adds	r1, r3, #4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	9107      	str	r1, [sp, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	db01      	blt.n	8007484 <_vfiprintf_r+0x134>
 8007480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007482:	e004      	b.n	800748e <_vfiprintf_r+0x13e>
 8007484:	425b      	negs	r3, r3
 8007486:	60e3      	str	r3, [r4, #12]
 8007488:	2302      	movs	r3, #2
 800748a:	4313      	orrs	r3, r2
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	7833      	ldrb	r3, [r6, #0]
 8007490:	2b2e      	cmp	r3, #46	@ 0x2e
 8007492:	d10c      	bne.n	80074ae <_vfiprintf_r+0x15e>
 8007494:	7873      	ldrb	r3, [r6, #1]
 8007496:	2b2a      	cmp	r3, #42	@ 0x2a
 8007498:	d134      	bne.n	8007504 <_vfiprintf_r+0x1b4>
 800749a:	9b07      	ldr	r3, [sp, #28]
 800749c:	3602      	adds	r6, #2
 800749e:	1d1a      	adds	r2, r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	9207      	str	r2, [sp, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da01      	bge.n	80074ac <_vfiprintf_r+0x15c>
 80074a8:	2301      	movs	r3, #1
 80074aa:	425b      	negs	r3, r3
 80074ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ae:	4d32      	ldr	r5, [pc, #200]	@ (8007578 <_vfiprintf_r+0x228>)
 80074b0:	2203      	movs	r2, #3
 80074b2:	0028      	movs	r0, r5
 80074b4:	7831      	ldrb	r1, [r6, #0]
 80074b6:	f000 fb91 	bl	8007bdc <memchr>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d006      	beq.n	80074cc <_vfiprintf_r+0x17c>
 80074be:	2340      	movs	r3, #64	@ 0x40
 80074c0:	1b40      	subs	r0, r0, r5
 80074c2:	4083      	lsls	r3, r0
 80074c4:	6822      	ldr	r2, [r4, #0]
 80074c6:	3601      	adds	r6, #1
 80074c8:	4313      	orrs	r3, r2
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	7831      	ldrb	r1, [r6, #0]
 80074ce:	2206      	movs	r2, #6
 80074d0:	482a      	ldr	r0, [pc, #168]	@ (800757c <_vfiprintf_r+0x22c>)
 80074d2:	1c75      	adds	r5, r6, #1
 80074d4:	7621      	strb	r1, [r4, #24]
 80074d6:	f000 fb81 	bl	8007bdc <memchr>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d040      	beq.n	8007560 <_vfiprintf_r+0x210>
 80074de:	4b28      	ldr	r3, [pc, #160]	@ (8007580 <_vfiprintf_r+0x230>)
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d122      	bne.n	800752a <_vfiprintf_r+0x1da>
 80074e4:	2207      	movs	r2, #7
 80074e6:	9b07      	ldr	r3, [sp, #28]
 80074e8:	3307      	adds	r3, #7
 80074ea:	4393      	bics	r3, r2
 80074ec:	3308      	adds	r3, #8
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	6963      	ldr	r3, [r4, #20]
 80074f2:	9a04      	ldr	r2, [sp, #16]
 80074f4:	189b      	adds	r3, r3, r2
 80074f6:	6163      	str	r3, [r4, #20]
 80074f8:	e762      	b.n	80073c0 <_vfiprintf_r+0x70>
 80074fa:	4343      	muls	r3, r0
 80074fc:	002e      	movs	r6, r5
 80074fe:	2101      	movs	r1, #1
 8007500:	189b      	adds	r3, r3, r2
 8007502:	e7a4      	b.n	800744e <_vfiprintf_r+0xfe>
 8007504:	2300      	movs	r3, #0
 8007506:	200a      	movs	r0, #10
 8007508:	0019      	movs	r1, r3
 800750a:	3601      	adds	r6, #1
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	7832      	ldrb	r2, [r6, #0]
 8007510:	1c75      	adds	r5, r6, #1
 8007512:	3a30      	subs	r2, #48	@ 0x30
 8007514:	2a09      	cmp	r2, #9
 8007516:	d903      	bls.n	8007520 <_vfiprintf_r+0x1d0>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0c8      	beq.n	80074ae <_vfiprintf_r+0x15e>
 800751c:	9109      	str	r1, [sp, #36]	@ 0x24
 800751e:	e7c6      	b.n	80074ae <_vfiprintf_r+0x15e>
 8007520:	4341      	muls	r1, r0
 8007522:	002e      	movs	r6, r5
 8007524:	2301      	movs	r3, #1
 8007526:	1889      	adds	r1, r1, r2
 8007528:	e7f1      	b.n	800750e <_vfiprintf_r+0x1be>
 800752a:	aa07      	add	r2, sp, #28
 800752c:	9200      	str	r2, [sp, #0]
 800752e:	0021      	movs	r1, r4
 8007530:	003a      	movs	r2, r7
 8007532:	4b14      	ldr	r3, [pc, #80]	@ (8007584 <_vfiprintf_r+0x234>)
 8007534:	9803      	ldr	r0, [sp, #12]
 8007536:	e000      	b.n	800753a <_vfiprintf_r+0x1ea>
 8007538:	bf00      	nop
 800753a:	9004      	str	r0, [sp, #16]
 800753c:	9b04      	ldr	r3, [sp, #16]
 800753e:	3301      	adds	r3, #1
 8007540:	d1d6      	bne.n	80074f0 <_vfiprintf_r+0x1a0>
 8007542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007544:	07db      	lsls	r3, r3, #31
 8007546:	d405      	bmi.n	8007554 <_vfiprintf_r+0x204>
 8007548:	89bb      	ldrh	r3, [r7, #12]
 800754a:	059b      	lsls	r3, r3, #22
 800754c:	d402      	bmi.n	8007554 <_vfiprintf_r+0x204>
 800754e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007550:	f7ff fdd2 	bl	80070f8 <__retarget_lock_release_recursive>
 8007554:	89bb      	ldrh	r3, [r7, #12]
 8007556:	065b      	lsls	r3, r3, #25
 8007558:	d500      	bpl.n	800755c <_vfiprintf_r+0x20c>
 800755a:	e71e      	b.n	800739a <_vfiprintf_r+0x4a>
 800755c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800755e:	e71e      	b.n	800739e <_vfiprintf_r+0x4e>
 8007560:	aa07      	add	r2, sp, #28
 8007562:	9200      	str	r2, [sp, #0]
 8007564:	0021      	movs	r1, r4
 8007566:	003a      	movs	r2, r7
 8007568:	4b06      	ldr	r3, [pc, #24]	@ (8007584 <_vfiprintf_r+0x234>)
 800756a:	9803      	ldr	r0, [sp, #12]
 800756c:	f000 f87c 	bl	8007668 <_printf_i>
 8007570:	e7e3      	b.n	800753a <_vfiprintf_r+0x1ea>
 8007572:	46c0      	nop			@ (mov r8, r8)
 8007574:	08008cfc 	.word	0x08008cfc
 8007578:	08008d02 	.word	0x08008d02
 800757c:	08008d06 	.word	0x08008d06
 8007580:	00000000 	.word	0x00000000
 8007584:	0800732b 	.word	0x0800732b

08007588 <_printf_common>:
 8007588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800758a:	0016      	movs	r6, r2
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	688a      	ldr	r2, [r1, #8]
 8007590:	690b      	ldr	r3, [r1, #16]
 8007592:	000c      	movs	r4, r1
 8007594:	9000      	str	r0, [sp, #0]
 8007596:	4293      	cmp	r3, r2
 8007598:	da00      	bge.n	800759c <_printf_common+0x14>
 800759a:	0013      	movs	r3, r2
 800759c:	0022      	movs	r2, r4
 800759e:	6033      	str	r3, [r6, #0]
 80075a0:	3243      	adds	r2, #67	@ 0x43
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	2a00      	cmp	r2, #0
 80075a6:	d001      	beq.n	80075ac <_printf_common+0x24>
 80075a8:	3301      	adds	r3, #1
 80075aa:	6033      	str	r3, [r6, #0]
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	069b      	lsls	r3, r3, #26
 80075b0:	d502      	bpl.n	80075b8 <_printf_common+0x30>
 80075b2:	6833      	ldr	r3, [r6, #0]
 80075b4:	3302      	adds	r3, #2
 80075b6:	6033      	str	r3, [r6, #0]
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	2306      	movs	r3, #6
 80075bc:	0015      	movs	r5, r2
 80075be:	401d      	ands	r5, r3
 80075c0:	421a      	tst	r2, r3
 80075c2:	d027      	beq.n	8007614 <_printf_common+0x8c>
 80075c4:	0023      	movs	r3, r4
 80075c6:	3343      	adds	r3, #67	@ 0x43
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	1e5a      	subs	r2, r3, #1
 80075cc:	4193      	sbcs	r3, r2
 80075ce:	6822      	ldr	r2, [r4, #0]
 80075d0:	0692      	lsls	r2, r2, #26
 80075d2:	d430      	bmi.n	8007636 <_printf_common+0xae>
 80075d4:	0022      	movs	r2, r4
 80075d6:	9901      	ldr	r1, [sp, #4]
 80075d8:	9800      	ldr	r0, [sp, #0]
 80075da:	9d08      	ldr	r5, [sp, #32]
 80075dc:	3243      	adds	r2, #67	@ 0x43
 80075de:	47a8      	blx	r5
 80075e0:	3001      	adds	r0, #1
 80075e2:	d025      	beq.n	8007630 <_printf_common+0xa8>
 80075e4:	2206      	movs	r2, #6
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	2500      	movs	r5, #0
 80075ea:	4013      	ands	r3, r2
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d105      	bne.n	80075fc <_printf_common+0x74>
 80075f0:	6833      	ldr	r3, [r6, #0]
 80075f2:	68e5      	ldr	r5, [r4, #12]
 80075f4:	1aed      	subs	r5, r5, r3
 80075f6:	43eb      	mvns	r3, r5
 80075f8:	17db      	asrs	r3, r3, #31
 80075fa:	401d      	ands	r5, r3
 80075fc:	68a3      	ldr	r3, [r4, #8]
 80075fe:	6922      	ldr	r2, [r4, #16]
 8007600:	4293      	cmp	r3, r2
 8007602:	dd01      	ble.n	8007608 <_printf_common+0x80>
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	18ed      	adds	r5, r5, r3
 8007608:	2600      	movs	r6, #0
 800760a:	42b5      	cmp	r5, r6
 800760c:	d120      	bne.n	8007650 <_printf_common+0xc8>
 800760e:	2000      	movs	r0, #0
 8007610:	e010      	b.n	8007634 <_printf_common+0xac>
 8007612:	3501      	adds	r5, #1
 8007614:	68e3      	ldr	r3, [r4, #12]
 8007616:	6832      	ldr	r2, [r6, #0]
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	42ab      	cmp	r3, r5
 800761c:	ddd2      	ble.n	80075c4 <_printf_common+0x3c>
 800761e:	0022      	movs	r2, r4
 8007620:	2301      	movs	r3, #1
 8007622:	9901      	ldr	r1, [sp, #4]
 8007624:	9800      	ldr	r0, [sp, #0]
 8007626:	9f08      	ldr	r7, [sp, #32]
 8007628:	3219      	adds	r2, #25
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	d1f0      	bne.n	8007612 <_printf_common+0x8a>
 8007630:	2001      	movs	r0, #1
 8007632:	4240      	negs	r0, r0
 8007634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007636:	2030      	movs	r0, #48	@ 0x30
 8007638:	18e1      	adds	r1, r4, r3
 800763a:	3143      	adds	r1, #67	@ 0x43
 800763c:	7008      	strb	r0, [r1, #0]
 800763e:	0021      	movs	r1, r4
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	3145      	adds	r1, #69	@ 0x45
 8007644:	7809      	ldrb	r1, [r1, #0]
 8007646:	18a2      	adds	r2, r4, r2
 8007648:	3243      	adds	r2, #67	@ 0x43
 800764a:	3302      	adds	r3, #2
 800764c:	7011      	strb	r1, [r2, #0]
 800764e:	e7c1      	b.n	80075d4 <_printf_common+0x4c>
 8007650:	0022      	movs	r2, r4
 8007652:	2301      	movs	r3, #1
 8007654:	9901      	ldr	r1, [sp, #4]
 8007656:	9800      	ldr	r0, [sp, #0]
 8007658:	9f08      	ldr	r7, [sp, #32]
 800765a:	321a      	adds	r2, #26
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	d0e6      	beq.n	8007630 <_printf_common+0xa8>
 8007662:	3601      	adds	r6, #1
 8007664:	e7d1      	b.n	800760a <_printf_common+0x82>
	...

08007668 <_printf_i>:
 8007668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766a:	b08b      	sub	sp, #44	@ 0x2c
 800766c:	9206      	str	r2, [sp, #24]
 800766e:	000a      	movs	r2, r1
 8007670:	3243      	adds	r2, #67	@ 0x43
 8007672:	9307      	str	r3, [sp, #28]
 8007674:	9005      	str	r0, [sp, #20]
 8007676:	9203      	str	r2, [sp, #12]
 8007678:	7e0a      	ldrb	r2, [r1, #24]
 800767a:	000c      	movs	r4, r1
 800767c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800767e:	2a78      	cmp	r2, #120	@ 0x78
 8007680:	d809      	bhi.n	8007696 <_printf_i+0x2e>
 8007682:	2a62      	cmp	r2, #98	@ 0x62
 8007684:	d80b      	bhi.n	800769e <_printf_i+0x36>
 8007686:	2a00      	cmp	r2, #0
 8007688:	d100      	bne.n	800768c <_printf_i+0x24>
 800768a:	e0ba      	b.n	8007802 <_printf_i+0x19a>
 800768c:	497a      	ldr	r1, [pc, #488]	@ (8007878 <_printf_i+0x210>)
 800768e:	9104      	str	r1, [sp, #16]
 8007690:	2a58      	cmp	r2, #88	@ 0x58
 8007692:	d100      	bne.n	8007696 <_printf_i+0x2e>
 8007694:	e08e      	b.n	80077b4 <_printf_i+0x14c>
 8007696:	0025      	movs	r5, r4
 8007698:	3542      	adds	r5, #66	@ 0x42
 800769a:	702a      	strb	r2, [r5, #0]
 800769c:	e022      	b.n	80076e4 <_printf_i+0x7c>
 800769e:	0010      	movs	r0, r2
 80076a0:	3863      	subs	r0, #99	@ 0x63
 80076a2:	2815      	cmp	r0, #21
 80076a4:	d8f7      	bhi.n	8007696 <_printf_i+0x2e>
 80076a6:	f7f8 fd2d 	bl	8000104 <__gnu_thumb1_case_shi>
 80076aa:	0016      	.short	0x0016
 80076ac:	fff6001f 	.word	0xfff6001f
 80076b0:	fff6fff6 	.word	0xfff6fff6
 80076b4:	001ffff6 	.word	0x001ffff6
 80076b8:	fff6fff6 	.word	0xfff6fff6
 80076bc:	fff6fff6 	.word	0xfff6fff6
 80076c0:	0036009f 	.word	0x0036009f
 80076c4:	fff6007e 	.word	0xfff6007e
 80076c8:	00b0fff6 	.word	0x00b0fff6
 80076cc:	0036fff6 	.word	0x0036fff6
 80076d0:	fff6fff6 	.word	0xfff6fff6
 80076d4:	0082      	.short	0x0082
 80076d6:	0025      	movs	r5, r4
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	3542      	adds	r5, #66	@ 0x42
 80076dc:	1d11      	adds	r1, r2, #4
 80076de:	6019      	str	r1, [r3, #0]
 80076e0:	6813      	ldr	r3, [r2, #0]
 80076e2:	702b      	strb	r3, [r5, #0]
 80076e4:	2301      	movs	r3, #1
 80076e6:	e09e      	b.n	8007826 <_printf_i+0x1be>
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	6809      	ldr	r1, [r1, #0]
 80076ec:	1d02      	adds	r2, r0, #4
 80076ee:	060d      	lsls	r5, r1, #24
 80076f0:	d50b      	bpl.n	800770a <_printf_i+0xa2>
 80076f2:	6806      	ldr	r6, [r0, #0]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	2e00      	cmp	r6, #0
 80076f8:	da03      	bge.n	8007702 <_printf_i+0x9a>
 80076fa:	232d      	movs	r3, #45	@ 0x2d
 80076fc:	9a03      	ldr	r2, [sp, #12]
 80076fe:	4276      	negs	r6, r6
 8007700:	7013      	strb	r3, [r2, #0]
 8007702:	4b5d      	ldr	r3, [pc, #372]	@ (8007878 <_printf_i+0x210>)
 8007704:	270a      	movs	r7, #10
 8007706:	9304      	str	r3, [sp, #16]
 8007708:	e018      	b.n	800773c <_printf_i+0xd4>
 800770a:	6806      	ldr	r6, [r0, #0]
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	0649      	lsls	r1, r1, #25
 8007710:	d5f1      	bpl.n	80076f6 <_printf_i+0x8e>
 8007712:	b236      	sxth	r6, r6
 8007714:	e7ef      	b.n	80076f6 <_printf_i+0x8e>
 8007716:	6808      	ldr	r0, [r1, #0]
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	c940      	ldmia	r1!, {r6}
 800771c:	0605      	lsls	r5, r0, #24
 800771e:	d402      	bmi.n	8007726 <_printf_i+0xbe>
 8007720:	0640      	lsls	r0, r0, #25
 8007722:	d500      	bpl.n	8007726 <_printf_i+0xbe>
 8007724:	b2b6      	uxth	r6, r6
 8007726:	6019      	str	r1, [r3, #0]
 8007728:	4b53      	ldr	r3, [pc, #332]	@ (8007878 <_printf_i+0x210>)
 800772a:	270a      	movs	r7, #10
 800772c:	9304      	str	r3, [sp, #16]
 800772e:	2a6f      	cmp	r2, #111	@ 0x6f
 8007730:	d100      	bne.n	8007734 <_printf_i+0xcc>
 8007732:	3f02      	subs	r7, #2
 8007734:	0023      	movs	r3, r4
 8007736:	2200      	movs	r2, #0
 8007738:	3343      	adds	r3, #67	@ 0x43
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	6863      	ldr	r3, [r4, #4]
 800773e:	60a3      	str	r3, [r4, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	db06      	blt.n	8007752 <_printf_i+0xea>
 8007744:	2104      	movs	r1, #4
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	9d03      	ldr	r5, [sp, #12]
 800774a:	438a      	bics	r2, r1
 800774c:	6022      	str	r2, [r4, #0]
 800774e:	4333      	orrs	r3, r6
 8007750:	d00c      	beq.n	800776c <_printf_i+0x104>
 8007752:	9d03      	ldr	r5, [sp, #12]
 8007754:	0030      	movs	r0, r6
 8007756:	0039      	movs	r1, r7
 8007758:	f7f8 fd64 	bl	8000224 <__aeabi_uidivmod>
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	3d01      	subs	r5, #1
 8007760:	5c5b      	ldrb	r3, [r3, r1]
 8007762:	702b      	strb	r3, [r5, #0]
 8007764:	0033      	movs	r3, r6
 8007766:	0006      	movs	r6, r0
 8007768:	429f      	cmp	r7, r3
 800776a:	d9f3      	bls.n	8007754 <_printf_i+0xec>
 800776c:	2f08      	cmp	r7, #8
 800776e:	d109      	bne.n	8007784 <_printf_i+0x11c>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	07db      	lsls	r3, r3, #31
 8007774:	d506      	bpl.n	8007784 <_printf_i+0x11c>
 8007776:	6862      	ldr	r2, [r4, #4]
 8007778:	6923      	ldr	r3, [r4, #16]
 800777a:	429a      	cmp	r2, r3
 800777c:	dc02      	bgt.n	8007784 <_printf_i+0x11c>
 800777e:	2330      	movs	r3, #48	@ 0x30
 8007780:	3d01      	subs	r5, #1
 8007782:	702b      	strb	r3, [r5, #0]
 8007784:	9b03      	ldr	r3, [sp, #12]
 8007786:	1b5b      	subs	r3, r3, r5
 8007788:	6123      	str	r3, [r4, #16]
 800778a:	9b07      	ldr	r3, [sp, #28]
 800778c:	0021      	movs	r1, r4
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	9805      	ldr	r0, [sp, #20]
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	aa09      	add	r2, sp, #36	@ 0x24
 8007796:	f7ff fef7 	bl	8007588 <_printf_common>
 800779a:	3001      	adds	r0, #1
 800779c:	d148      	bne.n	8007830 <_printf_i+0x1c8>
 800779e:	2001      	movs	r0, #1
 80077a0:	4240      	negs	r0, r0
 80077a2:	b00b      	add	sp, #44	@ 0x2c
 80077a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077a6:	2220      	movs	r2, #32
 80077a8:	6809      	ldr	r1, [r1, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	6022      	str	r2, [r4, #0]
 80077ae:	2278      	movs	r2, #120	@ 0x78
 80077b0:	4932      	ldr	r1, [pc, #200]	@ (800787c <_printf_i+0x214>)
 80077b2:	9104      	str	r1, [sp, #16]
 80077b4:	0021      	movs	r1, r4
 80077b6:	3145      	adds	r1, #69	@ 0x45
 80077b8:	700a      	strb	r2, [r1, #0]
 80077ba:	6819      	ldr	r1, [r3, #0]
 80077bc:	6822      	ldr	r2, [r4, #0]
 80077be:	c940      	ldmia	r1!, {r6}
 80077c0:	0610      	lsls	r0, r2, #24
 80077c2:	d402      	bmi.n	80077ca <_printf_i+0x162>
 80077c4:	0650      	lsls	r0, r2, #25
 80077c6:	d500      	bpl.n	80077ca <_printf_i+0x162>
 80077c8:	b2b6      	uxth	r6, r6
 80077ca:	6019      	str	r1, [r3, #0]
 80077cc:	07d3      	lsls	r3, r2, #31
 80077ce:	d502      	bpl.n	80077d6 <_printf_i+0x16e>
 80077d0:	2320      	movs	r3, #32
 80077d2:	4313      	orrs	r3, r2
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d001      	beq.n	80077de <_printf_i+0x176>
 80077da:	2710      	movs	r7, #16
 80077dc:	e7aa      	b.n	8007734 <_printf_i+0xcc>
 80077de:	2220      	movs	r2, #32
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	4393      	bics	r3, r2
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	e7f8      	b.n	80077da <_printf_i+0x172>
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	680d      	ldr	r5, [r1, #0]
 80077ec:	1d10      	adds	r0, r2, #4
 80077ee:	6949      	ldr	r1, [r1, #20]
 80077f0:	6018      	str	r0, [r3, #0]
 80077f2:	6813      	ldr	r3, [r2, #0]
 80077f4:	062e      	lsls	r6, r5, #24
 80077f6:	d501      	bpl.n	80077fc <_printf_i+0x194>
 80077f8:	6019      	str	r1, [r3, #0]
 80077fa:	e002      	b.n	8007802 <_printf_i+0x19a>
 80077fc:	066d      	lsls	r5, r5, #25
 80077fe:	d5fb      	bpl.n	80077f8 <_printf_i+0x190>
 8007800:	8019      	strh	r1, [r3, #0]
 8007802:	2300      	movs	r3, #0
 8007804:	9d03      	ldr	r5, [sp, #12]
 8007806:	6123      	str	r3, [r4, #16]
 8007808:	e7bf      	b.n	800778a <_printf_i+0x122>
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	1d11      	adds	r1, r2, #4
 800780e:	6019      	str	r1, [r3, #0]
 8007810:	6815      	ldr	r5, [r2, #0]
 8007812:	2100      	movs	r1, #0
 8007814:	0028      	movs	r0, r5
 8007816:	6862      	ldr	r2, [r4, #4]
 8007818:	f000 f9e0 	bl	8007bdc <memchr>
 800781c:	2800      	cmp	r0, #0
 800781e:	d001      	beq.n	8007824 <_printf_i+0x1bc>
 8007820:	1b40      	subs	r0, r0, r5
 8007822:	6060      	str	r0, [r4, #4]
 8007824:	6863      	ldr	r3, [r4, #4]
 8007826:	6123      	str	r3, [r4, #16]
 8007828:	2300      	movs	r3, #0
 800782a:	9a03      	ldr	r2, [sp, #12]
 800782c:	7013      	strb	r3, [r2, #0]
 800782e:	e7ac      	b.n	800778a <_printf_i+0x122>
 8007830:	002a      	movs	r2, r5
 8007832:	6923      	ldr	r3, [r4, #16]
 8007834:	9906      	ldr	r1, [sp, #24]
 8007836:	9805      	ldr	r0, [sp, #20]
 8007838:	9d07      	ldr	r5, [sp, #28]
 800783a:	47a8      	blx	r5
 800783c:	3001      	adds	r0, #1
 800783e:	d0ae      	beq.n	800779e <_printf_i+0x136>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	079b      	lsls	r3, r3, #30
 8007844:	d415      	bmi.n	8007872 <_printf_i+0x20a>
 8007846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007848:	68e0      	ldr	r0, [r4, #12]
 800784a:	4298      	cmp	r0, r3
 800784c:	daa9      	bge.n	80077a2 <_printf_i+0x13a>
 800784e:	0018      	movs	r0, r3
 8007850:	e7a7      	b.n	80077a2 <_printf_i+0x13a>
 8007852:	0022      	movs	r2, r4
 8007854:	2301      	movs	r3, #1
 8007856:	9906      	ldr	r1, [sp, #24]
 8007858:	9805      	ldr	r0, [sp, #20]
 800785a:	9e07      	ldr	r6, [sp, #28]
 800785c:	3219      	adds	r2, #25
 800785e:	47b0      	blx	r6
 8007860:	3001      	adds	r0, #1
 8007862:	d09c      	beq.n	800779e <_printf_i+0x136>
 8007864:	3501      	adds	r5, #1
 8007866:	68e3      	ldr	r3, [r4, #12]
 8007868:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800786a:	1a9b      	subs	r3, r3, r2
 800786c:	42ab      	cmp	r3, r5
 800786e:	dcf0      	bgt.n	8007852 <_printf_i+0x1ea>
 8007870:	e7e9      	b.n	8007846 <_printf_i+0x1de>
 8007872:	2500      	movs	r5, #0
 8007874:	e7f7      	b.n	8007866 <_printf_i+0x1fe>
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	08008d0d 	.word	0x08008d0d
 800787c:	08008d1e 	.word	0x08008d1e

08007880 <__sflush_r>:
 8007880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007882:	220c      	movs	r2, #12
 8007884:	5e8b      	ldrsh	r3, [r1, r2]
 8007886:	0005      	movs	r5, r0
 8007888:	000c      	movs	r4, r1
 800788a:	071a      	lsls	r2, r3, #28
 800788c:	d456      	bmi.n	800793c <__sflush_r+0xbc>
 800788e:	684a      	ldr	r2, [r1, #4]
 8007890:	2a00      	cmp	r2, #0
 8007892:	dc02      	bgt.n	800789a <__sflush_r+0x1a>
 8007894:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007896:	2a00      	cmp	r2, #0
 8007898:	dd4e      	ble.n	8007938 <__sflush_r+0xb8>
 800789a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800789c:	2f00      	cmp	r7, #0
 800789e:	d04b      	beq.n	8007938 <__sflush_r+0xb8>
 80078a0:	2200      	movs	r2, #0
 80078a2:	2080      	movs	r0, #128	@ 0x80
 80078a4:	682e      	ldr	r6, [r5, #0]
 80078a6:	602a      	str	r2, [r5, #0]
 80078a8:	001a      	movs	r2, r3
 80078aa:	0140      	lsls	r0, r0, #5
 80078ac:	6a21      	ldr	r1, [r4, #32]
 80078ae:	4002      	ands	r2, r0
 80078b0:	4203      	tst	r3, r0
 80078b2:	d033      	beq.n	800791c <__sflush_r+0x9c>
 80078b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	075b      	lsls	r3, r3, #29
 80078ba:	d506      	bpl.n	80078ca <__sflush_r+0x4a>
 80078bc:	6863      	ldr	r3, [r4, #4]
 80078be:	1ad2      	subs	r2, r2, r3
 80078c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <__sflush_r+0x4a>
 80078c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078c8:	1ad2      	subs	r2, r2, r3
 80078ca:	2300      	movs	r3, #0
 80078cc:	0028      	movs	r0, r5
 80078ce:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80078d0:	6a21      	ldr	r1, [r4, #32]
 80078d2:	47b8      	blx	r7
 80078d4:	89a2      	ldrh	r2, [r4, #12]
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	d106      	bne.n	80078e8 <__sflush_r+0x68>
 80078da:	6829      	ldr	r1, [r5, #0]
 80078dc:	291d      	cmp	r1, #29
 80078de:	d846      	bhi.n	800796e <__sflush_r+0xee>
 80078e0:	4b29      	ldr	r3, [pc, #164]	@ (8007988 <__sflush_r+0x108>)
 80078e2:	40cb      	lsrs	r3, r1
 80078e4:	07db      	lsls	r3, r3, #31
 80078e6:	d542      	bpl.n	800796e <__sflush_r+0xee>
 80078e8:	2300      	movs	r3, #0
 80078ea:	6063      	str	r3, [r4, #4]
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	04d2      	lsls	r2, r2, #19
 80078f2:	d505      	bpl.n	8007900 <__sflush_r+0x80>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <__sflush_r+0x7e>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d100      	bne.n	8007900 <__sflush_r+0x80>
 80078fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007902:	602e      	str	r6, [r5, #0]
 8007904:	2900      	cmp	r1, #0
 8007906:	d017      	beq.n	8007938 <__sflush_r+0xb8>
 8007908:	0023      	movs	r3, r4
 800790a:	3344      	adds	r3, #68	@ 0x44
 800790c:	4299      	cmp	r1, r3
 800790e:	d002      	beq.n	8007916 <__sflush_r+0x96>
 8007910:	0028      	movs	r0, r5
 8007912:	f7ff fbf9 	bl	8007108 <_free_r>
 8007916:	2300      	movs	r3, #0
 8007918:	6363      	str	r3, [r4, #52]	@ 0x34
 800791a:	e00d      	b.n	8007938 <__sflush_r+0xb8>
 800791c:	2301      	movs	r3, #1
 800791e:	0028      	movs	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	0002      	movs	r2, r0
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d1c6      	bne.n	80078b6 <__sflush_r+0x36>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0c3      	beq.n	80078b6 <__sflush_r+0x36>
 800792e:	2b1d      	cmp	r3, #29
 8007930:	d001      	beq.n	8007936 <__sflush_r+0xb6>
 8007932:	2b16      	cmp	r3, #22
 8007934:	d11a      	bne.n	800796c <__sflush_r+0xec>
 8007936:	602e      	str	r6, [r5, #0]
 8007938:	2000      	movs	r0, #0
 800793a:	e01e      	b.n	800797a <__sflush_r+0xfa>
 800793c:	690e      	ldr	r6, [r1, #16]
 800793e:	2e00      	cmp	r6, #0
 8007940:	d0fa      	beq.n	8007938 <__sflush_r+0xb8>
 8007942:	680f      	ldr	r7, [r1, #0]
 8007944:	600e      	str	r6, [r1, #0]
 8007946:	1bba      	subs	r2, r7, r6
 8007948:	9201      	str	r2, [sp, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	079b      	lsls	r3, r3, #30
 800794e:	d100      	bne.n	8007952 <__sflush_r+0xd2>
 8007950:	694a      	ldr	r2, [r1, #20]
 8007952:	60a2      	str	r2, [r4, #8]
 8007954:	9b01      	ldr	r3, [sp, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	ddee      	ble.n	8007938 <__sflush_r+0xb8>
 800795a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800795c:	0032      	movs	r2, r6
 800795e:	001f      	movs	r7, r3
 8007960:	0028      	movs	r0, r5
 8007962:	9b01      	ldr	r3, [sp, #4]
 8007964:	6a21      	ldr	r1, [r4, #32]
 8007966:	47b8      	blx	r7
 8007968:	2800      	cmp	r0, #0
 800796a:	dc07      	bgt.n	800797c <__sflush_r+0xfc>
 800796c:	89a2      	ldrh	r2, [r4, #12]
 800796e:	2340      	movs	r3, #64	@ 0x40
 8007970:	2001      	movs	r0, #1
 8007972:	4313      	orrs	r3, r2
 8007974:	b21b      	sxth	r3, r3
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	4240      	negs	r0, r0
 800797a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	1836      	adds	r6, r6, r0
 8007980:	1a1b      	subs	r3, r3, r0
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	e7e6      	b.n	8007954 <__sflush_r+0xd4>
 8007986:	46c0      	nop			@ (mov r8, r8)
 8007988:	20400001 	.word	0x20400001

0800798c <_fflush_r>:
 800798c:	690b      	ldr	r3, [r1, #16]
 800798e:	b570      	push	{r4, r5, r6, lr}
 8007990:	0005      	movs	r5, r0
 8007992:	000c      	movs	r4, r1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <_fflush_r+0x12>
 8007998:	2500      	movs	r5, #0
 800799a:	0028      	movs	r0, r5
 800799c:	bd70      	pop	{r4, r5, r6, pc}
 800799e:	2800      	cmp	r0, #0
 80079a0:	d004      	beq.n	80079ac <_fflush_r+0x20>
 80079a2:	6a03      	ldr	r3, [r0, #32]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <_fflush_r+0x20>
 80079a8:	f7ff fa94 	bl	8006ed4 <__sinit>
 80079ac:	220c      	movs	r2, #12
 80079ae:	5ea3      	ldrsh	r3, [r4, r2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0f1      	beq.n	8007998 <_fflush_r+0xc>
 80079b4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079b6:	07d2      	lsls	r2, r2, #31
 80079b8:	d404      	bmi.n	80079c4 <_fflush_r+0x38>
 80079ba:	059b      	lsls	r3, r3, #22
 80079bc:	d402      	bmi.n	80079c4 <_fflush_r+0x38>
 80079be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079c0:	f7ff fb99 	bl	80070f6 <__retarget_lock_acquire_recursive>
 80079c4:	0028      	movs	r0, r5
 80079c6:	0021      	movs	r1, r4
 80079c8:	f7ff ff5a 	bl	8007880 <__sflush_r>
 80079cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079ce:	0005      	movs	r5, r0
 80079d0:	07db      	lsls	r3, r3, #31
 80079d2:	d4e2      	bmi.n	800799a <_fflush_r+0xe>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	059b      	lsls	r3, r3, #22
 80079d8:	d4df      	bmi.n	800799a <_fflush_r+0xe>
 80079da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079dc:	f7ff fb8c 	bl	80070f8 <__retarget_lock_release_recursive>
 80079e0:	e7db      	b.n	800799a <_fflush_r+0xe>

080079e2 <__swbuf_r>:
 80079e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e4:	0006      	movs	r6, r0
 80079e6:	000d      	movs	r5, r1
 80079e8:	0014      	movs	r4, r2
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d004      	beq.n	80079f8 <__swbuf_r+0x16>
 80079ee:	6a03      	ldr	r3, [r0, #32]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <__swbuf_r+0x16>
 80079f4:	f7ff fa6e 	bl	8006ed4 <__sinit>
 80079f8:	69a3      	ldr	r3, [r4, #24]
 80079fa:	60a3      	str	r3, [r4, #8]
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	071b      	lsls	r3, r3, #28
 8007a00:	d502      	bpl.n	8007a08 <__swbuf_r+0x26>
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <__swbuf_r+0x3a>
 8007a08:	0021      	movs	r1, r4
 8007a0a:	0030      	movs	r0, r6
 8007a0c:	f000 f82c 	bl	8007a68 <__swsetup_r>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d003      	beq.n	8007a1c <__swbuf_r+0x3a>
 8007a14:	2501      	movs	r5, #1
 8007a16:	426d      	negs	r5, r5
 8007a18:	0028      	movs	r0, r5
 8007a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1c:	6923      	ldr	r3, [r4, #16]
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	b2ef      	uxtb	r7, r5
 8007a22:	1ac0      	subs	r0, r0, r3
 8007a24:	6963      	ldr	r3, [r4, #20]
 8007a26:	b2ed      	uxtb	r5, r5
 8007a28:	4283      	cmp	r3, r0
 8007a2a:	dc05      	bgt.n	8007a38 <__swbuf_r+0x56>
 8007a2c:	0021      	movs	r1, r4
 8007a2e:	0030      	movs	r0, r6
 8007a30:	f7ff ffac 	bl	800798c <_fflush_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d1ed      	bne.n	8007a14 <__swbuf_r+0x32>
 8007a38:	68a3      	ldr	r3, [r4, #8]
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	60a3      	str	r3, [r4, #8]
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	6022      	str	r2, [r4, #0]
 8007a46:	701f      	strb	r7, [r3, #0]
 8007a48:	6963      	ldr	r3, [r4, #20]
 8007a4a:	4283      	cmp	r3, r0
 8007a4c:	d004      	beq.n	8007a58 <__swbuf_r+0x76>
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	07db      	lsls	r3, r3, #31
 8007a52:	d5e1      	bpl.n	8007a18 <__swbuf_r+0x36>
 8007a54:	2d0a      	cmp	r5, #10
 8007a56:	d1df      	bne.n	8007a18 <__swbuf_r+0x36>
 8007a58:	0021      	movs	r1, r4
 8007a5a:	0030      	movs	r0, r6
 8007a5c:	f7ff ff96 	bl	800798c <_fflush_r>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d0d9      	beq.n	8007a18 <__swbuf_r+0x36>
 8007a64:	e7d6      	b.n	8007a14 <__swbuf_r+0x32>
	...

08007a68 <__swsetup_r>:
 8007a68:	4b2d      	ldr	r3, [pc, #180]	@ (8007b20 <__swsetup_r+0xb8>)
 8007a6a:	b570      	push	{r4, r5, r6, lr}
 8007a6c:	0005      	movs	r5, r0
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	000c      	movs	r4, r1
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d004      	beq.n	8007a80 <__swsetup_r+0x18>
 8007a76:	6a03      	ldr	r3, [r0, #32]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <__swsetup_r+0x18>
 8007a7c:	f7ff fa2a 	bl	8006ed4 <__sinit>
 8007a80:	220c      	movs	r2, #12
 8007a82:	5ea3      	ldrsh	r3, [r4, r2]
 8007a84:	071a      	lsls	r2, r3, #28
 8007a86:	d423      	bmi.n	8007ad0 <__swsetup_r+0x68>
 8007a88:	06da      	lsls	r2, r3, #27
 8007a8a:	d407      	bmi.n	8007a9c <__swsetup_r+0x34>
 8007a8c:	2209      	movs	r2, #9
 8007a8e:	602a      	str	r2, [r5, #0]
 8007a90:	2240      	movs	r2, #64	@ 0x40
 8007a92:	2001      	movs	r0, #1
 8007a94:	4313      	orrs	r3, r2
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	4240      	negs	r0, r0
 8007a9a:	e03a      	b.n	8007b12 <__swsetup_r+0xaa>
 8007a9c:	075b      	lsls	r3, r3, #29
 8007a9e:	d513      	bpl.n	8007ac8 <__swsetup_r+0x60>
 8007aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	d008      	beq.n	8007ab8 <__swsetup_r+0x50>
 8007aa6:	0023      	movs	r3, r4
 8007aa8:	3344      	adds	r3, #68	@ 0x44
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	d002      	beq.n	8007ab4 <__swsetup_r+0x4c>
 8007aae:	0028      	movs	r0, r5
 8007ab0:	f7ff fb2a 	bl	8007108 <_free_r>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ab8:	2224      	movs	r2, #36	@ 0x24
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	4393      	bics	r3, r2
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	6063      	str	r3, [r4, #4]
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	2308      	movs	r3, #8
 8007aca:	89a2      	ldrh	r2, [r4, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10b      	bne.n	8007aee <__swsetup_r+0x86>
 8007ad6:	21a0      	movs	r1, #160	@ 0xa0
 8007ad8:	2280      	movs	r2, #128	@ 0x80
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	0089      	lsls	r1, r1, #2
 8007ade:	0092      	lsls	r2, r2, #2
 8007ae0:	400b      	ands	r3, r1
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d003      	beq.n	8007aee <__swsetup_r+0x86>
 8007ae6:	0021      	movs	r1, r4
 8007ae8:	0028      	movs	r0, r5
 8007aea:	f000 f8ad 	bl	8007c48 <__smakebuf_r>
 8007aee:	220c      	movs	r2, #12
 8007af0:	5ea3      	ldrsh	r3, [r4, r2]
 8007af2:	2101      	movs	r1, #1
 8007af4:	001a      	movs	r2, r3
 8007af6:	400a      	ands	r2, r1
 8007af8:	420b      	tst	r3, r1
 8007afa:	d00b      	beq.n	8007b14 <__swsetup_r+0xac>
 8007afc:	2200      	movs	r2, #0
 8007afe:	60a2      	str	r2, [r4, #8]
 8007b00:	6962      	ldr	r2, [r4, #20]
 8007b02:	4252      	negs	r2, r2
 8007b04:	61a2      	str	r2, [r4, #24]
 8007b06:	2000      	movs	r0, #0
 8007b08:	6922      	ldr	r2, [r4, #16]
 8007b0a:	4282      	cmp	r2, r0
 8007b0c:	d101      	bne.n	8007b12 <__swsetup_r+0xaa>
 8007b0e:	061a      	lsls	r2, r3, #24
 8007b10:	d4be      	bmi.n	8007a90 <__swsetup_r+0x28>
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	0799      	lsls	r1, r3, #30
 8007b16:	d400      	bmi.n	8007b1a <__swsetup_r+0xb2>
 8007b18:	6962      	ldr	r2, [r4, #20]
 8007b1a:	60a2      	str	r2, [r4, #8]
 8007b1c:	e7f3      	b.n	8007b06 <__swsetup_r+0x9e>
 8007b1e:	46c0      	nop			@ (mov r8, r8)
 8007b20:	20000094 	.word	0x20000094

08007b24 <_raise_r>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	0004      	movs	r4, r0
 8007b28:	000d      	movs	r5, r1
 8007b2a:	291f      	cmp	r1, #31
 8007b2c:	d904      	bls.n	8007b38 <_raise_r+0x14>
 8007b2e:	2316      	movs	r3, #22
 8007b30:	6003      	str	r3, [r0, #0]
 8007b32:	2001      	movs	r0, #1
 8007b34:	4240      	negs	r0, r0
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <_raise_r+0x24>
 8007b3e:	008a      	lsls	r2, r1, #2
 8007b40:	189b      	adds	r3, r3, r2
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	2a00      	cmp	r2, #0
 8007b46:	d108      	bne.n	8007b5a <_raise_r+0x36>
 8007b48:	0020      	movs	r0, r4
 8007b4a:	f000 f831 	bl	8007bb0 <_getpid_r>
 8007b4e:	002a      	movs	r2, r5
 8007b50:	0001      	movs	r1, r0
 8007b52:	0020      	movs	r0, r4
 8007b54:	f000 f81a 	bl	8007b8c <_kill_r>
 8007b58:	e7ed      	b.n	8007b36 <_raise_r+0x12>
 8007b5a:	2a01      	cmp	r2, #1
 8007b5c:	d009      	beq.n	8007b72 <_raise_r+0x4e>
 8007b5e:	1c51      	adds	r1, r2, #1
 8007b60:	d103      	bne.n	8007b6a <_raise_r+0x46>
 8007b62:	2316      	movs	r3, #22
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	2001      	movs	r0, #1
 8007b68:	e7e5      	b.n	8007b36 <_raise_r+0x12>
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	0028      	movs	r0, r5
 8007b6e:	6019      	str	r1, [r3, #0]
 8007b70:	4790      	blx	r2
 8007b72:	2000      	movs	r0, #0
 8007b74:	e7df      	b.n	8007b36 <_raise_r+0x12>
	...

08007b78 <raise>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	4b03      	ldr	r3, [pc, #12]	@ (8007b88 <raise+0x10>)
 8007b7c:	0001      	movs	r1, r0
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	f7ff ffd0 	bl	8007b24 <_raise_r>
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	46c0      	nop			@ (mov r8, r8)
 8007b88:	20000094 	.word	0x20000094

08007b8c <_kill_r>:
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	b570      	push	{r4, r5, r6, lr}
 8007b90:	4d06      	ldr	r5, [pc, #24]	@ (8007bac <_kill_r+0x20>)
 8007b92:	0004      	movs	r4, r0
 8007b94:	0008      	movs	r0, r1
 8007b96:	0011      	movs	r1, r2
 8007b98:	602b      	str	r3, [r5, #0]
 8007b9a:	f7fc fa09 	bl	8003fb0 <_kill>
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	d103      	bne.n	8007baa <_kill_r+0x1e>
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d000      	beq.n	8007baa <_kill_r+0x1e>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	20000a28 	.word	0x20000a28

08007bb0 <_getpid_r>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	f7fc f9f7 	bl	8003fa4 <_getpid>
 8007bb6:	bd10      	pop	{r4, pc}

08007bb8 <_sbrk_r>:
 8007bb8:	2300      	movs	r3, #0
 8007bba:	b570      	push	{r4, r5, r6, lr}
 8007bbc:	4d06      	ldr	r5, [pc, #24]	@ (8007bd8 <_sbrk_r+0x20>)
 8007bbe:	0004      	movs	r4, r0
 8007bc0:	0008      	movs	r0, r1
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	f7fc fa76 	bl	80040b4 <_sbrk>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d103      	bne.n	8007bd4 <_sbrk_r+0x1c>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d000      	beq.n	8007bd4 <_sbrk_r+0x1c>
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	bd70      	pop	{r4, r5, r6, pc}
 8007bd6:	46c0      	nop			@ (mov r8, r8)
 8007bd8:	20000a28 	.word	0x20000a28

08007bdc <memchr>:
 8007bdc:	b2c9      	uxtb	r1, r1
 8007bde:	1882      	adds	r2, r0, r2
 8007be0:	4290      	cmp	r0, r2
 8007be2:	d101      	bne.n	8007be8 <memchr+0xc>
 8007be4:	2000      	movs	r0, #0
 8007be6:	4770      	bx	lr
 8007be8:	7803      	ldrb	r3, [r0, #0]
 8007bea:	428b      	cmp	r3, r1
 8007bec:	d0fb      	beq.n	8007be6 <memchr+0xa>
 8007bee:	3001      	adds	r0, #1
 8007bf0:	e7f6      	b.n	8007be0 <memchr+0x4>
	...

08007bf4 <__swhatbuf_r>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	000e      	movs	r6, r1
 8007bf8:	001d      	movs	r5, r3
 8007bfa:	230e      	movs	r3, #14
 8007bfc:	5ec9      	ldrsh	r1, [r1, r3]
 8007bfe:	0014      	movs	r4, r2
 8007c00:	b096      	sub	sp, #88	@ 0x58
 8007c02:	2900      	cmp	r1, #0
 8007c04:	da0c      	bge.n	8007c20 <__swhatbuf_r+0x2c>
 8007c06:	89b2      	ldrh	r2, [r6, #12]
 8007c08:	2380      	movs	r3, #128	@ 0x80
 8007c0a:	0011      	movs	r1, r2
 8007c0c:	4019      	ands	r1, r3
 8007c0e:	421a      	tst	r2, r3
 8007c10:	d114      	bne.n	8007c3c <__swhatbuf_r+0x48>
 8007c12:	2380      	movs	r3, #128	@ 0x80
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	2000      	movs	r0, #0
 8007c18:	6029      	str	r1, [r5, #0]
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	b016      	add	sp, #88	@ 0x58
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	466a      	mov	r2, sp
 8007c22:	f000 f853 	bl	8007ccc <_fstat_r>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	dbed      	blt.n	8007c06 <__swhatbuf_r+0x12>
 8007c2a:	23f0      	movs	r3, #240	@ 0xf0
 8007c2c:	9901      	ldr	r1, [sp, #4]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	4019      	ands	r1, r3
 8007c32:	4b04      	ldr	r3, [pc, #16]	@ (8007c44 <__swhatbuf_r+0x50>)
 8007c34:	18c9      	adds	r1, r1, r3
 8007c36:	424b      	negs	r3, r1
 8007c38:	4159      	adcs	r1, r3
 8007c3a:	e7ea      	b.n	8007c12 <__swhatbuf_r+0x1e>
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	2340      	movs	r3, #64	@ 0x40
 8007c40:	e7e9      	b.n	8007c16 <__swhatbuf_r+0x22>
 8007c42:	46c0      	nop			@ (mov r8, r8)
 8007c44:	ffffe000 	.word	0xffffe000

08007c48 <__smakebuf_r>:
 8007c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c4a:	2602      	movs	r6, #2
 8007c4c:	898b      	ldrh	r3, [r1, #12]
 8007c4e:	0005      	movs	r5, r0
 8007c50:	000c      	movs	r4, r1
 8007c52:	b085      	sub	sp, #20
 8007c54:	4233      	tst	r3, r6
 8007c56:	d007      	beq.n	8007c68 <__smakebuf_r+0x20>
 8007c58:	0023      	movs	r3, r4
 8007c5a:	3347      	adds	r3, #71	@ 0x47
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	6123      	str	r3, [r4, #16]
 8007c60:	2301      	movs	r3, #1
 8007c62:	6163      	str	r3, [r4, #20]
 8007c64:	b005      	add	sp, #20
 8007c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	aa02      	add	r2, sp, #8
 8007c6c:	f7ff ffc2 	bl	8007bf4 <__swhatbuf_r>
 8007c70:	9f02      	ldr	r7, [sp, #8]
 8007c72:	9001      	str	r0, [sp, #4]
 8007c74:	0039      	movs	r1, r7
 8007c76:	0028      	movs	r0, r5
 8007c78:	f7ff fab2 	bl	80071e0 <_malloc_r>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d108      	bne.n	8007c92 <__smakebuf_r+0x4a>
 8007c80:	220c      	movs	r2, #12
 8007c82:	5ea3      	ldrsh	r3, [r4, r2]
 8007c84:	059a      	lsls	r2, r3, #22
 8007c86:	d4ed      	bmi.n	8007c64 <__smakebuf_r+0x1c>
 8007c88:	2203      	movs	r2, #3
 8007c8a:	4393      	bics	r3, r2
 8007c8c:	431e      	orrs	r6, r3
 8007c8e:	81a6      	strh	r6, [r4, #12]
 8007c90:	e7e2      	b.n	8007c58 <__smakebuf_r+0x10>
 8007c92:	2380      	movs	r3, #128	@ 0x80
 8007c94:	89a2      	ldrh	r2, [r4, #12]
 8007c96:	6020      	str	r0, [r4, #0]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	81a3      	strh	r3, [r4, #12]
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	6120      	str	r0, [r4, #16]
 8007ca0:	6167      	str	r7, [r4, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00c      	beq.n	8007cc0 <__smakebuf_r+0x78>
 8007ca6:	0028      	movs	r0, r5
 8007ca8:	230e      	movs	r3, #14
 8007caa:	5ee1      	ldrsh	r1, [r4, r3]
 8007cac:	f000 f820 	bl	8007cf0 <_isatty_r>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d005      	beq.n	8007cc0 <__smakebuf_r+0x78>
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	89a2      	ldrh	r2, [r4, #12]
 8007cb8:	439a      	bics	r2, r3
 8007cba:	3b02      	subs	r3, #2
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	9a01      	ldr	r2, [sp, #4]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	81a3      	strh	r3, [r4, #12]
 8007cc8:	e7cc      	b.n	8007c64 <__smakebuf_r+0x1c>
	...

08007ccc <_fstat_r>:
 8007ccc:	2300      	movs	r3, #0
 8007cce:	b570      	push	{r4, r5, r6, lr}
 8007cd0:	4d06      	ldr	r5, [pc, #24]	@ (8007cec <_fstat_r+0x20>)
 8007cd2:	0004      	movs	r4, r0
 8007cd4:	0008      	movs	r0, r1
 8007cd6:	0011      	movs	r1, r2
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	f7fc f9c9 	bl	8004070 <_fstat>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d103      	bne.n	8007cea <_fstat_r+0x1e>
 8007ce2:	682b      	ldr	r3, [r5, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d000      	beq.n	8007cea <_fstat_r+0x1e>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	20000a28 	.word	0x20000a28

08007cf0 <_isatty_r>:
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	b570      	push	{r4, r5, r6, lr}
 8007cf4:	4d06      	ldr	r5, [pc, #24]	@ (8007d10 <_isatty_r+0x20>)
 8007cf6:	0004      	movs	r4, r0
 8007cf8:	0008      	movs	r0, r1
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7fc f9c6 	bl	800408c <_isatty>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d103      	bne.n	8007d0c <_isatty_r+0x1c>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d000      	beq.n	8007d0c <_isatty_r+0x1c>
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	bd70      	pop	{r4, r5, r6, pc}
 8007d0e:	46c0      	nop			@ (mov r8, r8)
 8007d10:	20000a28 	.word	0x20000a28

08007d14 <pow>:
 8007d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d16:	0014      	movs	r4, r2
 8007d18:	001d      	movs	r5, r3
 8007d1a:	9000      	str	r0, [sp, #0]
 8007d1c:	9101      	str	r1, [sp, #4]
 8007d1e:	f000 f86f 	bl	8007e00 <__ieee754_pow>
 8007d22:	0022      	movs	r2, r4
 8007d24:	0006      	movs	r6, r0
 8007d26:	000f      	movs	r7, r1
 8007d28:	002b      	movs	r3, r5
 8007d2a:	0020      	movs	r0, r4
 8007d2c:	0029      	movs	r1, r5
 8007d2e:	f7fa f9cb 	bl	80020c8 <__aeabi_dcmpun>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d13f      	bne.n	8007db6 <pow+0xa2>
 8007d36:	9800      	ldr	r0, [sp, #0]
 8007d38:	9901      	ldr	r1, [sp, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f7f8 fa87 	bl	8000250 <__aeabi_dcmpeq>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d019      	beq.n	8007d7a <pow+0x66>
 8007d46:	2200      	movs	r2, #0
 8007d48:	2300      	movs	r3, #0
 8007d4a:	0020      	movs	r0, r4
 8007d4c:	0029      	movs	r1, r5
 8007d4e:	f7f8 fa7f 	bl	8000250 <__aeabi_dcmpeq>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d146      	bne.n	8007de4 <pow+0xd0>
 8007d56:	0020      	movs	r0, r4
 8007d58:	0029      	movs	r1, r5
 8007d5a:	f000 f849 	bl	8007df0 <finite>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d029      	beq.n	8007db6 <pow+0xa2>
 8007d62:	2200      	movs	r2, #0
 8007d64:	2300      	movs	r3, #0
 8007d66:	0020      	movs	r0, r4
 8007d68:	0029      	movs	r1, r5
 8007d6a:	f7f8 fa77 	bl	800025c <__aeabi_dcmplt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d021      	beq.n	8007db6 <pow+0xa2>
 8007d72:	f7ff f995 	bl	80070a0 <__errno>
 8007d76:	2322      	movs	r3, #34	@ 0x22
 8007d78:	e01c      	b.n	8007db4 <pow+0xa0>
 8007d7a:	0030      	movs	r0, r6
 8007d7c:	0039      	movs	r1, r7
 8007d7e:	f000 f837 	bl	8007df0 <finite>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d11b      	bne.n	8007dbe <pow+0xaa>
 8007d86:	9800      	ldr	r0, [sp, #0]
 8007d88:	9901      	ldr	r1, [sp, #4]
 8007d8a:	f000 f831 	bl	8007df0 <finite>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d015      	beq.n	8007dbe <pow+0xaa>
 8007d92:	0020      	movs	r0, r4
 8007d94:	0029      	movs	r1, r5
 8007d96:	f000 f82b 	bl	8007df0 <finite>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d00f      	beq.n	8007dbe <pow+0xaa>
 8007d9e:	0032      	movs	r2, r6
 8007da0:	003b      	movs	r3, r7
 8007da2:	0030      	movs	r0, r6
 8007da4:	0039      	movs	r1, r7
 8007da6:	f7fa f98f 	bl	80020c8 <__aeabi_dcmpun>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d0e1      	beq.n	8007d72 <pow+0x5e>
 8007dae:	f7ff f977 	bl	80070a0 <__errno>
 8007db2:	2321      	movs	r3, #33	@ 0x21
 8007db4:	6003      	str	r3, [r0, #0]
 8007db6:	0030      	movs	r0, r6
 8007db8:	0039      	movs	r1, r7
 8007dba:	b003      	add	sp, #12
 8007dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	0030      	movs	r0, r6
 8007dc4:	0039      	movs	r1, r7
 8007dc6:	f7f8 fa43 	bl	8000250 <__aeabi_dcmpeq>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d0f3      	beq.n	8007db6 <pow+0xa2>
 8007dce:	9800      	ldr	r0, [sp, #0]
 8007dd0:	9901      	ldr	r1, [sp, #4]
 8007dd2:	f000 f80d 	bl	8007df0 <finite>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0ed      	beq.n	8007db6 <pow+0xa2>
 8007dda:	0020      	movs	r0, r4
 8007ddc:	0029      	movs	r1, r5
 8007dde:	f000 f807 	bl	8007df0 <finite>
 8007de2:	e7c4      	b.n	8007d6e <pow+0x5a>
 8007de4:	2600      	movs	r6, #0
 8007de6:	4f01      	ldr	r7, [pc, #4]	@ (8007dec <pow+0xd8>)
 8007de8:	e7e5      	b.n	8007db6 <pow+0xa2>
 8007dea:	46c0      	nop			@ (mov r8, r8)
 8007dec:	3ff00000 	.word	0x3ff00000

08007df0 <finite>:
 8007df0:	4b02      	ldr	r3, [pc, #8]	@ (8007dfc <finite+0xc>)
 8007df2:	0048      	lsls	r0, r1, #1
 8007df4:	0840      	lsrs	r0, r0, #1
 8007df6:	18c0      	adds	r0, r0, r3
 8007df8:	0fc0      	lsrs	r0, r0, #31
 8007dfa:	4770      	bx	lr
 8007dfc:	80100000 	.word	0x80100000

08007e00 <__ieee754_pow>:
 8007e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e02:	b095      	sub	sp, #84	@ 0x54
 8007e04:	9204      	str	r2, [sp, #16]
 8007e06:	9305      	str	r3, [sp, #20]
 8007e08:	9b04      	ldr	r3, [sp, #16]
 8007e0a:	9f05      	ldr	r7, [sp, #20]
 8007e0c:	001a      	movs	r2, r3
 8007e0e:	007d      	lsls	r5, r7, #1
 8007e10:	086d      	lsrs	r5, r5, #1
 8007e12:	9002      	str	r0, [sp, #8]
 8007e14:	9103      	str	r1, [sp, #12]
 8007e16:	432a      	orrs	r2, r5
 8007e18:	d11a      	bne.n	8007e50 <__ieee754_pow+0x50>
 8007e1a:	2180      	movs	r1, #128	@ 0x80
 8007e1c:	9a02      	ldr	r2, [sp, #8]
 8007e1e:	9803      	ldr	r0, [sp, #12]
 8007e20:	0309      	lsls	r1, r1, #12
 8007e22:	4048      	eors	r0, r1
 8007e24:	0003      	movs	r3, r0
 8007e26:	1892      	adds	r2, r2, r2
 8007e28:	415b      	adcs	r3, r3
 8007e2a:	4996      	ldr	r1, [pc, #600]	@ (8008084 <__ieee754_pow+0x284>)
 8007e2c:	428b      	cmp	r3, r1
 8007e2e:	d806      	bhi.n	8007e3e <__ieee754_pow+0x3e>
 8007e30:	d001      	beq.n	8007e36 <__ieee754_pow+0x36>
 8007e32:	f000 fcce 	bl	80087d2 <__ieee754_pow+0x9d2>
 8007e36:	2a00      	cmp	r2, #0
 8007e38:	d101      	bne.n	8007e3e <__ieee754_pow+0x3e>
 8007e3a:	f000 fcca 	bl	80087d2 <__ieee754_pow+0x9d2>
 8007e3e:	9a04      	ldr	r2, [sp, #16]
 8007e40:	9b05      	ldr	r3, [sp, #20]
 8007e42:	9802      	ldr	r0, [sp, #8]
 8007e44:	9903      	ldr	r1, [sp, #12]
 8007e46:	f7f8 fa4f 	bl	80002e8 <__aeabi_dadd>
 8007e4a:	9000      	str	r0, [sp, #0]
 8007e4c:	9101      	str	r1, [sp, #4]
 8007e4e:	e08e      	b.n	8007f6e <__ieee754_pow+0x16e>
 8007e50:	9a03      	ldr	r2, [sp, #12]
 8007e52:	9206      	str	r2, [sp, #24]
 8007e54:	9a02      	ldr	r2, [sp, #8]
 8007e56:	920a      	str	r2, [sp, #40]	@ 0x28
 8007e58:	9a03      	ldr	r2, [sp, #12]
 8007e5a:	0054      	lsls	r4, r2, #1
 8007e5c:	4a8a      	ldr	r2, [pc, #552]	@ (8008088 <__ieee754_pow+0x288>)
 8007e5e:	0864      	lsrs	r4, r4, #1
 8007e60:	4294      	cmp	r4, r2
 8007e62:	d80e      	bhi.n	8007e82 <__ieee754_pow+0x82>
 8007e64:	d105      	bne.n	8007e72 <__ieee754_pow+0x72>
 8007e66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	d1e8      	bne.n	8007e3e <__ieee754_pow+0x3e>
 8007e6c:	42a5      	cmp	r5, r4
 8007e6e:	d8e6      	bhi.n	8007e3e <__ieee754_pow+0x3e>
 8007e70:	e002      	b.n	8007e78 <__ieee754_pow+0x78>
 8007e72:	4a85      	ldr	r2, [pc, #532]	@ (8008088 <__ieee754_pow+0x288>)
 8007e74:	4295      	cmp	r5, r2
 8007e76:	d804      	bhi.n	8007e82 <__ieee754_pow+0x82>
 8007e78:	4a83      	ldr	r2, [pc, #524]	@ (8008088 <__ieee754_pow+0x288>)
 8007e7a:	4295      	cmp	r5, r2
 8007e7c:	d10c      	bne.n	8007e98 <__ieee754_pow+0x98>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <__ieee754_pow+0x98>
 8007e82:	4a82      	ldr	r2, [pc, #520]	@ (800808c <__ieee754_pow+0x28c>)
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	189b      	adds	r3, r3, r2
 8007e88:	9a02      	ldr	r2, [sp, #8]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	d1d7      	bne.n	8007e3e <__ieee754_pow+0x3e>
 8007e8e:	2180      	movs	r1, #128	@ 0x80
 8007e90:	9a04      	ldr	r2, [sp, #16]
 8007e92:	9805      	ldr	r0, [sp, #20]
 8007e94:	0309      	lsls	r1, r1, #12
 8007e96:	e7c4      	b.n	8007e22 <__ieee754_pow+0x22>
 8007e98:	2600      	movs	r6, #0
 8007e9a:	9a06      	ldr	r2, [sp, #24]
 8007e9c:	9408      	str	r4, [sp, #32]
 8007e9e:	42b2      	cmp	r2, r6
 8007ea0:	da42      	bge.n	8007f28 <__ieee754_pow+0x128>
 8007ea2:	4a7b      	ldr	r2, [pc, #492]	@ (8008090 <__ieee754_pow+0x290>)
 8007ea4:	4295      	cmp	r5, r2
 8007ea6:	d83e      	bhi.n	8007f26 <__ieee754_pow+0x126>
 8007ea8:	4a7a      	ldr	r2, [pc, #488]	@ (8008094 <__ieee754_pow+0x294>)
 8007eaa:	4295      	cmp	r5, r2
 8007eac:	d910      	bls.n	8007ed0 <__ieee754_pow+0xd0>
 8007eae:	497a      	ldr	r1, [pc, #488]	@ (8008098 <__ieee754_pow+0x298>)
 8007eb0:	152a      	asrs	r2, r5, #20
 8007eb2:	1852      	adds	r2, r2, r1
 8007eb4:	2a14      	cmp	r2, #20
 8007eb6:	dd18      	ble.n	8007eea <__ieee754_pow+0xea>
 8007eb8:	2134      	movs	r1, #52	@ 0x34
 8007eba:	1a89      	subs	r1, r1, r2
 8007ebc:	9a04      	ldr	r2, [sp, #16]
 8007ebe:	40ca      	lsrs	r2, r1
 8007ec0:	0010      	movs	r0, r2
 8007ec2:	4088      	lsls	r0, r1
 8007ec4:	4298      	cmp	r0, r3
 8007ec6:	d103      	bne.n	8007ed0 <__ieee754_pow+0xd0>
 8007ec8:	2101      	movs	r1, #1
 8007eca:	3602      	adds	r6, #2
 8007ecc:	400a      	ands	r2, r1
 8007ece:	1ab6      	subs	r6, r6, r2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d15b      	bne.n	8007f8c <__ieee754_pow+0x18c>
 8007ed4:	2380      	movs	r3, #128	@ 0x80
 8007ed6:	05db      	lsls	r3, r3, #23
 8007ed8:	429f      	cmp	r7, r3
 8007eda:	d14c      	bne.n	8007f76 <__ieee754_pow+0x176>
 8007edc:	9a02      	ldr	r2, [sp, #8]
 8007ede:	9b03      	ldr	r3, [sp, #12]
 8007ee0:	0010      	movs	r0, r2
 8007ee2:	0019      	movs	r1, r3
 8007ee4:	f7f9 fa00 	bl	80012e8 <__aeabi_dmul>
 8007ee8:	e7af      	b.n	8007e4a <__ieee754_pow+0x4a>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d14e      	bne.n	8007f8c <__ieee754_pow+0x18c>
 8007eee:	3314      	adds	r3, #20
 8007ef0:	1a9a      	subs	r2, r3, r2
 8007ef2:	002b      	movs	r3, r5
 8007ef4:	4113      	asrs	r3, r2
 8007ef6:	0019      	movs	r1, r3
 8007ef8:	4091      	lsls	r1, r2
 8007efa:	42a9      	cmp	r1, r5
 8007efc:	d103      	bne.n	8007f06 <__ieee754_pow+0x106>
 8007efe:	2201      	movs	r2, #1
 8007f00:	2602      	movs	r6, #2
 8007f02:	4013      	ands	r3, r2
 8007f04:	1af6      	subs	r6, r6, r3
 8007f06:	4b65      	ldr	r3, [pc, #404]	@ (800809c <__ieee754_pow+0x29c>)
 8007f08:	429d      	cmp	r5, r3
 8007f0a:	d1e3      	bne.n	8007ed4 <__ieee754_pow+0xd4>
 8007f0c:	9b02      	ldr	r3, [sp, #8]
 8007f0e:	9c03      	ldr	r4, [sp, #12]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	9401      	str	r4, [sp, #4]
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	da2a      	bge.n	8007f6e <__ieee754_pow+0x16e>
 8007f18:	001a      	movs	r2, r3
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	0023      	movs	r3, r4
 8007f1e:	495f      	ldr	r1, [pc, #380]	@ (800809c <__ieee754_pow+0x29c>)
 8007f20:	f7f8 fda8 	bl	8000a74 <__aeabi_ddiv>
 8007f24:	e791      	b.n	8007e4a <__ieee754_pow+0x4a>
 8007f26:	2602      	movs	r6, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d12f      	bne.n	8007f8c <__ieee754_pow+0x18c>
 8007f2c:	4b56      	ldr	r3, [pc, #344]	@ (8008088 <__ieee754_pow+0x288>)
 8007f2e:	429d      	cmp	r5, r3
 8007f30:	d1e9      	bne.n	8007f06 <__ieee754_pow+0x106>
 8007f32:	4b56      	ldr	r3, [pc, #344]	@ (800808c <__ieee754_pow+0x28c>)
 8007f34:	9a02      	ldr	r2, [sp, #8]
 8007f36:	18e3      	adds	r3, r4, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	d101      	bne.n	8007f40 <__ieee754_pow+0x140>
 8007f3c:	f000 fc49 	bl	80087d2 <__ieee754_pow+0x9d2>
 8007f40:	4b54      	ldr	r3, [pc, #336]	@ (8008094 <__ieee754_pow+0x294>)
 8007f42:	429c      	cmp	r4, r3
 8007f44:	d909      	bls.n	8007f5a <__ieee754_pow+0x15a>
 8007f46:	9b04      	ldr	r3, [sp, #16]
 8007f48:	9c05      	ldr	r4, [sp, #20]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	9401      	str	r4, [sp, #4]
 8007f4e:	2f00      	cmp	r7, #0
 8007f50:	da0d      	bge.n	8007f6e <__ieee754_pow+0x16e>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2400      	movs	r4, #0
 8007f56:	f000 fc3e 	bl	80087d6 <__ieee754_pow+0x9d6>
 8007f5a:	2f00      	cmp	r7, #0
 8007f5c:	daf9      	bge.n	8007f52 <__ieee754_pow+0x152>
 8007f5e:	2280      	movs	r2, #128	@ 0x80
 8007f60:	0612      	lsls	r2, r2, #24
 8007f62:	4694      	mov	ip, r2
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	9b05      	ldr	r3, [sp, #20]
 8007f6a:	4463      	add	r3, ip
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	9800      	ldr	r0, [sp, #0]
 8007f70:	9901      	ldr	r1, [sp, #4]
 8007f72:	b015      	add	sp, #84	@ 0x54
 8007f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f76:	4b4a      	ldr	r3, [pc, #296]	@ (80080a0 <__ieee754_pow+0x2a0>)
 8007f78:	429f      	cmp	r7, r3
 8007f7a:	d107      	bne.n	8007f8c <__ieee754_pow+0x18c>
 8007f7c:	9b06      	ldr	r3, [sp, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	db04      	blt.n	8007f8c <__ieee754_pow+0x18c>
 8007f82:	9802      	ldr	r0, [sp, #8]
 8007f84:	9903      	ldr	r1, [sp, #12]
 8007f86:	f000 fcf1 	bl	800896c <__ieee754_sqrt>
 8007f8a:	e75e      	b.n	8007e4a <__ieee754_pow+0x4a>
 8007f8c:	9802      	ldr	r0, [sp, #8]
 8007f8e:	9903      	ldr	r1, [sp, #12]
 8007f90:	f000 fc4e 	bl	8008830 <fabs>
 8007f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f96:	9000      	str	r0, [sp, #0]
 8007f98:	9101      	str	r1, [sp, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d12c      	bne.n	8007ff8 <__ieee754_pow+0x1f8>
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	4a3e      	ldr	r2, [pc, #248]	@ (800809c <__ieee754_pow+0x29c>)
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	089b      	lsrs	r3, r3, #2
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d001      	beq.n	8007fae <__ieee754_pow+0x1ae>
 8007faa:	2c00      	cmp	r4, #0
 8007fac:	d124      	bne.n	8007ff8 <__ieee754_pow+0x1f8>
 8007fae:	2f00      	cmp	r7, #0
 8007fb0:	da07      	bge.n	8007fc2 <__ieee754_pow+0x1c2>
 8007fb2:	9a00      	ldr	r2, [sp, #0]
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	4938      	ldr	r1, [pc, #224]	@ (800809c <__ieee754_pow+0x29c>)
 8007fba:	f7f8 fd5b 	bl	8000a74 <__aeabi_ddiv>
 8007fbe:	9000      	str	r0, [sp, #0]
 8007fc0:	9101      	str	r1, [sp, #4]
 8007fc2:	9b06      	ldr	r3, [sp, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	dad2      	bge.n	8007f6e <__ieee754_pow+0x16e>
 8007fc8:	4b30      	ldr	r3, [pc, #192]	@ (800808c <__ieee754_pow+0x28c>)
 8007fca:	18e4      	adds	r4, r4, r3
 8007fcc:	4334      	orrs	r4, r6
 8007fce:	d108      	bne.n	8007fe2 <__ieee754_pow+0x1e2>
 8007fd0:	9a00      	ldr	r2, [sp, #0]
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	0010      	movs	r0, r2
 8007fd6:	0019      	movs	r1, r3
 8007fd8:	f7f9 fc6c 	bl	80018b4 <__aeabi_dsub>
 8007fdc:	0002      	movs	r2, r0
 8007fde:	000b      	movs	r3, r1
 8007fe0:	e79e      	b.n	8007f20 <__ieee754_pow+0x120>
 8007fe2:	2e01      	cmp	r6, #1
 8007fe4:	d1c3      	bne.n	8007f6e <__ieee754_pow+0x16e>
 8007fe6:	9800      	ldr	r0, [sp, #0]
 8007fe8:	2180      	movs	r1, #128	@ 0x80
 8007fea:	0002      	movs	r2, r0
 8007fec:	9801      	ldr	r0, [sp, #4]
 8007fee:	0609      	lsls	r1, r1, #24
 8007ff0:	1843      	adds	r3, r0, r1
 8007ff2:	9200      	str	r2, [sp, #0]
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	e7ba      	b.n	8007f6e <__ieee754_pow+0x16e>
 8007ff8:	9b03      	ldr	r3, [sp, #12]
 8007ffa:	0fdb      	lsrs	r3, r3, #31
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	001a      	movs	r2, r3
 8008000:	4332      	orrs	r2, r6
 8008002:	d102      	bne.n	800800a <__ieee754_pow+0x20a>
 8008004:	9a02      	ldr	r2, [sp, #8]
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	e7e4      	b.n	8007fd4 <__ieee754_pow+0x1d4>
 800800a:	3e01      	subs	r6, #1
 800800c:	2200      	movs	r2, #0
 800800e:	431e      	orrs	r6, r3
 8008010:	d013      	beq.n	800803a <__ieee754_pow+0x23a>
 8008012:	4b22      	ldr	r3, [pc, #136]	@ (800809c <__ieee754_pow+0x29c>)
 8008014:	9206      	str	r2, [sp, #24]
 8008016:	9307      	str	r3, [sp, #28]
 8008018:	2384      	movs	r3, #132	@ 0x84
 800801a:	05db      	lsls	r3, r3, #23
 800801c:	429d      	cmp	r5, r3
 800801e:	d800      	bhi.n	8008022 <__ieee754_pow+0x222>
 8008020:	e0fa      	b.n	8008218 <__ieee754_pow+0x418>
 8008022:	4b20      	ldr	r3, [pc, #128]	@ (80080a4 <__ieee754_pow+0x2a4>)
 8008024:	429d      	cmp	r5, r3
 8008026:	d910      	bls.n	800804a <__ieee754_pow+0x24a>
 8008028:	4b1a      	ldr	r3, [pc, #104]	@ (8008094 <__ieee754_pow+0x294>)
 800802a:	429c      	cmp	r4, r3
 800802c:	d807      	bhi.n	800803e <__ieee754_pow+0x23e>
 800802e:	2f00      	cmp	r7, #0
 8008030:	da07      	bge.n	8008042 <__ieee754_pow+0x242>
 8008032:	2000      	movs	r0, #0
 8008034:	f000 fc92 	bl	800895c <__math_oflow>
 8008038:	e707      	b.n	8007e4a <__ieee754_pow+0x4a>
 800803a:	4b1b      	ldr	r3, [pc, #108]	@ (80080a8 <__ieee754_pow+0x2a8>)
 800803c:	e7ea      	b.n	8008014 <__ieee754_pow+0x214>
 800803e:	2f00      	cmp	r7, #0
 8008040:	dcf7      	bgt.n	8008032 <__ieee754_pow+0x232>
 8008042:	2000      	movs	r0, #0
 8008044:	f000 fc83 	bl	800894e <__math_uflow>
 8008048:	e6ff      	b.n	8007e4a <__ieee754_pow+0x4a>
 800804a:	4b18      	ldr	r3, [pc, #96]	@ (80080ac <__ieee754_pow+0x2ac>)
 800804c:	429c      	cmp	r4, r3
 800804e:	d80a      	bhi.n	8008066 <__ieee754_pow+0x266>
 8008050:	9806      	ldr	r0, [sp, #24]
 8008052:	9907      	ldr	r1, [sp, #28]
 8008054:	2300      	movs	r3, #0
 8008056:	2200      	movs	r2, #0
 8008058:	f7f8 f900 	bl	800025c <__aeabi_dcmplt>
 800805c:	1e43      	subs	r3, r0, #1
 800805e:	4198      	sbcs	r0, r3
 8008060:	2f00      	cmp	r7, #0
 8008062:	daef      	bge.n	8008044 <__ieee754_pow+0x244>
 8008064:	e7e6      	b.n	8008034 <__ieee754_pow+0x234>
 8008066:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <__ieee754_pow+0x29c>)
 8008068:	2200      	movs	r2, #0
 800806a:	429c      	cmp	r4, r3
 800806c:	d920      	bls.n	80080b0 <__ieee754_pow+0x2b0>
 800806e:	9806      	ldr	r0, [sp, #24]
 8008070:	9907      	ldr	r1, [sp, #28]
 8008072:	2300      	movs	r3, #0
 8008074:	f7f8 f8f2 	bl	800025c <__aeabi_dcmplt>
 8008078:	1e43      	subs	r3, r0, #1
 800807a:	4198      	sbcs	r0, r3
 800807c:	2f00      	cmp	r7, #0
 800807e:	dcd9      	bgt.n	8008034 <__ieee754_pow+0x234>
 8008080:	e7e0      	b.n	8008044 <__ieee754_pow+0x244>
 8008082:	46c0      	nop			@ (mov r8, r8)
 8008084:	fff00000 	.word	0xfff00000
 8008088:	7ff00000 	.word	0x7ff00000
 800808c:	c0100000 	.word	0xc0100000
 8008090:	433fffff 	.word	0x433fffff
 8008094:	3fefffff 	.word	0x3fefffff
 8008098:	fffffc01 	.word	0xfffffc01
 800809c:	3ff00000 	.word	0x3ff00000
 80080a0:	3fe00000 	.word	0x3fe00000
 80080a4:	43f00000 	.word	0x43f00000
 80080a8:	bff00000 	.word	0xbff00000
 80080ac:	3feffffe 	.word	0x3feffffe
 80080b0:	9800      	ldr	r0, [sp, #0]
 80080b2:	9901      	ldr	r1, [sp, #4]
 80080b4:	4b4d      	ldr	r3, [pc, #308]	@ (80081ec <__ieee754_pow+0x3ec>)
 80080b6:	f7f9 fbfd 	bl	80018b4 <__aeabi_dsub>
 80080ba:	22c0      	movs	r2, #192	@ 0xc0
 80080bc:	4b4c      	ldr	r3, [pc, #304]	@ (80081f0 <__ieee754_pow+0x3f0>)
 80080be:	05d2      	lsls	r2, r2, #23
 80080c0:	0006      	movs	r6, r0
 80080c2:	000f      	movs	r7, r1
 80080c4:	f7f9 f910 	bl	80012e8 <__aeabi_dmul>
 80080c8:	4a4a      	ldr	r2, [pc, #296]	@ (80081f4 <__ieee754_pow+0x3f4>)
 80080ca:	9002      	str	r0, [sp, #8]
 80080cc:	9103      	str	r1, [sp, #12]
 80080ce:	4b4a      	ldr	r3, [pc, #296]	@ (80081f8 <__ieee754_pow+0x3f8>)
 80080d0:	0030      	movs	r0, r6
 80080d2:	0039      	movs	r1, r7
 80080d4:	f7f9 f908 	bl	80012e8 <__aeabi_dmul>
 80080d8:	2200      	movs	r2, #0
 80080da:	9000      	str	r0, [sp, #0]
 80080dc:	9101      	str	r1, [sp, #4]
 80080de:	4b47      	ldr	r3, [pc, #284]	@ (80081fc <__ieee754_pow+0x3fc>)
 80080e0:	0030      	movs	r0, r6
 80080e2:	0039      	movs	r1, r7
 80080e4:	f7f9 f900 	bl	80012e8 <__aeabi_dmul>
 80080e8:	0002      	movs	r2, r0
 80080ea:	000b      	movs	r3, r1
 80080ec:	4844      	ldr	r0, [pc, #272]	@ (8008200 <__ieee754_pow+0x400>)
 80080ee:	4945      	ldr	r1, [pc, #276]	@ (8008204 <__ieee754_pow+0x404>)
 80080f0:	f7f9 fbe0 	bl	80018b4 <__aeabi_dsub>
 80080f4:	0032      	movs	r2, r6
 80080f6:	003b      	movs	r3, r7
 80080f8:	f7f9 f8f6 	bl	80012e8 <__aeabi_dmul>
 80080fc:	0002      	movs	r2, r0
 80080fe:	000b      	movs	r3, r1
 8008100:	2000      	movs	r0, #0
 8008102:	4941      	ldr	r1, [pc, #260]	@ (8008208 <__ieee754_pow+0x408>)
 8008104:	f7f9 fbd6 	bl	80018b4 <__aeabi_dsub>
 8008108:	0032      	movs	r2, r6
 800810a:	0004      	movs	r4, r0
 800810c:	000d      	movs	r5, r1
 800810e:	003b      	movs	r3, r7
 8008110:	0030      	movs	r0, r6
 8008112:	0039      	movs	r1, r7
 8008114:	f7f9 f8e8 	bl	80012e8 <__aeabi_dmul>
 8008118:	0002      	movs	r2, r0
 800811a:	000b      	movs	r3, r1
 800811c:	0020      	movs	r0, r4
 800811e:	0029      	movs	r1, r5
 8008120:	f7f9 f8e2 	bl	80012e8 <__aeabi_dmul>
 8008124:	4a39      	ldr	r2, [pc, #228]	@ (800820c <__ieee754_pow+0x40c>)
 8008126:	4b32      	ldr	r3, [pc, #200]	@ (80081f0 <__ieee754_pow+0x3f0>)
 8008128:	f7f9 f8de 	bl	80012e8 <__aeabi_dmul>
 800812c:	0002      	movs	r2, r0
 800812e:	000b      	movs	r3, r1
 8008130:	9800      	ldr	r0, [sp, #0]
 8008132:	9901      	ldr	r1, [sp, #4]
 8008134:	f7f9 fbbe 	bl	80018b4 <__aeabi_dsub>
 8008138:	0002      	movs	r2, r0
 800813a:	000b      	movs	r3, r1
 800813c:	0004      	movs	r4, r0
 800813e:	000d      	movs	r5, r1
 8008140:	9802      	ldr	r0, [sp, #8]
 8008142:	9903      	ldr	r1, [sp, #12]
 8008144:	f7f8 f8d0 	bl	80002e8 <__aeabi_dadd>
 8008148:	9a02      	ldr	r2, [sp, #8]
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	2000      	movs	r0, #0
 800814e:	9000      	str	r0, [sp, #0]
 8008150:	9101      	str	r1, [sp, #4]
 8008152:	f7f9 fbaf 	bl	80018b4 <__aeabi_dsub>
 8008156:	0002      	movs	r2, r0
 8008158:	000b      	movs	r3, r1
 800815a:	0020      	movs	r0, r4
 800815c:	0029      	movs	r1, r5
 800815e:	f7f9 fba9 	bl	80018b4 <__aeabi_dsub>
 8008162:	9c04      	ldr	r4, [sp, #16]
 8008164:	9d05      	ldr	r5, [sp, #20]
 8008166:	2400      	movs	r4, #0
 8008168:	0006      	movs	r6, r0
 800816a:	000f      	movs	r7, r1
 800816c:	9804      	ldr	r0, [sp, #16]
 800816e:	9905      	ldr	r1, [sp, #20]
 8008170:	0022      	movs	r2, r4
 8008172:	002b      	movs	r3, r5
 8008174:	9402      	str	r4, [sp, #8]
 8008176:	9503      	str	r5, [sp, #12]
 8008178:	f7f9 fb9c 	bl	80018b4 <__aeabi_dsub>
 800817c:	9a00      	ldr	r2, [sp, #0]
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	f7f9 f8b2 	bl	80012e8 <__aeabi_dmul>
 8008184:	9a04      	ldr	r2, [sp, #16]
 8008186:	9b05      	ldr	r3, [sp, #20]
 8008188:	9008      	str	r0, [sp, #32]
 800818a:	9109      	str	r1, [sp, #36]	@ 0x24
 800818c:	0030      	movs	r0, r6
 800818e:	0039      	movs	r1, r7
 8008190:	f7f9 f8aa 	bl	80012e8 <__aeabi_dmul>
 8008194:	0002      	movs	r2, r0
 8008196:	000b      	movs	r3, r1
 8008198:	9808      	ldr	r0, [sp, #32]
 800819a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800819c:	f7f8 f8a4 	bl	80002e8 <__aeabi_dadd>
 80081a0:	0022      	movs	r2, r4
 80081a2:	002b      	movs	r3, r5
 80081a4:	9004      	str	r0, [sp, #16]
 80081a6:	9105      	str	r1, [sp, #20]
 80081a8:	9800      	ldr	r0, [sp, #0]
 80081aa:	9901      	ldr	r1, [sp, #4]
 80081ac:	f7f9 f89c 	bl	80012e8 <__aeabi_dmul>
 80081b0:	000b      	movs	r3, r1
 80081b2:	0002      	movs	r2, r0
 80081b4:	9000      	str	r0, [sp, #0]
 80081b6:	9101      	str	r1, [sp, #4]
 80081b8:	9804      	ldr	r0, [sp, #16]
 80081ba:	9905      	ldr	r1, [sp, #20]
 80081bc:	f7f8 f894 	bl	80002e8 <__aeabi_dadd>
 80081c0:	4b13      	ldr	r3, [pc, #76]	@ (8008210 <__ieee754_pow+0x410>)
 80081c2:	0006      	movs	r6, r0
 80081c4:	000f      	movs	r7, r1
 80081c6:	9108      	str	r1, [sp, #32]
 80081c8:	4299      	cmp	r1, r3
 80081ca:	dc00      	bgt.n	80081ce <__ieee754_pow+0x3ce>
 80081cc:	e1c0      	b.n	8008550 <__ieee754_pow+0x750>
 80081ce:	4b11      	ldr	r3, [pc, #68]	@ (8008214 <__ieee754_pow+0x414>)
 80081d0:	18cb      	adds	r3, r1, r3
 80081d2:	4303      	orrs	r3, r0
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	d100      	bne.n	80081da <__ieee754_pow+0x3da>
 80081d8:	e1a1      	b.n	800851e <__ieee754_pow+0x71e>
 80081da:	9806      	ldr	r0, [sp, #24]
 80081dc:	9907      	ldr	r1, [sp, #28]
 80081de:	2300      	movs	r3, #0
 80081e0:	2200      	movs	r2, #0
 80081e2:	f7f8 f83b 	bl	800025c <__aeabi_dcmplt>
 80081e6:	1e43      	subs	r3, r0, #1
 80081e8:	4198      	sbcs	r0, r3
 80081ea:	e723      	b.n	8008034 <__ieee754_pow+0x234>
 80081ec:	3ff00000 	.word	0x3ff00000
 80081f0:	3ff71547 	.word	0x3ff71547
 80081f4:	f85ddf44 	.word	0xf85ddf44
 80081f8:	3e54ae0b 	.word	0x3e54ae0b
 80081fc:	3fd00000 	.word	0x3fd00000
 8008200:	55555555 	.word	0x55555555
 8008204:	3fd55555 	.word	0x3fd55555
 8008208:	3fe00000 	.word	0x3fe00000
 800820c:	652b82fe 	.word	0x652b82fe
 8008210:	408fffff 	.word	0x408fffff
 8008214:	bf700000 	.word	0xbf700000
 8008218:	4bdc      	ldr	r3, [pc, #880]	@ (800858c <__ieee754_pow+0x78c>)
 800821a:	9903      	ldr	r1, [sp, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	420b      	tst	r3, r1
 8008220:	d10b      	bne.n	800823a <__ieee754_pow+0x43a>
 8008222:	9800      	ldr	r0, [sp, #0]
 8008224:	9901      	ldr	r1, [sp, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	4bd9      	ldr	r3, [pc, #868]	@ (8008590 <__ieee754_pow+0x790>)
 800822a:	f7f9 f85d 	bl	80012e8 <__aeabi_dmul>
 800822e:	2235      	movs	r2, #53	@ 0x35
 8008230:	9000      	str	r0, [sp, #0]
 8008232:	9101      	str	r1, [sp, #4]
 8008234:	9b01      	ldr	r3, [sp, #4]
 8008236:	4252      	negs	r2, r2
 8008238:	9308      	str	r3, [sp, #32]
 800823a:	9b08      	ldr	r3, [sp, #32]
 800823c:	49d5      	ldr	r1, [pc, #852]	@ (8008594 <__ieee754_pow+0x794>)
 800823e:	151b      	asrs	r3, r3, #20
 8008240:	185b      	adds	r3, r3, r1
 8008242:	189b      	adds	r3, r3, r2
 8008244:	930e      	str	r3, [sp, #56]	@ 0x38
 8008246:	9b08      	ldr	r3, [sp, #32]
 8008248:	4dd3      	ldr	r5, [pc, #844]	@ (8008598 <__ieee754_pow+0x798>)
 800824a:	031b      	lsls	r3, r3, #12
 800824c:	4ad3      	ldr	r2, [pc, #844]	@ (800859c <__ieee754_pow+0x79c>)
 800824e:	0b1b      	lsrs	r3, r3, #12
 8008250:	2600      	movs	r6, #0
 8008252:	431d      	orrs	r5, r3
 8008254:	4293      	cmp	r3, r2
 8008256:	dd09      	ble.n	800826c <__ieee754_pow+0x46c>
 8008258:	4ad1      	ldr	r2, [pc, #836]	@ (80085a0 <__ieee754_pow+0x7a0>)
 800825a:	3601      	adds	r6, #1
 800825c:	4293      	cmp	r3, r2
 800825e:	dd05      	ble.n	800826c <__ieee754_pow+0x46c>
 8008260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008262:	199b      	adds	r3, r3, r6
 8008264:	2600      	movs	r6, #0
 8008266:	930e      	str	r3, [sp, #56]	@ 0x38
 8008268:	4bce      	ldr	r3, [pc, #824]	@ (80085a4 <__ieee754_pow+0x7a4>)
 800826a:	18ed      	adds	r5, r5, r3
 800826c:	9800      	ldr	r0, [sp, #0]
 800826e:	9901      	ldr	r1, [sp, #4]
 8008270:	0029      	movs	r1, r5
 8008272:	4bcd      	ldr	r3, [pc, #820]	@ (80085a8 <__ieee754_pow+0x7a8>)
 8008274:	00f2      	lsls	r2, r6, #3
 8008276:	189b      	adds	r3, r3, r2
 8008278:	685c      	ldr	r4, [r3, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800827e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008280:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008282:	001a      	movs	r2, r3
 8008284:	0023      	movs	r3, r4
 8008286:	900c      	str	r0, [sp, #48]	@ 0x30
 8008288:	910d      	str	r1, [sp, #52]	@ 0x34
 800828a:	f7f9 fb13 	bl	80018b4 <__aeabi_dsub>
 800828e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008290:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008292:	9010      	str	r0, [sp, #64]	@ 0x40
 8008294:	9111      	str	r1, [sp, #68]	@ 0x44
 8008296:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800829a:	f7f8 f825 	bl	80002e8 <__aeabi_dadd>
 800829e:	0002      	movs	r2, r0
 80082a0:	000b      	movs	r3, r1
 80082a2:	2000      	movs	r0, #0
 80082a4:	49bc      	ldr	r1, [pc, #752]	@ (8008598 <__ieee754_pow+0x798>)
 80082a6:	f7f8 fbe5 	bl	8000a74 <__aeabi_ddiv>
 80082aa:	0002      	movs	r2, r0
 80082ac:	000b      	movs	r3, r1
 80082ae:	9012      	str	r0, [sp, #72]	@ 0x48
 80082b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80082b2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80082b4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80082b6:	f7f9 f817 	bl	80012e8 <__aeabi_dmul>
 80082ba:	9008      	str	r0, [sp, #32]
 80082bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80082be:	9b08      	ldr	r3, [sp, #32]
 80082c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80082c2:	2180      	movs	r1, #128	@ 0x80
 80082c4:	9302      	str	r3, [sp, #8]
 80082c6:	9403      	str	r4, [sp, #12]
 80082c8:	2080      	movs	r0, #128	@ 0x80
 80082ca:	2300      	movs	r3, #0
 80082cc:	2200      	movs	r2, #0
 80082ce:	106d      	asrs	r5, r5, #1
 80082d0:	0589      	lsls	r1, r1, #22
 80082d2:	9302      	str	r3, [sp, #8]
 80082d4:	4329      	orrs	r1, r5
 80082d6:	0300      	lsls	r0, r0, #12
 80082d8:	9b02      	ldr	r3, [sp, #8]
 80082da:	9c03      	ldr	r4, [sp, #12]
 80082dc:	1809      	adds	r1, r1, r0
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	9401      	str	r4, [sp, #4]
 80082e2:	04b6      	lsls	r6, r6, #18
 80082e4:	198b      	adds	r3, r1, r6
 80082e6:	9800      	ldr	r0, [sp, #0]
 80082e8:	9901      	ldr	r1, [sp, #4]
 80082ea:	0014      	movs	r4, r2
 80082ec:	001d      	movs	r5, r3
 80082ee:	f7f8 fffb 	bl	80012e8 <__aeabi_dmul>
 80082f2:	0002      	movs	r2, r0
 80082f4:	000b      	movs	r3, r1
 80082f6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80082f8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80082fa:	f7f9 fadb 	bl	80018b4 <__aeabi_dsub>
 80082fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008300:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008302:	0006      	movs	r6, r0
 8008304:	000f      	movs	r7, r1
 8008306:	0020      	movs	r0, r4
 8008308:	0029      	movs	r1, r5
 800830a:	f7f9 fad3 	bl	80018b4 <__aeabi_dsub>
 800830e:	0002      	movs	r2, r0
 8008310:	000b      	movs	r3, r1
 8008312:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008314:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008316:	f7f9 facd 	bl	80018b4 <__aeabi_dsub>
 800831a:	9a00      	ldr	r2, [sp, #0]
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	f7f8 ffe3 	bl	80012e8 <__aeabi_dmul>
 8008322:	0002      	movs	r2, r0
 8008324:	000b      	movs	r3, r1
 8008326:	0030      	movs	r0, r6
 8008328:	0039      	movs	r1, r7
 800832a:	f7f9 fac3 	bl	80018b4 <__aeabi_dsub>
 800832e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008330:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008332:	f7f8 ffd9 	bl	80012e8 <__aeabi_dmul>
 8008336:	9a08      	ldr	r2, [sp, #32]
 8008338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800833a:	900a      	str	r0, [sp, #40]	@ 0x28
 800833c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800833e:	0010      	movs	r0, r2
 8008340:	0019      	movs	r1, r3
 8008342:	f7f8 ffd1 	bl	80012e8 <__aeabi_dmul>
 8008346:	0006      	movs	r6, r0
 8008348:	000f      	movs	r7, r1
 800834a:	4a98      	ldr	r2, [pc, #608]	@ (80085ac <__ieee754_pow+0x7ac>)
 800834c:	4b98      	ldr	r3, [pc, #608]	@ (80085b0 <__ieee754_pow+0x7b0>)
 800834e:	f7f8 ffcb 	bl	80012e8 <__aeabi_dmul>
 8008352:	4a98      	ldr	r2, [pc, #608]	@ (80085b4 <__ieee754_pow+0x7b4>)
 8008354:	4b98      	ldr	r3, [pc, #608]	@ (80085b8 <__ieee754_pow+0x7b8>)
 8008356:	f7f7 ffc7 	bl	80002e8 <__aeabi_dadd>
 800835a:	0032      	movs	r2, r6
 800835c:	003b      	movs	r3, r7
 800835e:	f7f8 ffc3 	bl	80012e8 <__aeabi_dmul>
 8008362:	4a96      	ldr	r2, [pc, #600]	@ (80085bc <__ieee754_pow+0x7bc>)
 8008364:	4b96      	ldr	r3, [pc, #600]	@ (80085c0 <__ieee754_pow+0x7c0>)
 8008366:	f7f7 ffbf 	bl	80002e8 <__aeabi_dadd>
 800836a:	0032      	movs	r2, r6
 800836c:	003b      	movs	r3, r7
 800836e:	f7f8 ffbb 	bl	80012e8 <__aeabi_dmul>
 8008372:	4a94      	ldr	r2, [pc, #592]	@ (80085c4 <__ieee754_pow+0x7c4>)
 8008374:	4b94      	ldr	r3, [pc, #592]	@ (80085c8 <__ieee754_pow+0x7c8>)
 8008376:	f7f7 ffb7 	bl	80002e8 <__aeabi_dadd>
 800837a:	0032      	movs	r2, r6
 800837c:	003b      	movs	r3, r7
 800837e:	f7f8 ffb3 	bl	80012e8 <__aeabi_dmul>
 8008382:	4a92      	ldr	r2, [pc, #584]	@ (80085cc <__ieee754_pow+0x7cc>)
 8008384:	4b92      	ldr	r3, [pc, #584]	@ (80085d0 <__ieee754_pow+0x7d0>)
 8008386:	f7f7 ffaf 	bl	80002e8 <__aeabi_dadd>
 800838a:	0032      	movs	r2, r6
 800838c:	003b      	movs	r3, r7
 800838e:	f7f8 ffab 	bl	80012e8 <__aeabi_dmul>
 8008392:	4a90      	ldr	r2, [pc, #576]	@ (80085d4 <__ieee754_pow+0x7d4>)
 8008394:	4b90      	ldr	r3, [pc, #576]	@ (80085d8 <__ieee754_pow+0x7d8>)
 8008396:	f7f7 ffa7 	bl	80002e8 <__aeabi_dadd>
 800839a:	0032      	movs	r2, r6
 800839c:	0004      	movs	r4, r0
 800839e:	000d      	movs	r5, r1
 80083a0:	003b      	movs	r3, r7
 80083a2:	0030      	movs	r0, r6
 80083a4:	0039      	movs	r1, r7
 80083a6:	f7f8 ff9f 	bl	80012e8 <__aeabi_dmul>
 80083aa:	0002      	movs	r2, r0
 80083ac:	000b      	movs	r3, r1
 80083ae:	0020      	movs	r0, r4
 80083b0:	0029      	movs	r1, r5
 80083b2:	f7f8 ff99 	bl	80012e8 <__aeabi_dmul>
 80083b6:	9a00      	ldr	r2, [sp, #0]
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	0004      	movs	r4, r0
 80083bc:	000d      	movs	r5, r1
 80083be:	9808      	ldr	r0, [sp, #32]
 80083c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083c2:	f7f7 ff91 	bl	80002e8 <__aeabi_dadd>
 80083c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083ca:	f7f8 ff8d 	bl	80012e8 <__aeabi_dmul>
 80083ce:	0022      	movs	r2, r4
 80083d0:	002b      	movs	r3, r5
 80083d2:	f7f7 ff89 	bl	80002e8 <__aeabi_dadd>
 80083d6:	9a00      	ldr	r2, [sp, #0]
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	900c      	str	r0, [sp, #48]	@ 0x30
 80083dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80083de:	0010      	movs	r0, r2
 80083e0:	0019      	movs	r1, r3
 80083e2:	f7f8 ff81 	bl	80012e8 <__aeabi_dmul>
 80083e6:	2200      	movs	r2, #0
 80083e8:	4b7c      	ldr	r3, [pc, #496]	@ (80085dc <__ieee754_pow+0x7dc>)
 80083ea:	0004      	movs	r4, r0
 80083ec:	000d      	movs	r5, r1
 80083ee:	f7f7 ff7b 	bl	80002e8 <__aeabi_dadd>
 80083f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083f6:	f7f7 ff77 	bl	80002e8 <__aeabi_dadd>
 80083fa:	2000      	movs	r0, #0
 80083fc:	000f      	movs	r7, r1
 80083fe:	0006      	movs	r6, r0
 8008400:	0002      	movs	r2, r0
 8008402:	000b      	movs	r3, r1
 8008404:	9800      	ldr	r0, [sp, #0]
 8008406:	9901      	ldr	r1, [sp, #4]
 8008408:	f7f8 ff6e 	bl	80012e8 <__aeabi_dmul>
 800840c:	2200      	movs	r2, #0
 800840e:	9000      	str	r0, [sp, #0]
 8008410:	9101      	str	r1, [sp, #4]
 8008412:	4b72      	ldr	r3, [pc, #456]	@ (80085dc <__ieee754_pow+0x7dc>)
 8008414:	0030      	movs	r0, r6
 8008416:	0039      	movs	r1, r7
 8008418:	f7f9 fa4c 	bl	80018b4 <__aeabi_dsub>
 800841c:	0022      	movs	r2, r4
 800841e:	002b      	movs	r3, r5
 8008420:	f7f9 fa48 	bl	80018b4 <__aeabi_dsub>
 8008424:	0002      	movs	r2, r0
 8008426:	000b      	movs	r3, r1
 8008428:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800842a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800842c:	f7f9 fa42 	bl	80018b4 <__aeabi_dsub>
 8008430:	9a08      	ldr	r2, [sp, #32]
 8008432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008434:	f7f8 ff58 	bl	80012e8 <__aeabi_dmul>
 8008438:	0032      	movs	r2, r6
 800843a:	0004      	movs	r4, r0
 800843c:	000d      	movs	r5, r1
 800843e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008440:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008442:	003b      	movs	r3, r7
 8008444:	f7f8 ff50 	bl	80012e8 <__aeabi_dmul>
 8008448:	0002      	movs	r2, r0
 800844a:	000b      	movs	r3, r1
 800844c:	0020      	movs	r0, r4
 800844e:	0029      	movs	r1, r5
 8008450:	f7f7 ff4a 	bl	80002e8 <__aeabi_dadd>
 8008454:	0004      	movs	r4, r0
 8008456:	000d      	movs	r5, r1
 8008458:	0002      	movs	r2, r0
 800845a:	000b      	movs	r3, r1
 800845c:	9800      	ldr	r0, [sp, #0]
 800845e:	9901      	ldr	r1, [sp, #4]
 8008460:	f7f7 ff42 	bl	80002e8 <__aeabi_dadd>
 8008464:	22e0      	movs	r2, #224	@ 0xe0
 8008466:	2000      	movs	r0, #0
 8008468:	4b5d      	ldr	r3, [pc, #372]	@ (80085e0 <__ieee754_pow+0x7e0>)
 800846a:	0612      	lsls	r2, r2, #24
 800846c:	0006      	movs	r6, r0
 800846e:	000f      	movs	r7, r1
 8008470:	f7f8 ff3a 	bl	80012e8 <__aeabi_dmul>
 8008474:	9008      	str	r0, [sp, #32]
 8008476:	9109      	str	r1, [sp, #36]	@ 0x24
 8008478:	9a00      	ldr	r2, [sp, #0]
 800847a:	9b01      	ldr	r3, [sp, #4]
 800847c:	0030      	movs	r0, r6
 800847e:	0039      	movs	r1, r7
 8008480:	f7f9 fa18 	bl	80018b4 <__aeabi_dsub>
 8008484:	0002      	movs	r2, r0
 8008486:	000b      	movs	r3, r1
 8008488:	0020      	movs	r0, r4
 800848a:	0029      	movs	r1, r5
 800848c:	f7f9 fa12 	bl	80018b4 <__aeabi_dsub>
 8008490:	4a54      	ldr	r2, [pc, #336]	@ (80085e4 <__ieee754_pow+0x7e4>)
 8008492:	4b53      	ldr	r3, [pc, #332]	@ (80085e0 <__ieee754_pow+0x7e0>)
 8008494:	f7f8 ff28 	bl	80012e8 <__aeabi_dmul>
 8008498:	4a53      	ldr	r2, [pc, #332]	@ (80085e8 <__ieee754_pow+0x7e8>)
 800849a:	0004      	movs	r4, r0
 800849c:	000d      	movs	r5, r1
 800849e:	0030      	movs	r0, r6
 80084a0:	0039      	movs	r1, r7
 80084a2:	4b52      	ldr	r3, [pc, #328]	@ (80085ec <__ieee754_pow+0x7ec>)
 80084a4:	f7f8 ff20 	bl	80012e8 <__aeabi_dmul>
 80084a8:	0002      	movs	r2, r0
 80084aa:	000b      	movs	r3, r1
 80084ac:	0020      	movs	r0, r4
 80084ae:	0029      	movs	r1, r5
 80084b0:	f7f7 ff1a 	bl	80002e8 <__aeabi_dadd>
 80084b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80084b6:	4b4e      	ldr	r3, [pc, #312]	@ (80085f0 <__ieee754_pow+0x7f0>)
 80084b8:	189b      	adds	r3, r3, r2
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f7f7 ff13 	bl	80002e8 <__aeabi_dadd>
 80084c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80084c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80084c6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80084c8:	f7f9 fe5c 	bl	8002184 <__aeabi_i2d>
 80084cc:	0004      	movs	r4, r0
 80084ce:	000d      	movs	r5, r1
 80084d0:	9808      	ldr	r0, [sp, #32]
 80084d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80084d6:	4b47      	ldr	r3, [pc, #284]	@ (80085f4 <__ieee754_pow+0x7f4>)
 80084d8:	189b      	adds	r3, r3, r2
 80084da:	681e      	ldr	r6, [r3, #0]
 80084dc:	685f      	ldr	r7, [r3, #4]
 80084de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084e2:	f7f7 ff01 	bl	80002e8 <__aeabi_dadd>
 80084e6:	0032      	movs	r2, r6
 80084e8:	003b      	movs	r3, r7
 80084ea:	f7f7 fefd 	bl	80002e8 <__aeabi_dadd>
 80084ee:	0022      	movs	r2, r4
 80084f0:	002b      	movs	r3, r5
 80084f2:	f7f7 fef9 	bl	80002e8 <__aeabi_dadd>
 80084f6:	2000      	movs	r0, #0
 80084f8:	0022      	movs	r2, r4
 80084fa:	002b      	movs	r3, r5
 80084fc:	9000      	str	r0, [sp, #0]
 80084fe:	9101      	str	r1, [sp, #4]
 8008500:	f7f9 f9d8 	bl	80018b4 <__aeabi_dsub>
 8008504:	0032      	movs	r2, r6
 8008506:	003b      	movs	r3, r7
 8008508:	f7f9 f9d4 	bl	80018b4 <__aeabi_dsub>
 800850c:	9a08      	ldr	r2, [sp, #32]
 800850e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008510:	f7f9 f9d0 	bl	80018b4 <__aeabi_dsub>
 8008514:	0002      	movs	r2, r0
 8008516:	000b      	movs	r3, r1
 8008518:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800851a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800851c:	e61f      	b.n	800815e <__ieee754_pow+0x35e>
 800851e:	4a36      	ldr	r2, [pc, #216]	@ (80085f8 <__ieee754_pow+0x7f8>)
 8008520:	4b36      	ldr	r3, [pc, #216]	@ (80085fc <__ieee754_pow+0x7fc>)
 8008522:	9804      	ldr	r0, [sp, #16]
 8008524:	9905      	ldr	r1, [sp, #20]
 8008526:	f7f7 fedf 	bl	80002e8 <__aeabi_dadd>
 800852a:	9a00      	ldr	r2, [sp, #0]
 800852c:	9b01      	ldr	r3, [sp, #4]
 800852e:	0004      	movs	r4, r0
 8008530:	000d      	movs	r5, r1
 8008532:	0030      	movs	r0, r6
 8008534:	0039      	movs	r1, r7
 8008536:	f7f9 f9bd 	bl	80018b4 <__aeabi_dsub>
 800853a:	0002      	movs	r2, r0
 800853c:	000b      	movs	r3, r1
 800853e:	0020      	movs	r0, r4
 8008540:	0029      	movs	r1, r5
 8008542:	f7f7 fe9f 	bl	8000284 <__aeabi_dcmpgt>
 8008546:	2800      	cmp	r0, #0
 8008548:	d000      	beq.n	800854c <__ieee754_pow+0x74c>
 800854a:	e646      	b.n	80081da <__ieee754_pow+0x3da>
 800854c:	4b2c      	ldr	r3, [pc, #176]	@ (8008600 <__ieee754_pow+0x800>)
 800854e:	e063      	b.n	8008618 <__ieee754_pow+0x818>
 8008550:	4a2c      	ldr	r2, [pc, #176]	@ (8008604 <__ieee754_pow+0x804>)
 8008552:	004b      	lsls	r3, r1, #1
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	4293      	cmp	r3, r2
 8008558:	d95a      	bls.n	8008610 <__ieee754_pow+0x810>
 800855a:	4b2b      	ldr	r3, [pc, #172]	@ (8008608 <__ieee754_pow+0x808>)
 800855c:	18cb      	adds	r3, r1, r3
 800855e:	4303      	orrs	r3, r0
 8008560:	d008      	beq.n	8008574 <__ieee754_pow+0x774>
 8008562:	9806      	ldr	r0, [sp, #24]
 8008564:	9907      	ldr	r1, [sp, #28]
 8008566:	2300      	movs	r3, #0
 8008568:	2200      	movs	r2, #0
 800856a:	f7f7 fe77 	bl	800025c <__aeabi_dcmplt>
 800856e:	1e43      	subs	r3, r0, #1
 8008570:	4198      	sbcs	r0, r3
 8008572:	e567      	b.n	8008044 <__ieee754_pow+0x244>
 8008574:	9a00      	ldr	r2, [sp, #0]
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	f7f9 f99c 	bl	80018b4 <__aeabi_dsub>
 800857c:	9a04      	ldr	r2, [sp, #16]
 800857e:	9b05      	ldr	r3, [sp, #20]
 8008580:	f7f7 fe8a 	bl	8000298 <__aeabi_dcmpge>
 8008584:	2800      	cmp	r0, #0
 8008586:	d1ec      	bne.n	8008562 <__ieee754_pow+0x762>
 8008588:	4b20      	ldr	r3, [pc, #128]	@ (800860c <__ieee754_pow+0x80c>)
 800858a:	e045      	b.n	8008618 <__ieee754_pow+0x818>
 800858c:	7ff00000 	.word	0x7ff00000
 8008590:	43400000 	.word	0x43400000
 8008594:	fffffc01 	.word	0xfffffc01
 8008598:	3ff00000 	.word	0x3ff00000
 800859c:	0003988e 	.word	0x0003988e
 80085a0:	000bb679 	.word	0x000bb679
 80085a4:	fff00000 	.word	0xfff00000
 80085a8:	08008d50 	.word	0x08008d50
 80085ac:	4a454eef 	.word	0x4a454eef
 80085b0:	3fca7e28 	.word	0x3fca7e28
 80085b4:	93c9db65 	.word	0x93c9db65
 80085b8:	3fcd864a 	.word	0x3fcd864a
 80085bc:	a91d4101 	.word	0xa91d4101
 80085c0:	3fd17460 	.word	0x3fd17460
 80085c4:	518f264d 	.word	0x518f264d
 80085c8:	3fd55555 	.word	0x3fd55555
 80085cc:	db6fabff 	.word	0xdb6fabff
 80085d0:	3fdb6db6 	.word	0x3fdb6db6
 80085d4:	33333303 	.word	0x33333303
 80085d8:	3fe33333 	.word	0x3fe33333
 80085dc:	40080000 	.word	0x40080000
 80085e0:	3feec709 	.word	0x3feec709
 80085e4:	dc3a03fd 	.word	0xdc3a03fd
 80085e8:	145b01f5 	.word	0x145b01f5
 80085ec:	be3e2fe0 	.word	0xbe3e2fe0
 80085f0:	08008d30 	.word	0x08008d30
 80085f4:	08008d40 	.word	0x08008d40
 80085f8:	652b82fe 	.word	0x652b82fe
 80085fc:	3c971547 	.word	0x3c971547
 8008600:	40900000 	.word	0x40900000
 8008604:	4090cbff 	.word	0x4090cbff
 8008608:	3f6f3400 	.word	0x3f6f3400
 800860c:	4090cc00 	.word	0x4090cc00
 8008610:	4a73      	ldr	r2, [pc, #460]	@ (80087e0 <__ieee754_pow+0x9e0>)
 8008612:	9402      	str	r4, [sp, #8]
 8008614:	4293      	cmp	r3, r2
 8008616:	d925      	bls.n	8008664 <__ieee754_pow+0x864>
 8008618:	4a72      	ldr	r2, [pc, #456]	@ (80087e4 <__ieee754_pow+0x9e4>)
 800861a:	151b      	asrs	r3, r3, #20
 800861c:	189b      	adds	r3, r3, r2
 800861e:	2280      	movs	r2, #128	@ 0x80
 8008620:	0352      	lsls	r2, r2, #13
 8008622:	0011      	movs	r1, r2
 8008624:	4119      	asrs	r1, r3
 8008626:	19cb      	adds	r3, r1, r7
 8008628:	005c      	lsls	r4, r3, #1
 800862a:	496f      	ldr	r1, [pc, #444]	@ (80087e8 <__ieee754_pow+0x9e8>)
 800862c:	4d6f      	ldr	r5, [pc, #444]	@ (80087ec <__ieee754_pow+0x9ec>)
 800862e:	0d64      	lsrs	r4, r4, #21
 8008630:	1864      	adds	r4, r4, r1
 8008632:	4125      	asrs	r5, r4
 8008634:	401d      	ands	r5, r3
 8008636:	031b      	lsls	r3, r3, #12
 8008638:	0b1b      	lsrs	r3, r3, #12
 800863a:	4313      	orrs	r3, r2
 800863c:	2214      	movs	r2, #20
 800863e:	1b12      	subs	r2, r2, r4
 8008640:	4113      	asrs	r3, r2
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	9b08      	ldr	r3, [sp, #32]
 8008646:	2000      	movs	r0, #0
 8008648:	0029      	movs	r1, r5
 800864a:	2b00      	cmp	r3, #0
 800864c:	da02      	bge.n	8008654 <__ieee754_pow+0x854>
 800864e:	9b02      	ldr	r3, [sp, #8]
 8008650:	425b      	negs	r3, r3
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	0002      	movs	r2, r0
 8008656:	000b      	movs	r3, r1
 8008658:	9800      	ldr	r0, [sp, #0]
 800865a:	9901      	ldr	r1, [sp, #4]
 800865c:	f7f9 f92a 	bl	80018b4 <__aeabi_dsub>
 8008660:	9000      	str	r0, [sp, #0]
 8008662:	9101      	str	r1, [sp, #4]
 8008664:	9a04      	ldr	r2, [sp, #16]
 8008666:	9b05      	ldr	r3, [sp, #20]
 8008668:	9800      	ldr	r0, [sp, #0]
 800866a:	9901      	ldr	r1, [sp, #4]
 800866c:	f7f7 fe3c 	bl	80002e8 <__aeabi_dadd>
 8008670:	2000      	movs	r0, #0
 8008672:	2200      	movs	r2, #0
 8008674:	4b5e      	ldr	r3, [pc, #376]	@ (80087f0 <__ieee754_pow+0x9f0>)
 8008676:	0006      	movs	r6, r0
 8008678:	000f      	movs	r7, r1
 800867a:	f7f8 fe35 	bl	80012e8 <__aeabi_dmul>
 800867e:	9a00      	ldr	r2, [sp, #0]
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	9008      	str	r0, [sp, #32]
 8008684:	9109      	str	r1, [sp, #36]	@ 0x24
 8008686:	0030      	movs	r0, r6
 8008688:	0039      	movs	r1, r7
 800868a:	f7f9 f913 	bl	80018b4 <__aeabi_dsub>
 800868e:	0002      	movs	r2, r0
 8008690:	000b      	movs	r3, r1
 8008692:	9804      	ldr	r0, [sp, #16]
 8008694:	9905      	ldr	r1, [sp, #20]
 8008696:	f7f9 f90d 	bl	80018b4 <__aeabi_dsub>
 800869a:	4a56      	ldr	r2, [pc, #344]	@ (80087f4 <__ieee754_pow+0x9f4>)
 800869c:	4b56      	ldr	r3, [pc, #344]	@ (80087f8 <__ieee754_pow+0x9f8>)
 800869e:	f7f8 fe23 	bl	80012e8 <__aeabi_dmul>
 80086a2:	4a56      	ldr	r2, [pc, #344]	@ (80087fc <__ieee754_pow+0x9fc>)
 80086a4:	0004      	movs	r4, r0
 80086a6:	000d      	movs	r5, r1
 80086a8:	0030      	movs	r0, r6
 80086aa:	0039      	movs	r1, r7
 80086ac:	4b54      	ldr	r3, [pc, #336]	@ (8008800 <__ieee754_pow+0xa00>)
 80086ae:	f7f8 fe1b 	bl	80012e8 <__aeabi_dmul>
 80086b2:	0002      	movs	r2, r0
 80086b4:	000b      	movs	r3, r1
 80086b6:	0020      	movs	r0, r4
 80086b8:	0029      	movs	r1, r5
 80086ba:	f7f7 fe15 	bl	80002e8 <__aeabi_dadd>
 80086be:	0004      	movs	r4, r0
 80086c0:	000d      	movs	r5, r1
 80086c2:	0002      	movs	r2, r0
 80086c4:	000b      	movs	r3, r1
 80086c6:	9808      	ldr	r0, [sp, #32]
 80086c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086ca:	f7f7 fe0d 	bl	80002e8 <__aeabi_dadd>
 80086ce:	9a08      	ldr	r2, [sp, #32]
 80086d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d2:	0006      	movs	r6, r0
 80086d4:	000f      	movs	r7, r1
 80086d6:	f7f9 f8ed 	bl	80018b4 <__aeabi_dsub>
 80086da:	0002      	movs	r2, r0
 80086dc:	000b      	movs	r3, r1
 80086de:	0020      	movs	r0, r4
 80086e0:	0029      	movs	r1, r5
 80086e2:	f7f9 f8e7 	bl	80018b4 <__aeabi_dsub>
 80086e6:	0032      	movs	r2, r6
 80086e8:	9000      	str	r0, [sp, #0]
 80086ea:	9101      	str	r1, [sp, #4]
 80086ec:	003b      	movs	r3, r7
 80086ee:	0030      	movs	r0, r6
 80086f0:	0039      	movs	r1, r7
 80086f2:	f7f8 fdf9 	bl	80012e8 <__aeabi_dmul>
 80086f6:	0004      	movs	r4, r0
 80086f8:	000d      	movs	r5, r1
 80086fa:	4a42      	ldr	r2, [pc, #264]	@ (8008804 <__ieee754_pow+0xa04>)
 80086fc:	4b42      	ldr	r3, [pc, #264]	@ (8008808 <__ieee754_pow+0xa08>)
 80086fe:	f7f8 fdf3 	bl	80012e8 <__aeabi_dmul>
 8008702:	4a42      	ldr	r2, [pc, #264]	@ (800880c <__ieee754_pow+0xa0c>)
 8008704:	4b42      	ldr	r3, [pc, #264]	@ (8008810 <__ieee754_pow+0xa10>)
 8008706:	f7f9 f8d5 	bl	80018b4 <__aeabi_dsub>
 800870a:	0022      	movs	r2, r4
 800870c:	002b      	movs	r3, r5
 800870e:	f7f8 fdeb 	bl	80012e8 <__aeabi_dmul>
 8008712:	4a40      	ldr	r2, [pc, #256]	@ (8008814 <__ieee754_pow+0xa14>)
 8008714:	4b40      	ldr	r3, [pc, #256]	@ (8008818 <__ieee754_pow+0xa18>)
 8008716:	f7f7 fde7 	bl	80002e8 <__aeabi_dadd>
 800871a:	0022      	movs	r2, r4
 800871c:	002b      	movs	r3, r5
 800871e:	f7f8 fde3 	bl	80012e8 <__aeabi_dmul>
 8008722:	4a3e      	ldr	r2, [pc, #248]	@ (800881c <__ieee754_pow+0xa1c>)
 8008724:	4b3e      	ldr	r3, [pc, #248]	@ (8008820 <__ieee754_pow+0xa20>)
 8008726:	f7f9 f8c5 	bl	80018b4 <__aeabi_dsub>
 800872a:	0022      	movs	r2, r4
 800872c:	002b      	movs	r3, r5
 800872e:	f7f8 fddb 	bl	80012e8 <__aeabi_dmul>
 8008732:	4a3c      	ldr	r2, [pc, #240]	@ (8008824 <__ieee754_pow+0xa24>)
 8008734:	4b3c      	ldr	r3, [pc, #240]	@ (8008828 <__ieee754_pow+0xa28>)
 8008736:	f7f7 fdd7 	bl	80002e8 <__aeabi_dadd>
 800873a:	0022      	movs	r2, r4
 800873c:	002b      	movs	r3, r5
 800873e:	f7f8 fdd3 	bl	80012e8 <__aeabi_dmul>
 8008742:	0002      	movs	r2, r0
 8008744:	000b      	movs	r3, r1
 8008746:	0030      	movs	r0, r6
 8008748:	0039      	movs	r1, r7
 800874a:	f7f9 f8b3 	bl	80018b4 <__aeabi_dsub>
 800874e:	0004      	movs	r4, r0
 8008750:	000d      	movs	r5, r1
 8008752:	0002      	movs	r2, r0
 8008754:	000b      	movs	r3, r1
 8008756:	0030      	movs	r0, r6
 8008758:	0039      	movs	r1, r7
 800875a:	f7f8 fdc5 	bl	80012e8 <__aeabi_dmul>
 800875e:	2380      	movs	r3, #128	@ 0x80
 8008760:	9004      	str	r0, [sp, #16]
 8008762:	9105      	str	r1, [sp, #20]
 8008764:	2200      	movs	r2, #0
 8008766:	0020      	movs	r0, r4
 8008768:	0029      	movs	r1, r5
 800876a:	05db      	lsls	r3, r3, #23
 800876c:	f7f9 f8a2 	bl	80018b4 <__aeabi_dsub>
 8008770:	0002      	movs	r2, r0
 8008772:	000b      	movs	r3, r1
 8008774:	9804      	ldr	r0, [sp, #16]
 8008776:	9905      	ldr	r1, [sp, #20]
 8008778:	f7f8 f97c 	bl	8000a74 <__aeabi_ddiv>
 800877c:	9a00      	ldr	r2, [sp, #0]
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	0004      	movs	r4, r0
 8008782:	000d      	movs	r5, r1
 8008784:	0030      	movs	r0, r6
 8008786:	0039      	movs	r1, r7
 8008788:	f7f8 fdae 	bl	80012e8 <__aeabi_dmul>
 800878c:	9a00      	ldr	r2, [sp, #0]
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	f7f7 fdaa 	bl	80002e8 <__aeabi_dadd>
 8008794:	0002      	movs	r2, r0
 8008796:	000b      	movs	r3, r1
 8008798:	0020      	movs	r0, r4
 800879a:	0029      	movs	r1, r5
 800879c:	f7f9 f88a 	bl	80018b4 <__aeabi_dsub>
 80087a0:	0032      	movs	r2, r6
 80087a2:	003b      	movs	r3, r7
 80087a4:	f7f9 f886 	bl	80018b4 <__aeabi_dsub>
 80087a8:	0002      	movs	r2, r0
 80087aa:	000b      	movs	r3, r1
 80087ac:	2000      	movs	r0, #0
 80087ae:	491f      	ldr	r1, [pc, #124]	@ (800882c <__ieee754_pow+0xa2c>)
 80087b0:	f7f9 f880 	bl	80018b4 <__aeabi_dsub>
 80087b4:	9b02      	ldr	r3, [sp, #8]
 80087b6:	051b      	lsls	r3, r3, #20
 80087b8:	185b      	adds	r3, r3, r1
 80087ba:	151a      	asrs	r2, r3, #20
 80087bc:	2a00      	cmp	r2, #0
 80087be:	dc06      	bgt.n	80087ce <__ieee754_pow+0x9ce>
 80087c0:	9a02      	ldr	r2, [sp, #8]
 80087c2:	f000 f839 	bl	8008838 <scalbn>
 80087c6:	9a06      	ldr	r2, [sp, #24]
 80087c8:	9b07      	ldr	r3, [sp, #28]
 80087ca:	f7ff fb8b 	bl	8007ee4 <__ieee754_pow+0xe4>
 80087ce:	0019      	movs	r1, r3
 80087d0:	e7f9      	b.n	80087c6 <__ieee754_pow+0x9c6>
 80087d2:	2300      	movs	r3, #0
 80087d4:	4c15      	ldr	r4, [pc, #84]	@ (800882c <__ieee754_pow+0xa2c>)
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	9401      	str	r4, [sp, #4]
 80087da:	f7ff fbc8 	bl	8007f6e <__ieee754_pow+0x16e>
 80087de:	46c0      	nop			@ (mov r8, r8)
 80087e0:	3fe00000 	.word	0x3fe00000
 80087e4:	fffffc02 	.word	0xfffffc02
 80087e8:	fffffc01 	.word	0xfffffc01
 80087ec:	fff00000 	.word	0xfff00000
 80087f0:	3fe62e43 	.word	0x3fe62e43
 80087f4:	fefa39ef 	.word	0xfefa39ef
 80087f8:	3fe62e42 	.word	0x3fe62e42
 80087fc:	0ca86c39 	.word	0x0ca86c39
 8008800:	be205c61 	.word	0xbe205c61
 8008804:	72bea4d0 	.word	0x72bea4d0
 8008808:	3e663769 	.word	0x3e663769
 800880c:	c5d26bf1 	.word	0xc5d26bf1
 8008810:	3ebbbd41 	.word	0x3ebbbd41
 8008814:	af25de2c 	.word	0xaf25de2c
 8008818:	3f11566a 	.word	0x3f11566a
 800881c:	16bebd93 	.word	0x16bebd93
 8008820:	3f66c16c 	.word	0x3f66c16c
 8008824:	5555553e 	.word	0x5555553e
 8008828:	3fc55555 	.word	0x3fc55555
 800882c:	3ff00000 	.word	0x3ff00000

08008830 <fabs>:
 8008830:	0049      	lsls	r1, r1, #1
 8008832:	084b      	lsrs	r3, r1, #1
 8008834:	0019      	movs	r1, r3
 8008836:	4770      	bx	lr

08008838 <scalbn>:
 8008838:	004b      	lsls	r3, r1, #1
 800883a:	b570      	push	{r4, r5, r6, lr}
 800883c:	0d5b      	lsrs	r3, r3, #21
 800883e:	0014      	movs	r4, r2
 8008840:	000d      	movs	r5, r1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10f      	bne.n	8008866 <scalbn+0x2e>
 8008846:	004b      	lsls	r3, r1, #1
 8008848:	085b      	lsrs	r3, r3, #1
 800884a:	4303      	orrs	r3, r0
 800884c:	d012      	beq.n	8008874 <scalbn+0x3c>
 800884e:	4b23      	ldr	r3, [pc, #140]	@ (80088dc <scalbn+0xa4>)
 8008850:	2200      	movs	r2, #0
 8008852:	f7f8 fd49 	bl	80012e8 <__aeabi_dmul>
 8008856:	4b22      	ldr	r3, [pc, #136]	@ (80088e0 <scalbn+0xa8>)
 8008858:	429c      	cmp	r4, r3
 800885a:	da0c      	bge.n	8008876 <scalbn+0x3e>
 800885c:	4a21      	ldr	r2, [pc, #132]	@ (80088e4 <scalbn+0xac>)
 800885e:	4b22      	ldr	r3, [pc, #136]	@ (80088e8 <scalbn+0xb0>)
 8008860:	f7f8 fd42 	bl	80012e8 <__aeabi_dmul>
 8008864:	e006      	b.n	8008874 <scalbn+0x3c>
 8008866:	4a21      	ldr	r2, [pc, #132]	@ (80088ec <scalbn+0xb4>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d108      	bne.n	800887e <scalbn+0x46>
 800886c:	0002      	movs	r2, r0
 800886e:	000b      	movs	r3, r1
 8008870:	f7f7 fd3a 	bl	80002e8 <__aeabi_dadd>
 8008874:	bd70      	pop	{r4, r5, r6, pc}
 8008876:	000d      	movs	r5, r1
 8008878:	004b      	lsls	r3, r1, #1
 800887a:	0d5b      	lsrs	r3, r3, #21
 800887c:	3b36      	subs	r3, #54	@ 0x36
 800887e:	4a1c      	ldr	r2, [pc, #112]	@ (80088f0 <scalbn+0xb8>)
 8008880:	4294      	cmp	r4, r2
 8008882:	dd0a      	ble.n	800889a <scalbn+0x62>
 8008884:	4c1b      	ldr	r4, [pc, #108]	@ (80088f4 <scalbn+0xbc>)
 8008886:	4d1c      	ldr	r5, [pc, #112]	@ (80088f8 <scalbn+0xc0>)
 8008888:	2900      	cmp	r1, #0
 800888a:	da01      	bge.n	8008890 <scalbn+0x58>
 800888c:	4c19      	ldr	r4, [pc, #100]	@ (80088f4 <scalbn+0xbc>)
 800888e:	4d1b      	ldr	r5, [pc, #108]	@ (80088fc <scalbn+0xc4>)
 8008890:	4a18      	ldr	r2, [pc, #96]	@ (80088f4 <scalbn+0xbc>)
 8008892:	4b19      	ldr	r3, [pc, #100]	@ (80088f8 <scalbn+0xc0>)
 8008894:	0020      	movs	r0, r4
 8008896:	0029      	movs	r1, r5
 8008898:	e7e2      	b.n	8008860 <scalbn+0x28>
 800889a:	18e2      	adds	r2, r4, r3
 800889c:	4b18      	ldr	r3, [pc, #96]	@ (8008900 <scalbn+0xc8>)
 800889e:	429a      	cmp	r2, r3
 80088a0:	dcf0      	bgt.n	8008884 <scalbn+0x4c>
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	dd05      	ble.n	80088b2 <scalbn+0x7a>
 80088a6:	4b17      	ldr	r3, [pc, #92]	@ (8008904 <scalbn+0xcc>)
 80088a8:	0512      	lsls	r2, r2, #20
 80088aa:	402b      	ands	r3, r5
 80088ac:	4313      	orrs	r3, r2
 80088ae:	0019      	movs	r1, r3
 80088b0:	e7e0      	b.n	8008874 <scalbn+0x3c>
 80088b2:	0013      	movs	r3, r2
 80088b4:	3335      	adds	r3, #53	@ 0x35
 80088b6:	da08      	bge.n	80088ca <scalbn+0x92>
 80088b8:	4c0a      	ldr	r4, [pc, #40]	@ (80088e4 <scalbn+0xac>)
 80088ba:	4d0b      	ldr	r5, [pc, #44]	@ (80088e8 <scalbn+0xb0>)
 80088bc:	2900      	cmp	r1, #0
 80088be:	da01      	bge.n	80088c4 <scalbn+0x8c>
 80088c0:	4c08      	ldr	r4, [pc, #32]	@ (80088e4 <scalbn+0xac>)
 80088c2:	4d11      	ldr	r5, [pc, #68]	@ (8008908 <scalbn+0xd0>)
 80088c4:	4a07      	ldr	r2, [pc, #28]	@ (80088e4 <scalbn+0xac>)
 80088c6:	4b08      	ldr	r3, [pc, #32]	@ (80088e8 <scalbn+0xb0>)
 80088c8:	e7e4      	b.n	8008894 <scalbn+0x5c>
 80088ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008904 <scalbn+0xcc>)
 80088cc:	3236      	adds	r2, #54	@ 0x36
 80088ce:	401d      	ands	r5, r3
 80088d0:	0512      	lsls	r2, r2, #20
 80088d2:	432a      	orrs	r2, r5
 80088d4:	0011      	movs	r1, r2
 80088d6:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <scalbn+0xd4>)
 80088d8:	2200      	movs	r2, #0
 80088da:	e7c1      	b.n	8008860 <scalbn+0x28>
 80088dc:	43500000 	.word	0x43500000
 80088e0:	ffff3cb0 	.word	0xffff3cb0
 80088e4:	c2f8f359 	.word	0xc2f8f359
 80088e8:	01a56e1f 	.word	0x01a56e1f
 80088ec:	000007ff 	.word	0x000007ff
 80088f0:	0000c350 	.word	0x0000c350
 80088f4:	8800759c 	.word	0x8800759c
 80088f8:	7e37e43c 	.word	0x7e37e43c
 80088fc:	fe37e43c 	.word	0xfe37e43c
 8008900:	000007fe 	.word	0x000007fe
 8008904:	800fffff 	.word	0x800fffff
 8008908:	81a56e1f 	.word	0x81a56e1f
 800890c:	3c900000 	.word	0x3c900000

08008910 <with_errno>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	000d      	movs	r5, r1
 8008914:	0016      	movs	r6, r2
 8008916:	0004      	movs	r4, r0
 8008918:	f7fe fbc2 	bl	80070a0 <__errno>
 800891c:	0029      	movs	r1, r5
 800891e:	6006      	str	r6, [r0, #0]
 8008920:	0020      	movs	r0, r4
 8008922:	bd70      	pop	{r4, r5, r6, pc}

08008924 <xflow>:
 8008924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008926:	0014      	movs	r4, r2
 8008928:	001d      	movs	r5, r3
 800892a:	2800      	cmp	r0, #0
 800892c:	d002      	beq.n	8008934 <xflow+0x10>
 800892e:	2180      	movs	r1, #128	@ 0x80
 8008930:	0609      	lsls	r1, r1, #24
 8008932:	185b      	adds	r3, r3, r1
 8008934:	9200      	str	r2, [sp, #0]
 8008936:	9301      	str	r3, [sp, #4]
 8008938:	9a00      	ldr	r2, [sp, #0]
 800893a:	9b01      	ldr	r3, [sp, #4]
 800893c:	0020      	movs	r0, r4
 800893e:	0029      	movs	r1, r5
 8008940:	f7f8 fcd2 	bl	80012e8 <__aeabi_dmul>
 8008944:	2222      	movs	r2, #34	@ 0x22
 8008946:	f7ff ffe3 	bl	8008910 <with_errno>
 800894a:	b003      	add	sp, #12
 800894c:	bd30      	pop	{r4, r5, pc}

0800894e <__math_uflow>:
 800894e:	2380      	movs	r3, #128	@ 0x80
 8008950:	b510      	push	{r4, lr}
 8008952:	2200      	movs	r2, #0
 8008954:	055b      	lsls	r3, r3, #21
 8008956:	f7ff ffe5 	bl	8008924 <xflow>
 800895a:	bd10      	pop	{r4, pc}

0800895c <__math_oflow>:
 800895c:	23e0      	movs	r3, #224	@ 0xe0
 800895e:	b510      	push	{r4, lr}
 8008960:	2200      	movs	r2, #0
 8008962:	05db      	lsls	r3, r3, #23
 8008964:	f7ff ffde 	bl	8008924 <xflow>
 8008968:	bd10      	pop	{r4, pc}
	...

0800896c <__ieee754_sqrt>:
 800896c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896e:	000a      	movs	r2, r1
 8008970:	000d      	movs	r5, r1
 8008972:	496b      	ldr	r1, [pc, #428]	@ (8008b20 <__ieee754_sqrt+0x1b4>)
 8008974:	0004      	movs	r4, r0
 8008976:	0003      	movs	r3, r0
 8008978:	0008      	movs	r0, r1
 800897a:	b087      	sub	sp, #28
 800897c:	4028      	ands	r0, r5
 800897e:	4288      	cmp	r0, r1
 8008980:	d111      	bne.n	80089a6 <__ieee754_sqrt+0x3a>
 8008982:	0022      	movs	r2, r4
 8008984:	002b      	movs	r3, r5
 8008986:	0020      	movs	r0, r4
 8008988:	0029      	movs	r1, r5
 800898a:	f7f8 fcad 	bl	80012e8 <__aeabi_dmul>
 800898e:	0002      	movs	r2, r0
 8008990:	000b      	movs	r3, r1
 8008992:	0020      	movs	r0, r4
 8008994:	0029      	movs	r1, r5
 8008996:	f7f7 fca7 	bl	80002e8 <__aeabi_dadd>
 800899a:	0004      	movs	r4, r0
 800899c:	000d      	movs	r5, r1
 800899e:	0020      	movs	r0, r4
 80089a0:	0029      	movs	r1, r5
 80089a2:	b007      	add	sp, #28
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	dc11      	bgt.n	80089ce <__ieee754_sqrt+0x62>
 80089aa:	0069      	lsls	r1, r5, #1
 80089ac:	0849      	lsrs	r1, r1, #1
 80089ae:	4321      	orrs	r1, r4
 80089b0:	d0f5      	beq.n	800899e <__ieee754_sqrt+0x32>
 80089b2:	2000      	movs	r0, #0
 80089b4:	4285      	cmp	r5, r0
 80089b6:	d010      	beq.n	80089da <__ieee754_sqrt+0x6e>
 80089b8:	0022      	movs	r2, r4
 80089ba:	002b      	movs	r3, r5
 80089bc:	0020      	movs	r0, r4
 80089be:	0029      	movs	r1, r5
 80089c0:	f7f8 ff78 	bl	80018b4 <__aeabi_dsub>
 80089c4:	0002      	movs	r2, r0
 80089c6:	000b      	movs	r3, r1
 80089c8:	f7f8 f854 	bl	8000a74 <__aeabi_ddiv>
 80089cc:	e7e5      	b.n	800899a <__ieee754_sqrt+0x2e>
 80089ce:	1528      	asrs	r0, r5, #20
 80089d0:	d115      	bne.n	80089fe <__ieee754_sqrt+0x92>
 80089d2:	2480      	movs	r4, #128	@ 0x80
 80089d4:	2100      	movs	r1, #0
 80089d6:	0364      	lsls	r4, r4, #13
 80089d8:	e007      	b.n	80089ea <__ieee754_sqrt+0x7e>
 80089da:	0ada      	lsrs	r2, r3, #11
 80089dc:	3815      	subs	r0, #21
 80089de:	055b      	lsls	r3, r3, #21
 80089e0:	2a00      	cmp	r2, #0
 80089e2:	d0fa      	beq.n	80089da <__ieee754_sqrt+0x6e>
 80089e4:	e7f5      	b.n	80089d2 <__ieee754_sqrt+0x66>
 80089e6:	0052      	lsls	r2, r2, #1
 80089e8:	3101      	adds	r1, #1
 80089ea:	4222      	tst	r2, r4
 80089ec:	d0fb      	beq.n	80089e6 <__ieee754_sqrt+0x7a>
 80089ee:	1e4c      	subs	r4, r1, #1
 80089f0:	1b00      	subs	r0, r0, r4
 80089f2:	2420      	movs	r4, #32
 80089f4:	001d      	movs	r5, r3
 80089f6:	1a64      	subs	r4, r4, r1
 80089f8:	40e5      	lsrs	r5, r4
 80089fa:	408b      	lsls	r3, r1
 80089fc:	432a      	orrs	r2, r5
 80089fe:	4949      	ldr	r1, [pc, #292]	@ (8008b24 <__ieee754_sqrt+0x1b8>)
 8008a00:	0312      	lsls	r2, r2, #12
 8008a02:	1844      	adds	r4, r0, r1
 8008a04:	2180      	movs	r1, #128	@ 0x80
 8008a06:	0b12      	lsrs	r2, r2, #12
 8008a08:	0349      	lsls	r1, r1, #13
 8008a0a:	4311      	orrs	r1, r2
 8008a0c:	07c0      	lsls	r0, r0, #31
 8008a0e:	d403      	bmi.n	8008a18 <__ieee754_sqrt+0xac>
 8008a10:	0fda      	lsrs	r2, r3, #31
 8008a12:	0049      	lsls	r1, r1, #1
 8008a14:	1851      	adds	r1, r2, r1
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	2500      	movs	r5, #0
 8008a1a:	1062      	asrs	r2, r4, #1
 8008a1c:	0049      	lsls	r1, r1, #1
 8008a1e:	2480      	movs	r4, #128	@ 0x80
 8008a20:	9205      	str	r2, [sp, #20]
 8008a22:	0fda      	lsrs	r2, r3, #31
 8008a24:	1852      	adds	r2, r2, r1
 8008a26:	2016      	movs	r0, #22
 8008a28:	0029      	movs	r1, r5
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	03a4      	lsls	r4, r4, #14
 8008a2e:	190e      	adds	r6, r1, r4
 8008a30:	4296      	cmp	r6, r2
 8008a32:	dc02      	bgt.n	8008a3a <__ieee754_sqrt+0xce>
 8008a34:	1931      	adds	r1, r6, r4
 8008a36:	1b92      	subs	r2, r2, r6
 8008a38:	192d      	adds	r5, r5, r4
 8008a3a:	0fde      	lsrs	r6, r3, #31
 8008a3c:	0052      	lsls	r2, r2, #1
 8008a3e:	3801      	subs	r0, #1
 8008a40:	1992      	adds	r2, r2, r6
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	0864      	lsrs	r4, r4, #1
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d1f1      	bne.n	8008a2e <__ieee754_sqrt+0xc2>
 8008a4a:	2620      	movs	r6, #32
 8008a4c:	2780      	movs	r7, #128	@ 0x80
 8008a4e:	0004      	movs	r4, r0
 8008a50:	9604      	str	r6, [sp, #16]
 8008a52:	063f      	lsls	r7, r7, #24
 8008a54:	183e      	adds	r6, r7, r0
 8008a56:	46b4      	mov	ip, r6
 8008a58:	428a      	cmp	r2, r1
 8008a5a:	dc02      	bgt.n	8008a62 <__ieee754_sqrt+0xf6>
 8008a5c:	d114      	bne.n	8008a88 <__ieee754_sqrt+0x11c>
 8008a5e:	429e      	cmp	r6, r3
 8008a60:	d812      	bhi.n	8008a88 <__ieee754_sqrt+0x11c>
 8008a62:	4660      	mov	r0, ip
 8008a64:	4666      	mov	r6, ip
 8008a66:	19c0      	adds	r0, r0, r7
 8008a68:	9100      	str	r1, [sp, #0]
 8008a6a:	2e00      	cmp	r6, #0
 8008a6c:	da03      	bge.n	8008a76 <__ieee754_sqrt+0x10a>
 8008a6e:	43c6      	mvns	r6, r0
 8008a70:	0ff6      	lsrs	r6, r6, #31
 8008a72:	198e      	adds	r6, r1, r6
 8008a74:	9600      	str	r6, [sp, #0]
 8008a76:	1a52      	subs	r2, r2, r1
 8008a78:	4563      	cmp	r3, ip
 8008a7a:	4189      	sbcs	r1, r1
 8008a7c:	4249      	negs	r1, r1
 8008a7e:	1a52      	subs	r2, r2, r1
 8008a80:	4661      	mov	r1, ip
 8008a82:	1a5b      	subs	r3, r3, r1
 8008a84:	9900      	ldr	r1, [sp, #0]
 8008a86:	19e4      	adds	r4, r4, r7
 8008a88:	0fde      	lsrs	r6, r3, #31
 8008a8a:	0052      	lsls	r2, r2, #1
 8008a8c:	1992      	adds	r2, r2, r6
 8008a8e:	9e04      	ldr	r6, [sp, #16]
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	3e01      	subs	r6, #1
 8008a94:	087f      	lsrs	r7, r7, #1
 8008a96:	9604      	str	r6, [sp, #16]
 8008a98:	2e00      	cmp	r6, #0
 8008a9a:	d1db      	bne.n	8008a54 <__ieee754_sqrt+0xe8>
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	d01f      	beq.n	8008ae0 <__ieee754_sqrt+0x174>
 8008aa0:	4e21      	ldr	r6, [pc, #132]	@ (8008b28 <__ieee754_sqrt+0x1bc>)
 8008aa2:	4f22      	ldr	r7, [pc, #136]	@ (8008b2c <__ieee754_sqrt+0x1c0>)
 8008aa4:	6830      	ldr	r0, [r6, #0]
 8008aa6:	6871      	ldr	r1, [r6, #4]
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	9200      	str	r2, [sp, #0]
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	6832      	ldr	r2, [r6, #0]
 8008ab2:	6873      	ldr	r3, [r6, #4]
 8008ab4:	9202      	str	r2, [sp, #8]
 8008ab6:	9303      	str	r3, [sp, #12]
 8008ab8:	9a00      	ldr	r2, [sp, #0]
 8008aba:	9b01      	ldr	r3, [sp, #4]
 8008abc:	f7f8 fefa 	bl	80018b4 <__aeabi_dsub>
 8008ac0:	0002      	movs	r2, r0
 8008ac2:	000b      	movs	r3, r1
 8008ac4:	9802      	ldr	r0, [sp, #8]
 8008ac6:	9903      	ldr	r1, [sp, #12]
 8008ac8:	f7f7 fbd2 	bl	8000270 <__aeabi_dcmple>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d007      	beq.n	8008ae0 <__ieee754_sqrt+0x174>
 8008ad0:	6830      	ldr	r0, [r6, #0]
 8008ad2:	6871      	ldr	r1, [r6, #4]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	1c67      	adds	r7, r4, #1
 8008ada:	d10c      	bne.n	8008af6 <__ieee754_sqrt+0x18a>
 8008adc:	9c04      	ldr	r4, [sp, #16]
 8008ade:	3501      	adds	r5, #1
 8008ae0:	4a13      	ldr	r2, [pc, #76]	@ (8008b30 <__ieee754_sqrt+0x1c4>)
 8008ae2:	106b      	asrs	r3, r5, #1
 8008ae4:	189b      	adds	r3, r3, r2
 8008ae6:	9a05      	ldr	r2, [sp, #20]
 8008ae8:	07ed      	lsls	r5, r5, #31
 8008aea:	0864      	lsrs	r4, r4, #1
 8008aec:	0512      	lsls	r2, r2, #20
 8008aee:	4325      	orrs	r5, r4
 8008af0:	0028      	movs	r0, r5
 8008af2:	18d1      	adds	r1, r2, r3
 8008af4:	e751      	b.n	800899a <__ieee754_sqrt+0x2e>
 8008af6:	f7f7 fbf7 	bl	80002e8 <__aeabi_dadd>
 8008afa:	6877      	ldr	r7, [r6, #4]
 8008afc:	6836      	ldr	r6, [r6, #0]
 8008afe:	0002      	movs	r2, r0
 8008b00:	000b      	movs	r3, r1
 8008b02:	0030      	movs	r0, r6
 8008b04:	0039      	movs	r1, r7
 8008b06:	f7f7 fba9 	bl	800025c <__aeabi_dcmplt>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d004      	beq.n	8008b18 <__ieee754_sqrt+0x1ac>
 8008b0e:	3402      	adds	r4, #2
 8008b10:	4263      	negs	r3, r4
 8008b12:	4163      	adcs	r3, r4
 8008b14:	18ed      	adds	r5, r5, r3
 8008b16:	e7e3      	b.n	8008ae0 <__ieee754_sqrt+0x174>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	3401      	adds	r4, #1
 8008b1c:	439c      	bics	r4, r3
 8008b1e:	e7df      	b.n	8008ae0 <__ieee754_sqrt+0x174>
 8008b20:	7ff00000 	.word	0x7ff00000
 8008b24:	fffffc01 	.word	0xfffffc01
 8008b28:	08008d68 	.word	0x08008d68
 8008b2c:	08008d60 	.word	0x08008d60
 8008b30:	3fe00000 	.word	0x3fe00000

08008b34 <_init>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	46c0      	nop			@ (mov r8, r8)
 8008b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3a:	bc08      	pop	{r3}
 8008b3c:	469e      	mov	lr, r3
 8008b3e:	4770      	bx	lr

08008b40 <_fini>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	46c0      	nop			@ (mov r8, r8)
 8008b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b46:	bc08      	pop	{r3}
 8008b48:	469e      	mov	lr, r3
 8008b4a:	4770      	bx	lr
