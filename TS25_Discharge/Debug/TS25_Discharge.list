
TS25_Discharge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008140  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080081fc  080081fc  000091fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083dc  080083dc  0000a0e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080083dc  080083dc  0000a0e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080083dc  080083dc  0000a0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083dc  080083dc  000093dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  080083e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200000e4  080084c8  0000a0e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  080084c8  0000a578  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a0e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011149  00000000  00000000  0000a10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f5  00000000  00000000  0001b255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0001da50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d51  00000000  00000000  0001eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efe8  00000000  00000000  0001f8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001398a  00000000  00000000  0003e8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6178  00000000  00000000  0005225b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001183d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a60  00000000  00000000  00118418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0011ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000e4 	.word	0x200000e4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080081e4 	.word	0x080081e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000e8 	.word	0x200000e8
 8000100:	080081e4 	.word	0x080081e4

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0010      	movs	r0, r2
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	0019      	movs	r1, r3
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f001 f9d5 	bl	80015f0 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f001 f919 	bl	8001488 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f001 f9c7 	bl	80015f0 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 f9bd 	bl	80015f0 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 f943 	bl	8001510 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 f939 	bl	8001510 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			@ (mov r8, r8)

080002ac <__aeabi_d2uiz>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2200      	movs	r2, #0
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <__aeabi_d2uiz+0x38>)
 80002b2:	0004      	movs	r4, r0
 80002b4:	000d      	movs	r5, r1
 80002b6:	f7ff ffef 	bl	8000298 <__aeabi_dcmpge>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d104      	bne.n	80002c8 <__aeabi_d2uiz+0x1c>
 80002be:	0020      	movs	r0, r4
 80002c0:	0029      	movs	r1, r5
 80002c2:	f002 f915 	bl	80024f0 <__aeabi_d2iz>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <__aeabi_d2uiz+0x38>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	0020      	movs	r0, r4
 80002ce:	0029      	movs	r1, r5
 80002d0:	f001 fce2 	bl	8001c98 <__aeabi_dsub>
 80002d4:	f002 f90c 	bl	80024f0 <__aeabi_d2iz>
 80002d8:	2380      	movs	r3, #128	@ 0x80
 80002da:	061b      	lsls	r3, r3, #24
 80002dc:	469c      	mov	ip, r3
 80002de:	4460      	add	r0, ip
 80002e0:	e7f1      	b.n	80002c6 <__aeabi_d2uiz+0x1a>
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	41e00000 	.word	0x41e00000

080002e8 <__aeabi_fadd>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	024b      	lsls	r3, r1, #9
 80002ec:	0a5a      	lsrs	r2, r3, #9
 80002ee:	4694      	mov	ip, r2
 80002f0:	004a      	lsls	r2, r1, #1
 80002f2:	0fc9      	lsrs	r1, r1, #31
 80002f4:	46ce      	mov	lr, r9
 80002f6:	4647      	mov	r7, r8
 80002f8:	4689      	mov	r9, r1
 80002fa:	0045      	lsls	r5, r0, #1
 80002fc:	0246      	lsls	r6, r0, #9
 80002fe:	0e2d      	lsrs	r5, r5, #24
 8000300:	0e12      	lsrs	r2, r2, #24
 8000302:	b580      	push	{r7, lr}
 8000304:	0999      	lsrs	r1, r3, #6
 8000306:	0a77      	lsrs	r7, r6, #9
 8000308:	0fc4      	lsrs	r4, r0, #31
 800030a:	09b6      	lsrs	r6, r6, #6
 800030c:	1aab      	subs	r3, r5, r2
 800030e:	454c      	cmp	r4, r9
 8000310:	d020      	beq.n	8000354 <__aeabi_fadd+0x6c>
 8000312:	2b00      	cmp	r3, #0
 8000314:	dd0c      	ble.n	8000330 <__aeabi_fadd+0x48>
 8000316:	2a00      	cmp	r2, #0
 8000318:	d134      	bne.n	8000384 <__aeabi_fadd+0x9c>
 800031a:	2900      	cmp	r1, #0
 800031c:	d02a      	beq.n	8000374 <__aeabi_fadd+0x8c>
 800031e:	1e5a      	subs	r2, r3, #1
 8000320:	2b01      	cmp	r3, #1
 8000322:	d100      	bne.n	8000326 <__aeabi_fadd+0x3e>
 8000324:	e08f      	b.n	8000446 <__aeabi_fadd+0x15e>
 8000326:	2bff      	cmp	r3, #255	@ 0xff
 8000328:	d100      	bne.n	800032c <__aeabi_fadd+0x44>
 800032a:	e0cd      	b.n	80004c8 <__aeabi_fadd+0x1e0>
 800032c:	0013      	movs	r3, r2
 800032e:	e02f      	b.n	8000390 <__aeabi_fadd+0xa8>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d060      	beq.n	80003f6 <__aeabi_fadd+0x10e>
 8000334:	1b53      	subs	r3, r2, r5
 8000336:	2d00      	cmp	r5, #0
 8000338:	d000      	beq.n	800033c <__aeabi_fadd+0x54>
 800033a:	e0ee      	b.n	800051a <__aeabi_fadd+0x232>
 800033c:	2e00      	cmp	r6, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0x5a>
 8000340:	e13e      	b.n	80005c0 <__aeabi_fadd+0x2d8>
 8000342:	1e5c      	subs	r4, r3, #1
 8000344:	2b01      	cmp	r3, #1
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0x62>
 8000348:	e16b      	b.n	8000622 <__aeabi_fadd+0x33a>
 800034a:	2bff      	cmp	r3, #255	@ 0xff
 800034c:	d100      	bne.n	8000350 <__aeabi_fadd+0x68>
 800034e:	e0b9      	b.n	80004c4 <__aeabi_fadd+0x1dc>
 8000350:	0023      	movs	r3, r4
 8000352:	e0e7      	b.n	8000524 <__aeabi_fadd+0x23c>
 8000354:	2b00      	cmp	r3, #0
 8000356:	dc00      	bgt.n	800035a <__aeabi_fadd+0x72>
 8000358:	e0a4      	b.n	80004a4 <__aeabi_fadd+0x1bc>
 800035a:	2a00      	cmp	r2, #0
 800035c:	d069      	beq.n	8000432 <__aeabi_fadd+0x14a>
 800035e:	2dff      	cmp	r5, #255	@ 0xff
 8000360:	d100      	bne.n	8000364 <__aeabi_fadd+0x7c>
 8000362:	e0b1      	b.n	80004c8 <__aeabi_fadd+0x1e0>
 8000364:	2280      	movs	r2, #128	@ 0x80
 8000366:	04d2      	lsls	r2, r2, #19
 8000368:	4311      	orrs	r1, r2
 800036a:	2b1b      	cmp	r3, #27
 800036c:	dc00      	bgt.n	8000370 <__aeabi_fadd+0x88>
 800036e:	e0e9      	b.n	8000544 <__aeabi_fadd+0x25c>
 8000370:	002b      	movs	r3, r5
 8000372:	3605      	adds	r6, #5
 8000374:	08f7      	lsrs	r7, r6, #3
 8000376:	2bff      	cmp	r3, #255	@ 0xff
 8000378:	d100      	bne.n	800037c <__aeabi_fadd+0x94>
 800037a:	e0a5      	b.n	80004c8 <__aeabi_fadd+0x1e0>
 800037c:	027a      	lsls	r2, r7, #9
 800037e:	0a52      	lsrs	r2, r2, #9
 8000380:	b2d8      	uxtb	r0, r3
 8000382:	e030      	b.n	80003e6 <__aeabi_fadd+0xfe>
 8000384:	2dff      	cmp	r5, #255	@ 0xff
 8000386:	d100      	bne.n	800038a <__aeabi_fadd+0xa2>
 8000388:	e09e      	b.n	80004c8 <__aeabi_fadd+0x1e0>
 800038a:	2280      	movs	r2, #128	@ 0x80
 800038c:	04d2      	lsls	r2, r2, #19
 800038e:	4311      	orrs	r1, r2
 8000390:	2001      	movs	r0, #1
 8000392:	2b1b      	cmp	r3, #27
 8000394:	dc08      	bgt.n	80003a8 <__aeabi_fadd+0xc0>
 8000396:	0008      	movs	r0, r1
 8000398:	2220      	movs	r2, #32
 800039a:	40d8      	lsrs	r0, r3
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	4099      	lsls	r1, r3
 80003a0:	000b      	movs	r3, r1
 80003a2:	1e5a      	subs	r2, r3, #1
 80003a4:	4193      	sbcs	r3, r2
 80003a6:	4318      	orrs	r0, r3
 80003a8:	1a36      	subs	r6, r6, r0
 80003aa:	0173      	lsls	r3, r6, #5
 80003ac:	d400      	bmi.n	80003b0 <__aeabi_fadd+0xc8>
 80003ae:	e071      	b.n	8000494 <__aeabi_fadd+0x1ac>
 80003b0:	01b6      	lsls	r6, r6, #6
 80003b2:	09b7      	lsrs	r7, r6, #6
 80003b4:	0038      	movs	r0, r7
 80003b6:	f002 f9cf 	bl	8002758 <__clzsi2>
 80003ba:	003b      	movs	r3, r7
 80003bc:	3805      	subs	r0, #5
 80003be:	4083      	lsls	r3, r0
 80003c0:	4285      	cmp	r5, r0
 80003c2:	dd4d      	ble.n	8000460 <__aeabi_fadd+0x178>
 80003c4:	4eb4      	ldr	r6, [pc, #720]	@ (8000698 <__aeabi_fadd+0x3b0>)
 80003c6:	1a2d      	subs	r5, r5, r0
 80003c8:	401e      	ands	r6, r3
 80003ca:	075a      	lsls	r2, r3, #29
 80003cc:	d068      	beq.n	80004a0 <__aeabi_fadd+0x1b8>
 80003ce:	220f      	movs	r2, #15
 80003d0:	4013      	ands	r3, r2
 80003d2:	2b04      	cmp	r3, #4
 80003d4:	d064      	beq.n	80004a0 <__aeabi_fadd+0x1b8>
 80003d6:	3604      	adds	r6, #4
 80003d8:	0173      	lsls	r3, r6, #5
 80003da:	d561      	bpl.n	80004a0 <__aeabi_fadd+0x1b8>
 80003dc:	1c68      	adds	r0, r5, #1
 80003de:	2dfe      	cmp	r5, #254	@ 0xfe
 80003e0:	d154      	bne.n	800048c <__aeabi_fadd+0x1a4>
 80003e2:	20ff      	movs	r0, #255	@ 0xff
 80003e4:	2200      	movs	r2, #0
 80003e6:	05c0      	lsls	r0, r0, #23
 80003e8:	4310      	orrs	r0, r2
 80003ea:	07e4      	lsls	r4, r4, #31
 80003ec:	4320      	orrs	r0, r4
 80003ee:	bcc0      	pop	{r6, r7}
 80003f0:	46b9      	mov	r9, r7
 80003f2:	46b0      	mov	r8, r6
 80003f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003f6:	22fe      	movs	r2, #254	@ 0xfe
 80003f8:	4690      	mov	r8, r2
 80003fa:	1c68      	adds	r0, r5, #1
 80003fc:	0002      	movs	r2, r0
 80003fe:	4640      	mov	r0, r8
 8000400:	4210      	tst	r0, r2
 8000402:	d16b      	bne.n	80004dc <__aeabi_fadd+0x1f4>
 8000404:	2d00      	cmp	r5, #0
 8000406:	d000      	beq.n	800040a <__aeabi_fadd+0x122>
 8000408:	e0dd      	b.n	80005c6 <__aeabi_fadd+0x2de>
 800040a:	2e00      	cmp	r6, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fadd+0x128>
 800040e:	e102      	b.n	8000616 <__aeabi_fadd+0x32e>
 8000410:	2900      	cmp	r1, #0
 8000412:	d0b3      	beq.n	800037c <__aeabi_fadd+0x94>
 8000414:	2280      	movs	r2, #128	@ 0x80
 8000416:	1a77      	subs	r7, r6, r1
 8000418:	04d2      	lsls	r2, r2, #19
 800041a:	4217      	tst	r7, r2
 800041c:	d100      	bne.n	8000420 <__aeabi_fadd+0x138>
 800041e:	e136      	b.n	800068e <__aeabi_fadd+0x3a6>
 8000420:	464c      	mov	r4, r9
 8000422:	1b8e      	subs	r6, r1, r6
 8000424:	d061      	beq.n	80004ea <__aeabi_fadd+0x202>
 8000426:	2001      	movs	r0, #1
 8000428:	4216      	tst	r6, r2
 800042a:	d130      	bne.n	800048e <__aeabi_fadd+0x1a6>
 800042c:	2300      	movs	r3, #0
 800042e:	08f7      	lsrs	r7, r6, #3
 8000430:	e7a4      	b.n	800037c <__aeabi_fadd+0x94>
 8000432:	2900      	cmp	r1, #0
 8000434:	d09e      	beq.n	8000374 <__aeabi_fadd+0x8c>
 8000436:	1e5a      	subs	r2, r3, #1
 8000438:	2b01      	cmp	r3, #1
 800043a:	d100      	bne.n	800043e <__aeabi_fadd+0x156>
 800043c:	e0ca      	b.n	80005d4 <__aeabi_fadd+0x2ec>
 800043e:	2bff      	cmp	r3, #255	@ 0xff
 8000440:	d042      	beq.n	80004c8 <__aeabi_fadd+0x1e0>
 8000442:	0013      	movs	r3, r2
 8000444:	e791      	b.n	800036a <__aeabi_fadd+0x82>
 8000446:	1a71      	subs	r1, r6, r1
 8000448:	014b      	lsls	r3, r1, #5
 800044a:	d400      	bmi.n	800044e <__aeabi_fadd+0x166>
 800044c:	e0d1      	b.n	80005f2 <__aeabi_fadd+0x30a>
 800044e:	018f      	lsls	r7, r1, #6
 8000450:	09bf      	lsrs	r7, r7, #6
 8000452:	0038      	movs	r0, r7
 8000454:	f002 f980 	bl	8002758 <__clzsi2>
 8000458:	003b      	movs	r3, r7
 800045a:	3805      	subs	r0, #5
 800045c:	4083      	lsls	r3, r0
 800045e:	2501      	movs	r5, #1
 8000460:	2220      	movs	r2, #32
 8000462:	1b40      	subs	r0, r0, r5
 8000464:	3001      	adds	r0, #1
 8000466:	1a12      	subs	r2, r2, r0
 8000468:	001e      	movs	r6, r3
 800046a:	4093      	lsls	r3, r2
 800046c:	40c6      	lsrs	r6, r0
 800046e:	1e5a      	subs	r2, r3, #1
 8000470:	4193      	sbcs	r3, r2
 8000472:	431e      	orrs	r6, r3
 8000474:	d039      	beq.n	80004ea <__aeabi_fadd+0x202>
 8000476:	0773      	lsls	r3, r6, #29
 8000478:	d100      	bne.n	800047c <__aeabi_fadd+0x194>
 800047a:	e11b      	b.n	80006b4 <__aeabi_fadd+0x3cc>
 800047c:	230f      	movs	r3, #15
 800047e:	2500      	movs	r5, #0
 8000480:	4033      	ands	r3, r6
 8000482:	2b04      	cmp	r3, #4
 8000484:	d1a7      	bne.n	80003d6 <__aeabi_fadd+0xee>
 8000486:	2001      	movs	r0, #1
 8000488:	0172      	lsls	r2, r6, #5
 800048a:	d57c      	bpl.n	8000586 <__aeabi_fadd+0x29e>
 800048c:	b2c0      	uxtb	r0, r0
 800048e:	01b2      	lsls	r2, r6, #6
 8000490:	0a52      	lsrs	r2, r2, #9
 8000492:	e7a8      	b.n	80003e6 <__aeabi_fadd+0xfe>
 8000494:	0773      	lsls	r3, r6, #29
 8000496:	d003      	beq.n	80004a0 <__aeabi_fadd+0x1b8>
 8000498:	230f      	movs	r3, #15
 800049a:	4033      	ands	r3, r6
 800049c:	2b04      	cmp	r3, #4
 800049e:	d19a      	bne.n	80003d6 <__aeabi_fadd+0xee>
 80004a0:	002b      	movs	r3, r5
 80004a2:	e767      	b.n	8000374 <__aeabi_fadd+0x8c>
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d023      	beq.n	80004f0 <__aeabi_fadd+0x208>
 80004a8:	1b53      	subs	r3, r2, r5
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d17b      	bne.n	80005a6 <__aeabi_fadd+0x2be>
 80004ae:	2e00      	cmp	r6, #0
 80004b0:	d100      	bne.n	80004b4 <__aeabi_fadd+0x1cc>
 80004b2:	e086      	b.n	80005c2 <__aeabi_fadd+0x2da>
 80004b4:	1e5d      	subs	r5, r3, #1
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d100      	bne.n	80004bc <__aeabi_fadd+0x1d4>
 80004ba:	e08b      	b.n	80005d4 <__aeabi_fadd+0x2ec>
 80004bc:	2bff      	cmp	r3, #255	@ 0xff
 80004be:	d002      	beq.n	80004c6 <__aeabi_fadd+0x1de>
 80004c0:	002b      	movs	r3, r5
 80004c2:	e075      	b.n	80005b0 <__aeabi_fadd+0x2c8>
 80004c4:	464c      	mov	r4, r9
 80004c6:	4667      	mov	r7, ip
 80004c8:	2f00      	cmp	r7, #0
 80004ca:	d100      	bne.n	80004ce <__aeabi_fadd+0x1e6>
 80004cc:	e789      	b.n	80003e2 <__aeabi_fadd+0xfa>
 80004ce:	2280      	movs	r2, #128	@ 0x80
 80004d0:	03d2      	lsls	r2, r2, #15
 80004d2:	433a      	orrs	r2, r7
 80004d4:	0252      	lsls	r2, r2, #9
 80004d6:	20ff      	movs	r0, #255	@ 0xff
 80004d8:	0a52      	lsrs	r2, r2, #9
 80004da:	e784      	b.n	80003e6 <__aeabi_fadd+0xfe>
 80004dc:	1a77      	subs	r7, r6, r1
 80004de:	017b      	lsls	r3, r7, #5
 80004e0:	d46b      	bmi.n	80005ba <__aeabi_fadd+0x2d2>
 80004e2:	2f00      	cmp	r7, #0
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fadd+0x200>
 80004e6:	e765      	b.n	80003b4 <__aeabi_fadd+0xcc>
 80004e8:	2400      	movs	r4, #0
 80004ea:	2000      	movs	r0, #0
 80004ec:	2200      	movs	r2, #0
 80004ee:	e77a      	b.n	80003e6 <__aeabi_fadd+0xfe>
 80004f0:	22fe      	movs	r2, #254	@ 0xfe
 80004f2:	1c6b      	adds	r3, r5, #1
 80004f4:	421a      	tst	r2, r3
 80004f6:	d149      	bne.n	800058c <__aeabi_fadd+0x2a4>
 80004f8:	2d00      	cmp	r5, #0
 80004fa:	d000      	beq.n	80004fe <__aeabi_fadd+0x216>
 80004fc:	e09f      	b.n	800063e <__aeabi_fadd+0x356>
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d100      	bne.n	8000504 <__aeabi_fadd+0x21c>
 8000502:	e0ba      	b.n	800067a <__aeabi_fadd+0x392>
 8000504:	2900      	cmp	r1, #0
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0x222>
 8000508:	e0cf      	b.n	80006aa <__aeabi_fadd+0x3c2>
 800050a:	1872      	adds	r2, r6, r1
 800050c:	0153      	lsls	r3, r2, #5
 800050e:	d400      	bmi.n	8000512 <__aeabi_fadd+0x22a>
 8000510:	e0cd      	b.n	80006ae <__aeabi_fadd+0x3c6>
 8000512:	0192      	lsls	r2, r2, #6
 8000514:	2001      	movs	r0, #1
 8000516:	0a52      	lsrs	r2, r2, #9
 8000518:	e765      	b.n	80003e6 <__aeabi_fadd+0xfe>
 800051a:	2aff      	cmp	r2, #255	@ 0xff
 800051c:	d0d2      	beq.n	80004c4 <__aeabi_fadd+0x1dc>
 800051e:	2080      	movs	r0, #128	@ 0x80
 8000520:	04c0      	lsls	r0, r0, #19
 8000522:	4306      	orrs	r6, r0
 8000524:	2001      	movs	r0, #1
 8000526:	2b1b      	cmp	r3, #27
 8000528:	dc08      	bgt.n	800053c <__aeabi_fadd+0x254>
 800052a:	0030      	movs	r0, r6
 800052c:	2420      	movs	r4, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	1ae3      	subs	r3, r4, r3
 8000532:	409e      	lsls	r6, r3
 8000534:	0033      	movs	r3, r6
 8000536:	1e5c      	subs	r4, r3, #1
 8000538:	41a3      	sbcs	r3, r4
 800053a:	4318      	orrs	r0, r3
 800053c:	464c      	mov	r4, r9
 800053e:	0015      	movs	r5, r2
 8000540:	1a0e      	subs	r6, r1, r0
 8000542:	e732      	b.n	80003aa <__aeabi_fadd+0xc2>
 8000544:	0008      	movs	r0, r1
 8000546:	2220      	movs	r2, #32
 8000548:	40d8      	lsrs	r0, r3
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	4099      	lsls	r1, r3
 800054e:	000b      	movs	r3, r1
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	4193      	sbcs	r3, r2
 8000554:	4303      	orrs	r3, r0
 8000556:	18f6      	adds	r6, r6, r3
 8000558:	0173      	lsls	r3, r6, #5
 800055a:	d59b      	bpl.n	8000494 <__aeabi_fadd+0x1ac>
 800055c:	3501      	adds	r5, #1
 800055e:	2dff      	cmp	r5, #255	@ 0xff
 8000560:	d100      	bne.n	8000564 <__aeabi_fadd+0x27c>
 8000562:	e73e      	b.n	80003e2 <__aeabi_fadd+0xfa>
 8000564:	2301      	movs	r3, #1
 8000566:	494d      	ldr	r1, [pc, #308]	@ (800069c <__aeabi_fadd+0x3b4>)
 8000568:	0872      	lsrs	r2, r6, #1
 800056a:	4033      	ands	r3, r6
 800056c:	400a      	ands	r2, r1
 800056e:	431a      	orrs	r2, r3
 8000570:	0016      	movs	r6, r2
 8000572:	0753      	lsls	r3, r2, #29
 8000574:	d004      	beq.n	8000580 <__aeabi_fadd+0x298>
 8000576:	230f      	movs	r3, #15
 8000578:	4013      	ands	r3, r2
 800057a:	2b04      	cmp	r3, #4
 800057c:	d000      	beq.n	8000580 <__aeabi_fadd+0x298>
 800057e:	e72a      	b.n	80003d6 <__aeabi_fadd+0xee>
 8000580:	0173      	lsls	r3, r6, #5
 8000582:	d500      	bpl.n	8000586 <__aeabi_fadd+0x29e>
 8000584:	e72a      	b.n	80003dc <__aeabi_fadd+0xf4>
 8000586:	002b      	movs	r3, r5
 8000588:	08f7      	lsrs	r7, r6, #3
 800058a:	e6f7      	b.n	800037c <__aeabi_fadd+0x94>
 800058c:	2bff      	cmp	r3, #255	@ 0xff
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x2aa>
 8000590:	e727      	b.n	80003e2 <__aeabi_fadd+0xfa>
 8000592:	1871      	adds	r1, r6, r1
 8000594:	0849      	lsrs	r1, r1, #1
 8000596:	074a      	lsls	r2, r1, #29
 8000598:	d02f      	beq.n	80005fa <__aeabi_fadd+0x312>
 800059a:	220f      	movs	r2, #15
 800059c:	400a      	ands	r2, r1
 800059e:	2a04      	cmp	r2, #4
 80005a0:	d02b      	beq.n	80005fa <__aeabi_fadd+0x312>
 80005a2:	1d0e      	adds	r6, r1, #4
 80005a4:	e6e6      	b.n	8000374 <__aeabi_fadd+0x8c>
 80005a6:	2aff      	cmp	r2, #255	@ 0xff
 80005a8:	d08d      	beq.n	80004c6 <__aeabi_fadd+0x1de>
 80005aa:	2080      	movs	r0, #128	@ 0x80
 80005ac:	04c0      	lsls	r0, r0, #19
 80005ae:	4306      	orrs	r6, r0
 80005b0:	2b1b      	cmp	r3, #27
 80005b2:	dd24      	ble.n	80005fe <__aeabi_fadd+0x316>
 80005b4:	0013      	movs	r3, r2
 80005b6:	1d4e      	adds	r6, r1, #5
 80005b8:	e6dc      	b.n	8000374 <__aeabi_fadd+0x8c>
 80005ba:	464c      	mov	r4, r9
 80005bc:	1b8f      	subs	r7, r1, r6
 80005be:	e6f9      	b.n	80003b4 <__aeabi_fadd+0xcc>
 80005c0:	464c      	mov	r4, r9
 80005c2:	000e      	movs	r6, r1
 80005c4:	e6d6      	b.n	8000374 <__aeabi_fadd+0x8c>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d149      	bne.n	800065e <__aeabi_fadd+0x376>
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d068      	beq.n	80006a0 <__aeabi_fadd+0x3b8>
 80005ce:	4667      	mov	r7, ip
 80005d0:	464c      	mov	r4, r9
 80005d2:	e77c      	b.n	80004ce <__aeabi_fadd+0x1e6>
 80005d4:	1870      	adds	r0, r6, r1
 80005d6:	0143      	lsls	r3, r0, #5
 80005d8:	d574      	bpl.n	80006c4 <__aeabi_fadd+0x3dc>
 80005da:	4930      	ldr	r1, [pc, #192]	@ (800069c <__aeabi_fadd+0x3b4>)
 80005dc:	0840      	lsrs	r0, r0, #1
 80005de:	4001      	ands	r1, r0
 80005e0:	0743      	lsls	r3, r0, #29
 80005e2:	d009      	beq.n	80005f8 <__aeabi_fadd+0x310>
 80005e4:	230f      	movs	r3, #15
 80005e6:	4003      	ands	r3, r0
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d005      	beq.n	80005f8 <__aeabi_fadd+0x310>
 80005ec:	2302      	movs	r3, #2
 80005ee:	1d0e      	adds	r6, r1, #4
 80005f0:	e6c0      	b.n	8000374 <__aeabi_fadd+0x8c>
 80005f2:	2301      	movs	r3, #1
 80005f4:	08cf      	lsrs	r7, r1, #3
 80005f6:	e6c1      	b.n	800037c <__aeabi_fadd+0x94>
 80005f8:	2302      	movs	r3, #2
 80005fa:	08cf      	lsrs	r7, r1, #3
 80005fc:	e6be      	b.n	800037c <__aeabi_fadd+0x94>
 80005fe:	2520      	movs	r5, #32
 8000600:	0030      	movs	r0, r6
 8000602:	40d8      	lsrs	r0, r3
 8000604:	1aeb      	subs	r3, r5, r3
 8000606:	409e      	lsls	r6, r3
 8000608:	0033      	movs	r3, r6
 800060a:	1e5d      	subs	r5, r3, #1
 800060c:	41ab      	sbcs	r3, r5
 800060e:	4303      	orrs	r3, r0
 8000610:	0015      	movs	r5, r2
 8000612:	185e      	adds	r6, r3, r1
 8000614:	e7a0      	b.n	8000558 <__aeabi_fadd+0x270>
 8000616:	2900      	cmp	r1, #0
 8000618:	d100      	bne.n	800061c <__aeabi_fadd+0x334>
 800061a:	e765      	b.n	80004e8 <__aeabi_fadd+0x200>
 800061c:	464c      	mov	r4, r9
 800061e:	4667      	mov	r7, ip
 8000620:	e6ac      	b.n	800037c <__aeabi_fadd+0x94>
 8000622:	1b8f      	subs	r7, r1, r6
 8000624:	017b      	lsls	r3, r7, #5
 8000626:	d52e      	bpl.n	8000686 <__aeabi_fadd+0x39e>
 8000628:	01bf      	lsls	r7, r7, #6
 800062a:	09bf      	lsrs	r7, r7, #6
 800062c:	0038      	movs	r0, r7
 800062e:	f002 f893 	bl	8002758 <__clzsi2>
 8000632:	003b      	movs	r3, r7
 8000634:	3805      	subs	r0, #5
 8000636:	4083      	lsls	r3, r0
 8000638:	464c      	mov	r4, r9
 800063a:	3501      	adds	r5, #1
 800063c:	e710      	b.n	8000460 <__aeabi_fadd+0x178>
 800063e:	2e00      	cmp	r6, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x35c>
 8000642:	e740      	b.n	80004c6 <__aeabi_fadd+0x1de>
 8000644:	2900      	cmp	r1, #0
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x362>
 8000648:	e741      	b.n	80004ce <__aeabi_fadd+0x1e6>
 800064a:	2380      	movs	r3, #128	@ 0x80
 800064c:	03db      	lsls	r3, r3, #15
 800064e:	429f      	cmp	r7, r3
 8000650:	d200      	bcs.n	8000654 <__aeabi_fadd+0x36c>
 8000652:	e73c      	b.n	80004ce <__aeabi_fadd+0x1e6>
 8000654:	459c      	cmp	ip, r3
 8000656:	d300      	bcc.n	800065a <__aeabi_fadd+0x372>
 8000658:	e739      	b.n	80004ce <__aeabi_fadd+0x1e6>
 800065a:	4667      	mov	r7, ip
 800065c:	e737      	b.n	80004ce <__aeabi_fadd+0x1e6>
 800065e:	2900      	cmp	r1, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_fadd+0x37c>
 8000662:	e734      	b.n	80004ce <__aeabi_fadd+0x1e6>
 8000664:	2380      	movs	r3, #128	@ 0x80
 8000666:	03db      	lsls	r3, r3, #15
 8000668:	429f      	cmp	r7, r3
 800066a:	d200      	bcs.n	800066e <__aeabi_fadd+0x386>
 800066c:	e72f      	b.n	80004ce <__aeabi_fadd+0x1e6>
 800066e:	459c      	cmp	ip, r3
 8000670:	d300      	bcc.n	8000674 <__aeabi_fadd+0x38c>
 8000672:	e72c      	b.n	80004ce <__aeabi_fadd+0x1e6>
 8000674:	464c      	mov	r4, r9
 8000676:	4667      	mov	r7, ip
 8000678:	e729      	b.n	80004ce <__aeabi_fadd+0x1e6>
 800067a:	2900      	cmp	r1, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x398>
 800067e:	e734      	b.n	80004ea <__aeabi_fadd+0x202>
 8000680:	2300      	movs	r3, #0
 8000682:	08cf      	lsrs	r7, r1, #3
 8000684:	e67a      	b.n	800037c <__aeabi_fadd+0x94>
 8000686:	464c      	mov	r4, r9
 8000688:	2301      	movs	r3, #1
 800068a:	08ff      	lsrs	r7, r7, #3
 800068c:	e676      	b.n	800037c <__aeabi_fadd+0x94>
 800068e:	2f00      	cmp	r7, #0
 8000690:	d100      	bne.n	8000694 <__aeabi_fadd+0x3ac>
 8000692:	e729      	b.n	80004e8 <__aeabi_fadd+0x200>
 8000694:	08ff      	lsrs	r7, r7, #3
 8000696:	e671      	b.n	800037c <__aeabi_fadd+0x94>
 8000698:	fbffffff 	.word	0xfbffffff
 800069c:	7dffffff 	.word	0x7dffffff
 80006a0:	2280      	movs	r2, #128	@ 0x80
 80006a2:	2400      	movs	r4, #0
 80006a4:	20ff      	movs	r0, #255	@ 0xff
 80006a6:	03d2      	lsls	r2, r2, #15
 80006a8:	e69d      	b.n	80003e6 <__aeabi_fadd+0xfe>
 80006aa:	2300      	movs	r3, #0
 80006ac:	e666      	b.n	800037c <__aeabi_fadd+0x94>
 80006ae:	2300      	movs	r3, #0
 80006b0:	08d7      	lsrs	r7, r2, #3
 80006b2:	e663      	b.n	800037c <__aeabi_fadd+0x94>
 80006b4:	2001      	movs	r0, #1
 80006b6:	0172      	lsls	r2, r6, #5
 80006b8:	d500      	bpl.n	80006bc <__aeabi_fadd+0x3d4>
 80006ba:	e6e7      	b.n	800048c <__aeabi_fadd+0x1a4>
 80006bc:	0031      	movs	r1, r6
 80006be:	2300      	movs	r3, #0
 80006c0:	08cf      	lsrs	r7, r1, #3
 80006c2:	e65b      	b.n	800037c <__aeabi_fadd+0x94>
 80006c4:	2301      	movs	r3, #1
 80006c6:	08c7      	lsrs	r7, r0, #3
 80006c8:	e658      	b.n	800037c <__aeabi_fadd+0x94>
 80006ca:	46c0      	nop			@ (mov r8, r8)

080006cc <__aeabi_dadd>:
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	464f      	mov	r7, r9
 80006d0:	4646      	mov	r6, r8
 80006d2:	46d6      	mov	lr, sl
 80006d4:	b5c0      	push	{r6, r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	9000      	str	r0, [sp, #0]
 80006da:	9101      	str	r1, [sp, #4]
 80006dc:	030e      	lsls	r6, r1, #12
 80006de:	004c      	lsls	r4, r1, #1
 80006e0:	0fcd      	lsrs	r5, r1, #31
 80006e2:	0a71      	lsrs	r1, r6, #9
 80006e4:	9e00      	ldr	r6, [sp, #0]
 80006e6:	005f      	lsls	r7, r3, #1
 80006e8:	0f76      	lsrs	r6, r6, #29
 80006ea:	430e      	orrs	r6, r1
 80006ec:	9900      	ldr	r1, [sp, #0]
 80006ee:	9200      	str	r2, [sp, #0]
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	00c9      	lsls	r1, r1, #3
 80006f4:	4689      	mov	r9, r1
 80006f6:	0319      	lsls	r1, r3, #12
 80006f8:	0d7b      	lsrs	r3, r7, #21
 80006fa:	4698      	mov	r8, r3
 80006fc:	9b01      	ldr	r3, [sp, #4]
 80006fe:	0a49      	lsrs	r1, r1, #9
 8000700:	0fdb      	lsrs	r3, r3, #31
 8000702:	469c      	mov	ip, r3
 8000704:	9b00      	ldr	r3, [sp, #0]
 8000706:	9a00      	ldr	r2, [sp, #0]
 8000708:	0f5b      	lsrs	r3, r3, #29
 800070a:	430b      	orrs	r3, r1
 800070c:	4641      	mov	r1, r8
 800070e:	0d64      	lsrs	r4, r4, #21
 8000710:	00d2      	lsls	r2, r2, #3
 8000712:	1a61      	subs	r1, r4, r1
 8000714:	4565      	cmp	r5, ip
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x4e>
 8000718:	e0a6      	b.n	8000868 <__aeabi_dadd+0x19c>
 800071a:	2900      	cmp	r1, #0
 800071c:	dd72      	ble.n	8000804 <__aeabi_dadd+0x138>
 800071e:	4647      	mov	r7, r8
 8000720:	2f00      	cmp	r7, #0
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x5a>
 8000724:	e0dd      	b.n	80008e2 <__aeabi_dadd+0x216>
 8000726:	4fcc      	ldr	r7, [pc, #816]	@ (8000a58 <__aeabi_dadd+0x38c>)
 8000728:	42bc      	cmp	r4, r7
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x62>
 800072c:	e19a      	b.n	8000a64 <__aeabi_dadd+0x398>
 800072e:	2701      	movs	r7, #1
 8000730:	2938      	cmp	r1, #56	@ 0x38
 8000732:	dc17      	bgt.n	8000764 <__aeabi_dadd+0x98>
 8000734:	2780      	movs	r7, #128	@ 0x80
 8000736:	043f      	lsls	r7, r7, #16
 8000738:	433b      	orrs	r3, r7
 800073a:	291f      	cmp	r1, #31
 800073c:	dd00      	ble.n	8000740 <__aeabi_dadd+0x74>
 800073e:	e1dd      	b.n	8000afc <__aeabi_dadd+0x430>
 8000740:	2720      	movs	r7, #32
 8000742:	1a78      	subs	r0, r7, r1
 8000744:	001f      	movs	r7, r3
 8000746:	4087      	lsls	r7, r0
 8000748:	46ba      	mov	sl, r7
 800074a:	0017      	movs	r7, r2
 800074c:	40cf      	lsrs	r7, r1
 800074e:	4684      	mov	ip, r0
 8000750:	0038      	movs	r0, r7
 8000752:	4657      	mov	r7, sl
 8000754:	4307      	orrs	r7, r0
 8000756:	4660      	mov	r0, ip
 8000758:	4082      	lsls	r2, r0
 800075a:	40cb      	lsrs	r3, r1
 800075c:	1e50      	subs	r0, r2, #1
 800075e:	4182      	sbcs	r2, r0
 8000760:	1af6      	subs	r6, r6, r3
 8000762:	4317      	orrs	r7, r2
 8000764:	464b      	mov	r3, r9
 8000766:	1bdf      	subs	r7, r3, r7
 8000768:	45b9      	cmp	r9, r7
 800076a:	4180      	sbcs	r0, r0
 800076c:	4240      	negs	r0, r0
 800076e:	1a36      	subs	r6, r6, r0
 8000770:	0233      	lsls	r3, r6, #8
 8000772:	d400      	bmi.n	8000776 <__aeabi_dadd+0xaa>
 8000774:	e0ff      	b.n	8000976 <__aeabi_dadd+0x2aa>
 8000776:	0276      	lsls	r6, r6, #9
 8000778:	0a76      	lsrs	r6, r6, #9
 800077a:	2e00      	cmp	r6, #0
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0xb4>
 800077e:	e13c      	b.n	80009fa <__aeabi_dadd+0x32e>
 8000780:	0030      	movs	r0, r6
 8000782:	f001 ffe9 	bl	8002758 <__clzsi2>
 8000786:	0003      	movs	r3, r0
 8000788:	3b08      	subs	r3, #8
 800078a:	2120      	movs	r1, #32
 800078c:	0038      	movs	r0, r7
 800078e:	1aca      	subs	r2, r1, r3
 8000790:	40d0      	lsrs	r0, r2
 8000792:	409e      	lsls	r6, r3
 8000794:	0002      	movs	r2, r0
 8000796:	409f      	lsls	r7, r3
 8000798:	4332      	orrs	r2, r6
 800079a:	429c      	cmp	r4, r3
 800079c:	dd00      	ble.n	80007a0 <__aeabi_dadd+0xd4>
 800079e:	e1a6      	b.n	8000aee <__aeabi_dadd+0x422>
 80007a0:	1b18      	subs	r0, r3, r4
 80007a2:	3001      	adds	r0, #1
 80007a4:	1a09      	subs	r1, r1, r0
 80007a6:	003e      	movs	r6, r7
 80007a8:	408f      	lsls	r7, r1
 80007aa:	40c6      	lsrs	r6, r0
 80007ac:	1e7b      	subs	r3, r7, #1
 80007ae:	419f      	sbcs	r7, r3
 80007b0:	0013      	movs	r3, r2
 80007b2:	408b      	lsls	r3, r1
 80007b4:	4337      	orrs	r7, r6
 80007b6:	431f      	orrs	r7, r3
 80007b8:	40c2      	lsrs	r2, r0
 80007ba:	003b      	movs	r3, r7
 80007bc:	0016      	movs	r6, r2
 80007be:	2400      	movs	r4, #0
 80007c0:	4313      	orrs	r3, r2
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0xfa>
 80007c4:	e1df      	b.n	8000b86 <__aeabi_dadd+0x4ba>
 80007c6:	077b      	lsls	r3, r7, #29
 80007c8:	d100      	bne.n	80007cc <__aeabi_dadd+0x100>
 80007ca:	e332      	b.n	8000e32 <__aeabi_dadd+0x766>
 80007cc:	230f      	movs	r3, #15
 80007ce:	003a      	movs	r2, r7
 80007d0:	403b      	ands	r3, r7
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d004      	beq.n	80007e0 <__aeabi_dadd+0x114>
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	42ba      	cmp	r2, r7
 80007da:	41bf      	sbcs	r7, r7
 80007dc:	427f      	negs	r7, r7
 80007de:	19f6      	adds	r6, r6, r7
 80007e0:	0233      	lsls	r3, r6, #8
 80007e2:	d400      	bmi.n	80007e6 <__aeabi_dadd+0x11a>
 80007e4:	e323      	b.n	8000e2e <__aeabi_dadd+0x762>
 80007e6:	4b9c      	ldr	r3, [pc, #624]	@ (8000a58 <__aeabi_dadd+0x38c>)
 80007e8:	3401      	adds	r4, #1
 80007ea:	429c      	cmp	r4, r3
 80007ec:	d100      	bne.n	80007f0 <__aeabi_dadd+0x124>
 80007ee:	e0b4      	b.n	800095a <__aeabi_dadd+0x28e>
 80007f0:	4b9a      	ldr	r3, [pc, #616]	@ (8000a5c <__aeabi_dadd+0x390>)
 80007f2:	0564      	lsls	r4, r4, #21
 80007f4:	401e      	ands	r6, r3
 80007f6:	0d64      	lsrs	r4, r4, #21
 80007f8:	0777      	lsls	r7, r6, #29
 80007fa:	08d2      	lsrs	r2, r2, #3
 80007fc:	0276      	lsls	r6, r6, #9
 80007fe:	4317      	orrs	r7, r2
 8000800:	0b36      	lsrs	r6, r6, #12
 8000802:	e0ac      	b.n	800095e <__aeabi_dadd+0x292>
 8000804:	2900      	cmp	r1, #0
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x13e>
 8000808:	e07e      	b.n	8000908 <__aeabi_dadd+0x23c>
 800080a:	4641      	mov	r1, r8
 800080c:	1b09      	subs	r1, r1, r4
 800080e:	2c00      	cmp	r4, #0
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x148>
 8000812:	e160      	b.n	8000ad6 <__aeabi_dadd+0x40a>
 8000814:	0034      	movs	r4, r6
 8000816:	4648      	mov	r0, r9
 8000818:	4304      	orrs	r4, r0
 800081a:	d100      	bne.n	800081e <__aeabi_dadd+0x152>
 800081c:	e1c9      	b.n	8000bb2 <__aeabi_dadd+0x4e6>
 800081e:	1e4c      	subs	r4, r1, #1
 8000820:	2901      	cmp	r1, #1
 8000822:	d100      	bne.n	8000826 <__aeabi_dadd+0x15a>
 8000824:	e22e      	b.n	8000c84 <__aeabi_dadd+0x5b8>
 8000826:	4d8c      	ldr	r5, [pc, #560]	@ (8000a58 <__aeabi_dadd+0x38c>)
 8000828:	42a9      	cmp	r1, r5
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x162>
 800082c:	e224      	b.n	8000c78 <__aeabi_dadd+0x5ac>
 800082e:	2701      	movs	r7, #1
 8000830:	2c38      	cmp	r4, #56	@ 0x38
 8000832:	dc11      	bgt.n	8000858 <__aeabi_dadd+0x18c>
 8000834:	0021      	movs	r1, r4
 8000836:	291f      	cmp	r1, #31
 8000838:	dd00      	ble.n	800083c <__aeabi_dadd+0x170>
 800083a:	e20b      	b.n	8000c54 <__aeabi_dadd+0x588>
 800083c:	2420      	movs	r4, #32
 800083e:	0037      	movs	r7, r6
 8000840:	4648      	mov	r0, r9
 8000842:	1a64      	subs	r4, r4, r1
 8000844:	40a7      	lsls	r7, r4
 8000846:	40c8      	lsrs	r0, r1
 8000848:	4307      	orrs	r7, r0
 800084a:	4648      	mov	r0, r9
 800084c:	40a0      	lsls	r0, r4
 800084e:	40ce      	lsrs	r6, r1
 8000850:	1e44      	subs	r4, r0, #1
 8000852:	41a0      	sbcs	r0, r4
 8000854:	1b9b      	subs	r3, r3, r6
 8000856:	4307      	orrs	r7, r0
 8000858:	1bd7      	subs	r7, r2, r7
 800085a:	42ba      	cmp	r2, r7
 800085c:	4192      	sbcs	r2, r2
 800085e:	4252      	negs	r2, r2
 8000860:	4665      	mov	r5, ip
 8000862:	4644      	mov	r4, r8
 8000864:	1a9e      	subs	r6, r3, r2
 8000866:	e783      	b.n	8000770 <__aeabi_dadd+0xa4>
 8000868:	2900      	cmp	r1, #0
 800086a:	dc00      	bgt.n	800086e <__aeabi_dadd+0x1a2>
 800086c:	e09c      	b.n	80009a8 <__aeabi_dadd+0x2dc>
 800086e:	4647      	mov	r7, r8
 8000870:	2f00      	cmp	r7, #0
 8000872:	d167      	bne.n	8000944 <__aeabi_dadd+0x278>
 8000874:	001f      	movs	r7, r3
 8000876:	4317      	orrs	r7, r2
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x1b0>
 800087a:	e0e4      	b.n	8000a46 <__aeabi_dadd+0x37a>
 800087c:	1e48      	subs	r0, r1, #1
 800087e:	2901      	cmp	r1, #1
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x1b8>
 8000882:	e19b      	b.n	8000bbc <__aeabi_dadd+0x4f0>
 8000884:	4f74      	ldr	r7, [pc, #464]	@ (8000a58 <__aeabi_dadd+0x38c>)
 8000886:	42b9      	cmp	r1, r7
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x1c0>
 800088a:	e0eb      	b.n	8000a64 <__aeabi_dadd+0x398>
 800088c:	2701      	movs	r7, #1
 800088e:	0001      	movs	r1, r0
 8000890:	2838      	cmp	r0, #56	@ 0x38
 8000892:	dc11      	bgt.n	80008b8 <__aeabi_dadd+0x1ec>
 8000894:	291f      	cmp	r1, #31
 8000896:	dd00      	ble.n	800089a <__aeabi_dadd+0x1ce>
 8000898:	e1c7      	b.n	8000c2a <__aeabi_dadd+0x55e>
 800089a:	2720      	movs	r7, #32
 800089c:	1a78      	subs	r0, r7, r1
 800089e:	001f      	movs	r7, r3
 80008a0:	4684      	mov	ip, r0
 80008a2:	4087      	lsls	r7, r0
 80008a4:	0010      	movs	r0, r2
 80008a6:	40c8      	lsrs	r0, r1
 80008a8:	4307      	orrs	r7, r0
 80008aa:	4660      	mov	r0, ip
 80008ac:	4082      	lsls	r2, r0
 80008ae:	40cb      	lsrs	r3, r1
 80008b0:	1e50      	subs	r0, r2, #1
 80008b2:	4182      	sbcs	r2, r0
 80008b4:	18f6      	adds	r6, r6, r3
 80008b6:	4317      	orrs	r7, r2
 80008b8:	444f      	add	r7, r9
 80008ba:	454f      	cmp	r7, r9
 80008bc:	4180      	sbcs	r0, r0
 80008be:	4240      	negs	r0, r0
 80008c0:	1836      	adds	r6, r6, r0
 80008c2:	0233      	lsls	r3, r6, #8
 80008c4:	d557      	bpl.n	8000976 <__aeabi_dadd+0x2aa>
 80008c6:	4b64      	ldr	r3, [pc, #400]	@ (8000a58 <__aeabi_dadd+0x38c>)
 80008c8:	3401      	adds	r4, #1
 80008ca:	429c      	cmp	r4, r3
 80008cc:	d045      	beq.n	800095a <__aeabi_dadd+0x28e>
 80008ce:	2101      	movs	r1, #1
 80008d0:	4b62      	ldr	r3, [pc, #392]	@ (8000a5c <__aeabi_dadd+0x390>)
 80008d2:	087a      	lsrs	r2, r7, #1
 80008d4:	401e      	ands	r6, r3
 80008d6:	4039      	ands	r1, r7
 80008d8:	430a      	orrs	r2, r1
 80008da:	07f7      	lsls	r7, r6, #31
 80008dc:	4317      	orrs	r7, r2
 80008de:	0876      	lsrs	r6, r6, #1
 80008e0:	e771      	b.n	80007c6 <__aeabi_dadd+0xfa>
 80008e2:	001f      	movs	r7, r3
 80008e4:	4317      	orrs	r7, r2
 80008e6:	d100      	bne.n	80008ea <__aeabi_dadd+0x21e>
 80008e8:	e0ad      	b.n	8000a46 <__aeabi_dadd+0x37a>
 80008ea:	1e4f      	subs	r7, r1, #1
 80008ec:	46bc      	mov	ip, r7
 80008ee:	2901      	cmp	r1, #1
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x228>
 80008f2:	e182      	b.n	8000bfa <__aeabi_dadd+0x52e>
 80008f4:	4f58      	ldr	r7, [pc, #352]	@ (8000a58 <__aeabi_dadd+0x38c>)
 80008f6:	42b9      	cmp	r1, r7
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x230>
 80008fa:	e190      	b.n	8000c1e <__aeabi_dadd+0x552>
 80008fc:	4661      	mov	r1, ip
 80008fe:	2701      	movs	r7, #1
 8000900:	2938      	cmp	r1, #56	@ 0x38
 8000902:	dd00      	ble.n	8000906 <__aeabi_dadd+0x23a>
 8000904:	e72e      	b.n	8000764 <__aeabi_dadd+0x98>
 8000906:	e718      	b.n	800073a <__aeabi_dadd+0x6e>
 8000908:	4f55      	ldr	r7, [pc, #340]	@ (8000a60 <__aeabi_dadd+0x394>)
 800090a:	1c61      	adds	r1, r4, #1
 800090c:	4239      	tst	r1, r7
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x246>
 8000910:	e0d0      	b.n	8000ab4 <__aeabi_dadd+0x3e8>
 8000912:	0031      	movs	r1, r6
 8000914:	4648      	mov	r0, r9
 8000916:	001f      	movs	r7, r3
 8000918:	4301      	orrs	r1, r0
 800091a:	4317      	orrs	r7, r2
 800091c:	2c00      	cmp	r4, #0
 800091e:	d000      	beq.n	8000922 <__aeabi_dadd+0x256>
 8000920:	e13d      	b.n	8000b9e <__aeabi_dadd+0x4d2>
 8000922:	2900      	cmp	r1, #0
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x25c>
 8000926:	e1bc      	b.n	8000ca2 <__aeabi_dadd+0x5d6>
 8000928:	2f00      	cmp	r7, #0
 800092a:	d000      	beq.n	800092e <__aeabi_dadd+0x262>
 800092c:	e1bf      	b.n	8000cae <__aeabi_dadd+0x5e2>
 800092e:	464b      	mov	r3, r9
 8000930:	2100      	movs	r1, #0
 8000932:	08d8      	lsrs	r0, r3, #3
 8000934:	0777      	lsls	r7, r6, #29
 8000936:	4307      	orrs	r7, r0
 8000938:	08f0      	lsrs	r0, r6, #3
 800093a:	0306      	lsls	r6, r0, #12
 800093c:	054c      	lsls	r4, r1, #21
 800093e:	0b36      	lsrs	r6, r6, #12
 8000940:	0d64      	lsrs	r4, r4, #21
 8000942:	e00c      	b.n	800095e <__aeabi_dadd+0x292>
 8000944:	4f44      	ldr	r7, [pc, #272]	@ (8000a58 <__aeabi_dadd+0x38c>)
 8000946:	42bc      	cmp	r4, r7
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x280>
 800094a:	e08b      	b.n	8000a64 <__aeabi_dadd+0x398>
 800094c:	2701      	movs	r7, #1
 800094e:	2938      	cmp	r1, #56	@ 0x38
 8000950:	dcb2      	bgt.n	80008b8 <__aeabi_dadd+0x1ec>
 8000952:	2780      	movs	r7, #128	@ 0x80
 8000954:	043f      	lsls	r7, r7, #16
 8000956:	433b      	orrs	r3, r7
 8000958:	e79c      	b.n	8000894 <__aeabi_dadd+0x1c8>
 800095a:	2600      	movs	r6, #0
 800095c:	2700      	movs	r7, #0
 800095e:	0524      	lsls	r4, r4, #20
 8000960:	4334      	orrs	r4, r6
 8000962:	07ed      	lsls	r5, r5, #31
 8000964:	432c      	orrs	r4, r5
 8000966:	0038      	movs	r0, r7
 8000968:	0021      	movs	r1, r4
 800096a:	b002      	add	sp, #8
 800096c:	bce0      	pop	{r5, r6, r7}
 800096e:	46ba      	mov	sl, r7
 8000970:	46b1      	mov	r9, r6
 8000972:	46a8      	mov	r8, r5
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	077b      	lsls	r3, r7, #29
 8000978:	d004      	beq.n	8000984 <__aeabi_dadd+0x2b8>
 800097a:	230f      	movs	r3, #15
 800097c:	403b      	ands	r3, r7
 800097e:	2b04      	cmp	r3, #4
 8000980:	d000      	beq.n	8000984 <__aeabi_dadd+0x2b8>
 8000982:	e728      	b.n	80007d6 <__aeabi_dadd+0x10a>
 8000984:	08f8      	lsrs	r0, r7, #3
 8000986:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <__aeabi_dadd+0x38c>)
 8000988:	0777      	lsls	r7, r6, #29
 800098a:	4307      	orrs	r7, r0
 800098c:	08f0      	lsrs	r0, r6, #3
 800098e:	429c      	cmp	r4, r3
 8000990:	d000      	beq.n	8000994 <__aeabi_dadd+0x2c8>
 8000992:	e24a      	b.n	8000e2a <__aeabi_dadd+0x75e>
 8000994:	003b      	movs	r3, r7
 8000996:	4303      	orrs	r3, r0
 8000998:	d059      	beq.n	8000a4e <__aeabi_dadd+0x382>
 800099a:	2680      	movs	r6, #128	@ 0x80
 800099c:	0336      	lsls	r6, r6, #12
 800099e:	4306      	orrs	r6, r0
 80009a0:	0336      	lsls	r6, r6, #12
 80009a2:	4c2d      	ldr	r4, [pc, #180]	@ (8000a58 <__aeabi_dadd+0x38c>)
 80009a4:	0b36      	lsrs	r6, r6, #12
 80009a6:	e7da      	b.n	800095e <__aeabi_dadd+0x292>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	d061      	beq.n	8000a70 <__aeabi_dadd+0x3a4>
 80009ac:	4641      	mov	r1, r8
 80009ae:	1b09      	subs	r1, r1, r4
 80009b0:	2c00      	cmp	r4, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x2ea>
 80009b4:	e0b9      	b.n	8000b2a <__aeabi_dadd+0x45e>
 80009b6:	4c28      	ldr	r4, [pc, #160]	@ (8000a58 <__aeabi_dadd+0x38c>)
 80009b8:	45a0      	cmp	r8, r4
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x2f2>
 80009bc:	e1a5      	b.n	8000d0a <__aeabi_dadd+0x63e>
 80009be:	2701      	movs	r7, #1
 80009c0:	2938      	cmp	r1, #56	@ 0x38
 80009c2:	dc13      	bgt.n	80009ec <__aeabi_dadd+0x320>
 80009c4:	2480      	movs	r4, #128	@ 0x80
 80009c6:	0424      	lsls	r4, r4, #16
 80009c8:	4326      	orrs	r6, r4
 80009ca:	291f      	cmp	r1, #31
 80009cc:	dd00      	ble.n	80009d0 <__aeabi_dadd+0x304>
 80009ce:	e1c8      	b.n	8000d62 <__aeabi_dadd+0x696>
 80009d0:	2420      	movs	r4, #32
 80009d2:	0037      	movs	r7, r6
 80009d4:	4648      	mov	r0, r9
 80009d6:	1a64      	subs	r4, r4, r1
 80009d8:	40a7      	lsls	r7, r4
 80009da:	40c8      	lsrs	r0, r1
 80009dc:	4307      	orrs	r7, r0
 80009de:	4648      	mov	r0, r9
 80009e0:	40a0      	lsls	r0, r4
 80009e2:	40ce      	lsrs	r6, r1
 80009e4:	1e44      	subs	r4, r0, #1
 80009e6:	41a0      	sbcs	r0, r4
 80009e8:	199b      	adds	r3, r3, r6
 80009ea:	4307      	orrs	r7, r0
 80009ec:	18bf      	adds	r7, r7, r2
 80009ee:	4297      	cmp	r7, r2
 80009f0:	4192      	sbcs	r2, r2
 80009f2:	4252      	negs	r2, r2
 80009f4:	4644      	mov	r4, r8
 80009f6:	18d6      	adds	r6, r2, r3
 80009f8:	e763      	b.n	80008c2 <__aeabi_dadd+0x1f6>
 80009fa:	0038      	movs	r0, r7
 80009fc:	f001 feac 	bl	8002758 <__clzsi2>
 8000a00:	0003      	movs	r3, r0
 8000a02:	3318      	adds	r3, #24
 8000a04:	2b1f      	cmp	r3, #31
 8000a06:	dc00      	bgt.n	8000a0a <__aeabi_dadd+0x33e>
 8000a08:	e6bf      	b.n	800078a <__aeabi_dadd+0xbe>
 8000a0a:	003a      	movs	r2, r7
 8000a0c:	3808      	subs	r0, #8
 8000a0e:	4082      	lsls	r2, r0
 8000a10:	429c      	cmp	r4, r3
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dadd+0x34a>
 8000a14:	e083      	b.n	8000b1e <__aeabi_dadd+0x452>
 8000a16:	1b1b      	subs	r3, r3, r4
 8000a18:	1c58      	adds	r0, r3, #1
 8000a1a:	281f      	cmp	r0, #31
 8000a1c:	dc00      	bgt.n	8000a20 <__aeabi_dadd+0x354>
 8000a1e:	e1b4      	b.n	8000d8a <__aeabi_dadd+0x6be>
 8000a20:	0017      	movs	r7, r2
 8000a22:	3b1f      	subs	r3, #31
 8000a24:	40df      	lsrs	r7, r3
 8000a26:	2820      	cmp	r0, #32
 8000a28:	d005      	beq.n	8000a36 <__aeabi_dadd+0x36a>
 8000a2a:	2340      	movs	r3, #64	@ 0x40
 8000a2c:	1a1b      	subs	r3, r3, r0
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	1e53      	subs	r3, r2, #1
 8000a32:	419a      	sbcs	r2, r3
 8000a34:	4317      	orrs	r7, r2
 8000a36:	2400      	movs	r4, #0
 8000a38:	2f00      	cmp	r7, #0
 8000a3a:	d00a      	beq.n	8000a52 <__aeabi_dadd+0x386>
 8000a3c:	077b      	lsls	r3, r7, #29
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_dadd+0x376>
 8000a40:	e6c4      	b.n	80007cc <__aeabi_dadd+0x100>
 8000a42:	0026      	movs	r6, r4
 8000a44:	e79e      	b.n	8000984 <__aeabi_dadd+0x2b8>
 8000a46:	464b      	mov	r3, r9
 8000a48:	000c      	movs	r4, r1
 8000a4a:	08d8      	lsrs	r0, r3, #3
 8000a4c:	e79b      	b.n	8000986 <__aeabi_dadd+0x2ba>
 8000a4e:	2700      	movs	r7, #0
 8000a50:	4c01      	ldr	r4, [pc, #4]	@ (8000a58 <__aeabi_dadd+0x38c>)
 8000a52:	2600      	movs	r6, #0
 8000a54:	e783      	b.n	800095e <__aeabi_dadd+0x292>
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	000007ff 	.word	0x000007ff
 8000a5c:	ff7fffff 	.word	0xff7fffff
 8000a60:	000007fe 	.word	0x000007fe
 8000a64:	464b      	mov	r3, r9
 8000a66:	0777      	lsls	r7, r6, #29
 8000a68:	08d8      	lsrs	r0, r3, #3
 8000a6a:	4307      	orrs	r7, r0
 8000a6c:	08f0      	lsrs	r0, r6, #3
 8000a6e:	e791      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000a70:	4fcd      	ldr	r7, [pc, #820]	@ (8000da8 <__aeabi_dadd+0x6dc>)
 8000a72:	1c61      	adds	r1, r4, #1
 8000a74:	4239      	tst	r1, r7
 8000a76:	d16b      	bne.n	8000b50 <__aeabi_dadd+0x484>
 8000a78:	0031      	movs	r1, r6
 8000a7a:	4648      	mov	r0, r9
 8000a7c:	4301      	orrs	r1, r0
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d000      	beq.n	8000a84 <__aeabi_dadd+0x3b8>
 8000a82:	e14b      	b.n	8000d1c <__aeabi_dadd+0x650>
 8000a84:	001f      	movs	r7, r3
 8000a86:	4317      	orrs	r7, r2
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x3c2>
 8000a8c:	e181      	b.n	8000d92 <__aeabi_dadd+0x6c6>
 8000a8e:	2f00      	cmp	r7, #0
 8000a90:	d100      	bne.n	8000a94 <__aeabi_dadd+0x3c8>
 8000a92:	e74c      	b.n	800092e <__aeabi_dadd+0x262>
 8000a94:	444a      	add	r2, r9
 8000a96:	454a      	cmp	r2, r9
 8000a98:	4180      	sbcs	r0, r0
 8000a9a:	18f6      	adds	r6, r6, r3
 8000a9c:	4240      	negs	r0, r0
 8000a9e:	1836      	adds	r6, r6, r0
 8000aa0:	0233      	lsls	r3, r6, #8
 8000aa2:	d500      	bpl.n	8000aa6 <__aeabi_dadd+0x3da>
 8000aa4:	e1b0      	b.n	8000e08 <__aeabi_dadd+0x73c>
 8000aa6:	0017      	movs	r7, r2
 8000aa8:	4691      	mov	r9, r2
 8000aaa:	4337      	orrs	r7, r6
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_dadd+0x3e4>
 8000aae:	e73e      	b.n	800092e <__aeabi_dadd+0x262>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e754      	b.n	800095e <__aeabi_dadd+0x292>
 8000ab4:	4649      	mov	r1, r9
 8000ab6:	1a89      	subs	r1, r1, r2
 8000ab8:	4688      	mov	r8, r1
 8000aba:	45c1      	cmp	r9, r8
 8000abc:	41bf      	sbcs	r7, r7
 8000abe:	1af1      	subs	r1, r6, r3
 8000ac0:	427f      	negs	r7, r7
 8000ac2:	1bc9      	subs	r1, r1, r7
 8000ac4:	020f      	lsls	r7, r1, #8
 8000ac6:	d461      	bmi.n	8000b8c <__aeabi_dadd+0x4c0>
 8000ac8:	4647      	mov	r7, r8
 8000aca:	430f      	orrs	r7, r1
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dadd+0x404>
 8000ace:	e0bd      	b.n	8000c4c <__aeabi_dadd+0x580>
 8000ad0:	000e      	movs	r6, r1
 8000ad2:	4647      	mov	r7, r8
 8000ad4:	e651      	b.n	800077a <__aeabi_dadd+0xae>
 8000ad6:	4cb5      	ldr	r4, [pc, #724]	@ (8000dac <__aeabi_dadd+0x6e0>)
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x412>
 8000adc:	e100      	b.n	8000ce0 <__aeabi_dadd+0x614>
 8000ade:	2701      	movs	r7, #1
 8000ae0:	2938      	cmp	r1, #56	@ 0x38
 8000ae2:	dd00      	ble.n	8000ae6 <__aeabi_dadd+0x41a>
 8000ae4:	e6b8      	b.n	8000858 <__aeabi_dadd+0x18c>
 8000ae6:	2480      	movs	r4, #128	@ 0x80
 8000ae8:	0424      	lsls	r4, r4, #16
 8000aea:	4326      	orrs	r6, r4
 8000aec:	e6a3      	b.n	8000836 <__aeabi_dadd+0x16a>
 8000aee:	4eb0      	ldr	r6, [pc, #704]	@ (8000db0 <__aeabi_dadd+0x6e4>)
 8000af0:	1ae4      	subs	r4, r4, r3
 8000af2:	4016      	ands	r6, r2
 8000af4:	077b      	lsls	r3, r7, #29
 8000af6:	d000      	beq.n	8000afa <__aeabi_dadd+0x42e>
 8000af8:	e73f      	b.n	800097a <__aeabi_dadd+0x2ae>
 8000afa:	e743      	b.n	8000984 <__aeabi_dadd+0x2b8>
 8000afc:	000f      	movs	r7, r1
 8000afe:	0018      	movs	r0, r3
 8000b00:	3f20      	subs	r7, #32
 8000b02:	40f8      	lsrs	r0, r7
 8000b04:	4684      	mov	ip, r0
 8000b06:	2920      	cmp	r1, #32
 8000b08:	d003      	beq.n	8000b12 <__aeabi_dadd+0x446>
 8000b0a:	2740      	movs	r7, #64	@ 0x40
 8000b0c:	1a79      	subs	r1, r7, r1
 8000b0e:	408b      	lsls	r3, r1
 8000b10:	431a      	orrs	r2, r3
 8000b12:	1e53      	subs	r3, r2, #1
 8000b14:	419a      	sbcs	r2, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	0017      	movs	r7, r2
 8000b1a:	431f      	orrs	r7, r3
 8000b1c:	e622      	b.n	8000764 <__aeabi_dadd+0x98>
 8000b1e:	48a4      	ldr	r0, [pc, #656]	@ (8000db0 <__aeabi_dadd+0x6e4>)
 8000b20:	1ae1      	subs	r1, r4, r3
 8000b22:	4010      	ands	r0, r2
 8000b24:	0747      	lsls	r7, r0, #29
 8000b26:	08c0      	lsrs	r0, r0, #3
 8000b28:	e707      	b.n	800093a <__aeabi_dadd+0x26e>
 8000b2a:	0034      	movs	r4, r6
 8000b2c:	4648      	mov	r0, r9
 8000b2e:	4304      	orrs	r4, r0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x468>
 8000b32:	e0fa      	b.n	8000d2a <__aeabi_dadd+0x65e>
 8000b34:	1e4c      	subs	r4, r1, #1
 8000b36:	2901      	cmp	r1, #1
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x470>
 8000b3a:	e0d7      	b.n	8000cec <__aeabi_dadd+0x620>
 8000b3c:	4f9b      	ldr	r7, [pc, #620]	@ (8000dac <__aeabi_dadd+0x6e0>)
 8000b3e:	42b9      	cmp	r1, r7
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dadd+0x478>
 8000b42:	e0e2      	b.n	8000d0a <__aeabi_dadd+0x63e>
 8000b44:	2701      	movs	r7, #1
 8000b46:	2c38      	cmp	r4, #56	@ 0x38
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x480>
 8000b4a:	e74f      	b.n	80009ec <__aeabi_dadd+0x320>
 8000b4c:	0021      	movs	r1, r4
 8000b4e:	e73c      	b.n	80009ca <__aeabi_dadd+0x2fe>
 8000b50:	4c96      	ldr	r4, [pc, #600]	@ (8000dac <__aeabi_dadd+0x6e0>)
 8000b52:	42a1      	cmp	r1, r4
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dadd+0x48c>
 8000b56:	e0dd      	b.n	8000d14 <__aeabi_dadd+0x648>
 8000b58:	444a      	add	r2, r9
 8000b5a:	454a      	cmp	r2, r9
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	18f3      	adds	r3, r6, r3
 8000b60:	4240      	negs	r0, r0
 8000b62:	1818      	adds	r0, r3, r0
 8000b64:	07c7      	lsls	r7, r0, #31
 8000b66:	0852      	lsrs	r2, r2, #1
 8000b68:	4317      	orrs	r7, r2
 8000b6a:	0846      	lsrs	r6, r0, #1
 8000b6c:	0752      	lsls	r2, r2, #29
 8000b6e:	d005      	beq.n	8000b7c <__aeabi_dadd+0x4b0>
 8000b70:	220f      	movs	r2, #15
 8000b72:	000c      	movs	r4, r1
 8000b74:	403a      	ands	r2, r7
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d000      	beq.n	8000b7c <__aeabi_dadd+0x4b0>
 8000b7a:	e62c      	b.n	80007d6 <__aeabi_dadd+0x10a>
 8000b7c:	0776      	lsls	r6, r6, #29
 8000b7e:	08ff      	lsrs	r7, r7, #3
 8000b80:	4337      	orrs	r7, r6
 8000b82:	0900      	lsrs	r0, r0, #4
 8000b84:	e6d9      	b.n	800093a <__aeabi_dadd+0x26e>
 8000b86:	2700      	movs	r7, #0
 8000b88:	2600      	movs	r6, #0
 8000b8a:	e6e8      	b.n	800095e <__aeabi_dadd+0x292>
 8000b8c:	4649      	mov	r1, r9
 8000b8e:	1a57      	subs	r7, r2, r1
 8000b90:	42ba      	cmp	r2, r7
 8000b92:	4192      	sbcs	r2, r2
 8000b94:	1b9e      	subs	r6, r3, r6
 8000b96:	4252      	negs	r2, r2
 8000b98:	4665      	mov	r5, ip
 8000b9a:	1ab6      	subs	r6, r6, r2
 8000b9c:	e5ed      	b.n	800077a <__aeabi_dadd+0xae>
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_dadd+0x4d8>
 8000ba2:	e0c6      	b.n	8000d32 <__aeabi_dadd+0x666>
 8000ba4:	2f00      	cmp	r7, #0
 8000ba6:	d167      	bne.n	8000c78 <__aeabi_dadd+0x5ac>
 8000ba8:	2680      	movs	r6, #128	@ 0x80
 8000baa:	2500      	movs	r5, #0
 8000bac:	4c7f      	ldr	r4, [pc, #508]	@ (8000dac <__aeabi_dadd+0x6e0>)
 8000bae:	0336      	lsls	r6, r6, #12
 8000bb0:	e6d5      	b.n	800095e <__aeabi_dadd+0x292>
 8000bb2:	4665      	mov	r5, ip
 8000bb4:	000c      	movs	r4, r1
 8000bb6:	001e      	movs	r6, r3
 8000bb8:	08d0      	lsrs	r0, r2, #3
 8000bba:	e6e4      	b.n	8000986 <__aeabi_dadd+0x2ba>
 8000bbc:	444a      	add	r2, r9
 8000bbe:	454a      	cmp	r2, r9
 8000bc0:	4180      	sbcs	r0, r0
 8000bc2:	18f3      	adds	r3, r6, r3
 8000bc4:	4240      	negs	r0, r0
 8000bc6:	1818      	adds	r0, r3, r0
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0203      	lsls	r3, r0, #8
 8000bcc:	d400      	bmi.n	8000bd0 <__aeabi_dadd+0x504>
 8000bce:	e096      	b.n	8000cfe <__aeabi_dadd+0x632>
 8000bd0:	4b77      	ldr	r3, [pc, #476]	@ (8000db0 <__aeabi_dadd+0x6e4>)
 8000bd2:	0849      	lsrs	r1, r1, #1
 8000bd4:	4018      	ands	r0, r3
 8000bd6:	07c3      	lsls	r3, r0, #31
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	0844      	lsrs	r4, r0, #1
 8000bdc:	0749      	lsls	r1, r1, #29
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dadd+0x516>
 8000be0:	e129      	b.n	8000e36 <__aeabi_dadd+0x76a>
 8000be2:	220f      	movs	r2, #15
 8000be4:	401a      	ands	r2, r3
 8000be6:	2a04      	cmp	r2, #4
 8000be8:	d100      	bne.n	8000bec <__aeabi_dadd+0x520>
 8000bea:	e0ea      	b.n	8000dc2 <__aeabi_dadd+0x6f6>
 8000bec:	1d1f      	adds	r7, r3, #4
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	41b6      	sbcs	r6, r6
 8000bf2:	4276      	negs	r6, r6
 8000bf4:	1936      	adds	r6, r6, r4
 8000bf6:	2402      	movs	r4, #2
 8000bf8:	e6c4      	b.n	8000984 <__aeabi_dadd+0x2b8>
 8000bfa:	4649      	mov	r1, r9
 8000bfc:	1a8f      	subs	r7, r1, r2
 8000bfe:	45b9      	cmp	r9, r7
 8000c00:	4180      	sbcs	r0, r0
 8000c02:	1af6      	subs	r6, r6, r3
 8000c04:	4240      	negs	r0, r0
 8000c06:	1a36      	subs	r6, r6, r0
 8000c08:	0233      	lsls	r3, r6, #8
 8000c0a:	d406      	bmi.n	8000c1a <__aeabi_dadd+0x54e>
 8000c0c:	0773      	lsls	r3, r6, #29
 8000c0e:	08ff      	lsrs	r7, r7, #3
 8000c10:	2101      	movs	r1, #1
 8000c12:	431f      	orrs	r7, r3
 8000c14:	08f0      	lsrs	r0, r6, #3
 8000c16:	e690      	b.n	800093a <__aeabi_dadd+0x26e>
 8000c18:	4665      	mov	r5, ip
 8000c1a:	2401      	movs	r4, #1
 8000c1c:	e5ab      	b.n	8000776 <__aeabi_dadd+0xaa>
 8000c1e:	464b      	mov	r3, r9
 8000c20:	0777      	lsls	r7, r6, #29
 8000c22:	08d8      	lsrs	r0, r3, #3
 8000c24:	4307      	orrs	r7, r0
 8000c26:	08f0      	lsrs	r0, r6, #3
 8000c28:	e6b4      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000c2a:	000f      	movs	r7, r1
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	3f20      	subs	r7, #32
 8000c30:	40f8      	lsrs	r0, r7
 8000c32:	4684      	mov	ip, r0
 8000c34:	2920      	cmp	r1, #32
 8000c36:	d003      	beq.n	8000c40 <__aeabi_dadd+0x574>
 8000c38:	2740      	movs	r7, #64	@ 0x40
 8000c3a:	1a79      	subs	r1, r7, r1
 8000c3c:	408b      	lsls	r3, r1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	1e53      	subs	r3, r2, #1
 8000c42:	419a      	sbcs	r2, r3
 8000c44:	4663      	mov	r3, ip
 8000c46:	0017      	movs	r7, r2
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e635      	b.n	80008b8 <__aeabi_dadd+0x1ec>
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	2400      	movs	r4, #0
 8000c50:	2600      	movs	r6, #0
 8000c52:	e684      	b.n	800095e <__aeabi_dadd+0x292>
 8000c54:	000c      	movs	r4, r1
 8000c56:	0035      	movs	r5, r6
 8000c58:	3c20      	subs	r4, #32
 8000c5a:	40e5      	lsrs	r5, r4
 8000c5c:	2920      	cmp	r1, #32
 8000c5e:	d005      	beq.n	8000c6c <__aeabi_dadd+0x5a0>
 8000c60:	2440      	movs	r4, #64	@ 0x40
 8000c62:	1a61      	subs	r1, r4, r1
 8000c64:	408e      	lsls	r6, r1
 8000c66:	4649      	mov	r1, r9
 8000c68:	4331      	orrs	r1, r6
 8000c6a:	4689      	mov	r9, r1
 8000c6c:	4648      	mov	r0, r9
 8000c6e:	1e41      	subs	r1, r0, #1
 8000c70:	4188      	sbcs	r0, r1
 8000c72:	0007      	movs	r7, r0
 8000c74:	432f      	orrs	r7, r5
 8000c76:	e5ef      	b.n	8000858 <__aeabi_dadd+0x18c>
 8000c78:	08d2      	lsrs	r2, r2, #3
 8000c7a:	075f      	lsls	r7, r3, #29
 8000c7c:	4665      	mov	r5, ip
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	08d8      	lsrs	r0, r3, #3
 8000c82:	e687      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000c84:	1a17      	subs	r7, r2, r0
 8000c86:	42ba      	cmp	r2, r7
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	1b9e      	subs	r6, r3, r6
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	1ab6      	subs	r6, r6, r2
 8000c90:	0233      	lsls	r3, r6, #8
 8000c92:	d4c1      	bmi.n	8000c18 <__aeabi_dadd+0x54c>
 8000c94:	0773      	lsls	r3, r6, #29
 8000c96:	08ff      	lsrs	r7, r7, #3
 8000c98:	4665      	mov	r5, ip
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	431f      	orrs	r7, r3
 8000c9e:	08f0      	lsrs	r0, r6, #3
 8000ca0:	e64b      	b.n	800093a <__aeabi_dadd+0x26e>
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d07b      	beq.n	8000d9e <__aeabi_dadd+0x6d2>
 8000ca6:	4665      	mov	r5, ip
 8000ca8:	001e      	movs	r6, r3
 8000caa:	4691      	mov	r9, r2
 8000cac:	e63f      	b.n	800092e <__aeabi_dadd+0x262>
 8000cae:	1a81      	subs	r1, r0, r2
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	45c1      	cmp	r9, r8
 8000cb4:	41a4      	sbcs	r4, r4
 8000cb6:	1af1      	subs	r1, r6, r3
 8000cb8:	4264      	negs	r4, r4
 8000cba:	1b09      	subs	r1, r1, r4
 8000cbc:	2480      	movs	r4, #128	@ 0x80
 8000cbe:	0424      	lsls	r4, r4, #16
 8000cc0:	4221      	tst	r1, r4
 8000cc2:	d077      	beq.n	8000db4 <__aeabi_dadd+0x6e8>
 8000cc4:	1a10      	subs	r0, r2, r0
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	4192      	sbcs	r2, r2
 8000cca:	0007      	movs	r7, r0
 8000ccc:	1b9e      	subs	r6, r3, r6
 8000cce:	4252      	negs	r2, r2
 8000cd0:	1ab6      	subs	r6, r6, r2
 8000cd2:	4337      	orrs	r7, r6
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_dadd+0x60c>
 8000cd6:	e0a0      	b.n	8000e1a <__aeabi_dadd+0x74e>
 8000cd8:	4665      	mov	r5, ip
 8000cda:	2400      	movs	r4, #0
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e63e      	b.n	800095e <__aeabi_dadd+0x292>
 8000ce0:	075f      	lsls	r7, r3, #29
 8000ce2:	08d2      	lsrs	r2, r2, #3
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	08d8      	lsrs	r0, r3, #3
 8000cea:	e653      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000cec:	1881      	adds	r1, r0, r2
 8000cee:	4291      	cmp	r1, r2
 8000cf0:	4192      	sbcs	r2, r2
 8000cf2:	18f0      	adds	r0, r6, r3
 8000cf4:	4252      	negs	r2, r2
 8000cf6:	1880      	adds	r0, r0, r2
 8000cf8:	0203      	lsls	r3, r0, #8
 8000cfa:	d500      	bpl.n	8000cfe <__aeabi_dadd+0x632>
 8000cfc:	e768      	b.n	8000bd0 <__aeabi_dadd+0x504>
 8000cfe:	0747      	lsls	r7, r0, #29
 8000d00:	08c9      	lsrs	r1, r1, #3
 8000d02:	430f      	orrs	r7, r1
 8000d04:	08c0      	lsrs	r0, r0, #3
 8000d06:	2101      	movs	r1, #1
 8000d08:	e617      	b.n	800093a <__aeabi_dadd+0x26e>
 8000d0a:	08d2      	lsrs	r2, r2, #3
 8000d0c:	075f      	lsls	r7, r3, #29
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	08d8      	lsrs	r0, r3, #3
 8000d12:	e63f      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000d14:	000c      	movs	r4, r1
 8000d16:	2600      	movs	r6, #0
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e620      	b.n	800095e <__aeabi_dadd+0x292>
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	d156      	bne.n	8000dce <__aeabi_dadd+0x702>
 8000d20:	075f      	lsls	r7, r3, #29
 8000d22:	08d2      	lsrs	r2, r2, #3
 8000d24:	4317      	orrs	r7, r2
 8000d26:	08d8      	lsrs	r0, r3, #3
 8000d28:	e634      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000d2a:	000c      	movs	r4, r1
 8000d2c:	001e      	movs	r6, r3
 8000d2e:	08d0      	lsrs	r0, r2, #3
 8000d30:	e629      	b.n	8000986 <__aeabi_dadd+0x2ba>
 8000d32:	08c1      	lsrs	r1, r0, #3
 8000d34:	0770      	lsls	r0, r6, #29
 8000d36:	4301      	orrs	r1, r0
 8000d38:	08f0      	lsrs	r0, r6, #3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d062      	beq.n	8000e04 <__aeabi_dadd+0x738>
 8000d3e:	2480      	movs	r4, #128	@ 0x80
 8000d40:	0324      	lsls	r4, r4, #12
 8000d42:	4220      	tst	r0, r4
 8000d44:	d007      	beq.n	8000d56 <__aeabi_dadd+0x68a>
 8000d46:	08de      	lsrs	r6, r3, #3
 8000d48:	4226      	tst	r6, r4
 8000d4a:	d104      	bne.n	8000d56 <__aeabi_dadd+0x68a>
 8000d4c:	4665      	mov	r5, ip
 8000d4e:	0030      	movs	r0, r6
 8000d50:	08d1      	lsrs	r1, r2, #3
 8000d52:	075b      	lsls	r3, r3, #29
 8000d54:	4319      	orrs	r1, r3
 8000d56:	0f4f      	lsrs	r7, r1, #29
 8000d58:	00c9      	lsls	r1, r1, #3
 8000d5a:	08c9      	lsrs	r1, r1, #3
 8000d5c:	077f      	lsls	r7, r7, #29
 8000d5e:	430f      	orrs	r7, r1
 8000d60:	e618      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000d62:	000c      	movs	r4, r1
 8000d64:	0030      	movs	r0, r6
 8000d66:	3c20      	subs	r4, #32
 8000d68:	40e0      	lsrs	r0, r4
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	2920      	cmp	r1, #32
 8000d6e:	d005      	beq.n	8000d7c <__aeabi_dadd+0x6b0>
 8000d70:	2440      	movs	r4, #64	@ 0x40
 8000d72:	1a61      	subs	r1, r4, r1
 8000d74:	408e      	lsls	r6, r1
 8000d76:	4649      	mov	r1, r9
 8000d78:	4331      	orrs	r1, r6
 8000d7a:	4689      	mov	r9, r1
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	1e41      	subs	r1, r0, #1
 8000d80:	4188      	sbcs	r0, r1
 8000d82:	4661      	mov	r1, ip
 8000d84:	0007      	movs	r7, r0
 8000d86:	430f      	orrs	r7, r1
 8000d88:	e630      	b.n	80009ec <__aeabi_dadd+0x320>
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	1a09      	subs	r1, r1, r0
 8000d90:	e50e      	b.n	80007b0 <__aeabi_dadd+0xe4>
 8000d92:	001e      	movs	r6, r3
 8000d94:	2f00      	cmp	r7, #0
 8000d96:	d000      	beq.n	8000d9a <__aeabi_dadd+0x6ce>
 8000d98:	e522      	b.n	80007e0 <__aeabi_dadd+0x114>
 8000d9a:	2400      	movs	r4, #0
 8000d9c:	e758      	b.n	8000c50 <__aeabi_dadd+0x584>
 8000d9e:	2500      	movs	r5, #0
 8000da0:	2400      	movs	r4, #0
 8000da2:	2600      	movs	r6, #0
 8000da4:	e5db      	b.n	800095e <__aeabi_dadd+0x292>
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	000007fe 	.word	0x000007fe
 8000dac:	000007ff 	.word	0x000007ff
 8000db0:	ff7fffff 	.word	0xff7fffff
 8000db4:	4647      	mov	r7, r8
 8000db6:	430f      	orrs	r7, r1
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dadd+0x6f0>
 8000dba:	e747      	b.n	8000c4c <__aeabi_dadd+0x580>
 8000dbc:	000e      	movs	r6, r1
 8000dbe:	46c1      	mov	r9, r8
 8000dc0:	e5b5      	b.n	800092e <__aeabi_dadd+0x262>
 8000dc2:	08df      	lsrs	r7, r3, #3
 8000dc4:	0764      	lsls	r4, r4, #29
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4327      	orrs	r7, r4
 8000dca:	0900      	lsrs	r0, r0, #4
 8000dcc:	e5b5      	b.n	800093a <__aeabi_dadd+0x26e>
 8000dce:	0019      	movs	r1, r3
 8000dd0:	08c0      	lsrs	r0, r0, #3
 8000dd2:	0777      	lsls	r7, r6, #29
 8000dd4:	4307      	orrs	r7, r0
 8000dd6:	4311      	orrs	r1, r2
 8000dd8:	08f0      	lsrs	r0, r6, #3
 8000dda:	2900      	cmp	r1, #0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dadd+0x714>
 8000dde:	e5d9      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000de0:	2180      	movs	r1, #128	@ 0x80
 8000de2:	0309      	lsls	r1, r1, #12
 8000de4:	4208      	tst	r0, r1
 8000de6:	d007      	beq.n	8000df8 <__aeabi_dadd+0x72c>
 8000de8:	08dc      	lsrs	r4, r3, #3
 8000dea:	420c      	tst	r4, r1
 8000dec:	d104      	bne.n	8000df8 <__aeabi_dadd+0x72c>
 8000dee:	08d2      	lsrs	r2, r2, #3
 8000df0:	075b      	lsls	r3, r3, #29
 8000df2:	431a      	orrs	r2, r3
 8000df4:	0017      	movs	r7, r2
 8000df6:	0020      	movs	r0, r4
 8000df8:	0f7b      	lsrs	r3, r7, #29
 8000dfa:	00ff      	lsls	r7, r7, #3
 8000dfc:	08ff      	lsrs	r7, r7, #3
 8000dfe:	075b      	lsls	r3, r3, #29
 8000e00:	431f      	orrs	r7, r3
 8000e02:	e5c7      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000e04:	000f      	movs	r7, r1
 8000e06:	e5c5      	b.n	8000994 <__aeabi_dadd+0x2c8>
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <__aeabi_dadd+0x788>)
 8000e0a:	08d2      	lsrs	r2, r2, #3
 8000e0c:	4033      	ands	r3, r6
 8000e0e:	075f      	lsls	r7, r3, #29
 8000e10:	025b      	lsls	r3, r3, #9
 8000e12:	2401      	movs	r4, #1
 8000e14:	4317      	orrs	r7, r2
 8000e16:	0b1e      	lsrs	r6, r3, #12
 8000e18:	e5a1      	b.n	800095e <__aeabi_dadd+0x292>
 8000e1a:	4226      	tst	r6, r4
 8000e1c:	d012      	beq.n	8000e44 <__aeabi_dadd+0x778>
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <__aeabi_dadd+0x788>)
 8000e20:	4665      	mov	r5, ip
 8000e22:	0002      	movs	r2, r0
 8000e24:	2401      	movs	r4, #1
 8000e26:	401e      	ands	r6, r3
 8000e28:	e4e6      	b.n	80007f8 <__aeabi_dadd+0x12c>
 8000e2a:	0021      	movs	r1, r4
 8000e2c:	e585      	b.n	800093a <__aeabi_dadd+0x26e>
 8000e2e:	0017      	movs	r7, r2
 8000e30:	e5a8      	b.n	8000984 <__aeabi_dadd+0x2b8>
 8000e32:	003a      	movs	r2, r7
 8000e34:	e4d4      	b.n	80007e0 <__aeabi_dadd+0x114>
 8000e36:	08db      	lsrs	r3, r3, #3
 8000e38:	0764      	lsls	r4, r4, #29
 8000e3a:	431c      	orrs	r4, r3
 8000e3c:	0027      	movs	r7, r4
 8000e3e:	2102      	movs	r1, #2
 8000e40:	0900      	lsrs	r0, r0, #4
 8000e42:	e57a      	b.n	800093a <__aeabi_dadd+0x26e>
 8000e44:	08c0      	lsrs	r0, r0, #3
 8000e46:	0777      	lsls	r7, r6, #29
 8000e48:	4307      	orrs	r7, r0
 8000e4a:	4665      	mov	r5, ip
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	08f0      	lsrs	r0, r6, #3
 8000e50:	e573      	b.n	800093a <__aeabi_dadd+0x26e>
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	ff7fffff 	.word	0xff7fffff

08000e58 <__aeabi_ddiv>:
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	46de      	mov	lr, fp
 8000e5c:	4645      	mov	r5, r8
 8000e5e:	4657      	mov	r7, sl
 8000e60:	464e      	mov	r6, r9
 8000e62:	b5e0      	push	{r5, r6, r7, lr}
 8000e64:	b087      	sub	sp, #28
 8000e66:	9200      	str	r2, [sp, #0]
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	030b      	lsls	r3, r1, #12
 8000e6c:	0b1b      	lsrs	r3, r3, #12
 8000e6e:	469b      	mov	fp, r3
 8000e70:	0fca      	lsrs	r2, r1, #31
 8000e72:	004b      	lsls	r3, r1, #1
 8000e74:	0004      	movs	r4, r0
 8000e76:	4680      	mov	r8, r0
 8000e78:	0d5b      	lsrs	r3, r3, #21
 8000e7a:	9202      	str	r2, [sp, #8]
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x28>
 8000e7e:	e098      	b.n	8000fb2 <__aeabi_ddiv+0x15a>
 8000e80:	4a7c      	ldr	r2, [pc, #496]	@ (8001074 <__aeabi_ddiv+0x21c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d037      	beq.n	8000ef6 <__aeabi_ddiv+0x9e>
 8000e86:	4659      	mov	r1, fp
 8000e88:	0f42      	lsrs	r2, r0, #29
 8000e8a:	00c9      	lsls	r1, r1, #3
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	2180      	movs	r1, #128	@ 0x80
 8000e90:	0409      	lsls	r1, r1, #16
 8000e92:	4311      	orrs	r1, r2
 8000e94:	00c2      	lsls	r2, r0, #3
 8000e96:	4690      	mov	r8, r2
 8000e98:	4a77      	ldr	r2, [pc, #476]	@ (8001078 <__aeabi_ddiv+0x220>)
 8000e9a:	4689      	mov	r9, r1
 8000e9c:	4692      	mov	sl, r2
 8000e9e:	449a      	add	sl, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	9303      	str	r3, [sp, #12]
 8000ea6:	9e00      	ldr	r6, [sp, #0]
 8000ea8:	9f01      	ldr	r7, [sp, #4]
 8000eaa:	033b      	lsls	r3, r7, #12
 8000eac:	0b1b      	lsrs	r3, r3, #12
 8000eae:	469b      	mov	fp, r3
 8000eb0:	007b      	lsls	r3, r7, #1
 8000eb2:	0030      	movs	r0, r6
 8000eb4:	0d5b      	lsrs	r3, r3, #21
 8000eb6:	0ffd      	lsrs	r5, r7, #31
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d059      	beq.n	8000f70 <__aeabi_ddiv+0x118>
 8000ebc:	4a6d      	ldr	r2, [pc, #436]	@ (8001074 <__aeabi_ddiv+0x21c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d048      	beq.n	8000f54 <__aeabi_ddiv+0xfc>
 8000ec2:	4659      	mov	r1, fp
 8000ec4:	0f72      	lsrs	r2, r6, #29
 8000ec6:	00c9      	lsls	r1, r1, #3
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	2180      	movs	r1, #128	@ 0x80
 8000ecc:	0409      	lsls	r1, r1, #16
 8000ece:	4311      	orrs	r1, r2
 8000ed0:	468b      	mov	fp, r1
 8000ed2:	4969      	ldr	r1, [pc, #420]	@ (8001078 <__aeabi_ddiv+0x220>)
 8000ed4:	00f2      	lsls	r2, r6, #3
 8000ed6:	468c      	mov	ip, r1
 8000ed8:	4651      	mov	r1, sl
 8000eda:	4463      	add	r3, ip
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	469a      	mov	sl, r3
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	9e02      	ldr	r6, [sp, #8]
 8000ee4:	406e      	eors	r6, r5
 8000ee6:	b2f6      	uxtb	r6, r6
 8000ee8:	2c0f      	cmp	r4, #15
 8000eea:	d900      	bls.n	8000eee <__aeabi_ddiv+0x96>
 8000eec:	e0ce      	b.n	800108c <__aeabi_ddiv+0x234>
 8000eee:	4b63      	ldr	r3, [pc, #396]	@ (800107c <__aeabi_ddiv+0x224>)
 8000ef0:	00a4      	lsls	r4, r4, #2
 8000ef2:	591b      	ldr	r3, [r3, r4]
 8000ef4:	469f      	mov	pc, r3
 8000ef6:	465a      	mov	r2, fp
 8000ef8:	4302      	orrs	r2, r0
 8000efa:	4691      	mov	r9, r2
 8000efc:	d000      	beq.n	8000f00 <__aeabi_ddiv+0xa8>
 8000efe:	e090      	b.n	8001022 <__aeabi_ddiv+0x1ca>
 8000f00:	469a      	mov	sl, r3
 8000f02:	2302      	movs	r3, #2
 8000f04:	4690      	mov	r8, r2
 8000f06:	2408      	movs	r4, #8
 8000f08:	9303      	str	r3, [sp, #12]
 8000f0a:	e7cc      	b.n	8000ea6 <__aeabi_ddiv+0x4e>
 8000f0c:	46cb      	mov	fp, r9
 8000f0e:	4642      	mov	r2, r8
 8000f10:	9d02      	ldr	r5, [sp, #8]
 8000f12:	9903      	ldr	r1, [sp, #12]
 8000f14:	2902      	cmp	r1, #2
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xc2>
 8000f18:	e1de      	b.n	80012d8 <__aeabi_ddiv+0x480>
 8000f1a:	2903      	cmp	r1, #3
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0xc8>
 8000f1e:	e08d      	b.n	800103c <__aeabi_ddiv+0x1e4>
 8000f20:	2901      	cmp	r1, #1
 8000f22:	d000      	beq.n	8000f26 <__aeabi_ddiv+0xce>
 8000f24:	e179      	b.n	800121a <__aeabi_ddiv+0x3c2>
 8000f26:	002e      	movs	r6, r5
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2400      	movs	r4, #0
 8000f2e:	4690      	mov	r8, r2
 8000f30:	051b      	lsls	r3, r3, #20
 8000f32:	4323      	orrs	r3, r4
 8000f34:	07f6      	lsls	r6, r6, #31
 8000f36:	4333      	orrs	r3, r6
 8000f38:	4640      	mov	r0, r8
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	b007      	add	sp, #28
 8000f3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f40:	46bb      	mov	fp, r7
 8000f42:	46b2      	mov	sl, r6
 8000f44:	46a9      	mov	r9, r5
 8000f46:	46a0      	mov	r8, r4
 8000f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4690      	mov	r8, r2
 8000f50:	4b48      	ldr	r3, [pc, #288]	@ (8001074 <__aeabi_ddiv+0x21c>)
 8000f52:	e7ed      	b.n	8000f30 <__aeabi_ddiv+0xd8>
 8000f54:	465a      	mov	r2, fp
 8000f56:	9b00      	ldr	r3, [sp, #0]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	4b49      	ldr	r3, [pc, #292]	@ (8001080 <__aeabi_ddiv+0x228>)
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	44e2      	add	sl, ip
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d159      	bne.n	8001018 <__aeabi_ddiv+0x1c0>
 8000f64:	2302      	movs	r3, #2
 8000f66:	431c      	orrs	r4, r3
 8000f68:	2300      	movs	r3, #0
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	e7b8      	b.n	8000ee2 <__aeabi_ddiv+0x8a>
 8000f70:	465a      	mov	r2, fp
 8000f72:	9b00      	ldr	r3, [sp, #0]
 8000f74:	431a      	orrs	r2, r3
 8000f76:	d049      	beq.n	800100c <__aeabi_ddiv+0x1b4>
 8000f78:	465b      	mov	r3, fp
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_ddiv+0x128>
 8000f7e:	e19c      	b.n	80012ba <__aeabi_ddiv+0x462>
 8000f80:	4658      	mov	r0, fp
 8000f82:	f001 fbe9 	bl	8002758 <__clzsi2>
 8000f86:	0002      	movs	r2, r0
 8000f88:	0003      	movs	r3, r0
 8000f8a:	3a0b      	subs	r2, #11
 8000f8c:	271d      	movs	r7, #29
 8000f8e:	9e00      	ldr	r6, [sp, #0]
 8000f90:	1aba      	subs	r2, r7, r2
 8000f92:	0019      	movs	r1, r3
 8000f94:	4658      	mov	r0, fp
 8000f96:	40d6      	lsrs	r6, r2
 8000f98:	3908      	subs	r1, #8
 8000f9a:	4088      	lsls	r0, r1
 8000f9c:	0032      	movs	r2, r6
 8000f9e:	4302      	orrs	r2, r0
 8000fa0:	4693      	mov	fp, r2
 8000fa2:	9a00      	ldr	r2, [sp, #0]
 8000fa4:	408a      	lsls	r2, r1
 8000fa6:	4937      	ldr	r1, [pc, #220]	@ (8001084 <__aeabi_ddiv+0x22c>)
 8000fa8:	4453      	add	r3, sl
 8000faa:	468a      	mov	sl, r1
 8000fac:	2100      	movs	r1, #0
 8000fae:	449a      	add	sl, r3
 8000fb0:	e797      	b.n	8000ee2 <__aeabi_ddiv+0x8a>
 8000fb2:	465b      	mov	r3, fp
 8000fb4:	4303      	orrs	r3, r0
 8000fb6:	4699      	mov	r9, r3
 8000fb8:	d021      	beq.n	8000ffe <__aeabi_ddiv+0x1a6>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x16a>
 8000fc0:	e169      	b.n	8001296 <__aeabi_ddiv+0x43e>
 8000fc2:	4658      	mov	r0, fp
 8000fc4:	f001 fbc8 	bl	8002758 <__clzsi2>
 8000fc8:	230b      	movs	r3, #11
 8000fca:	425b      	negs	r3, r3
 8000fcc:	469c      	mov	ip, r3
 8000fce:	0002      	movs	r2, r0
 8000fd0:	4484      	add	ip, r0
 8000fd2:	4666      	mov	r6, ip
 8000fd4:	231d      	movs	r3, #29
 8000fd6:	1b9b      	subs	r3, r3, r6
 8000fd8:	0026      	movs	r6, r4
 8000fda:	0011      	movs	r1, r2
 8000fdc:	4658      	mov	r0, fp
 8000fde:	40de      	lsrs	r6, r3
 8000fe0:	3908      	subs	r1, #8
 8000fe2:	4088      	lsls	r0, r1
 8000fe4:	0033      	movs	r3, r6
 8000fe6:	4303      	orrs	r3, r0
 8000fe8:	4699      	mov	r9, r3
 8000fea:	0023      	movs	r3, r4
 8000fec:	408b      	lsls	r3, r1
 8000fee:	4698      	mov	r8, r3
 8000ff0:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <__aeabi_ddiv+0x230>)
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	469a      	mov	sl, r3
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9303      	str	r3, [sp, #12]
 8000ffc:	e753      	b.n	8000ea6 <__aeabi_ddiv+0x4e>
 8000ffe:	2300      	movs	r3, #0
 8001000:	4698      	mov	r8, r3
 8001002:	469a      	mov	sl, r3
 8001004:	3301      	adds	r3, #1
 8001006:	2404      	movs	r4, #4
 8001008:	9303      	str	r3, [sp, #12]
 800100a:	e74c      	b.n	8000ea6 <__aeabi_ddiv+0x4e>
 800100c:	2301      	movs	r3, #1
 800100e:	431c      	orrs	r4, r3
 8001010:	2300      	movs	r3, #0
 8001012:	2101      	movs	r1, #1
 8001014:	469b      	mov	fp, r3
 8001016:	e764      	b.n	8000ee2 <__aeabi_ddiv+0x8a>
 8001018:	2303      	movs	r3, #3
 800101a:	0032      	movs	r2, r6
 800101c:	2103      	movs	r1, #3
 800101e:	431c      	orrs	r4, r3
 8001020:	e75f      	b.n	8000ee2 <__aeabi_ddiv+0x8a>
 8001022:	469a      	mov	sl, r3
 8001024:	2303      	movs	r3, #3
 8001026:	46d9      	mov	r9, fp
 8001028:	240c      	movs	r4, #12
 800102a:	9303      	str	r3, [sp, #12]
 800102c:	e73b      	b.n	8000ea6 <__aeabi_ddiv+0x4e>
 800102e:	2300      	movs	r3, #0
 8001030:	2480      	movs	r4, #128	@ 0x80
 8001032:	4698      	mov	r8, r3
 8001034:	2600      	movs	r6, #0
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <__aeabi_ddiv+0x21c>)
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	e779      	b.n	8000f30 <__aeabi_ddiv+0xd8>
 800103c:	2480      	movs	r4, #128	@ 0x80
 800103e:	465b      	mov	r3, fp
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	002e      	movs	r6, r5
 8001048:	4690      	mov	r8, r2
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <__aeabi_ddiv+0x21c>)
 800104c:	0b24      	lsrs	r4, r4, #12
 800104e:	e76f      	b.n	8000f30 <__aeabi_ddiv+0xd8>
 8001050:	2480      	movs	r4, #128	@ 0x80
 8001052:	464b      	mov	r3, r9
 8001054:	0324      	lsls	r4, r4, #12
 8001056:	4223      	tst	r3, r4
 8001058:	d002      	beq.n	8001060 <__aeabi_ddiv+0x208>
 800105a:	465b      	mov	r3, fp
 800105c:	4223      	tst	r3, r4
 800105e:	d0f0      	beq.n	8001042 <__aeabi_ddiv+0x1ea>
 8001060:	2480      	movs	r4, #128	@ 0x80
 8001062:	464b      	mov	r3, r9
 8001064:	0324      	lsls	r4, r4, #12
 8001066:	431c      	orrs	r4, r3
 8001068:	0324      	lsls	r4, r4, #12
 800106a:	9e02      	ldr	r6, [sp, #8]
 800106c:	4b01      	ldr	r3, [pc, #4]	@ (8001074 <__aeabi_ddiv+0x21c>)
 800106e:	0b24      	lsrs	r4, r4, #12
 8001070:	e75e      	b.n	8000f30 <__aeabi_ddiv+0xd8>
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	000007ff 	.word	0x000007ff
 8001078:	fffffc01 	.word	0xfffffc01
 800107c:	0800826c 	.word	0x0800826c
 8001080:	fffff801 	.word	0xfffff801
 8001084:	000003f3 	.word	0x000003f3
 8001088:	fffffc0d 	.word	0xfffffc0d
 800108c:	45cb      	cmp	fp, r9
 800108e:	d200      	bcs.n	8001092 <__aeabi_ddiv+0x23a>
 8001090:	e0f8      	b.n	8001284 <__aeabi_ddiv+0x42c>
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0x23e>
 8001094:	e0f3      	b.n	800127e <__aeabi_ddiv+0x426>
 8001096:	2301      	movs	r3, #1
 8001098:	425b      	negs	r3, r3
 800109a:	469c      	mov	ip, r3
 800109c:	4644      	mov	r4, r8
 800109e:	4648      	mov	r0, r9
 80010a0:	2500      	movs	r5, #0
 80010a2:	44e2      	add	sl, ip
 80010a4:	465b      	mov	r3, fp
 80010a6:	0e17      	lsrs	r7, r2, #24
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	431f      	orrs	r7, r3
 80010ac:	0c19      	lsrs	r1, r3, #16
 80010ae:	043b      	lsls	r3, r7, #16
 80010b0:	0212      	lsls	r2, r2, #8
 80010b2:	9700      	str	r7, [sp, #0]
 80010b4:	0c1f      	lsrs	r7, r3, #16
 80010b6:	4691      	mov	r9, r2
 80010b8:	9102      	str	r1, [sp, #8]
 80010ba:	9703      	str	r7, [sp, #12]
 80010bc:	f7ff f8b2 	bl	8000224 <__aeabi_uidivmod>
 80010c0:	0002      	movs	r2, r0
 80010c2:	437a      	muls	r2, r7
 80010c4:	040b      	lsls	r3, r1, #16
 80010c6:	0c21      	lsrs	r1, r4, #16
 80010c8:	4680      	mov	r8, r0
 80010ca:	4319      	orrs	r1, r3
 80010cc:	428a      	cmp	r2, r1
 80010ce:	d909      	bls.n	80010e4 <__aeabi_ddiv+0x28c>
 80010d0:	9f00      	ldr	r7, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	46bc      	mov	ip, r7
 80010d6:	425b      	negs	r3, r3
 80010d8:	4461      	add	r1, ip
 80010da:	469c      	mov	ip, r3
 80010dc:	44e0      	add	r8, ip
 80010de:	428f      	cmp	r7, r1
 80010e0:	d800      	bhi.n	80010e4 <__aeabi_ddiv+0x28c>
 80010e2:	e15c      	b.n	800139e <__aeabi_ddiv+0x546>
 80010e4:	1a88      	subs	r0, r1, r2
 80010e6:	9902      	ldr	r1, [sp, #8]
 80010e8:	f7ff f89c 	bl	8000224 <__aeabi_uidivmod>
 80010ec:	9a03      	ldr	r2, [sp, #12]
 80010ee:	0424      	lsls	r4, r4, #16
 80010f0:	4342      	muls	r2, r0
 80010f2:	0409      	lsls	r1, r1, #16
 80010f4:	0c24      	lsrs	r4, r4, #16
 80010f6:	0003      	movs	r3, r0
 80010f8:	430c      	orrs	r4, r1
 80010fa:	42a2      	cmp	r2, r4
 80010fc:	d906      	bls.n	800110c <__aeabi_ddiv+0x2b4>
 80010fe:	9900      	ldr	r1, [sp, #0]
 8001100:	3b01      	subs	r3, #1
 8001102:	468c      	mov	ip, r1
 8001104:	4464      	add	r4, ip
 8001106:	42a1      	cmp	r1, r4
 8001108:	d800      	bhi.n	800110c <__aeabi_ddiv+0x2b4>
 800110a:	e142      	b.n	8001392 <__aeabi_ddiv+0x53a>
 800110c:	1aa0      	subs	r0, r4, r2
 800110e:	4642      	mov	r2, r8
 8001110:	0412      	lsls	r2, r2, #16
 8001112:	431a      	orrs	r2, r3
 8001114:	4693      	mov	fp, r2
 8001116:	464b      	mov	r3, r9
 8001118:	4659      	mov	r1, fp
 800111a:	0c1b      	lsrs	r3, r3, #16
 800111c:	001f      	movs	r7, r3
 800111e:	9304      	str	r3, [sp, #16]
 8001120:	040b      	lsls	r3, r1, #16
 8001122:	4649      	mov	r1, r9
 8001124:	0409      	lsls	r1, r1, #16
 8001126:	0c09      	lsrs	r1, r1, #16
 8001128:	000c      	movs	r4, r1
 800112a:	0c1b      	lsrs	r3, r3, #16
 800112c:	435c      	muls	r4, r3
 800112e:	0c12      	lsrs	r2, r2, #16
 8001130:	437b      	muls	r3, r7
 8001132:	4688      	mov	r8, r1
 8001134:	4351      	muls	r1, r2
 8001136:	437a      	muls	r2, r7
 8001138:	0c27      	lsrs	r7, r4, #16
 800113a:	46bc      	mov	ip, r7
 800113c:	185b      	adds	r3, r3, r1
 800113e:	4463      	add	r3, ip
 8001140:	4299      	cmp	r1, r3
 8001142:	d903      	bls.n	800114c <__aeabi_ddiv+0x2f4>
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	0249      	lsls	r1, r1, #9
 8001148:	468c      	mov	ip, r1
 800114a:	4462      	add	r2, ip
 800114c:	0c19      	lsrs	r1, r3, #16
 800114e:	0424      	lsls	r4, r4, #16
 8001150:	041b      	lsls	r3, r3, #16
 8001152:	0c24      	lsrs	r4, r4, #16
 8001154:	188a      	adds	r2, r1, r2
 8001156:	191c      	adds	r4, r3, r4
 8001158:	4290      	cmp	r0, r2
 800115a:	d302      	bcc.n	8001162 <__aeabi_ddiv+0x30a>
 800115c:	d116      	bne.n	800118c <__aeabi_ddiv+0x334>
 800115e:	42a5      	cmp	r5, r4
 8001160:	d214      	bcs.n	800118c <__aeabi_ddiv+0x334>
 8001162:	465b      	mov	r3, fp
 8001164:	9f00      	ldr	r7, [sp, #0]
 8001166:	3b01      	subs	r3, #1
 8001168:	444d      	add	r5, r9
 800116a:	9305      	str	r3, [sp, #20]
 800116c:	454d      	cmp	r5, r9
 800116e:	419b      	sbcs	r3, r3
 8001170:	46bc      	mov	ip, r7
 8001172:	425b      	negs	r3, r3
 8001174:	4463      	add	r3, ip
 8001176:	18c0      	adds	r0, r0, r3
 8001178:	4287      	cmp	r7, r0
 800117a:	d300      	bcc.n	800117e <__aeabi_ddiv+0x326>
 800117c:	e102      	b.n	8001384 <__aeabi_ddiv+0x52c>
 800117e:	4282      	cmp	r2, r0
 8001180:	d900      	bls.n	8001184 <__aeabi_ddiv+0x32c>
 8001182:	e129      	b.n	80013d8 <__aeabi_ddiv+0x580>
 8001184:	d100      	bne.n	8001188 <__aeabi_ddiv+0x330>
 8001186:	e124      	b.n	80013d2 <__aeabi_ddiv+0x57a>
 8001188:	9b05      	ldr	r3, [sp, #20]
 800118a:	469b      	mov	fp, r3
 800118c:	1b2c      	subs	r4, r5, r4
 800118e:	42a5      	cmp	r5, r4
 8001190:	41ad      	sbcs	r5, r5
 8001192:	9b00      	ldr	r3, [sp, #0]
 8001194:	1a80      	subs	r0, r0, r2
 8001196:	426d      	negs	r5, r5
 8001198:	1b40      	subs	r0, r0, r5
 800119a:	4283      	cmp	r3, r0
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x348>
 800119e:	e10f      	b.n	80013c0 <__aeabi_ddiv+0x568>
 80011a0:	9902      	ldr	r1, [sp, #8]
 80011a2:	f7ff f83f 	bl	8000224 <__aeabi_uidivmod>
 80011a6:	9a03      	ldr	r2, [sp, #12]
 80011a8:	040b      	lsls	r3, r1, #16
 80011aa:	4342      	muls	r2, r0
 80011ac:	0c21      	lsrs	r1, r4, #16
 80011ae:	0005      	movs	r5, r0
 80011b0:	4319      	orrs	r1, r3
 80011b2:	428a      	cmp	r2, r1
 80011b4:	d900      	bls.n	80011b8 <__aeabi_ddiv+0x360>
 80011b6:	e0cb      	b.n	8001350 <__aeabi_ddiv+0x4f8>
 80011b8:	1a88      	subs	r0, r1, r2
 80011ba:	9902      	ldr	r1, [sp, #8]
 80011bc:	f7ff f832 	bl	8000224 <__aeabi_uidivmod>
 80011c0:	9a03      	ldr	r2, [sp, #12]
 80011c2:	0424      	lsls	r4, r4, #16
 80011c4:	4342      	muls	r2, r0
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	0c24      	lsrs	r4, r4, #16
 80011ca:	0003      	movs	r3, r0
 80011cc:	430c      	orrs	r4, r1
 80011ce:	42a2      	cmp	r2, r4
 80011d0:	d900      	bls.n	80011d4 <__aeabi_ddiv+0x37c>
 80011d2:	e0ca      	b.n	800136a <__aeabi_ddiv+0x512>
 80011d4:	4641      	mov	r1, r8
 80011d6:	1aa4      	subs	r4, r4, r2
 80011d8:	042a      	lsls	r2, r5, #16
 80011da:	431a      	orrs	r2, r3
 80011dc:	9f04      	ldr	r7, [sp, #16]
 80011de:	0413      	lsls	r3, r2, #16
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	4359      	muls	r1, r3
 80011e4:	4640      	mov	r0, r8
 80011e6:	437b      	muls	r3, r7
 80011e8:	469c      	mov	ip, r3
 80011ea:	0c15      	lsrs	r5, r2, #16
 80011ec:	4368      	muls	r0, r5
 80011ee:	0c0b      	lsrs	r3, r1, #16
 80011f0:	4484      	add	ip, r0
 80011f2:	4463      	add	r3, ip
 80011f4:	437d      	muls	r5, r7
 80011f6:	4298      	cmp	r0, r3
 80011f8:	d903      	bls.n	8001202 <__aeabi_ddiv+0x3aa>
 80011fa:	2080      	movs	r0, #128	@ 0x80
 80011fc:	0240      	lsls	r0, r0, #9
 80011fe:	4684      	mov	ip, r0
 8001200:	4465      	add	r5, ip
 8001202:	0c18      	lsrs	r0, r3, #16
 8001204:	0409      	lsls	r1, r1, #16
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	0c09      	lsrs	r1, r1, #16
 800120a:	1940      	adds	r0, r0, r5
 800120c:	185b      	adds	r3, r3, r1
 800120e:	4284      	cmp	r4, r0
 8001210:	d327      	bcc.n	8001262 <__aeabi_ddiv+0x40a>
 8001212:	d023      	beq.n	800125c <__aeabi_ddiv+0x404>
 8001214:	2301      	movs	r3, #1
 8001216:	0035      	movs	r5, r6
 8001218:	431a      	orrs	r2, r3
 800121a:	4b94      	ldr	r3, [pc, #592]	@ (800146c <__aeabi_ddiv+0x614>)
 800121c:	4453      	add	r3, sl
 800121e:	2b00      	cmp	r3, #0
 8001220:	dd60      	ble.n	80012e4 <__aeabi_ddiv+0x48c>
 8001222:	0751      	lsls	r1, r2, #29
 8001224:	d000      	beq.n	8001228 <__aeabi_ddiv+0x3d0>
 8001226:	e086      	b.n	8001336 <__aeabi_ddiv+0x4de>
 8001228:	002e      	movs	r6, r5
 800122a:	08d1      	lsrs	r1, r2, #3
 800122c:	465a      	mov	r2, fp
 800122e:	01d2      	lsls	r2, r2, #7
 8001230:	d506      	bpl.n	8001240 <__aeabi_ddiv+0x3e8>
 8001232:	465a      	mov	r2, fp
 8001234:	4b8e      	ldr	r3, [pc, #568]	@ (8001470 <__aeabi_ddiv+0x618>)
 8001236:	401a      	ands	r2, r3
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	4693      	mov	fp, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4453      	add	r3, sl
 8001240:	4a8c      	ldr	r2, [pc, #560]	@ (8001474 <__aeabi_ddiv+0x61c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	dd00      	ble.n	8001248 <__aeabi_ddiv+0x3f0>
 8001246:	e680      	b.n	8000f4a <__aeabi_ddiv+0xf2>
 8001248:	465a      	mov	r2, fp
 800124a:	0752      	lsls	r2, r2, #29
 800124c:	430a      	orrs	r2, r1
 800124e:	4690      	mov	r8, r2
 8001250:	465a      	mov	r2, fp
 8001252:	055b      	lsls	r3, r3, #21
 8001254:	0254      	lsls	r4, r2, #9
 8001256:	0b24      	lsrs	r4, r4, #12
 8001258:	0d5b      	lsrs	r3, r3, #21
 800125a:	e669      	b.n	8000f30 <__aeabi_ddiv+0xd8>
 800125c:	0035      	movs	r5, r6
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0db      	beq.n	800121a <__aeabi_ddiv+0x3c2>
 8001262:	9d00      	ldr	r5, [sp, #0]
 8001264:	1e51      	subs	r1, r2, #1
 8001266:	46ac      	mov	ip, r5
 8001268:	4464      	add	r4, ip
 800126a:	42ac      	cmp	r4, r5
 800126c:	d200      	bcs.n	8001270 <__aeabi_ddiv+0x418>
 800126e:	e09e      	b.n	80013ae <__aeabi_ddiv+0x556>
 8001270:	4284      	cmp	r4, r0
 8001272:	d200      	bcs.n	8001276 <__aeabi_ddiv+0x41e>
 8001274:	e0e1      	b.n	800143a <__aeabi_ddiv+0x5e2>
 8001276:	d100      	bne.n	800127a <__aeabi_ddiv+0x422>
 8001278:	e0ee      	b.n	8001458 <__aeabi_ddiv+0x600>
 800127a:	000a      	movs	r2, r1
 800127c:	e7ca      	b.n	8001214 <__aeabi_ddiv+0x3bc>
 800127e:	4542      	cmp	r2, r8
 8001280:	d900      	bls.n	8001284 <__aeabi_ddiv+0x42c>
 8001282:	e708      	b.n	8001096 <__aeabi_ddiv+0x23e>
 8001284:	464b      	mov	r3, r9
 8001286:	07dc      	lsls	r4, r3, #31
 8001288:	0858      	lsrs	r0, r3, #1
 800128a:	4643      	mov	r3, r8
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	431c      	orrs	r4, r3
 8001290:	4643      	mov	r3, r8
 8001292:	07dd      	lsls	r5, r3, #31
 8001294:	e706      	b.n	80010a4 <__aeabi_ddiv+0x24c>
 8001296:	f001 fa5f 	bl	8002758 <__clzsi2>
 800129a:	2315      	movs	r3, #21
 800129c:	469c      	mov	ip, r3
 800129e:	4484      	add	ip, r0
 80012a0:	0002      	movs	r2, r0
 80012a2:	4663      	mov	r3, ip
 80012a4:	3220      	adds	r2, #32
 80012a6:	2b1c      	cmp	r3, #28
 80012a8:	dc00      	bgt.n	80012ac <__aeabi_ddiv+0x454>
 80012aa:	e692      	b.n	8000fd2 <__aeabi_ddiv+0x17a>
 80012ac:	0023      	movs	r3, r4
 80012ae:	3808      	subs	r0, #8
 80012b0:	4083      	lsls	r3, r0
 80012b2:	4699      	mov	r9, r3
 80012b4:	2300      	movs	r3, #0
 80012b6:	4698      	mov	r8, r3
 80012b8:	e69a      	b.n	8000ff0 <__aeabi_ddiv+0x198>
 80012ba:	f001 fa4d 	bl	8002758 <__clzsi2>
 80012be:	0002      	movs	r2, r0
 80012c0:	0003      	movs	r3, r0
 80012c2:	3215      	adds	r2, #21
 80012c4:	3320      	adds	r3, #32
 80012c6:	2a1c      	cmp	r2, #28
 80012c8:	dc00      	bgt.n	80012cc <__aeabi_ddiv+0x474>
 80012ca:	e65f      	b.n	8000f8c <__aeabi_ddiv+0x134>
 80012cc:	9900      	ldr	r1, [sp, #0]
 80012ce:	3808      	subs	r0, #8
 80012d0:	4081      	lsls	r1, r0
 80012d2:	2200      	movs	r2, #0
 80012d4:	468b      	mov	fp, r1
 80012d6:	e666      	b.n	8000fa6 <__aeabi_ddiv+0x14e>
 80012d8:	2200      	movs	r2, #0
 80012da:	002e      	movs	r6, r5
 80012dc:	2400      	movs	r4, #0
 80012de:	4690      	mov	r8, r2
 80012e0:	4b65      	ldr	r3, [pc, #404]	@ (8001478 <__aeabi_ddiv+0x620>)
 80012e2:	e625      	b.n	8000f30 <__aeabi_ddiv+0xd8>
 80012e4:	002e      	movs	r6, r5
 80012e6:	2101      	movs	r1, #1
 80012e8:	1ac9      	subs	r1, r1, r3
 80012ea:	2938      	cmp	r1, #56	@ 0x38
 80012ec:	dd00      	ble.n	80012f0 <__aeabi_ddiv+0x498>
 80012ee:	e61b      	b.n	8000f28 <__aeabi_ddiv+0xd0>
 80012f0:	291f      	cmp	r1, #31
 80012f2:	dc7e      	bgt.n	80013f2 <__aeabi_ddiv+0x59a>
 80012f4:	4861      	ldr	r0, [pc, #388]	@ (800147c <__aeabi_ddiv+0x624>)
 80012f6:	0014      	movs	r4, r2
 80012f8:	4450      	add	r0, sl
 80012fa:	465b      	mov	r3, fp
 80012fc:	4082      	lsls	r2, r0
 80012fe:	4083      	lsls	r3, r0
 8001300:	40cc      	lsrs	r4, r1
 8001302:	1e50      	subs	r0, r2, #1
 8001304:	4182      	sbcs	r2, r0
 8001306:	4323      	orrs	r3, r4
 8001308:	431a      	orrs	r2, r3
 800130a:	465b      	mov	r3, fp
 800130c:	40cb      	lsrs	r3, r1
 800130e:	0751      	lsls	r1, r2, #29
 8001310:	d009      	beq.n	8001326 <__aeabi_ddiv+0x4ce>
 8001312:	210f      	movs	r1, #15
 8001314:	4011      	ands	r1, r2
 8001316:	2904      	cmp	r1, #4
 8001318:	d005      	beq.n	8001326 <__aeabi_ddiv+0x4ce>
 800131a:	1d11      	adds	r1, r2, #4
 800131c:	4291      	cmp	r1, r2
 800131e:	4192      	sbcs	r2, r2
 8001320:	4252      	negs	r2, r2
 8001322:	189b      	adds	r3, r3, r2
 8001324:	000a      	movs	r2, r1
 8001326:	0219      	lsls	r1, r3, #8
 8001328:	d400      	bmi.n	800132c <__aeabi_ddiv+0x4d4>
 800132a:	e09b      	b.n	8001464 <__aeabi_ddiv+0x60c>
 800132c:	2200      	movs	r2, #0
 800132e:	2301      	movs	r3, #1
 8001330:	2400      	movs	r4, #0
 8001332:	4690      	mov	r8, r2
 8001334:	e5fc      	b.n	8000f30 <__aeabi_ddiv+0xd8>
 8001336:	210f      	movs	r1, #15
 8001338:	4011      	ands	r1, r2
 800133a:	2904      	cmp	r1, #4
 800133c:	d100      	bne.n	8001340 <__aeabi_ddiv+0x4e8>
 800133e:	e773      	b.n	8001228 <__aeabi_ddiv+0x3d0>
 8001340:	1d11      	adds	r1, r2, #4
 8001342:	4291      	cmp	r1, r2
 8001344:	4192      	sbcs	r2, r2
 8001346:	4252      	negs	r2, r2
 8001348:	002e      	movs	r6, r5
 800134a:	08c9      	lsrs	r1, r1, #3
 800134c:	4493      	add	fp, r2
 800134e:	e76d      	b.n	800122c <__aeabi_ddiv+0x3d4>
 8001350:	9b00      	ldr	r3, [sp, #0]
 8001352:	3d01      	subs	r5, #1
 8001354:	469c      	mov	ip, r3
 8001356:	4461      	add	r1, ip
 8001358:	428b      	cmp	r3, r1
 800135a:	d900      	bls.n	800135e <__aeabi_ddiv+0x506>
 800135c:	e72c      	b.n	80011b8 <__aeabi_ddiv+0x360>
 800135e:	428a      	cmp	r2, r1
 8001360:	d800      	bhi.n	8001364 <__aeabi_ddiv+0x50c>
 8001362:	e729      	b.n	80011b8 <__aeabi_ddiv+0x360>
 8001364:	1e85      	subs	r5, r0, #2
 8001366:	4461      	add	r1, ip
 8001368:	e726      	b.n	80011b8 <__aeabi_ddiv+0x360>
 800136a:	9900      	ldr	r1, [sp, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	468c      	mov	ip, r1
 8001370:	4464      	add	r4, ip
 8001372:	42a1      	cmp	r1, r4
 8001374:	d900      	bls.n	8001378 <__aeabi_ddiv+0x520>
 8001376:	e72d      	b.n	80011d4 <__aeabi_ddiv+0x37c>
 8001378:	42a2      	cmp	r2, r4
 800137a:	d800      	bhi.n	800137e <__aeabi_ddiv+0x526>
 800137c:	e72a      	b.n	80011d4 <__aeabi_ddiv+0x37c>
 800137e:	1e83      	subs	r3, r0, #2
 8001380:	4464      	add	r4, ip
 8001382:	e727      	b.n	80011d4 <__aeabi_ddiv+0x37c>
 8001384:	4287      	cmp	r7, r0
 8001386:	d000      	beq.n	800138a <__aeabi_ddiv+0x532>
 8001388:	e6fe      	b.n	8001188 <__aeabi_ddiv+0x330>
 800138a:	45a9      	cmp	r9, r5
 800138c:	d900      	bls.n	8001390 <__aeabi_ddiv+0x538>
 800138e:	e6fb      	b.n	8001188 <__aeabi_ddiv+0x330>
 8001390:	e6f5      	b.n	800117e <__aeabi_ddiv+0x326>
 8001392:	42a2      	cmp	r2, r4
 8001394:	d800      	bhi.n	8001398 <__aeabi_ddiv+0x540>
 8001396:	e6b9      	b.n	800110c <__aeabi_ddiv+0x2b4>
 8001398:	1e83      	subs	r3, r0, #2
 800139a:	4464      	add	r4, ip
 800139c:	e6b6      	b.n	800110c <__aeabi_ddiv+0x2b4>
 800139e:	428a      	cmp	r2, r1
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x54c>
 80013a2:	e69f      	b.n	80010e4 <__aeabi_ddiv+0x28c>
 80013a4:	46bc      	mov	ip, r7
 80013a6:	1e83      	subs	r3, r0, #2
 80013a8:	4698      	mov	r8, r3
 80013aa:	4461      	add	r1, ip
 80013ac:	e69a      	b.n	80010e4 <__aeabi_ddiv+0x28c>
 80013ae:	000a      	movs	r2, r1
 80013b0:	4284      	cmp	r4, r0
 80013b2:	d000      	beq.n	80013b6 <__aeabi_ddiv+0x55e>
 80013b4:	e72e      	b.n	8001214 <__aeabi_ddiv+0x3bc>
 80013b6:	454b      	cmp	r3, r9
 80013b8:	d000      	beq.n	80013bc <__aeabi_ddiv+0x564>
 80013ba:	e72b      	b.n	8001214 <__aeabi_ddiv+0x3bc>
 80013bc:	0035      	movs	r5, r6
 80013be:	e72c      	b.n	800121a <__aeabi_ddiv+0x3c2>
 80013c0:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <__aeabi_ddiv+0x614>)
 80013c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001480 <__aeabi_ddiv+0x628>)
 80013c4:	4453      	add	r3, sl
 80013c6:	4592      	cmp	sl, r2
 80013c8:	db43      	blt.n	8001452 <__aeabi_ddiv+0x5fa>
 80013ca:	2201      	movs	r2, #1
 80013cc:	2100      	movs	r1, #0
 80013ce:	4493      	add	fp, r2
 80013d0:	e72c      	b.n	800122c <__aeabi_ddiv+0x3d4>
 80013d2:	42ac      	cmp	r4, r5
 80013d4:	d800      	bhi.n	80013d8 <__aeabi_ddiv+0x580>
 80013d6:	e6d7      	b.n	8001188 <__aeabi_ddiv+0x330>
 80013d8:	2302      	movs	r3, #2
 80013da:	425b      	negs	r3, r3
 80013dc:	469c      	mov	ip, r3
 80013de:	9900      	ldr	r1, [sp, #0]
 80013e0:	444d      	add	r5, r9
 80013e2:	454d      	cmp	r5, r9
 80013e4:	419b      	sbcs	r3, r3
 80013e6:	44e3      	add	fp, ip
 80013e8:	468c      	mov	ip, r1
 80013ea:	425b      	negs	r3, r3
 80013ec:	4463      	add	r3, ip
 80013ee:	18c0      	adds	r0, r0, r3
 80013f0:	e6cc      	b.n	800118c <__aeabi_ddiv+0x334>
 80013f2:	201f      	movs	r0, #31
 80013f4:	4240      	negs	r0, r0
 80013f6:	1ac3      	subs	r3, r0, r3
 80013f8:	4658      	mov	r0, fp
 80013fa:	40d8      	lsrs	r0, r3
 80013fc:	2920      	cmp	r1, #32
 80013fe:	d004      	beq.n	800140a <__aeabi_ddiv+0x5b2>
 8001400:	4659      	mov	r1, fp
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <__aeabi_ddiv+0x62c>)
 8001404:	4453      	add	r3, sl
 8001406:	4099      	lsls	r1, r3
 8001408:	430a      	orrs	r2, r1
 800140a:	1e53      	subs	r3, r2, #1
 800140c:	419a      	sbcs	r2, r3
 800140e:	2307      	movs	r3, #7
 8001410:	0019      	movs	r1, r3
 8001412:	4302      	orrs	r2, r0
 8001414:	2400      	movs	r4, #0
 8001416:	4011      	ands	r1, r2
 8001418:	4213      	tst	r3, r2
 800141a:	d009      	beq.n	8001430 <__aeabi_ddiv+0x5d8>
 800141c:	3308      	adds	r3, #8
 800141e:	4013      	ands	r3, r2
 8001420:	2b04      	cmp	r3, #4
 8001422:	d01d      	beq.n	8001460 <__aeabi_ddiv+0x608>
 8001424:	1d13      	adds	r3, r2, #4
 8001426:	4293      	cmp	r3, r2
 8001428:	4189      	sbcs	r1, r1
 800142a:	001a      	movs	r2, r3
 800142c:	4249      	negs	r1, r1
 800142e:	0749      	lsls	r1, r1, #29
 8001430:	08d2      	lsrs	r2, r2, #3
 8001432:	430a      	orrs	r2, r1
 8001434:	4690      	mov	r8, r2
 8001436:	2300      	movs	r3, #0
 8001438:	e57a      	b.n	8000f30 <__aeabi_ddiv+0xd8>
 800143a:	4649      	mov	r1, r9
 800143c:	9f00      	ldr	r7, [sp, #0]
 800143e:	004d      	lsls	r5, r1, #1
 8001440:	454d      	cmp	r5, r9
 8001442:	4189      	sbcs	r1, r1
 8001444:	46bc      	mov	ip, r7
 8001446:	4249      	negs	r1, r1
 8001448:	4461      	add	r1, ip
 800144a:	46a9      	mov	r9, r5
 800144c:	3a02      	subs	r2, #2
 800144e:	1864      	adds	r4, r4, r1
 8001450:	e7ae      	b.n	80013b0 <__aeabi_ddiv+0x558>
 8001452:	2201      	movs	r2, #1
 8001454:	4252      	negs	r2, r2
 8001456:	e746      	b.n	80012e6 <__aeabi_ddiv+0x48e>
 8001458:	4599      	cmp	r9, r3
 800145a:	d3ee      	bcc.n	800143a <__aeabi_ddiv+0x5e2>
 800145c:	000a      	movs	r2, r1
 800145e:	e7aa      	b.n	80013b6 <__aeabi_ddiv+0x55e>
 8001460:	2100      	movs	r1, #0
 8001462:	e7e5      	b.n	8001430 <__aeabi_ddiv+0x5d8>
 8001464:	0759      	lsls	r1, r3, #29
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	0b1c      	lsrs	r4, r3, #12
 800146a:	e7e1      	b.n	8001430 <__aeabi_ddiv+0x5d8>
 800146c:	000003ff 	.word	0x000003ff
 8001470:	feffffff 	.word	0xfeffffff
 8001474:	000007fe 	.word	0x000007fe
 8001478:	000007ff 	.word	0x000007ff
 800147c:	0000041e 	.word	0x0000041e
 8001480:	fffffc02 	.word	0xfffffc02
 8001484:	0000043e 	.word	0x0000043e

08001488 <__eqdf2>:
 8001488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148a:	4657      	mov	r7, sl
 800148c:	46de      	mov	lr, fp
 800148e:	464e      	mov	r6, r9
 8001490:	4645      	mov	r5, r8
 8001492:	b5e0      	push	{r5, r6, r7, lr}
 8001494:	000d      	movs	r5, r1
 8001496:	0004      	movs	r4, r0
 8001498:	0fe8      	lsrs	r0, r5, #31
 800149a:	4683      	mov	fp, r0
 800149c:	0309      	lsls	r1, r1, #12
 800149e:	0fd8      	lsrs	r0, r3, #31
 80014a0:	0b09      	lsrs	r1, r1, #12
 80014a2:	4682      	mov	sl, r0
 80014a4:	4819      	ldr	r0, [pc, #100]	@ (800150c <__eqdf2+0x84>)
 80014a6:	468c      	mov	ip, r1
 80014a8:	031f      	lsls	r7, r3, #12
 80014aa:	0069      	lsls	r1, r5, #1
 80014ac:	005e      	lsls	r6, r3, #1
 80014ae:	0d49      	lsrs	r1, r1, #21
 80014b0:	0b3f      	lsrs	r7, r7, #12
 80014b2:	0d76      	lsrs	r6, r6, #21
 80014b4:	4281      	cmp	r1, r0
 80014b6:	d018      	beq.n	80014ea <__eqdf2+0x62>
 80014b8:	4286      	cmp	r6, r0
 80014ba:	d00f      	beq.n	80014dc <__eqdf2+0x54>
 80014bc:	2001      	movs	r0, #1
 80014be:	42b1      	cmp	r1, r6
 80014c0:	d10d      	bne.n	80014de <__eqdf2+0x56>
 80014c2:	45bc      	cmp	ip, r7
 80014c4:	d10b      	bne.n	80014de <__eqdf2+0x56>
 80014c6:	4294      	cmp	r4, r2
 80014c8:	d109      	bne.n	80014de <__eqdf2+0x56>
 80014ca:	45d3      	cmp	fp, sl
 80014cc:	d01c      	beq.n	8001508 <__eqdf2+0x80>
 80014ce:	2900      	cmp	r1, #0
 80014d0:	d105      	bne.n	80014de <__eqdf2+0x56>
 80014d2:	4660      	mov	r0, ip
 80014d4:	4320      	orrs	r0, r4
 80014d6:	1e43      	subs	r3, r0, #1
 80014d8:	4198      	sbcs	r0, r3
 80014da:	e000      	b.n	80014de <__eqdf2+0x56>
 80014dc:	2001      	movs	r0, #1
 80014de:	bcf0      	pop	{r4, r5, r6, r7}
 80014e0:	46bb      	mov	fp, r7
 80014e2:	46b2      	mov	sl, r6
 80014e4:	46a9      	mov	r9, r5
 80014e6:	46a0      	mov	r8, r4
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ea:	2001      	movs	r0, #1
 80014ec:	428e      	cmp	r6, r1
 80014ee:	d1f6      	bne.n	80014de <__eqdf2+0x56>
 80014f0:	4661      	mov	r1, ip
 80014f2:	4339      	orrs	r1, r7
 80014f4:	000f      	movs	r7, r1
 80014f6:	4317      	orrs	r7, r2
 80014f8:	4327      	orrs	r7, r4
 80014fa:	d1f0      	bne.n	80014de <__eqdf2+0x56>
 80014fc:	465b      	mov	r3, fp
 80014fe:	4652      	mov	r2, sl
 8001500:	1a98      	subs	r0, r3, r2
 8001502:	1e43      	subs	r3, r0, #1
 8001504:	4198      	sbcs	r0, r3
 8001506:	e7ea      	b.n	80014de <__eqdf2+0x56>
 8001508:	2000      	movs	r0, #0
 800150a:	e7e8      	b.n	80014de <__eqdf2+0x56>
 800150c:	000007ff 	.word	0x000007ff

08001510 <__gedf2>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	4657      	mov	r7, sl
 8001514:	464e      	mov	r6, r9
 8001516:	4645      	mov	r5, r8
 8001518:	46de      	mov	lr, fp
 800151a:	b5e0      	push	{r5, r6, r7, lr}
 800151c:	000d      	movs	r5, r1
 800151e:	030e      	lsls	r6, r1, #12
 8001520:	0049      	lsls	r1, r1, #1
 8001522:	0d49      	lsrs	r1, r1, #21
 8001524:	468a      	mov	sl, r1
 8001526:	0fdf      	lsrs	r7, r3, #31
 8001528:	0fe9      	lsrs	r1, r5, #31
 800152a:	46bc      	mov	ip, r7
 800152c:	b083      	sub	sp, #12
 800152e:	4f2f      	ldr	r7, [pc, #188]	@ (80015ec <__gedf2+0xdc>)
 8001530:	0004      	movs	r4, r0
 8001532:	4680      	mov	r8, r0
 8001534:	9101      	str	r1, [sp, #4]
 8001536:	0058      	lsls	r0, r3, #1
 8001538:	0319      	lsls	r1, r3, #12
 800153a:	4691      	mov	r9, r2
 800153c:	0b36      	lsrs	r6, r6, #12
 800153e:	0b09      	lsrs	r1, r1, #12
 8001540:	0d40      	lsrs	r0, r0, #21
 8001542:	45ba      	cmp	sl, r7
 8001544:	d01d      	beq.n	8001582 <__gedf2+0x72>
 8001546:	42b8      	cmp	r0, r7
 8001548:	d00d      	beq.n	8001566 <__gedf2+0x56>
 800154a:	4657      	mov	r7, sl
 800154c:	2f00      	cmp	r7, #0
 800154e:	d12a      	bne.n	80015a6 <__gedf2+0x96>
 8001550:	4334      	orrs	r4, r6
 8001552:	2800      	cmp	r0, #0
 8001554:	d124      	bne.n	80015a0 <__gedf2+0x90>
 8001556:	430a      	orrs	r2, r1
 8001558:	d036      	beq.n	80015c8 <__gedf2+0xb8>
 800155a:	2c00      	cmp	r4, #0
 800155c:	d141      	bne.n	80015e2 <__gedf2+0xd2>
 800155e:	4663      	mov	r3, ip
 8001560:	0058      	lsls	r0, r3, #1
 8001562:	3801      	subs	r0, #1
 8001564:	e015      	b.n	8001592 <__gedf2+0x82>
 8001566:	4311      	orrs	r1, r2
 8001568:	d138      	bne.n	80015dc <__gedf2+0xcc>
 800156a:	4653      	mov	r3, sl
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <__gedf2+0x64>
 8001570:	4326      	orrs	r6, r4
 8001572:	d0f4      	beq.n	800155e <__gedf2+0x4e>
 8001574:	9b01      	ldr	r3, [sp, #4]
 8001576:	4563      	cmp	r3, ip
 8001578:	d107      	bne.n	800158a <__gedf2+0x7a>
 800157a:	9b01      	ldr	r3, [sp, #4]
 800157c:	0058      	lsls	r0, r3, #1
 800157e:	3801      	subs	r0, #1
 8001580:	e007      	b.n	8001592 <__gedf2+0x82>
 8001582:	4326      	orrs	r6, r4
 8001584:	d12a      	bne.n	80015dc <__gedf2+0xcc>
 8001586:	4550      	cmp	r0, sl
 8001588:	d021      	beq.n	80015ce <__gedf2+0xbe>
 800158a:	2001      	movs	r0, #1
 800158c:	9b01      	ldr	r3, [sp, #4]
 800158e:	425f      	negs	r7, r3
 8001590:	4338      	orrs	r0, r7
 8001592:	b003      	add	sp, #12
 8001594:	bcf0      	pop	{r4, r5, r6, r7}
 8001596:	46bb      	mov	fp, r7
 8001598:	46b2      	mov	sl, r6
 800159a:	46a9      	mov	r9, r5
 800159c:	46a0      	mov	r8, r4
 800159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a0:	2c00      	cmp	r4, #0
 80015a2:	d0dc      	beq.n	800155e <__gedf2+0x4e>
 80015a4:	e7e6      	b.n	8001574 <__gedf2+0x64>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d0ef      	beq.n	800158a <__gedf2+0x7a>
 80015aa:	9b01      	ldr	r3, [sp, #4]
 80015ac:	4563      	cmp	r3, ip
 80015ae:	d1ec      	bne.n	800158a <__gedf2+0x7a>
 80015b0:	4582      	cmp	sl, r0
 80015b2:	dcea      	bgt.n	800158a <__gedf2+0x7a>
 80015b4:	dbe1      	blt.n	800157a <__gedf2+0x6a>
 80015b6:	428e      	cmp	r6, r1
 80015b8:	d8e7      	bhi.n	800158a <__gedf2+0x7a>
 80015ba:	d1de      	bne.n	800157a <__gedf2+0x6a>
 80015bc:	45c8      	cmp	r8, r9
 80015be:	d8e4      	bhi.n	800158a <__gedf2+0x7a>
 80015c0:	2000      	movs	r0, #0
 80015c2:	45c8      	cmp	r8, r9
 80015c4:	d2e5      	bcs.n	8001592 <__gedf2+0x82>
 80015c6:	e7d8      	b.n	800157a <__gedf2+0x6a>
 80015c8:	2c00      	cmp	r4, #0
 80015ca:	d0e2      	beq.n	8001592 <__gedf2+0x82>
 80015cc:	e7dd      	b.n	800158a <__gedf2+0x7a>
 80015ce:	4311      	orrs	r1, r2
 80015d0:	d104      	bne.n	80015dc <__gedf2+0xcc>
 80015d2:	9b01      	ldr	r3, [sp, #4]
 80015d4:	4563      	cmp	r3, ip
 80015d6:	d1d8      	bne.n	800158a <__gedf2+0x7a>
 80015d8:	2000      	movs	r0, #0
 80015da:	e7da      	b.n	8001592 <__gedf2+0x82>
 80015dc:	2002      	movs	r0, #2
 80015de:	4240      	negs	r0, r0
 80015e0:	e7d7      	b.n	8001592 <__gedf2+0x82>
 80015e2:	9b01      	ldr	r3, [sp, #4]
 80015e4:	4563      	cmp	r3, ip
 80015e6:	d0e6      	beq.n	80015b6 <__gedf2+0xa6>
 80015e8:	e7cf      	b.n	800158a <__gedf2+0x7a>
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	000007ff 	.word	0x000007ff

080015f0 <__ledf2>:
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	4657      	mov	r7, sl
 80015f4:	464e      	mov	r6, r9
 80015f6:	4645      	mov	r5, r8
 80015f8:	46de      	mov	lr, fp
 80015fa:	b5e0      	push	{r5, r6, r7, lr}
 80015fc:	000d      	movs	r5, r1
 80015fe:	030e      	lsls	r6, r1, #12
 8001600:	0049      	lsls	r1, r1, #1
 8001602:	0d49      	lsrs	r1, r1, #21
 8001604:	468a      	mov	sl, r1
 8001606:	0fdf      	lsrs	r7, r3, #31
 8001608:	0fe9      	lsrs	r1, r5, #31
 800160a:	46bc      	mov	ip, r7
 800160c:	b083      	sub	sp, #12
 800160e:	4f2e      	ldr	r7, [pc, #184]	@ (80016c8 <__ledf2+0xd8>)
 8001610:	0004      	movs	r4, r0
 8001612:	4680      	mov	r8, r0
 8001614:	9101      	str	r1, [sp, #4]
 8001616:	0058      	lsls	r0, r3, #1
 8001618:	0319      	lsls	r1, r3, #12
 800161a:	4691      	mov	r9, r2
 800161c:	0b36      	lsrs	r6, r6, #12
 800161e:	0b09      	lsrs	r1, r1, #12
 8001620:	0d40      	lsrs	r0, r0, #21
 8001622:	45ba      	cmp	sl, r7
 8001624:	d01e      	beq.n	8001664 <__ledf2+0x74>
 8001626:	42b8      	cmp	r0, r7
 8001628:	d00d      	beq.n	8001646 <__ledf2+0x56>
 800162a:	4657      	mov	r7, sl
 800162c:	2f00      	cmp	r7, #0
 800162e:	d127      	bne.n	8001680 <__ledf2+0x90>
 8001630:	4334      	orrs	r4, r6
 8001632:	2800      	cmp	r0, #0
 8001634:	d133      	bne.n	800169e <__ledf2+0xae>
 8001636:	430a      	orrs	r2, r1
 8001638:	d034      	beq.n	80016a4 <__ledf2+0xb4>
 800163a:	2c00      	cmp	r4, #0
 800163c:	d140      	bne.n	80016c0 <__ledf2+0xd0>
 800163e:	4663      	mov	r3, ip
 8001640:	0058      	lsls	r0, r3, #1
 8001642:	3801      	subs	r0, #1
 8001644:	e015      	b.n	8001672 <__ledf2+0x82>
 8001646:	4311      	orrs	r1, r2
 8001648:	d112      	bne.n	8001670 <__ledf2+0x80>
 800164a:	4653      	mov	r3, sl
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <__ledf2+0x64>
 8001650:	4326      	orrs	r6, r4
 8001652:	d0f4      	beq.n	800163e <__ledf2+0x4e>
 8001654:	9b01      	ldr	r3, [sp, #4]
 8001656:	4563      	cmp	r3, ip
 8001658:	d01d      	beq.n	8001696 <__ledf2+0xa6>
 800165a:	2001      	movs	r0, #1
 800165c:	9b01      	ldr	r3, [sp, #4]
 800165e:	425f      	negs	r7, r3
 8001660:	4338      	orrs	r0, r7
 8001662:	e006      	b.n	8001672 <__ledf2+0x82>
 8001664:	4326      	orrs	r6, r4
 8001666:	d103      	bne.n	8001670 <__ledf2+0x80>
 8001668:	4550      	cmp	r0, sl
 800166a:	d1f6      	bne.n	800165a <__ledf2+0x6a>
 800166c:	4311      	orrs	r1, r2
 800166e:	d01c      	beq.n	80016aa <__ledf2+0xba>
 8001670:	2002      	movs	r0, #2
 8001672:	b003      	add	sp, #12
 8001674:	bcf0      	pop	{r4, r5, r6, r7}
 8001676:	46bb      	mov	fp, r7
 8001678:	46b2      	mov	sl, r6
 800167a:	46a9      	mov	r9, r5
 800167c:	46a0      	mov	r8, r4
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001680:	2800      	cmp	r0, #0
 8001682:	d0ea      	beq.n	800165a <__ledf2+0x6a>
 8001684:	9b01      	ldr	r3, [sp, #4]
 8001686:	4563      	cmp	r3, ip
 8001688:	d1e7      	bne.n	800165a <__ledf2+0x6a>
 800168a:	4582      	cmp	sl, r0
 800168c:	dce5      	bgt.n	800165a <__ledf2+0x6a>
 800168e:	db02      	blt.n	8001696 <__ledf2+0xa6>
 8001690:	428e      	cmp	r6, r1
 8001692:	d8e2      	bhi.n	800165a <__ledf2+0x6a>
 8001694:	d00e      	beq.n	80016b4 <__ledf2+0xc4>
 8001696:	9b01      	ldr	r3, [sp, #4]
 8001698:	0058      	lsls	r0, r3, #1
 800169a:	3801      	subs	r0, #1
 800169c:	e7e9      	b.n	8001672 <__ledf2+0x82>
 800169e:	2c00      	cmp	r4, #0
 80016a0:	d0cd      	beq.n	800163e <__ledf2+0x4e>
 80016a2:	e7d7      	b.n	8001654 <__ledf2+0x64>
 80016a4:	2c00      	cmp	r4, #0
 80016a6:	d0e4      	beq.n	8001672 <__ledf2+0x82>
 80016a8:	e7d7      	b.n	800165a <__ledf2+0x6a>
 80016aa:	9b01      	ldr	r3, [sp, #4]
 80016ac:	2000      	movs	r0, #0
 80016ae:	4563      	cmp	r3, ip
 80016b0:	d0df      	beq.n	8001672 <__ledf2+0x82>
 80016b2:	e7d2      	b.n	800165a <__ledf2+0x6a>
 80016b4:	45c8      	cmp	r8, r9
 80016b6:	d8d0      	bhi.n	800165a <__ledf2+0x6a>
 80016b8:	2000      	movs	r0, #0
 80016ba:	45c8      	cmp	r8, r9
 80016bc:	d2d9      	bcs.n	8001672 <__ledf2+0x82>
 80016be:	e7ea      	b.n	8001696 <__ledf2+0xa6>
 80016c0:	9b01      	ldr	r3, [sp, #4]
 80016c2:	4563      	cmp	r3, ip
 80016c4:	d0e4      	beq.n	8001690 <__ledf2+0xa0>
 80016c6:	e7c8      	b.n	800165a <__ledf2+0x6a>
 80016c8:	000007ff 	.word	0x000007ff

080016cc <__aeabi_dmul>:
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	4657      	mov	r7, sl
 80016d0:	464e      	mov	r6, r9
 80016d2:	46de      	mov	lr, fp
 80016d4:	4645      	mov	r5, r8
 80016d6:	b5e0      	push	{r5, r6, r7, lr}
 80016d8:	001f      	movs	r7, r3
 80016da:	030b      	lsls	r3, r1, #12
 80016dc:	0b1b      	lsrs	r3, r3, #12
 80016de:	0016      	movs	r6, r2
 80016e0:	469a      	mov	sl, r3
 80016e2:	0fca      	lsrs	r2, r1, #31
 80016e4:	004b      	lsls	r3, r1, #1
 80016e6:	0004      	movs	r4, r0
 80016e8:	4691      	mov	r9, r2
 80016ea:	b085      	sub	sp, #20
 80016ec:	0d5b      	lsrs	r3, r3, #21
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x26>
 80016f0:	e1cf      	b.n	8001a92 <__aeabi_dmul+0x3c6>
 80016f2:	4acd      	ldr	r2, [pc, #820]	@ (8001a28 <__aeabi_dmul+0x35c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d055      	beq.n	80017a4 <__aeabi_dmul+0xd8>
 80016f8:	4651      	mov	r1, sl
 80016fa:	0f42      	lsrs	r2, r0, #29
 80016fc:	00c9      	lsls	r1, r1, #3
 80016fe:	430a      	orrs	r2, r1
 8001700:	2180      	movs	r1, #128	@ 0x80
 8001702:	0409      	lsls	r1, r1, #16
 8001704:	4311      	orrs	r1, r2
 8001706:	00c2      	lsls	r2, r0, #3
 8001708:	4690      	mov	r8, r2
 800170a:	4ac8      	ldr	r2, [pc, #800]	@ (8001a2c <__aeabi_dmul+0x360>)
 800170c:	468a      	mov	sl, r1
 800170e:	4693      	mov	fp, r2
 8001710:	449b      	add	fp, r3
 8001712:	2300      	movs	r3, #0
 8001714:	2500      	movs	r5, #0
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	033c      	lsls	r4, r7, #12
 800171a:	007b      	lsls	r3, r7, #1
 800171c:	0ffa      	lsrs	r2, r7, #31
 800171e:	9601      	str	r6, [sp, #4]
 8001720:	0b24      	lsrs	r4, r4, #12
 8001722:	0d5b      	lsrs	r3, r3, #21
 8001724:	9200      	str	r2, [sp, #0]
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0x5e>
 8001728:	e188      	b.n	8001a3c <__aeabi_dmul+0x370>
 800172a:	4abf      	ldr	r2, [pc, #764]	@ (8001a28 <__aeabi_dmul+0x35c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d100      	bne.n	8001732 <__aeabi_dmul+0x66>
 8001730:	e092      	b.n	8001858 <__aeabi_dmul+0x18c>
 8001732:	4abe      	ldr	r2, [pc, #760]	@ (8001a2c <__aeabi_dmul+0x360>)
 8001734:	4694      	mov	ip, r2
 8001736:	4463      	add	r3, ip
 8001738:	449b      	add	fp, r3
 800173a:	2d0a      	cmp	r5, #10
 800173c:	dc42      	bgt.n	80017c4 <__aeabi_dmul+0xf8>
 800173e:	00e4      	lsls	r4, r4, #3
 8001740:	0f73      	lsrs	r3, r6, #29
 8001742:	4323      	orrs	r3, r4
 8001744:	2480      	movs	r4, #128	@ 0x80
 8001746:	4649      	mov	r1, r9
 8001748:	0424      	lsls	r4, r4, #16
 800174a:	431c      	orrs	r4, r3
 800174c:	00f3      	lsls	r3, r6, #3
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	9b00      	ldr	r3, [sp, #0]
 8001752:	2000      	movs	r0, #0
 8001754:	4059      	eors	r1, r3
 8001756:	b2cb      	uxtb	r3, r1
 8001758:	9303      	str	r3, [sp, #12]
 800175a:	2d02      	cmp	r5, #2
 800175c:	dc00      	bgt.n	8001760 <__aeabi_dmul+0x94>
 800175e:	e094      	b.n	800188a <__aeabi_dmul+0x1be>
 8001760:	2301      	movs	r3, #1
 8001762:	40ab      	lsls	r3, r5
 8001764:	001d      	movs	r5, r3
 8001766:	23a6      	movs	r3, #166	@ 0xa6
 8001768:	002a      	movs	r2, r5
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	401a      	ands	r2, r3
 800176e:	421d      	tst	r5, r3
 8001770:	d000      	beq.n	8001774 <__aeabi_dmul+0xa8>
 8001772:	e229      	b.n	8001bc8 <__aeabi_dmul+0x4fc>
 8001774:	2390      	movs	r3, #144	@ 0x90
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	421d      	tst	r5, r3
 800177a:	d100      	bne.n	800177e <__aeabi_dmul+0xb2>
 800177c:	e24d      	b.n	8001c1a <__aeabi_dmul+0x54e>
 800177e:	2300      	movs	r3, #0
 8001780:	2480      	movs	r4, #128	@ 0x80
 8001782:	4699      	mov	r9, r3
 8001784:	0324      	lsls	r4, r4, #12
 8001786:	4ba8      	ldr	r3, [pc, #672]	@ (8001a28 <__aeabi_dmul+0x35c>)
 8001788:	0010      	movs	r0, r2
 800178a:	464a      	mov	r2, r9
 800178c:	051b      	lsls	r3, r3, #20
 800178e:	4323      	orrs	r3, r4
 8001790:	07d2      	lsls	r2, r2, #31
 8001792:	4313      	orrs	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	b005      	add	sp, #20
 8001798:	bcf0      	pop	{r4, r5, r6, r7}
 800179a:	46bb      	mov	fp, r7
 800179c:	46b2      	mov	sl, r6
 800179e:	46a9      	mov	r9, r5
 80017a0:	46a0      	mov	r8, r4
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a4:	4652      	mov	r2, sl
 80017a6:	4302      	orrs	r2, r0
 80017a8:	4690      	mov	r8, r2
 80017aa:	d000      	beq.n	80017ae <__aeabi_dmul+0xe2>
 80017ac:	e1ac      	b.n	8001b08 <__aeabi_dmul+0x43c>
 80017ae:	469b      	mov	fp, r3
 80017b0:	2302      	movs	r3, #2
 80017b2:	4692      	mov	sl, r2
 80017b4:	2508      	movs	r5, #8
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	e7ae      	b.n	8001718 <__aeabi_dmul+0x4c>
 80017ba:	9b00      	ldr	r3, [sp, #0]
 80017bc:	46a2      	mov	sl, r4
 80017be:	4699      	mov	r9, r3
 80017c0:	9b01      	ldr	r3, [sp, #4]
 80017c2:	4698      	mov	r8, r3
 80017c4:	9b02      	ldr	r3, [sp, #8]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d100      	bne.n	80017cc <__aeabi_dmul+0x100>
 80017ca:	e1ca      	b.n	8001b62 <__aeabi_dmul+0x496>
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dmul+0x106>
 80017d0:	e192      	b.n	8001af8 <__aeabi_dmul+0x42c>
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d110      	bne.n	80017f8 <__aeabi_dmul+0x12c>
 80017d6:	2300      	movs	r3, #0
 80017d8:	2400      	movs	r4, #0
 80017da:	2200      	movs	r2, #0
 80017dc:	e7d4      	b.n	8001788 <__aeabi_dmul+0xbc>
 80017de:	2201      	movs	r2, #1
 80017e0:	087b      	lsrs	r3, r7, #1
 80017e2:	403a      	ands	r2, r7
 80017e4:	4313      	orrs	r3, r2
 80017e6:	4652      	mov	r2, sl
 80017e8:	07d2      	lsls	r2, r2, #31
 80017ea:	4313      	orrs	r3, r2
 80017ec:	4698      	mov	r8, r3
 80017ee:	4653      	mov	r3, sl
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	469a      	mov	sl, r3
 80017f4:	9b03      	ldr	r3, [sp, #12]
 80017f6:	4699      	mov	r9, r3
 80017f8:	465b      	mov	r3, fp
 80017fa:	1c58      	adds	r0, r3, #1
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	445b      	add	r3, fp
 8001802:	2b00      	cmp	r3, #0
 8001804:	dc00      	bgt.n	8001808 <__aeabi_dmul+0x13c>
 8001806:	e1b1      	b.n	8001b6c <__aeabi_dmul+0x4a0>
 8001808:	4642      	mov	r2, r8
 800180a:	0752      	lsls	r2, r2, #29
 800180c:	d00b      	beq.n	8001826 <__aeabi_dmul+0x15a>
 800180e:	220f      	movs	r2, #15
 8001810:	4641      	mov	r1, r8
 8001812:	400a      	ands	r2, r1
 8001814:	2a04      	cmp	r2, #4
 8001816:	d006      	beq.n	8001826 <__aeabi_dmul+0x15a>
 8001818:	4642      	mov	r2, r8
 800181a:	1d11      	adds	r1, r2, #4
 800181c:	4541      	cmp	r1, r8
 800181e:	4192      	sbcs	r2, r2
 8001820:	4688      	mov	r8, r1
 8001822:	4252      	negs	r2, r2
 8001824:	4492      	add	sl, r2
 8001826:	4652      	mov	r2, sl
 8001828:	01d2      	lsls	r2, r2, #7
 800182a:	d506      	bpl.n	800183a <__aeabi_dmul+0x16e>
 800182c:	4652      	mov	r2, sl
 800182e:	4b80      	ldr	r3, [pc, #512]	@ (8001a30 <__aeabi_dmul+0x364>)
 8001830:	401a      	ands	r2, r3
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	4692      	mov	sl, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	18c3      	adds	r3, r0, r3
 800183a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a34 <__aeabi_dmul+0x368>)
 800183c:	4293      	cmp	r3, r2
 800183e:	dd00      	ble.n	8001842 <__aeabi_dmul+0x176>
 8001840:	e18f      	b.n	8001b62 <__aeabi_dmul+0x496>
 8001842:	4642      	mov	r2, r8
 8001844:	08d1      	lsrs	r1, r2, #3
 8001846:	4652      	mov	r2, sl
 8001848:	0752      	lsls	r2, r2, #29
 800184a:	430a      	orrs	r2, r1
 800184c:	4651      	mov	r1, sl
 800184e:	055b      	lsls	r3, r3, #21
 8001850:	024c      	lsls	r4, r1, #9
 8001852:	0b24      	lsrs	r4, r4, #12
 8001854:	0d5b      	lsrs	r3, r3, #21
 8001856:	e797      	b.n	8001788 <__aeabi_dmul+0xbc>
 8001858:	4b73      	ldr	r3, [pc, #460]	@ (8001a28 <__aeabi_dmul+0x35c>)
 800185a:	4326      	orrs	r6, r4
 800185c:	469c      	mov	ip, r3
 800185e:	44e3      	add	fp, ip
 8001860:	2e00      	cmp	r6, #0
 8001862:	d100      	bne.n	8001866 <__aeabi_dmul+0x19a>
 8001864:	e16f      	b.n	8001b46 <__aeabi_dmul+0x47a>
 8001866:	2303      	movs	r3, #3
 8001868:	4649      	mov	r1, r9
 800186a:	431d      	orrs	r5, r3
 800186c:	9b00      	ldr	r3, [sp, #0]
 800186e:	4059      	eors	r1, r3
 8001870:	b2cb      	uxtb	r3, r1
 8001872:	9303      	str	r3, [sp, #12]
 8001874:	2d0a      	cmp	r5, #10
 8001876:	dd00      	ble.n	800187a <__aeabi_dmul+0x1ae>
 8001878:	e133      	b.n	8001ae2 <__aeabi_dmul+0x416>
 800187a:	2301      	movs	r3, #1
 800187c:	40ab      	lsls	r3, r5
 800187e:	001d      	movs	r5, r3
 8001880:	2303      	movs	r3, #3
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2288      	movs	r2, #136	@ 0x88
 8001886:	422a      	tst	r2, r5
 8001888:	d197      	bne.n	80017ba <__aeabi_dmul+0xee>
 800188a:	4642      	mov	r2, r8
 800188c:	4643      	mov	r3, r8
 800188e:	0412      	lsls	r2, r2, #16
 8001890:	0c12      	lsrs	r2, r2, #16
 8001892:	0016      	movs	r6, r2
 8001894:	9801      	ldr	r0, [sp, #4]
 8001896:	0c1d      	lsrs	r5, r3, #16
 8001898:	0c03      	lsrs	r3, r0, #16
 800189a:	0400      	lsls	r0, r0, #16
 800189c:	0c00      	lsrs	r0, r0, #16
 800189e:	4346      	muls	r6, r0
 80018a0:	46b4      	mov	ip, r6
 80018a2:	001e      	movs	r6, r3
 80018a4:	436e      	muls	r6, r5
 80018a6:	9600      	str	r6, [sp, #0]
 80018a8:	0016      	movs	r6, r2
 80018aa:	0007      	movs	r7, r0
 80018ac:	435e      	muls	r6, r3
 80018ae:	4661      	mov	r1, ip
 80018b0:	46b0      	mov	r8, r6
 80018b2:	436f      	muls	r7, r5
 80018b4:	0c0e      	lsrs	r6, r1, #16
 80018b6:	44b8      	add	r8, r7
 80018b8:	4446      	add	r6, r8
 80018ba:	42b7      	cmp	r7, r6
 80018bc:	d905      	bls.n	80018ca <__aeabi_dmul+0x1fe>
 80018be:	2180      	movs	r1, #128	@ 0x80
 80018c0:	0249      	lsls	r1, r1, #9
 80018c2:	4688      	mov	r8, r1
 80018c4:	9f00      	ldr	r7, [sp, #0]
 80018c6:	4447      	add	r7, r8
 80018c8:	9700      	str	r7, [sp, #0]
 80018ca:	4661      	mov	r1, ip
 80018cc:	0409      	lsls	r1, r1, #16
 80018ce:	0c09      	lsrs	r1, r1, #16
 80018d0:	0c37      	lsrs	r7, r6, #16
 80018d2:	0436      	lsls	r6, r6, #16
 80018d4:	468c      	mov	ip, r1
 80018d6:	0031      	movs	r1, r6
 80018d8:	4461      	add	r1, ip
 80018da:	9101      	str	r1, [sp, #4]
 80018dc:	0011      	movs	r1, r2
 80018de:	0c26      	lsrs	r6, r4, #16
 80018e0:	0424      	lsls	r4, r4, #16
 80018e2:	0c24      	lsrs	r4, r4, #16
 80018e4:	4361      	muls	r1, r4
 80018e6:	468c      	mov	ip, r1
 80018e8:	0021      	movs	r1, r4
 80018ea:	4369      	muls	r1, r5
 80018ec:	4689      	mov	r9, r1
 80018ee:	4661      	mov	r1, ip
 80018f0:	0c09      	lsrs	r1, r1, #16
 80018f2:	4688      	mov	r8, r1
 80018f4:	4372      	muls	r2, r6
 80018f6:	444a      	add	r2, r9
 80018f8:	4442      	add	r2, r8
 80018fa:	4375      	muls	r5, r6
 80018fc:	4591      	cmp	r9, r2
 80018fe:	d903      	bls.n	8001908 <__aeabi_dmul+0x23c>
 8001900:	2180      	movs	r1, #128	@ 0x80
 8001902:	0249      	lsls	r1, r1, #9
 8001904:	4688      	mov	r8, r1
 8001906:	4445      	add	r5, r8
 8001908:	0c11      	lsrs	r1, r2, #16
 800190a:	4688      	mov	r8, r1
 800190c:	4661      	mov	r1, ip
 800190e:	0409      	lsls	r1, r1, #16
 8001910:	0c09      	lsrs	r1, r1, #16
 8001912:	468c      	mov	ip, r1
 8001914:	0412      	lsls	r2, r2, #16
 8001916:	4462      	add	r2, ip
 8001918:	18b9      	adds	r1, r7, r2
 800191a:	9102      	str	r1, [sp, #8]
 800191c:	4651      	mov	r1, sl
 800191e:	0c09      	lsrs	r1, r1, #16
 8001920:	468c      	mov	ip, r1
 8001922:	4651      	mov	r1, sl
 8001924:	040f      	lsls	r7, r1, #16
 8001926:	0c3f      	lsrs	r7, r7, #16
 8001928:	0039      	movs	r1, r7
 800192a:	4341      	muls	r1, r0
 800192c:	4445      	add	r5, r8
 800192e:	4688      	mov	r8, r1
 8001930:	4661      	mov	r1, ip
 8001932:	4341      	muls	r1, r0
 8001934:	468a      	mov	sl, r1
 8001936:	4641      	mov	r1, r8
 8001938:	4660      	mov	r0, ip
 800193a:	0c09      	lsrs	r1, r1, #16
 800193c:	4689      	mov	r9, r1
 800193e:	4358      	muls	r0, r3
 8001940:	437b      	muls	r3, r7
 8001942:	4453      	add	r3, sl
 8001944:	444b      	add	r3, r9
 8001946:	459a      	cmp	sl, r3
 8001948:	d903      	bls.n	8001952 <__aeabi_dmul+0x286>
 800194a:	2180      	movs	r1, #128	@ 0x80
 800194c:	0249      	lsls	r1, r1, #9
 800194e:	4689      	mov	r9, r1
 8001950:	4448      	add	r0, r9
 8001952:	0c19      	lsrs	r1, r3, #16
 8001954:	4689      	mov	r9, r1
 8001956:	4641      	mov	r1, r8
 8001958:	0409      	lsls	r1, r1, #16
 800195a:	0c09      	lsrs	r1, r1, #16
 800195c:	4688      	mov	r8, r1
 800195e:	0039      	movs	r1, r7
 8001960:	4361      	muls	r1, r4
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	4443      	add	r3, r8
 8001966:	4688      	mov	r8, r1
 8001968:	4661      	mov	r1, ip
 800196a:	434c      	muls	r4, r1
 800196c:	4371      	muls	r1, r6
 800196e:	468c      	mov	ip, r1
 8001970:	4641      	mov	r1, r8
 8001972:	4377      	muls	r7, r6
 8001974:	0c0e      	lsrs	r6, r1, #16
 8001976:	193f      	adds	r7, r7, r4
 8001978:	19f6      	adds	r6, r6, r7
 800197a:	4448      	add	r0, r9
 800197c:	42b4      	cmp	r4, r6
 800197e:	d903      	bls.n	8001988 <__aeabi_dmul+0x2bc>
 8001980:	2180      	movs	r1, #128	@ 0x80
 8001982:	0249      	lsls	r1, r1, #9
 8001984:	4689      	mov	r9, r1
 8001986:	44cc      	add	ip, r9
 8001988:	9902      	ldr	r1, [sp, #8]
 800198a:	9f00      	ldr	r7, [sp, #0]
 800198c:	4689      	mov	r9, r1
 800198e:	0431      	lsls	r1, r6, #16
 8001990:	444f      	add	r7, r9
 8001992:	4689      	mov	r9, r1
 8001994:	4641      	mov	r1, r8
 8001996:	4297      	cmp	r7, r2
 8001998:	4192      	sbcs	r2, r2
 800199a:	040c      	lsls	r4, r1, #16
 800199c:	0c24      	lsrs	r4, r4, #16
 800199e:	444c      	add	r4, r9
 80019a0:	18ff      	adds	r7, r7, r3
 80019a2:	4252      	negs	r2, r2
 80019a4:	1964      	adds	r4, r4, r5
 80019a6:	18a1      	adds	r1, r4, r2
 80019a8:	429f      	cmp	r7, r3
 80019aa:	419b      	sbcs	r3, r3
 80019ac:	4688      	mov	r8, r1
 80019ae:	4682      	mov	sl, r0
 80019b0:	425b      	negs	r3, r3
 80019b2:	4699      	mov	r9, r3
 80019b4:	4590      	cmp	r8, r2
 80019b6:	4192      	sbcs	r2, r2
 80019b8:	42ac      	cmp	r4, r5
 80019ba:	41a4      	sbcs	r4, r4
 80019bc:	44c2      	add	sl, r8
 80019be:	44d1      	add	r9, sl
 80019c0:	4252      	negs	r2, r2
 80019c2:	4264      	negs	r4, r4
 80019c4:	4314      	orrs	r4, r2
 80019c6:	4599      	cmp	r9, r3
 80019c8:	419b      	sbcs	r3, r3
 80019ca:	4582      	cmp	sl, r0
 80019cc:	4192      	sbcs	r2, r2
 80019ce:	425b      	negs	r3, r3
 80019d0:	4252      	negs	r2, r2
 80019d2:	4313      	orrs	r3, r2
 80019d4:	464a      	mov	r2, r9
 80019d6:	0c36      	lsrs	r6, r6, #16
 80019d8:	19a4      	adds	r4, r4, r6
 80019da:	18e3      	adds	r3, r4, r3
 80019dc:	4463      	add	r3, ip
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	0dd2      	lsrs	r2, r2, #23
 80019e2:	431a      	orrs	r2, r3
 80019e4:	9901      	ldr	r1, [sp, #4]
 80019e6:	4692      	mov	sl, r2
 80019e8:	027a      	lsls	r2, r7, #9
 80019ea:	430a      	orrs	r2, r1
 80019ec:	1e50      	subs	r0, r2, #1
 80019ee:	4182      	sbcs	r2, r0
 80019f0:	0dff      	lsrs	r7, r7, #23
 80019f2:	4317      	orrs	r7, r2
 80019f4:	464a      	mov	r2, r9
 80019f6:	0252      	lsls	r2, r2, #9
 80019f8:	4317      	orrs	r7, r2
 80019fa:	46b8      	mov	r8, r7
 80019fc:	01db      	lsls	r3, r3, #7
 80019fe:	d500      	bpl.n	8001a02 <__aeabi_dmul+0x336>
 8001a00:	e6ed      	b.n	80017de <__aeabi_dmul+0x112>
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <__aeabi_dmul+0x36c>)
 8001a04:	9a03      	ldr	r2, [sp, #12]
 8001a06:	445b      	add	r3, fp
 8001a08:	4691      	mov	r9, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	dc00      	bgt.n	8001a10 <__aeabi_dmul+0x344>
 8001a0e:	e0ac      	b.n	8001b6a <__aeabi_dmul+0x49e>
 8001a10:	003a      	movs	r2, r7
 8001a12:	0752      	lsls	r2, r2, #29
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dmul+0x34c>
 8001a16:	e710      	b.n	800183a <__aeabi_dmul+0x16e>
 8001a18:	220f      	movs	r2, #15
 8001a1a:	4658      	mov	r0, fp
 8001a1c:	403a      	ands	r2, r7
 8001a1e:	2a04      	cmp	r2, #4
 8001a20:	d000      	beq.n	8001a24 <__aeabi_dmul+0x358>
 8001a22:	e6f9      	b.n	8001818 <__aeabi_dmul+0x14c>
 8001a24:	e709      	b.n	800183a <__aeabi_dmul+0x16e>
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	000007ff 	.word	0x000007ff
 8001a2c:	fffffc01 	.word	0xfffffc01
 8001a30:	feffffff 	.word	0xfeffffff
 8001a34:	000007fe 	.word	0x000007fe
 8001a38:	000003ff 	.word	0x000003ff
 8001a3c:	0022      	movs	r2, r4
 8001a3e:	4332      	orrs	r2, r6
 8001a40:	d06f      	beq.n	8001b22 <__aeabi_dmul+0x456>
 8001a42:	2c00      	cmp	r4, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dmul+0x37c>
 8001a46:	e0c2      	b.n	8001bce <__aeabi_dmul+0x502>
 8001a48:	0020      	movs	r0, r4
 8001a4a:	f000 fe85 	bl	8002758 <__clzsi2>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	0003      	movs	r3, r0
 8001a52:	3a0b      	subs	r2, #11
 8001a54:	201d      	movs	r0, #29
 8001a56:	1a82      	subs	r2, r0, r2
 8001a58:	0030      	movs	r0, r6
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	40d0      	lsrs	r0, r2
 8001a5e:	3908      	subs	r1, #8
 8001a60:	408c      	lsls	r4, r1
 8001a62:	0002      	movs	r2, r0
 8001a64:	4322      	orrs	r2, r4
 8001a66:	0034      	movs	r4, r6
 8001a68:	408c      	lsls	r4, r1
 8001a6a:	4659      	mov	r1, fp
 8001a6c:	1acb      	subs	r3, r1, r3
 8001a6e:	4986      	ldr	r1, [pc, #536]	@ (8001c88 <__aeabi_dmul+0x5bc>)
 8001a70:	468b      	mov	fp, r1
 8001a72:	449b      	add	fp, r3
 8001a74:	2d0a      	cmp	r5, #10
 8001a76:	dd00      	ble.n	8001a7a <__aeabi_dmul+0x3ae>
 8001a78:	e6a4      	b.n	80017c4 <__aeabi_dmul+0xf8>
 8001a7a:	4649      	mov	r1, r9
 8001a7c:	9b00      	ldr	r3, [sp, #0]
 8001a7e:	9401      	str	r4, [sp, #4]
 8001a80:	4059      	eors	r1, r3
 8001a82:	b2cb      	uxtb	r3, r1
 8001a84:	0014      	movs	r4, r2
 8001a86:	2000      	movs	r0, #0
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	2d02      	cmp	r5, #2
 8001a8c:	dd00      	ble.n	8001a90 <__aeabi_dmul+0x3c4>
 8001a8e:	e667      	b.n	8001760 <__aeabi_dmul+0x94>
 8001a90:	e6fb      	b.n	800188a <__aeabi_dmul+0x1be>
 8001a92:	4653      	mov	r3, sl
 8001a94:	4303      	orrs	r3, r0
 8001a96:	4698      	mov	r8, r3
 8001a98:	d03c      	beq.n	8001b14 <__aeabi_dmul+0x448>
 8001a9a:	4653      	mov	r3, sl
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dmul+0x3d6>
 8001aa0:	e0a3      	b.n	8001bea <__aeabi_dmul+0x51e>
 8001aa2:	4650      	mov	r0, sl
 8001aa4:	f000 fe58 	bl	8002758 <__clzsi2>
 8001aa8:	230b      	movs	r3, #11
 8001aaa:	425b      	negs	r3, r3
 8001aac:	469c      	mov	ip, r3
 8001aae:	0002      	movs	r2, r0
 8001ab0:	4484      	add	ip, r0
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	4650      	mov	r0, sl
 8001ab6:	3908      	subs	r1, #8
 8001ab8:	4088      	lsls	r0, r1
 8001aba:	231d      	movs	r3, #29
 8001abc:	4680      	mov	r8, r0
 8001abe:	4660      	mov	r0, ip
 8001ac0:	1a1b      	subs	r3, r3, r0
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	40d8      	lsrs	r0, r3
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	4640      	mov	r0, r8
 8001aca:	4303      	orrs	r3, r0
 8001acc:	469a      	mov	sl, r3
 8001ace:	0023      	movs	r3, r4
 8001ad0:	408b      	lsls	r3, r1
 8001ad2:	4698      	mov	r8, r3
 8001ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8001c88 <__aeabi_dmul+0x5bc>)
 8001ad6:	2500      	movs	r5, #0
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	469b      	mov	fp, r3
 8001adc:	2300      	movs	r3, #0
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	e61a      	b.n	8001718 <__aeabi_dmul+0x4c>
 8001ae2:	2d0f      	cmp	r5, #15
 8001ae4:	d000      	beq.n	8001ae8 <__aeabi_dmul+0x41c>
 8001ae6:	e0c9      	b.n	8001c7c <__aeabi_dmul+0x5b0>
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	4652      	mov	r2, sl
 8001aec:	031b      	lsls	r3, r3, #12
 8001aee:	421a      	tst	r2, r3
 8001af0:	d002      	beq.n	8001af8 <__aeabi_dmul+0x42c>
 8001af2:	421c      	tst	r4, r3
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dmul+0x42c>
 8001af6:	e092      	b.n	8001c1e <__aeabi_dmul+0x552>
 8001af8:	2480      	movs	r4, #128	@ 0x80
 8001afa:	4653      	mov	r3, sl
 8001afc:	0324      	lsls	r4, r4, #12
 8001afe:	431c      	orrs	r4, r3
 8001b00:	0324      	lsls	r4, r4, #12
 8001b02:	4642      	mov	r2, r8
 8001b04:	0b24      	lsrs	r4, r4, #12
 8001b06:	e63e      	b.n	8001786 <__aeabi_dmul+0xba>
 8001b08:	469b      	mov	fp, r3
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	4680      	mov	r8, r0
 8001b0e:	250c      	movs	r5, #12
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	e601      	b.n	8001718 <__aeabi_dmul+0x4c>
 8001b14:	2300      	movs	r3, #0
 8001b16:	469a      	mov	sl, r3
 8001b18:	469b      	mov	fp, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	2504      	movs	r5, #4
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	e5fa      	b.n	8001718 <__aeabi_dmul+0x4c>
 8001b22:	2101      	movs	r1, #1
 8001b24:	430d      	orrs	r5, r1
 8001b26:	2d0a      	cmp	r5, #10
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dmul+0x460>
 8001b2a:	e64b      	b.n	80017c4 <__aeabi_dmul+0xf8>
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	9800      	ldr	r0, [sp, #0]
 8001b30:	4041      	eors	r1, r0
 8001b32:	b2c9      	uxtb	r1, r1
 8001b34:	9103      	str	r1, [sp, #12]
 8001b36:	2d02      	cmp	r5, #2
 8001b38:	dc00      	bgt.n	8001b3c <__aeabi_dmul+0x470>
 8001b3a:	e096      	b.n	8001c6a <__aeabi_dmul+0x59e>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2400      	movs	r4, #0
 8001b40:	2001      	movs	r0, #1
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	e60c      	b.n	8001760 <__aeabi_dmul+0x94>
 8001b46:	4649      	mov	r1, r9
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9a00      	ldr	r2, [sp, #0]
 8001b4c:	432b      	orrs	r3, r5
 8001b4e:	4051      	eors	r1, r2
 8001b50:	b2ca      	uxtb	r2, r1
 8001b52:	9203      	str	r2, [sp, #12]
 8001b54:	2b0a      	cmp	r3, #10
 8001b56:	dd00      	ble.n	8001b5a <__aeabi_dmul+0x48e>
 8001b58:	e634      	b.n	80017c4 <__aeabi_dmul+0xf8>
 8001b5a:	2d00      	cmp	r5, #0
 8001b5c:	d157      	bne.n	8001c0e <__aeabi_dmul+0x542>
 8001b5e:	9b03      	ldr	r3, [sp, #12]
 8001b60:	4699      	mov	r9, r3
 8001b62:	2400      	movs	r4, #0
 8001b64:	2200      	movs	r2, #0
 8001b66:	4b49      	ldr	r3, [pc, #292]	@ (8001c8c <__aeabi_dmul+0x5c0>)
 8001b68:	e60e      	b.n	8001788 <__aeabi_dmul+0xbc>
 8001b6a:	4658      	mov	r0, fp
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	1ac9      	subs	r1, r1, r3
 8001b70:	2938      	cmp	r1, #56	@ 0x38
 8001b72:	dd00      	ble.n	8001b76 <__aeabi_dmul+0x4aa>
 8001b74:	e62f      	b.n	80017d6 <__aeabi_dmul+0x10a>
 8001b76:	291f      	cmp	r1, #31
 8001b78:	dd56      	ble.n	8001c28 <__aeabi_dmul+0x55c>
 8001b7a:	221f      	movs	r2, #31
 8001b7c:	4654      	mov	r4, sl
 8001b7e:	4252      	negs	r2, r2
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	40dc      	lsrs	r4, r3
 8001b84:	2920      	cmp	r1, #32
 8001b86:	d007      	beq.n	8001b98 <__aeabi_dmul+0x4cc>
 8001b88:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <__aeabi_dmul+0x5c4>)
 8001b8a:	4642      	mov	r2, r8
 8001b8c:	469c      	mov	ip, r3
 8001b8e:	4653      	mov	r3, sl
 8001b90:	4460      	add	r0, ip
 8001b92:	4083      	lsls	r3, r0
 8001b94:	431a      	orrs	r2, r3
 8001b96:	4690      	mov	r8, r2
 8001b98:	4642      	mov	r2, r8
 8001b9a:	2107      	movs	r1, #7
 8001b9c:	1e53      	subs	r3, r2, #1
 8001b9e:	419a      	sbcs	r2, r3
 8001ba0:	000b      	movs	r3, r1
 8001ba2:	4322      	orrs	r2, r4
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2400      	movs	r4, #0
 8001ba8:	4211      	tst	r1, r2
 8001baa:	d009      	beq.n	8001bc0 <__aeabi_dmul+0x4f4>
 8001bac:	230f      	movs	r3, #15
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d05d      	beq.n	8001c70 <__aeabi_dmul+0x5a4>
 8001bb4:	1d11      	adds	r1, r2, #4
 8001bb6:	4291      	cmp	r1, r2
 8001bb8:	419b      	sbcs	r3, r3
 8001bba:	000a      	movs	r2, r1
 8001bbc:	425b      	negs	r3, r3
 8001bbe:	075b      	lsls	r3, r3, #29
 8001bc0:	08d2      	lsrs	r2, r2, #3
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e5df      	b.n	8001788 <__aeabi_dmul+0xbc>
 8001bc8:	9b03      	ldr	r3, [sp, #12]
 8001bca:	4699      	mov	r9, r3
 8001bcc:	e5fa      	b.n	80017c4 <__aeabi_dmul+0xf8>
 8001bce:	9801      	ldr	r0, [sp, #4]
 8001bd0:	f000 fdc2 	bl	8002758 <__clzsi2>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	3215      	adds	r2, #21
 8001bda:	3320      	adds	r3, #32
 8001bdc:	2a1c      	cmp	r2, #28
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_dmul+0x516>
 8001be0:	e738      	b.n	8001a54 <__aeabi_dmul+0x388>
 8001be2:	9a01      	ldr	r2, [sp, #4]
 8001be4:	3808      	subs	r0, #8
 8001be6:	4082      	lsls	r2, r0
 8001be8:	e73f      	b.n	8001a6a <__aeabi_dmul+0x39e>
 8001bea:	f000 fdb5 	bl	8002758 <__clzsi2>
 8001bee:	2315      	movs	r3, #21
 8001bf0:	469c      	mov	ip, r3
 8001bf2:	4484      	add	ip, r0
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	4663      	mov	r3, ip
 8001bf8:	3220      	adds	r2, #32
 8001bfa:	2b1c      	cmp	r3, #28
 8001bfc:	dc00      	bgt.n	8001c00 <__aeabi_dmul+0x534>
 8001bfe:	e758      	b.n	8001ab2 <__aeabi_dmul+0x3e6>
 8001c00:	2300      	movs	r3, #0
 8001c02:	4698      	mov	r8, r3
 8001c04:	0023      	movs	r3, r4
 8001c06:	3808      	subs	r0, #8
 8001c08:	4083      	lsls	r3, r0
 8001c0a:	469a      	mov	sl, r3
 8001c0c:	e762      	b.n	8001ad4 <__aeabi_dmul+0x408>
 8001c0e:	001d      	movs	r5, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	2400      	movs	r4, #0
 8001c14:	2002      	movs	r0, #2
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	e5a2      	b.n	8001760 <__aeabi_dmul+0x94>
 8001c1a:	9002      	str	r0, [sp, #8]
 8001c1c:	e632      	b.n	8001884 <__aeabi_dmul+0x1b8>
 8001c1e:	431c      	orrs	r4, r3
 8001c20:	9b00      	ldr	r3, [sp, #0]
 8001c22:	9a01      	ldr	r2, [sp, #4]
 8001c24:	4699      	mov	r9, r3
 8001c26:	e5ae      	b.n	8001786 <__aeabi_dmul+0xba>
 8001c28:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <__aeabi_dmul+0x5c8>)
 8001c2a:	4652      	mov	r2, sl
 8001c2c:	18c3      	adds	r3, r0, r3
 8001c2e:	4640      	mov	r0, r8
 8001c30:	409a      	lsls	r2, r3
 8001c32:	40c8      	lsrs	r0, r1
 8001c34:	4302      	orrs	r2, r0
 8001c36:	4640      	mov	r0, r8
 8001c38:	4098      	lsls	r0, r3
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	1e58      	subs	r0, r3, #1
 8001c3e:	4183      	sbcs	r3, r0
 8001c40:	4654      	mov	r4, sl
 8001c42:	431a      	orrs	r2, r3
 8001c44:	40cc      	lsrs	r4, r1
 8001c46:	0753      	lsls	r3, r2, #29
 8001c48:	d009      	beq.n	8001c5e <__aeabi_dmul+0x592>
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d005      	beq.n	8001c5e <__aeabi_dmul+0x592>
 8001c52:	1d13      	adds	r3, r2, #4
 8001c54:	4293      	cmp	r3, r2
 8001c56:	4192      	sbcs	r2, r2
 8001c58:	4252      	negs	r2, r2
 8001c5a:	18a4      	adds	r4, r4, r2
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	0223      	lsls	r3, r4, #8
 8001c60:	d508      	bpl.n	8001c74 <__aeabi_dmul+0x5a8>
 8001c62:	2301      	movs	r3, #1
 8001c64:	2400      	movs	r4, #0
 8001c66:	2200      	movs	r2, #0
 8001c68:	e58e      	b.n	8001788 <__aeabi_dmul+0xbc>
 8001c6a:	4689      	mov	r9, r1
 8001c6c:	2400      	movs	r4, #0
 8001c6e:	e58b      	b.n	8001788 <__aeabi_dmul+0xbc>
 8001c70:	2300      	movs	r3, #0
 8001c72:	e7a5      	b.n	8001bc0 <__aeabi_dmul+0x4f4>
 8001c74:	0763      	lsls	r3, r4, #29
 8001c76:	0264      	lsls	r4, r4, #9
 8001c78:	0b24      	lsrs	r4, r4, #12
 8001c7a:	e7a1      	b.n	8001bc0 <__aeabi_dmul+0x4f4>
 8001c7c:	9b00      	ldr	r3, [sp, #0]
 8001c7e:	46a2      	mov	sl, r4
 8001c80:	4699      	mov	r9, r3
 8001c82:	9b01      	ldr	r3, [sp, #4]
 8001c84:	4698      	mov	r8, r3
 8001c86:	e737      	b.n	8001af8 <__aeabi_dmul+0x42c>
 8001c88:	fffffc0d 	.word	0xfffffc0d
 8001c8c:	000007ff 	.word	0x000007ff
 8001c90:	0000043e 	.word	0x0000043e
 8001c94:	0000041e 	.word	0x0000041e

08001c98 <__aeabi_dsub>:
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9a:	4657      	mov	r7, sl
 8001c9c:	464e      	mov	r6, r9
 8001c9e:	4645      	mov	r5, r8
 8001ca0:	46de      	mov	lr, fp
 8001ca2:	b5e0      	push	{r5, r6, r7, lr}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	9000      	str	r0, [sp, #0]
 8001ca8:	9101      	str	r1, [sp, #4]
 8001caa:	030c      	lsls	r4, r1, #12
 8001cac:	004d      	lsls	r5, r1, #1
 8001cae:	0fce      	lsrs	r6, r1, #31
 8001cb0:	0a61      	lsrs	r1, r4, #9
 8001cb2:	9c00      	ldr	r4, [sp, #0]
 8001cb4:	005f      	lsls	r7, r3, #1
 8001cb6:	0f64      	lsrs	r4, r4, #29
 8001cb8:	430c      	orrs	r4, r1
 8001cba:	9900      	ldr	r1, [sp, #0]
 8001cbc:	9200      	str	r2, [sp, #0]
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	00c8      	lsls	r0, r1, #3
 8001cc2:	0319      	lsls	r1, r3, #12
 8001cc4:	0d7b      	lsrs	r3, r7, #21
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	4fcc      	ldr	r7, [pc, #816]	@ (8001ffc <__aeabi_dsub+0x364>)
 8001ccc:	0fdb      	lsrs	r3, r3, #31
 8001cce:	469c      	mov	ip, r3
 8001cd0:	0a4b      	lsrs	r3, r1, #9
 8001cd2:	9900      	ldr	r1, [sp, #0]
 8001cd4:	4680      	mov	r8, r0
 8001cd6:	0f49      	lsrs	r1, r1, #29
 8001cd8:	4319      	orrs	r1, r3
 8001cda:	9b00      	ldr	r3, [sp, #0]
 8001cdc:	468b      	mov	fp, r1
 8001cde:	00da      	lsls	r2, r3, #3
 8001ce0:	4692      	mov	sl, r2
 8001ce2:	0d6d      	lsrs	r5, r5, #21
 8001ce4:	45b9      	cmp	r9, r7
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x52>
 8001ce8:	e0bf      	b.n	8001e6a <__aeabi_dsub+0x1d2>
 8001cea:	2301      	movs	r3, #1
 8001cec:	4661      	mov	r1, ip
 8001cee:	4059      	eors	r1, r3
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	468c      	mov	ip, r1
 8001cf4:	1aeb      	subs	r3, r5, r3
 8001cf6:	428e      	cmp	r6, r1
 8001cf8:	d075      	beq.n	8001de6 <__aeabi_dsub+0x14e>
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	dc00      	bgt.n	8001d00 <__aeabi_dsub+0x68>
 8001cfe:	e2a3      	b.n	8002248 <__aeabi_dsub+0x5b0>
 8001d00:	4649      	mov	r1, r9
 8001d02:	2900      	cmp	r1, #0
 8001d04:	d100      	bne.n	8001d08 <__aeabi_dsub+0x70>
 8001d06:	e0ce      	b.n	8001ea6 <__aeabi_dsub+0x20e>
 8001d08:	42bd      	cmp	r5, r7
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x76>
 8001d0c:	e200      	b.n	8002110 <__aeabi_dsub+0x478>
 8001d0e:	2701      	movs	r7, #1
 8001d10:	2b38      	cmp	r3, #56	@ 0x38
 8001d12:	dc19      	bgt.n	8001d48 <__aeabi_dsub+0xb0>
 8001d14:	2780      	movs	r7, #128	@ 0x80
 8001d16:	4659      	mov	r1, fp
 8001d18:	043f      	lsls	r7, r7, #16
 8001d1a:	4339      	orrs	r1, r7
 8001d1c:	468b      	mov	fp, r1
 8001d1e:	2b1f      	cmp	r3, #31
 8001d20:	dd00      	ble.n	8001d24 <__aeabi_dsub+0x8c>
 8001d22:	e1fa      	b.n	800211a <__aeabi_dsub+0x482>
 8001d24:	2720      	movs	r7, #32
 8001d26:	1af9      	subs	r1, r7, r3
 8001d28:	468c      	mov	ip, r1
 8001d2a:	4659      	mov	r1, fp
 8001d2c:	4667      	mov	r7, ip
 8001d2e:	40b9      	lsls	r1, r7
 8001d30:	000f      	movs	r7, r1
 8001d32:	0011      	movs	r1, r2
 8001d34:	40d9      	lsrs	r1, r3
 8001d36:	430f      	orrs	r7, r1
 8001d38:	4661      	mov	r1, ip
 8001d3a:	408a      	lsls	r2, r1
 8001d3c:	1e51      	subs	r1, r2, #1
 8001d3e:	418a      	sbcs	r2, r1
 8001d40:	4659      	mov	r1, fp
 8001d42:	40d9      	lsrs	r1, r3
 8001d44:	4317      	orrs	r7, r2
 8001d46:	1a64      	subs	r4, r4, r1
 8001d48:	1bc7      	subs	r7, r0, r7
 8001d4a:	42b8      	cmp	r0, r7
 8001d4c:	4180      	sbcs	r0, r0
 8001d4e:	4240      	negs	r0, r0
 8001d50:	1a24      	subs	r4, r4, r0
 8001d52:	0223      	lsls	r3, r4, #8
 8001d54:	d400      	bmi.n	8001d58 <__aeabi_dsub+0xc0>
 8001d56:	e140      	b.n	8001fda <__aeabi_dsub+0x342>
 8001d58:	0264      	lsls	r4, r4, #9
 8001d5a:	0a64      	lsrs	r4, r4, #9
 8001d5c:	2c00      	cmp	r4, #0
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dsub+0xca>
 8001d60:	e154      	b.n	800200c <__aeabi_dsub+0x374>
 8001d62:	0020      	movs	r0, r4
 8001d64:	f000 fcf8 	bl	8002758 <__clzsi2>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	3b08      	subs	r3, #8
 8001d6c:	2120      	movs	r1, #32
 8001d6e:	0038      	movs	r0, r7
 8001d70:	1aca      	subs	r2, r1, r3
 8001d72:	40d0      	lsrs	r0, r2
 8001d74:	409c      	lsls	r4, r3
 8001d76:	0002      	movs	r2, r0
 8001d78:	409f      	lsls	r7, r3
 8001d7a:	4322      	orrs	r2, r4
 8001d7c:	429d      	cmp	r5, r3
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dsub+0xea>
 8001d80:	e1a6      	b.n	80020d0 <__aeabi_dsub+0x438>
 8001d82:	1b58      	subs	r0, r3, r5
 8001d84:	3001      	adds	r0, #1
 8001d86:	1a09      	subs	r1, r1, r0
 8001d88:	003c      	movs	r4, r7
 8001d8a:	408f      	lsls	r7, r1
 8001d8c:	40c4      	lsrs	r4, r0
 8001d8e:	1e7b      	subs	r3, r7, #1
 8001d90:	419f      	sbcs	r7, r3
 8001d92:	0013      	movs	r3, r2
 8001d94:	408b      	lsls	r3, r1
 8001d96:	4327      	orrs	r7, r4
 8001d98:	431f      	orrs	r7, r3
 8001d9a:	40c2      	lsrs	r2, r0
 8001d9c:	003b      	movs	r3, r7
 8001d9e:	0014      	movs	r4, r2
 8001da0:	2500      	movs	r5, #0
 8001da2:	4313      	orrs	r3, r2
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x110>
 8001da6:	e1f7      	b.n	8002198 <__aeabi_dsub+0x500>
 8001da8:	077b      	lsls	r3, r7, #29
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x116>
 8001dac:	e377      	b.n	800249e <__aeabi_dsub+0x806>
 8001dae:	230f      	movs	r3, #15
 8001db0:	0038      	movs	r0, r7
 8001db2:	403b      	ands	r3, r7
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d004      	beq.n	8001dc2 <__aeabi_dsub+0x12a>
 8001db8:	1d38      	adds	r0, r7, #4
 8001dba:	42b8      	cmp	r0, r7
 8001dbc:	41bf      	sbcs	r7, r7
 8001dbe:	427f      	negs	r7, r7
 8001dc0:	19e4      	adds	r4, r4, r7
 8001dc2:	0223      	lsls	r3, r4, #8
 8001dc4:	d400      	bmi.n	8001dc8 <__aeabi_dsub+0x130>
 8001dc6:	e368      	b.n	800249a <__aeabi_dsub+0x802>
 8001dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8001ffc <__aeabi_dsub+0x364>)
 8001dca:	3501      	adds	r5, #1
 8001dcc:	429d      	cmp	r5, r3
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0x13a>
 8001dd0:	e0f4      	b.n	8001fbc <__aeabi_dsub+0x324>
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002000 <__aeabi_dsub+0x368>)
 8001dd4:	056d      	lsls	r5, r5, #21
 8001dd6:	401c      	ands	r4, r3
 8001dd8:	0d6d      	lsrs	r5, r5, #21
 8001dda:	0767      	lsls	r7, r4, #29
 8001ddc:	08c0      	lsrs	r0, r0, #3
 8001dde:	0264      	lsls	r4, r4, #9
 8001de0:	4307      	orrs	r7, r0
 8001de2:	0b24      	lsrs	r4, r4, #12
 8001de4:	e0ec      	b.n	8001fc0 <__aeabi_dsub+0x328>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	dc00      	bgt.n	8001dec <__aeabi_dsub+0x154>
 8001dea:	e329      	b.n	8002440 <__aeabi_dsub+0x7a8>
 8001dec:	4649      	mov	r1, r9
 8001dee:	2900      	cmp	r1, #0
 8001df0:	d000      	beq.n	8001df4 <__aeabi_dsub+0x15c>
 8001df2:	e0d6      	b.n	8001fa2 <__aeabi_dsub+0x30a>
 8001df4:	4659      	mov	r1, fp
 8001df6:	4311      	orrs	r1, r2
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x164>
 8001dfa:	e12e      	b.n	800205a <__aeabi_dsub+0x3c2>
 8001dfc:	1e59      	subs	r1, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x16c>
 8001e02:	e1e6      	b.n	80021d2 <__aeabi_dsub+0x53a>
 8001e04:	42bb      	cmp	r3, r7
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x172>
 8001e08:	e182      	b.n	8002110 <__aeabi_dsub+0x478>
 8001e0a:	2701      	movs	r7, #1
 8001e0c:	000b      	movs	r3, r1
 8001e0e:	2938      	cmp	r1, #56	@ 0x38
 8001e10:	dc14      	bgt.n	8001e3c <__aeabi_dsub+0x1a4>
 8001e12:	2b1f      	cmp	r3, #31
 8001e14:	dd00      	ble.n	8001e18 <__aeabi_dsub+0x180>
 8001e16:	e23c      	b.n	8002292 <__aeabi_dsub+0x5fa>
 8001e18:	2720      	movs	r7, #32
 8001e1a:	1af9      	subs	r1, r7, r3
 8001e1c:	468c      	mov	ip, r1
 8001e1e:	4659      	mov	r1, fp
 8001e20:	4667      	mov	r7, ip
 8001e22:	40b9      	lsls	r1, r7
 8001e24:	000f      	movs	r7, r1
 8001e26:	0011      	movs	r1, r2
 8001e28:	40d9      	lsrs	r1, r3
 8001e2a:	430f      	orrs	r7, r1
 8001e2c:	4661      	mov	r1, ip
 8001e2e:	408a      	lsls	r2, r1
 8001e30:	1e51      	subs	r1, r2, #1
 8001e32:	418a      	sbcs	r2, r1
 8001e34:	4659      	mov	r1, fp
 8001e36:	40d9      	lsrs	r1, r3
 8001e38:	4317      	orrs	r7, r2
 8001e3a:	1864      	adds	r4, r4, r1
 8001e3c:	183f      	adds	r7, r7, r0
 8001e3e:	4287      	cmp	r7, r0
 8001e40:	4180      	sbcs	r0, r0
 8001e42:	4240      	negs	r0, r0
 8001e44:	1824      	adds	r4, r4, r0
 8001e46:	0223      	lsls	r3, r4, #8
 8001e48:	d400      	bmi.n	8001e4c <__aeabi_dsub+0x1b4>
 8001e4a:	e0c6      	b.n	8001fda <__aeabi_dsub+0x342>
 8001e4c:	4b6b      	ldr	r3, [pc, #428]	@ (8001ffc <__aeabi_dsub+0x364>)
 8001e4e:	3501      	adds	r5, #1
 8001e50:	429d      	cmp	r5, r3
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x1be>
 8001e54:	e0b2      	b.n	8001fbc <__aeabi_dsub+0x324>
 8001e56:	2101      	movs	r1, #1
 8001e58:	4b69      	ldr	r3, [pc, #420]	@ (8002000 <__aeabi_dsub+0x368>)
 8001e5a:	087a      	lsrs	r2, r7, #1
 8001e5c:	401c      	ands	r4, r3
 8001e5e:	4039      	ands	r1, r7
 8001e60:	430a      	orrs	r2, r1
 8001e62:	07e7      	lsls	r7, r4, #31
 8001e64:	4317      	orrs	r7, r2
 8001e66:	0864      	lsrs	r4, r4, #1
 8001e68:	e79e      	b.n	8001da8 <__aeabi_dsub+0x110>
 8001e6a:	4b66      	ldr	r3, [pc, #408]	@ (8002004 <__aeabi_dsub+0x36c>)
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	468a      	mov	sl, r1
 8001e70:	18eb      	adds	r3, r5, r3
 8001e72:	2900      	cmp	r1, #0
 8001e74:	d028      	beq.n	8001ec8 <__aeabi_dsub+0x230>
 8001e76:	4566      	cmp	r6, ip
 8001e78:	d02c      	beq.n	8001ed4 <__aeabi_dsub+0x23c>
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d05b      	beq.n	8001f36 <__aeabi_dsub+0x29e>
 8001e7e:	2d00      	cmp	r5, #0
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x1ec>
 8001e82:	e12c      	b.n	80020de <__aeabi_dsub+0x446>
 8001e84:	465b      	mov	r3, fp
 8001e86:	4666      	mov	r6, ip
 8001e88:	075f      	lsls	r7, r3, #29
 8001e8a:	08d2      	lsrs	r2, r2, #3
 8001e8c:	4317      	orrs	r7, r2
 8001e8e:	08dd      	lsrs	r5, r3, #3
 8001e90:	003b      	movs	r3, r7
 8001e92:	432b      	orrs	r3, r5
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x200>
 8001e96:	e0e2      	b.n	800205e <__aeabi_dsub+0x3c6>
 8001e98:	2480      	movs	r4, #128	@ 0x80
 8001e9a:	0324      	lsls	r4, r4, #12
 8001e9c:	432c      	orrs	r4, r5
 8001e9e:	0324      	lsls	r4, r4, #12
 8001ea0:	4d56      	ldr	r5, [pc, #344]	@ (8001ffc <__aeabi_dsub+0x364>)
 8001ea2:	0b24      	lsrs	r4, r4, #12
 8001ea4:	e08c      	b.n	8001fc0 <__aeabi_dsub+0x328>
 8001ea6:	4659      	mov	r1, fp
 8001ea8:	4311      	orrs	r1, r2
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x216>
 8001eac:	e0d5      	b.n	800205a <__aeabi_dsub+0x3c2>
 8001eae:	1e59      	subs	r1, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dsub+0x21e>
 8001eb4:	e1b9      	b.n	800222a <__aeabi_dsub+0x592>
 8001eb6:	42bb      	cmp	r3, r7
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x224>
 8001eba:	e1b1      	b.n	8002220 <__aeabi_dsub+0x588>
 8001ebc:	2701      	movs	r7, #1
 8001ebe:	000b      	movs	r3, r1
 8001ec0:	2938      	cmp	r1, #56	@ 0x38
 8001ec2:	dd00      	ble.n	8001ec6 <__aeabi_dsub+0x22e>
 8001ec4:	e740      	b.n	8001d48 <__aeabi_dsub+0xb0>
 8001ec6:	e72a      	b.n	8001d1e <__aeabi_dsub+0x86>
 8001ec8:	4661      	mov	r1, ip
 8001eca:	2701      	movs	r7, #1
 8001ecc:	4079      	eors	r1, r7
 8001ece:	468c      	mov	ip, r1
 8001ed0:	4566      	cmp	r6, ip
 8001ed2:	d1d2      	bne.n	8001e7a <__aeabi_dsub+0x1e2>
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x242>
 8001ed8:	e0c5      	b.n	8002066 <__aeabi_dsub+0x3ce>
 8001eda:	2d00      	cmp	r5, #0
 8001edc:	d000      	beq.n	8001ee0 <__aeabi_dsub+0x248>
 8001ede:	e155      	b.n	800218c <__aeabi_dsub+0x4f4>
 8001ee0:	464b      	mov	r3, r9
 8001ee2:	0025      	movs	r5, r4
 8001ee4:	4305      	orrs	r5, r0
 8001ee6:	d100      	bne.n	8001eea <__aeabi_dsub+0x252>
 8001ee8:	e212      	b.n	8002310 <__aeabi_dsub+0x678>
 8001eea:	1e59      	subs	r1, r3, #1
 8001eec:	468c      	mov	ip, r1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x25c>
 8001ef2:	e249      	b.n	8002388 <__aeabi_dsub+0x6f0>
 8001ef4:	4d41      	ldr	r5, [pc, #260]	@ (8001ffc <__aeabi_dsub+0x364>)
 8001ef6:	42ab      	cmp	r3, r5
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x264>
 8001efa:	e28f      	b.n	800241c <__aeabi_dsub+0x784>
 8001efc:	2701      	movs	r7, #1
 8001efe:	2938      	cmp	r1, #56	@ 0x38
 8001f00:	dc11      	bgt.n	8001f26 <__aeabi_dsub+0x28e>
 8001f02:	4663      	mov	r3, ip
 8001f04:	2b1f      	cmp	r3, #31
 8001f06:	dd00      	ble.n	8001f0a <__aeabi_dsub+0x272>
 8001f08:	e25b      	b.n	80023c2 <__aeabi_dsub+0x72a>
 8001f0a:	4661      	mov	r1, ip
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	0027      	movs	r7, r4
 8001f10:	1a5b      	subs	r3, r3, r1
 8001f12:	0005      	movs	r5, r0
 8001f14:	4098      	lsls	r0, r3
 8001f16:	409f      	lsls	r7, r3
 8001f18:	40cd      	lsrs	r5, r1
 8001f1a:	1e43      	subs	r3, r0, #1
 8001f1c:	4198      	sbcs	r0, r3
 8001f1e:	40cc      	lsrs	r4, r1
 8001f20:	432f      	orrs	r7, r5
 8001f22:	4307      	orrs	r7, r0
 8001f24:	44a3      	add	fp, r4
 8001f26:	18bf      	adds	r7, r7, r2
 8001f28:	4297      	cmp	r7, r2
 8001f2a:	4192      	sbcs	r2, r2
 8001f2c:	4252      	negs	r2, r2
 8001f2e:	445a      	add	r2, fp
 8001f30:	0014      	movs	r4, r2
 8001f32:	464d      	mov	r5, r9
 8001f34:	e787      	b.n	8001e46 <__aeabi_dsub+0x1ae>
 8001f36:	4f34      	ldr	r7, [pc, #208]	@ (8002008 <__aeabi_dsub+0x370>)
 8001f38:	1c6b      	adds	r3, r5, #1
 8001f3a:	423b      	tst	r3, r7
 8001f3c:	d000      	beq.n	8001f40 <__aeabi_dsub+0x2a8>
 8001f3e:	e0b6      	b.n	80020ae <__aeabi_dsub+0x416>
 8001f40:	4659      	mov	r1, fp
 8001f42:	0023      	movs	r3, r4
 8001f44:	4311      	orrs	r1, r2
 8001f46:	000f      	movs	r7, r1
 8001f48:	4303      	orrs	r3, r0
 8001f4a:	2d00      	cmp	r5, #0
 8001f4c:	d000      	beq.n	8001f50 <__aeabi_dsub+0x2b8>
 8001f4e:	e126      	b.n	800219e <__aeabi_dsub+0x506>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x2be>
 8001f54:	e1c0      	b.n	80022d8 <__aeabi_dsub+0x640>
 8001f56:	2900      	cmp	r1, #0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x2c4>
 8001f5a:	e0a1      	b.n	80020a0 <__aeabi_dsub+0x408>
 8001f5c:	1a83      	subs	r3, r0, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	465b      	mov	r3, fp
 8001f62:	4540      	cmp	r0, r8
 8001f64:	41ad      	sbcs	r5, r5
 8001f66:	1ae3      	subs	r3, r4, r3
 8001f68:	426d      	negs	r5, r5
 8001f6a:	1b5b      	subs	r3, r3, r5
 8001f6c:	2580      	movs	r5, #128	@ 0x80
 8001f6e:	042d      	lsls	r5, r5, #16
 8001f70:	422b      	tst	r3, r5
 8001f72:	d100      	bne.n	8001f76 <__aeabi_dsub+0x2de>
 8001f74:	e14b      	b.n	800220e <__aeabi_dsub+0x576>
 8001f76:	465b      	mov	r3, fp
 8001f78:	1a10      	subs	r0, r2, r0
 8001f7a:	4282      	cmp	r2, r0
 8001f7c:	4192      	sbcs	r2, r2
 8001f7e:	1b1c      	subs	r4, r3, r4
 8001f80:	0007      	movs	r7, r0
 8001f82:	2601      	movs	r6, #1
 8001f84:	4663      	mov	r3, ip
 8001f86:	4252      	negs	r2, r2
 8001f88:	1aa4      	subs	r4, r4, r2
 8001f8a:	4327      	orrs	r7, r4
 8001f8c:	401e      	ands	r6, r3
 8001f8e:	2f00      	cmp	r7, #0
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dsub+0x2fc>
 8001f92:	e142      	b.n	800221a <__aeabi_dsub+0x582>
 8001f94:	422c      	tst	r4, r5
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x302>
 8001f98:	e26d      	b.n	8002476 <__aeabi_dsub+0x7de>
 8001f9a:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <__aeabi_dsub+0x368>)
 8001f9c:	2501      	movs	r5, #1
 8001f9e:	401c      	ands	r4, r3
 8001fa0:	e71b      	b.n	8001dda <__aeabi_dsub+0x142>
 8001fa2:	42bd      	cmp	r5, r7
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x310>
 8001fa6:	e13b      	b.n	8002220 <__aeabi_dsub+0x588>
 8001fa8:	2701      	movs	r7, #1
 8001faa:	2b38      	cmp	r3, #56	@ 0x38
 8001fac:	dd00      	ble.n	8001fb0 <__aeabi_dsub+0x318>
 8001fae:	e745      	b.n	8001e3c <__aeabi_dsub+0x1a4>
 8001fb0:	2780      	movs	r7, #128	@ 0x80
 8001fb2:	4659      	mov	r1, fp
 8001fb4:	043f      	lsls	r7, r7, #16
 8001fb6:	4339      	orrs	r1, r7
 8001fb8:	468b      	mov	fp, r1
 8001fba:	e72a      	b.n	8001e12 <__aeabi_dsub+0x17a>
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	2700      	movs	r7, #0
 8001fc0:	052d      	lsls	r5, r5, #20
 8001fc2:	4325      	orrs	r5, r4
 8001fc4:	07f6      	lsls	r6, r6, #31
 8001fc6:	4335      	orrs	r5, r6
 8001fc8:	0038      	movs	r0, r7
 8001fca:	0029      	movs	r1, r5
 8001fcc:	b003      	add	sp, #12
 8001fce:	bcf0      	pop	{r4, r5, r6, r7}
 8001fd0:	46bb      	mov	fp, r7
 8001fd2:	46b2      	mov	sl, r6
 8001fd4:	46a9      	mov	r9, r5
 8001fd6:	46a0      	mov	r8, r4
 8001fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fda:	077b      	lsls	r3, r7, #29
 8001fdc:	d004      	beq.n	8001fe8 <__aeabi_dsub+0x350>
 8001fde:	230f      	movs	r3, #15
 8001fe0:	403b      	ands	r3, r7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d000      	beq.n	8001fe8 <__aeabi_dsub+0x350>
 8001fe6:	e6e7      	b.n	8001db8 <__aeabi_dsub+0x120>
 8001fe8:	002b      	movs	r3, r5
 8001fea:	08f8      	lsrs	r0, r7, #3
 8001fec:	4a03      	ldr	r2, [pc, #12]	@ (8001ffc <__aeabi_dsub+0x364>)
 8001fee:	0767      	lsls	r7, r4, #29
 8001ff0:	4307      	orrs	r7, r0
 8001ff2:	08e5      	lsrs	r5, r4, #3
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x362>
 8001ff8:	e74a      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 8001ffa:	e0a5      	b.n	8002148 <__aeabi_dsub+0x4b0>
 8001ffc:	000007ff 	.word	0x000007ff
 8002000:	ff7fffff 	.word	0xff7fffff
 8002004:	fffff801 	.word	0xfffff801
 8002008:	000007fe 	.word	0x000007fe
 800200c:	0038      	movs	r0, r7
 800200e:	f000 fba3 	bl	8002758 <__clzsi2>
 8002012:	0003      	movs	r3, r0
 8002014:	3318      	adds	r3, #24
 8002016:	2b1f      	cmp	r3, #31
 8002018:	dc00      	bgt.n	800201c <__aeabi_dsub+0x384>
 800201a:	e6a7      	b.n	8001d6c <__aeabi_dsub+0xd4>
 800201c:	003a      	movs	r2, r7
 800201e:	3808      	subs	r0, #8
 8002020:	4082      	lsls	r2, r0
 8002022:	429d      	cmp	r5, r3
 8002024:	dd00      	ble.n	8002028 <__aeabi_dsub+0x390>
 8002026:	e08a      	b.n	800213e <__aeabi_dsub+0x4a6>
 8002028:	1b5b      	subs	r3, r3, r5
 800202a:	1c58      	adds	r0, r3, #1
 800202c:	281f      	cmp	r0, #31
 800202e:	dc00      	bgt.n	8002032 <__aeabi_dsub+0x39a>
 8002030:	e1d8      	b.n	80023e4 <__aeabi_dsub+0x74c>
 8002032:	0017      	movs	r7, r2
 8002034:	3b1f      	subs	r3, #31
 8002036:	40df      	lsrs	r7, r3
 8002038:	2820      	cmp	r0, #32
 800203a:	d005      	beq.n	8002048 <__aeabi_dsub+0x3b0>
 800203c:	2340      	movs	r3, #64	@ 0x40
 800203e:	1a1b      	subs	r3, r3, r0
 8002040:	409a      	lsls	r2, r3
 8002042:	1e53      	subs	r3, r2, #1
 8002044:	419a      	sbcs	r2, r3
 8002046:	4317      	orrs	r7, r2
 8002048:	2500      	movs	r5, #0
 800204a:	2f00      	cmp	r7, #0
 800204c:	d100      	bne.n	8002050 <__aeabi_dsub+0x3b8>
 800204e:	e0e5      	b.n	800221c <__aeabi_dsub+0x584>
 8002050:	077b      	lsls	r3, r7, #29
 8002052:	d000      	beq.n	8002056 <__aeabi_dsub+0x3be>
 8002054:	e6ab      	b.n	8001dae <__aeabi_dsub+0x116>
 8002056:	002c      	movs	r4, r5
 8002058:	e7c6      	b.n	8001fe8 <__aeabi_dsub+0x350>
 800205a:	08c0      	lsrs	r0, r0, #3
 800205c:	e7c6      	b.n	8001fec <__aeabi_dsub+0x354>
 800205e:	2700      	movs	r7, #0
 8002060:	2400      	movs	r4, #0
 8002062:	4dd1      	ldr	r5, [pc, #836]	@ (80023a8 <__aeabi_dsub+0x710>)
 8002064:	e7ac      	b.n	8001fc0 <__aeabi_dsub+0x328>
 8002066:	4fd1      	ldr	r7, [pc, #836]	@ (80023ac <__aeabi_dsub+0x714>)
 8002068:	1c6b      	adds	r3, r5, #1
 800206a:	423b      	tst	r3, r7
 800206c:	d171      	bne.n	8002152 <__aeabi_dsub+0x4ba>
 800206e:	0023      	movs	r3, r4
 8002070:	4303      	orrs	r3, r0
 8002072:	2d00      	cmp	r5, #0
 8002074:	d000      	beq.n	8002078 <__aeabi_dsub+0x3e0>
 8002076:	e14e      	b.n	8002316 <__aeabi_dsub+0x67e>
 8002078:	4657      	mov	r7, sl
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x3e8>
 800207e:	e1b5      	b.n	80023ec <__aeabi_dsub+0x754>
 8002080:	2f00      	cmp	r7, #0
 8002082:	d00d      	beq.n	80020a0 <__aeabi_dsub+0x408>
 8002084:	1883      	adds	r3, r0, r2
 8002086:	4283      	cmp	r3, r0
 8002088:	4180      	sbcs	r0, r0
 800208a:	445c      	add	r4, fp
 800208c:	4240      	negs	r0, r0
 800208e:	1824      	adds	r4, r4, r0
 8002090:	0222      	lsls	r2, r4, #8
 8002092:	d500      	bpl.n	8002096 <__aeabi_dsub+0x3fe>
 8002094:	e1c8      	b.n	8002428 <__aeabi_dsub+0x790>
 8002096:	001f      	movs	r7, r3
 8002098:	4698      	mov	r8, r3
 800209a:	4327      	orrs	r7, r4
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x408>
 800209e:	e0bc      	b.n	800221a <__aeabi_dsub+0x582>
 80020a0:	4643      	mov	r3, r8
 80020a2:	0767      	lsls	r7, r4, #29
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	431f      	orrs	r7, r3
 80020a8:	08e5      	lsrs	r5, r4, #3
 80020aa:	2300      	movs	r3, #0
 80020ac:	e04c      	b.n	8002148 <__aeabi_dsub+0x4b0>
 80020ae:	1a83      	subs	r3, r0, r2
 80020b0:	4698      	mov	r8, r3
 80020b2:	465b      	mov	r3, fp
 80020b4:	4540      	cmp	r0, r8
 80020b6:	41bf      	sbcs	r7, r7
 80020b8:	1ae3      	subs	r3, r4, r3
 80020ba:	427f      	negs	r7, r7
 80020bc:	1bdb      	subs	r3, r3, r7
 80020be:	021f      	lsls	r7, r3, #8
 80020c0:	d47c      	bmi.n	80021bc <__aeabi_dsub+0x524>
 80020c2:	4647      	mov	r7, r8
 80020c4:	431f      	orrs	r7, r3
 80020c6:	d100      	bne.n	80020ca <__aeabi_dsub+0x432>
 80020c8:	e0a6      	b.n	8002218 <__aeabi_dsub+0x580>
 80020ca:	001c      	movs	r4, r3
 80020cc:	4647      	mov	r7, r8
 80020ce:	e645      	b.n	8001d5c <__aeabi_dsub+0xc4>
 80020d0:	4cb7      	ldr	r4, [pc, #732]	@ (80023b0 <__aeabi_dsub+0x718>)
 80020d2:	1aed      	subs	r5, r5, r3
 80020d4:	4014      	ands	r4, r2
 80020d6:	077b      	lsls	r3, r7, #29
 80020d8:	d000      	beq.n	80020dc <__aeabi_dsub+0x444>
 80020da:	e780      	b.n	8001fde <__aeabi_dsub+0x346>
 80020dc:	e784      	b.n	8001fe8 <__aeabi_dsub+0x350>
 80020de:	464b      	mov	r3, r9
 80020e0:	0025      	movs	r5, r4
 80020e2:	4305      	orrs	r5, r0
 80020e4:	d066      	beq.n	80021b4 <__aeabi_dsub+0x51c>
 80020e6:	1e5f      	subs	r7, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d100      	bne.n	80020ee <__aeabi_dsub+0x456>
 80020ec:	e0fc      	b.n	80022e8 <__aeabi_dsub+0x650>
 80020ee:	4dae      	ldr	r5, [pc, #696]	@ (80023a8 <__aeabi_dsub+0x710>)
 80020f0:	42ab      	cmp	r3, r5
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x45e>
 80020f4:	e15e      	b.n	80023b4 <__aeabi_dsub+0x71c>
 80020f6:	4666      	mov	r6, ip
 80020f8:	2f38      	cmp	r7, #56	@ 0x38
 80020fa:	dc00      	bgt.n	80020fe <__aeabi_dsub+0x466>
 80020fc:	e0b4      	b.n	8002268 <__aeabi_dsub+0x5d0>
 80020fe:	2001      	movs	r0, #1
 8002100:	1a17      	subs	r7, r2, r0
 8002102:	42ba      	cmp	r2, r7
 8002104:	4192      	sbcs	r2, r2
 8002106:	465b      	mov	r3, fp
 8002108:	4252      	negs	r2, r2
 800210a:	464d      	mov	r5, r9
 800210c:	1a9c      	subs	r4, r3, r2
 800210e:	e620      	b.n	8001d52 <__aeabi_dsub+0xba>
 8002110:	0767      	lsls	r7, r4, #29
 8002112:	08c0      	lsrs	r0, r0, #3
 8002114:	4307      	orrs	r7, r0
 8002116:	08e5      	lsrs	r5, r4, #3
 8002118:	e6ba      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 800211a:	001f      	movs	r7, r3
 800211c:	4659      	mov	r1, fp
 800211e:	3f20      	subs	r7, #32
 8002120:	40f9      	lsrs	r1, r7
 8002122:	000f      	movs	r7, r1
 8002124:	2b20      	cmp	r3, #32
 8002126:	d005      	beq.n	8002134 <__aeabi_dsub+0x49c>
 8002128:	2140      	movs	r1, #64	@ 0x40
 800212a:	1acb      	subs	r3, r1, r3
 800212c:	4659      	mov	r1, fp
 800212e:	4099      	lsls	r1, r3
 8002130:	430a      	orrs	r2, r1
 8002132:	4692      	mov	sl, r2
 8002134:	4653      	mov	r3, sl
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	4193      	sbcs	r3, r2
 800213a:	431f      	orrs	r7, r3
 800213c:	e604      	b.n	8001d48 <__aeabi_dsub+0xb0>
 800213e:	1aeb      	subs	r3, r5, r3
 8002140:	4d9b      	ldr	r5, [pc, #620]	@ (80023b0 <__aeabi_dsub+0x718>)
 8002142:	4015      	ands	r5, r2
 8002144:	076f      	lsls	r7, r5, #29
 8002146:	08ed      	lsrs	r5, r5, #3
 8002148:	032c      	lsls	r4, r5, #12
 800214a:	055d      	lsls	r5, r3, #21
 800214c:	0b24      	lsrs	r4, r4, #12
 800214e:	0d6d      	lsrs	r5, r5, #21
 8002150:	e736      	b.n	8001fc0 <__aeabi_dsub+0x328>
 8002152:	4d95      	ldr	r5, [pc, #596]	@ (80023a8 <__aeabi_dsub+0x710>)
 8002154:	42ab      	cmp	r3, r5
 8002156:	d100      	bne.n	800215a <__aeabi_dsub+0x4c2>
 8002158:	e0d6      	b.n	8002308 <__aeabi_dsub+0x670>
 800215a:	1882      	adds	r2, r0, r2
 800215c:	0021      	movs	r1, r4
 800215e:	4282      	cmp	r2, r0
 8002160:	4180      	sbcs	r0, r0
 8002162:	4459      	add	r1, fp
 8002164:	4240      	negs	r0, r0
 8002166:	1808      	adds	r0, r1, r0
 8002168:	07c7      	lsls	r7, r0, #31
 800216a:	0852      	lsrs	r2, r2, #1
 800216c:	4317      	orrs	r7, r2
 800216e:	0844      	lsrs	r4, r0, #1
 8002170:	0752      	lsls	r2, r2, #29
 8002172:	d400      	bmi.n	8002176 <__aeabi_dsub+0x4de>
 8002174:	e185      	b.n	8002482 <__aeabi_dsub+0x7ea>
 8002176:	220f      	movs	r2, #15
 8002178:	001d      	movs	r5, r3
 800217a:	403a      	ands	r2, r7
 800217c:	2a04      	cmp	r2, #4
 800217e:	d000      	beq.n	8002182 <__aeabi_dsub+0x4ea>
 8002180:	e61a      	b.n	8001db8 <__aeabi_dsub+0x120>
 8002182:	08ff      	lsrs	r7, r7, #3
 8002184:	0764      	lsls	r4, r4, #29
 8002186:	4327      	orrs	r7, r4
 8002188:	0905      	lsrs	r5, r0, #4
 800218a:	e7dd      	b.n	8002148 <__aeabi_dsub+0x4b0>
 800218c:	465b      	mov	r3, fp
 800218e:	08d2      	lsrs	r2, r2, #3
 8002190:	075f      	lsls	r7, r3, #29
 8002192:	4317      	orrs	r7, r2
 8002194:	08dd      	lsrs	r5, r3, #3
 8002196:	e67b      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 8002198:	2700      	movs	r7, #0
 800219a:	2400      	movs	r4, #0
 800219c:	e710      	b.n	8001fc0 <__aeabi_dsub+0x328>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d000      	beq.n	80021a4 <__aeabi_dsub+0x50c>
 80021a2:	e0d6      	b.n	8002352 <__aeabi_dsub+0x6ba>
 80021a4:	2900      	cmp	r1, #0
 80021a6:	d000      	beq.n	80021aa <__aeabi_dsub+0x512>
 80021a8:	e12f      	b.n	800240a <__aeabi_dsub+0x772>
 80021aa:	2480      	movs	r4, #128	@ 0x80
 80021ac:	2600      	movs	r6, #0
 80021ae:	4d7e      	ldr	r5, [pc, #504]	@ (80023a8 <__aeabi_dsub+0x710>)
 80021b0:	0324      	lsls	r4, r4, #12
 80021b2:	e705      	b.n	8001fc0 <__aeabi_dsub+0x328>
 80021b4:	4666      	mov	r6, ip
 80021b6:	465c      	mov	r4, fp
 80021b8:	08d0      	lsrs	r0, r2, #3
 80021ba:	e717      	b.n	8001fec <__aeabi_dsub+0x354>
 80021bc:	465b      	mov	r3, fp
 80021be:	1a17      	subs	r7, r2, r0
 80021c0:	42ba      	cmp	r2, r7
 80021c2:	4192      	sbcs	r2, r2
 80021c4:	1b1c      	subs	r4, r3, r4
 80021c6:	2601      	movs	r6, #1
 80021c8:	4663      	mov	r3, ip
 80021ca:	4252      	negs	r2, r2
 80021cc:	1aa4      	subs	r4, r4, r2
 80021ce:	401e      	ands	r6, r3
 80021d0:	e5c4      	b.n	8001d5c <__aeabi_dsub+0xc4>
 80021d2:	1883      	adds	r3, r0, r2
 80021d4:	4283      	cmp	r3, r0
 80021d6:	4180      	sbcs	r0, r0
 80021d8:	445c      	add	r4, fp
 80021da:	4240      	negs	r0, r0
 80021dc:	1825      	adds	r5, r4, r0
 80021de:	022a      	lsls	r2, r5, #8
 80021e0:	d400      	bmi.n	80021e4 <__aeabi_dsub+0x54c>
 80021e2:	e0da      	b.n	800239a <__aeabi_dsub+0x702>
 80021e4:	4a72      	ldr	r2, [pc, #456]	@ (80023b0 <__aeabi_dsub+0x718>)
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	4015      	ands	r5, r2
 80021ea:	07ea      	lsls	r2, r5, #31
 80021ec:	431a      	orrs	r2, r3
 80021ee:	0869      	lsrs	r1, r5, #1
 80021f0:	075b      	lsls	r3, r3, #29
 80021f2:	d400      	bmi.n	80021f6 <__aeabi_dsub+0x55e>
 80021f4:	e14a      	b.n	800248c <__aeabi_dsub+0x7f4>
 80021f6:	230f      	movs	r3, #15
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d100      	bne.n	8002200 <__aeabi_dsub+0x568>
 80021fe:	e0fc      	b.n	80023fa <__aeabi_dsub+0x762>
 8002200:	1d17      	adds	r7, r2, #4
 8002202:	4297      	cmp	r7, r2
 8002204:	41a4      	sbcs	r4, r4
 8002206:	4264      	negs	r4, r4
 8002208:	2502      	movs	r5, #2
 800220a:	1864      	adds	r4, r4, r1
 800220c:	e6ec      	b.n	8001fe8 <__aeabi_dsub+0x350>
 800220e:	4647      	mov	r7, r8
 8002210:	001c      	movs	r4, r3
 8002212:	431f      	orrs	r7, r3
 8002214:	d000      	beq.n	8002218 <__aeabi_dsub+0x580>
 8002216:	e743      	b.n	80020a0 <__aeabi_dsub+0x408>
 8002218:	2600      	movs	r6, #0
 800221a:	2500      	movs	r5, #0
 800221c:	2400      	movs	r4, #0
 800221e:	e6cf      	b.n	8001fc0 <__aeabi_dsub+0x328>
 8002220:	08c0      	lsrs	r0, r0, #3
 8002222:	0767      	lsls	r7, r4, #29
 8002224:	4307      	orrs	r7, r0
 8002226:	08e5      	lsrs	r5, r4, #3
 8002228:	e632      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 800222a:	1a87      	subs	r7, r0, r2
 800222c:	465b      	mov	r3, fp
 800222e:	42b8      	cmp	r0, r7
 8002230:	4180      	sbcs	r0, r0
 8002232:	1ae4      	subs	r4, r4, r3
 8002234:	4240      	negs	r0, r0
 8002236:	1a24      	subs	r4, r4, r0
 8002238:	0223      	lsls	r3, r4, #8
 800223a:	d428      	bmi.n	800228e <__aeabi_dsub+0x5f6>
 800223c:	0763      	lsls	r3, r4, #29
 800223e:	08ff      	lsrs	r7, r7, #3
 8002240:	431f      	orrs	r7, r3
 8002242:	08e5      	lsrs	r5, r4, #3
 8002244:	2301      	movs	r3, #1
 8002246:	e77f      	b.n	8002148 <__aeabi_dsub+0x4b0>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x5b6>
 800224c:	e673      	b.n	8001f36 <__aeabi_dsub+0x29e>
 800224e:	464b      	mov	r3, r9
 8002250:	1b5f      	subs	r7, r3, r5
 8002252:	003b      	movs	r3, r7
 8002254:	2d00      	cmp	r5, #0
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x5c2>
 8002258:	e742      	b.n	80020e0 <__aeabi_dsub+0x448>
 800225a:	2f38      	cmp	r7, #56	@ 0x38
 800225c:	dd00      	ble.n	8002260 <__aeabi_dsub+0x5c8>
 800225e:	e0ec      	b.n	800243a <__aeabi_dsub+0x7a2>
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	000e      	movs	r6, r1
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	431c      	orrs	r4, r3
 8002268:	2f1f      	cmp	r7, #31
 800226a:	dc25      	bgt.n	80022b8 <__aeabi_dsub+0x620>
 800226c:	2520      	movs	r5, #32
 800226e:	0023      	movs	r3, r4
 8002270:	1bed      	subs	r5, r5, r7
 8002272:	0001      	movs	r1, r0
 8002274:	40a8      	lsls	r0, r5
 8002276:	40ab      	lsls	r3, r5
 8002278:	40f9      	lsrs	r1, r7
 800227a:	1e45      	subs	r5, r0, #1
 800227c:	41a8      	sbcs	r0, r5
 800227e:	430b      	orrs	r3, r1
 8002280:	40fc      	lsrs	r4, r7
 8002282:	4318      	orrs	r0, r3
 8002284:	465b      	mov	r3, fp
 8002286:	1b1b      	subs	r3, r3, r4
 8002288:	469b      	mov	fp, r3
 800228a:	e739      	b.n	8002100 <__aeabi_dsub+0x468>
 800228c:	4666      	mov	r6, ip
 800228e:	2501      	movs	r5, #1
 8002290:	e562      	b.n	8001d58 <__aeabi_dsub+0xc0>
 8002292:	001f      	movs	r7, r3
 8002294:	4659      	mov	r1, fp
 8002296:	3f20      	subs	r7, #32
 8002298:	40f9      	lsrs	r1, r7
 800229a:	468c      	mov	ip, r1
 800229c:	2b20      	cmp	r3, #32
 800229e:	d005      	beq.n	80022ac <__aeabi_dsub+0x614>
 80022a0:	2740      	movs	r7, #64	@ 0x40
 80022a2:	4659      	mov	r1, fp
 80022a4:	1afb      	subs	r3, r7, r3
 80022a6:	4099      	lsls	r1, r3
 80022a8:	430a      	orrs	r2, r1
 80022aa:	4692      	mov	sl, r2
 80022ac:	4657      	mov	r7, sl
 80022ae:	1e7b      	subs	r3, r7, #1
 80022b0:	419f      	sbcs	r7, r3
 80022b2:	4663      	mov	r3, ip
 80022b4:	431f      	orrs	r7, r3
 80022b6:	e5c1      	b.n	8001e3c <__aeabi_dsub+0x1a4>
 80022b8:	003b      	movs	r3, r7
 80022ba:	0025      	movs	r5, r4
 80022bc:	3b20      	subs	r3, #32
 80022be:	40dd      	lsrs	r5, r3
 80022c0:	2f20      	cmp	r7, #32
 80022c2:	d004      	beq.n	80022ce <__aeabi_dsub+0x636>
 80022c4:	2340      	movs	r3, #64	@ 0x40
 80022c6:	1bdb      	subs	r3, r3, r7
 80022c8:	409c      	lsls	r4, r3
 80022ca:	4320      	orrs	r0, r4
 80022cc:	4680      	mov	r8, r0
 80022ce:	4640      	mov	r0, r8
 80022d0:	1e43      	subs	r3, r0, #1
 80022d2:	4198      	sbcs	r0, r3
 80022d4:	4328      	orrs	r0, r5
 80022d6:	e713      	b.n	8002100 <__aeabi_dsub+0x468>
 80022d8:	2900      	cmp	r1, #0
 80022da:	d09d      	beq.n	8002218 <__aeabi_dsub+0x580>
 80022dc:	2601      	movs	r6, #1
 80022de:	4663      	mov	r3, ip
 80022e0:	465c      	mov	r4, fp
 80022e2:	4690      	mov	r8, r2
 80022e4:	401e      	ands	r6, r3
 80022e6:	e6db      	b.n	80020a0 <__aeabi_dsub+0x408>
 80022e8:	1a17      	subs	r7, r2, r0
 80022ea:	465b      	mov	r3, fp
 80022ec:	42ba      	cmp	r2, r7
 80022ee:	4192      	sbcs	r2, r2
 80022f0:	1b1c      	subs	r4, r3, r4
 80022f2:	4252      	negs	r2, r2
 80022f4:	1aa4      	subs	r4, r4, r2
 80022f6:	0223      	lsls	r3, r4, #8
 80022f8:	d4c8      	bmi.n	800228c <__aeabi_dsub+0x5f4>
 80022fa:	0763      	lsls	r3, r4, #29
 80022fc:	08ff      	lsrs	r7, r7, #3
 80022fe:	431f      	orrs	r7, r3
 8002300:	4666      	mov	r6, ip
 8002302:	2301      	movs	r3, #1
 8002304:	08e5      	lsrs	r5, r4, #3
 8002306:	e71f      	b.n	8002148 <__aeabi_dsub+0x4b0>
 8002308:	001d      	movs	r5, r3
 800230a:	2400      	movs	r4, #0
 800230c:	2700      	movs	r7, #0
 800230e:	e657      	b.n	8001fc0 <__aeabi_dsub+0x328>
 8002310:	465c      	mov	r4, fp
 8002312:	08d0      	lsrs	r0, r2, #3
 8002314:	e66a      	b.n	8001fec <__aeabi_dsub+0x354>
 8002316:	2b00      	cmp	r3, #0
 8002318:	d100      	bne.n	800231c <__aeabi_dsub+0x684>
 800231a:	e737      	b.n	800218c <__aeabi_dsub+0x4f4>
 800231c:	4653      	mov	r3, sl
 800231e:	08c0      	lsrs	r0, r0, #3
 8002320:	0767      	lsls	r7, r4, #29
 8002322:	4307      	orrs	r7, r0
 8002324:	08e5      	lsrs	r5, r4, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x694>
 800232a:	e5b1      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	031b      	lsls	r3, r3, #12
 8002330:	421d      	tst	r5, r3
 8002332:	d008      	beq.n	8002346 <__aeabi_dsub+0x6ae>
 8002334:	4659      	mov	r1, fp
 8002336:	08c8      	lsrs	r0, r1, #3
 8002338:	4218      	tst	r0, r3
 800233a:	d104      	bne.n	8002346 <__aeabi_dsub+0x6ae>
 800233c:	08d2      	lsrs	r2, r2, #3
 800233e:	0749      	lsls	r1, r1, #29
 8002340:	430a      	orrs	r2, r1
 8002342:	0017      	movs	r7, r2
 8002344:	0005      	movs	r5, r0
 8002346:	0f7b      	lsrs	r3, r7, #29
 8002348:	00ff      	lsls	r7, r7, #3
 800234a:	08ff      	lsrs	r7, r7, #3
 800234c:	075b      	lsls	r3, r3, #29
 800234e:	431f      	orrs	r7, r3
 8002350:	e59e      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 8002352:	08c0      	lsrs	r0, r0, #3
 8002354:	0763      	lsls	r3, r4, #29
 8002356:	4318      	orrs	r0, r3
 8002358:	08e5      	lsrs	r5, r4, #3
 800235a:	2900      	cmp	r1, #0
 800235c:	d053      	beq.n	8002406 <__aeabi_dsub+0x76e>
 800235e:	2380      	movs	r3, #128	@ 0x80
 8002360:	031b      	lsls	r3, r3, #12
 8002362:	421d      	tst	r5, r3
 8002364:	d00a      	beq.n	800237c <__aeabi_dsub+0x6e4>
 8002366:	4659      	mov	r1, fp
 8002368:	08cc      	lsrs	r4, r1, #3
 800236a:	421c      	tst	r4, r3
 800236c:	d106      	bne.n	800237c <__aeabi_dsub+0x6e4>
 800236e:	2601      	movs	r6, #1
 8002370:	4663      	mov	r3, ip
 8002372:	0025      	movs	r5, r4
 8002374:	08d0      	lsrs	r0, r2, #3
 8002376:	0749      	lsls	r1, r1, #29
 8002378:	4308      	orrs	r0, r1
 800237a:	401e      	ands	r6, r3
 800237c:	0f47      	lsrs	r7, r0, #29
 800237e:	00c0      	lsls	r0, r0, #3
 8002380:	08c0      	lsrs	r0, r0, #3
 8002382:	077f      	lsls	r7, r7, #29
 8002384:	4307      	orrs	r7, r0
 8002386:	e583      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 8002388:	1883      	adds	r3, r0, r2
 800238a:	4293      	cmp	r3, r2
 800238c:	4192      	sbcs	r2, r2
 800238e:	445c      	add	r4, fp
 8002390:	4252      	negs	r2, r2
 8002392:	18a5      	adds	r5, r4, r2
 8002394:	022a      	lsls	r2, r5, #8
 8002396:	d500      	bpl.n	800239a <__aeabi_dsub+0x702>
 8002398:	e724      	b.n	80021e4 <__aeabi_dsub+0x54c>
 800239a:	076f      	lsls	r7, r5, #29
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	431f      	orrs	r7, r3
 80023a0:	08ed      	lsrs	r5, r5, #3
 80023a2:	2301      	movs	r3, #1
 80023a4:	e6d0      	b.n	8002148 <__aeabi_dsub+0x4b0>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	000007ff 	.word	0x000007ff
 80023ac:	000007fe 	.word	0x000007fe
 80023b0:	ff7fffff 	.word	0xff7fffff
 80023b4:	465b      	mov	r3, fp
 80023b6:	08d2      	lsrs	r2, r2, #3
 80023b8:	075f      	lsls	r7, r3, #29
 80023ba:	4666      	mov	r6, ip
 80023bc:	4317      	orrs	r7, r2
 80023be:	08dd      	lsrs	r5, r3, #3
 80023c0:	e566      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 80023c2:	0025      	movs	r5, r4
 80023c4:	3b20      	subs	r3, #32
 80023c6:	40dd      	lsrs	r5, r3
 80023c8:	4663      	mov	r3, ip
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d005      	beq.n	80023da <__aeabi_dsub+0x742>
 80023ce:	2340      	movs	r3, #64	@ 0x40
 80023d0:	4661      	mov	r1, ip
 80023d2:	1a5b      	subs	r3, r3, r1
 80023d4:	409c      	lsls	r4, r3
 80023d6:	4320      	orrs	r0, r4
 80023d8:	4680      	mov	r8, r0
 80023da:	4647      	mov	r7, r8
 80023dc:	1e7b      	subs	r3, r7, #1
 80023de:	419f      	sbcs	r7, r3
 80023e0:	432f      	orrs	r7, r5
 80023e2:	e5a0      	b.n	8001f26 <__aeabi_dsub+0x28e>
 80023e4:	2120      	movs	r1, #32
 80023e6:	2700      	movs	r7, #0
 80023e8:	1a09      	subs	r1, r1, r0
 80023ea:	e4d2      	b.n	8001d92 <__aeabi_dsub+0xfa>
 80023ec:	2f00      	cmp	r7, #0
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dsub+0x75a>
 80023f0:	e713      	b.n	800221a <__aeabi_dsub+0x582>
 80023f2:	465c      	mov	r4, fp
 80023f4:	0017      	movs	r7, r2
 80023f6:	2500      	movs	r5, #0
 80023f8:	e5f6      	b.n	8001fe8 <__aeabi_dsub+0x350>
 80023fa:	08d7      	lsrs	r7, r2, #3
 80023fc:	0749      	lsls	r1, r1, #29
 80023fe:	2302      	movs	r3, #2
 8002400:	430f      	orrs	r7, r1
 8002402:	092d      	lsrs	r5, r5, #4
 8002404:	e6a0      	b.n	8002148 <__aeabi_dsub+0x4b0>
 8002406:	0007      	movs	r7, r0
 8002408:	e542      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 800240a:	465b      	mov	r3, fp
 800240c:	2601      	movs	r6, #1
 800240e:	075f      	lsls	r7, r3, #29
 8002410:	08dd      	lsrs	r5, r3, #3
 8002412:	4663      	mov	r3, ip
 8002414:	08d2      	lsrs	r2, r2, #3
 8002416:	4317      	orrs	r7, r2
 8002418:	401e      	ands	r6, r3
 800241a:	e539      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 800241c:	465b      	mov	r3, fp
 800241e:	08d2      	lsrs	r2, r2, #3
 8002420:	075f      	lsls	r7, r3, #29
 8002422:	4317      	orrs	r7, r2
 8002424:	08dd      	lsrs	r5, r3, #3
 8002426:	e533      	b.n	8001e90 <__aeabi_dsub+0x1f8>
 8002428:	4a1e      	ldr	r2, [pc, #120]	@ (80024a4 <__aeabi_dsub+0x80c>)
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	4022      	ands	r2, r4
 800242e:	0757      	lsls	r7, r2, #29
 8002430:	0252      	lsls	r2, r2, #9
 8002432:	2501      	movs	r5, #1
 8002434:	431f      	orrs	r7, r3
 8002436:	0b14      	lsrs	r4, r2, #12
 8002438:	e5c2      	b.n	8001fc0 <__aeabi_dsub+0x328>
 800243a:	000e      	movs	r6, r1
 800243c:	2001      	movs	r0, #1
 800243e:	e65f      	b.n	8002100 <__aeabi_dsub+0x468>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <__aeabi_dsub+0x7c8>
 8002444:	464b      	mov	r3, r9
 8002446:	1b5b      	subs	r3, r3, r5
 8002448:	469c      	mov	ip, r3
 800244a:	2d00      	cmp	r5, #0
 800244c:	d100      	bne.n	8002450 <__aeabi_dsub+0x7b8>
 800244e:	e548      	b.n	8001ee2 <__aeabi_dsub+0x24a>
 8002450:	2701      	movs	r7, #1
 8002452:	2b38      	cmp	r3, #56	@ 0x38
 8002454:	dd00      	ble.n	8002458 <__aeabi_dsub+0x7c0>
 8002456:	e566      	b.n	8001f26 <__aeabi_dsub+0x28e>
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	041b      	lsls	r3, r3, #16
 800245c:	431c      	orrs	r4, r3
 800245e:	e550      	b.n	8001f02 <__aeabi_dsub+0x26a>
 8002460:	1c6b      	adds	r3, r5, #1
 8002462:	4d11      	ldr	r5, [pc, #68]	@ (80024a8 <__aeabi_dsub+0x810>)
 8002464:	422b      	tst	r3, r5
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x7d2>
 8002468:	e673      	b.n	8002152 <__aeabi_dsub+0x4ba>
 800246a:	4659      	mov	r1, fp
 800246c:	0023      	movs	r3, r4
 800246e:	4311      	orrs	r1, r2
 8002470:	468a      	mov	sl, r1
 8002472:	4303      	orrs	r3, r0
 8002474:	e600      	b.n	8002078 <__aeabi_dsub+0x3e0>
 8002476:	0767      	lsls	r7, r4, #29
 8002478:	08c0      	lsrs	r0, r0, #3
 800247a:	2300      	movs	r3, #0
 800247c:	4307      	orrs	r7, r0
 800247e:	08e5      	lsrs	r5, r4, #3
 8002480:	e662      	b.n	8002148 <__aeabi_dsub+0x4b0>
 8002482:	0764      	lsls	r4, r4, #29
 8002484:	08ff      	lsrs	r7, r7, #3
 8002486:	4327      	orrs	r7, r4
 8002488:	0905      	lsrs	r5, r0, #4
 800248a:	e65d      	b.n	8002148 <__aeabi_dsub+0x4b0>
 800248c:	08d2      	lsrs	r2, r2, #3
 800248e:	0749      	lsls	r1, r1, #29
 8002490:	4311      	orrs	r1, r2
 8002492:	000f      	movs	r7, r1
 8002494:	2302      	movs	r3, #2
 8002496:	092d      	lsrs	r5, r5, #4
 8002498:	e656      	b.n	8002148 <__aeabi_dsub+0x4b0>
 800249a:	0007      	movs	r7, r0
 800249c:	e5a4      	b.n	8001fe8 <__aeabi_dsub+0x350>
 800249e:	0038      	movs	r0, r7
 80024a0:	e48f      	b.n	8001dc2 <__aeabi_dsub+0x12a>
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	ff7fffff 	.word	0xff7fffff
 80024a8:	000007fe 	.word	0x000007fe

080024ac <__aeabi_dcmpun>:
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	46c6      	mov	lr, r8
 80024b0:	031e      	lsls	r6, r3, #12
 80024b2:	0b36      	lsrs	r6, r6, #12
 80024b4:	46b0      	mov	r8, r6
 80024b6:	4e0d      	ldr	r6, [pc, #52]	@ (80024ec <__aeabi_dcmpun+0x40>)
 80024b8:	030c      	lsls	r4, r1, #12
 80024ba:	004d      	lsls	r5, r1, #1
 80024bc:	005f      	lsls	r7, r3, #1
 80024be:	b500      	push	{lr}
 80024c0:	0b24      	lsrs	r4, r4, #12
 80024c2:	0d6d      	lsrs	r5, r5, #21
 80024c4:	0d7f      	lsrs	r7, r7, #21
 80024c6:	42b5      	cmp	r5, r6
 80024c8:	d00b      	beq.n	80024e2 <__aeabi_dcmpun+0x36>
 80024ca:	4908      	ldr	r1, [pc, #32]	@ (80024ec <__aeabi_dcmpun+0x40>)
 80024cc:	2000      	movs	r0, #0
 80024ce:	428f      	cmp	r7, r1
 80024d0:	d104      	bne.n	80024dc <__aeabi_dcmpun+0x30>
 80024d2:	4646      	mov	r6, r8
 80024d4:	4316      	orrs	r6, r2
 80024d6:	0030      	movs	r0, r6
 80024d8:	1e43      	subs	r3, r0, #1
 80024da:	4198      	sbcs	r0, r3
 80024dc:	bc80      	pop	{r7}
 80024de:	46b8      	mov	r8, r7
 80024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e2:	4304      	orrs	r4, r0
 80024e4:	2001      	movs	r0, #1
 80024e6:	2c00      	cmp	r4, #0
 80024e8:	d1f8      	bne.n	80024dc <__aeabi_dcmpun+0x30>
 80024ea:	e7ee      	b.n	80024ca <__aeabi_dcmpun+0x1e>
 80024ec:	000007ff 	.word	0x000007ff

080024f0 <__aeabi_d2iz>:
 80024f0:	000b      	movs	r3, r1
 80024f2:	0002      	movs	r2, r0
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	4d16      	ldr	r5, [pc, #88]	@ (8002550 <__aeabi_d2iz+0x60>)
 80024f8:	030c      	lsls	r4, r1, #12
 80024fa:	b082      	sub	sp, #8
 80024fc:	0049      	lsls	r1, r1, #1
 80024fe:	2000      	movs	r0, #0
 8002500:	9200      	str	r2, [sp, #0]
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	0b24      	lsrs	r4, r4, #12
 8002506:	0d49      	lsrs	r1, r1, #21
 8002508:	0fde      	lsrs	r6, r3, #31
 800250a:	42a9      	cmp	r1, r5
 800250c:	dd04      	ble.n	8002518 <__aeabi_d2iz+0x28>
 800250e:	4811      	ldr	r0, [pc, #68]	@ (8002554 <__aeabi_d2iz+0x64>)
 8002510:	4281      	cmp	r1, r0
 8002512:	dd03      	ble.n	800251c <__aeabi_d2iz+0x2c>
 8002514:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <__aeabi_d2iz+0x68>)
 8002516:	18f0      	adds	r0, r6, r3
 8002518:	b002      	add	sp, #8
 800251a:	bd70      	pop	{r4, r5, r6, pc}
 800251c:	2080      	movs	r0, #128	@ 0x80
 800251e:	0340      	lsls	r0, r0, #13
 8002520:	4320      	orrs	r0, r4
 8002522:	4c0e      	ldr	r4, [pc, #56]	@ (800255c <__aeabi_d2iz+0x6c>)
 8002524:	1a64      	subs	r4, r4, r1
 8002526:	2c1f      	cmp	r4, #31
 8002528:	dd08      	ble.n	800253c <__aeabi_d2iz+0x4c>
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <__aeabi_d2iz+0x70>)
 800252c:	1a5b      	subs	r3, r3, r1
 800252e:	40d8      	lsrs	r0, r3
 8002530:	0003      	movs	r3, r0
 8002532:	4258      	negs	r0, r3
 8002534:	2e00      	cmp	r6, #0
 8002536:	d1ef      	bne.n	8002518 <__aeabi_d2iz+0x28>
 8002538:	0018      	movs	r0, r3
 800253a:	e7ed      	b.n	8002518 <__aeabi_d2iz+0x28>
 800253c:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <__aeabi_d2iz+0x74>)
 800253e:	9a00      	ldr	r2, [sp, #0]
 8002540:	469c      	mov	ip, r3
 8002542:	0003      	movs	r3, r0
 8002544:	4461      	add	r1, ip
 8002546:	408b      	lsls	r3, r1
 8002548:	40e2      	lsrs	r2, r4
 800254a:	4313      	orrs	r3, r2
 800254c:	e7f1      	b.n	8002532 <__aeabi_d2iz+0x42>
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	000003fe 	.word	0x000003fe
 8002554:	0000041d 	.word	0x0000041d
 8002558:	7fffffff 	.word	0x7fffffff
 800255c:	00000433 	.word	0x00000433
 8002560:	00000413 	.word	0x00000413
 8002564:	fffffbed 	.word	0xfffffbed

08002568 <__aeabi_i2d>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	2800      	cmp	r0, #0
 800256c:	d016      	beq.n	800259c <__aeabi_i2d+0x34>
 800256e:	17c3      	asrs	r3, r0, #31
 8002570:	18c5      	adds	r5, r0, r3
 8002572:	405d      	eors	r5, r3
 8002574:	0fc4      	lsrs	r4, r0, #31
 8002576:	0028      	movs	r0, r5
 8002578:	f000 f8ee 	bl	8002758 <__clzsi2>
 800257c:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <__aeabi_i2d+0x58>)
 800257e:	1a1b      	subs	r3, r3, r0
 8002580:	055b      	lsls	r3, r3, #21
 8002582:	0d5b      	lsrs	r3, r3, #21
 8002584:	280a      	cmp	r0, #10
 8002586:	dc14      	bgt.n	80025b2 <__aeabi_i2d+0x4a>
 8002588:	0002      	movs	r2, r0
 800258a:	002e      	movs	r6, r5
 800258c:	3215      	adds	r2, #21
 800258e:	4096      	lsls	r6, r2
 8002590:	220b      	movs	r2, #11
 8002592:	1a12      	subs	r2, r2, r0
 8002594:	40d5      	lsrs	r5, r2
 8002596:	032d      	lsls	r5, r5, #12
 8002598:	0b2d      	lsrs	r5, r5, #12
 800259a:	e003      	b.n	80025a4 <__aeabi_i2d+0x3c>
 800259c:	2400      	movs	r4, #0
 800259e:	2300      	movs	r3, #0
 80025a0:	2500      	movs	r5, #0
 80025a2:	2600      	movs	r6, #0
 80025a4:	051b      	lsls	r3, r3, #20
 80025a6:	432b      	orrs	r3, r5
 80025a8:	07e4      	lsls	r4, r4, #31
 80025aa:	4323      	orrs	r3, r4
 80025ac:	0030      	movs	r0, r6
 80025ae:	0019      	movs	r1, r3
 80025b0:	bd70      	pop	{r4, r5, r6, pc}
 80025b2:	380b      	subs	r0, #11
 80025b4:	4085      	lsls	r5, r0
 80025b6:	032d      	lsls	r5, r5, #12
 80025b8:	2600      	movs	r6, #0
 80025ba:	0b2d      	lsrs	r5, r5, #12
 80025bc:	e7f2      	b.n	80025a4 <__aeabi_i2d+0x3c>
 80025be:	46c0      	nop			@ (mov r8, r8)
 80025c0:	0000041e 	.word	0x0000041e

080025c4 <__aeabi_f2d>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	0242      	lsls	r2, r0, #9
 80025c8:	0043      	lsls	r3, r0, #1
 80025ca:	0fc4      	lsrs	r4, r0, #31
 80025cc:	20fe      	movs	r0, #254	@ 0xfe
 80025ce:	0e1b      	lsrs	r3, r3, #24
 80025d0:	1c59      	adds	r1, r3, #1
 80025d2:	0a55      	lsrs	r5, r2, #9
 80025d4:	4208      	tst	r0, r1
 80025d6:	d00c      	beq.n	80025f2 <__aeabi_f2d+0x2e>
 80025d8:	21e0      	movs	r1, #224	@ 0xe0
 80025da:	0089      	lsls	r1, r1, #2
 80025dc:	468c      	mov	ip, r1
 80025de:	076d      	lsls	r5, r5, #29
 80025e0:	0b12      	lsrs	r2, r2, #12
 80025e2:	4463      	add	r3, ip
 80025e4:	051b      	lsls	r3, r3, #20
 80025e6:	4313      	orrs	r3, r2
 80025e8:	07e4      	lsls	r4, r4, #31
 80025ea:	4323      	orrs	r3, r4
 80025ec:	0028      	movs	r0, r5
 80025ee:	0019      	movs	r1, r3
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d114      	bne.n	8002620 <__aeabi_f2d+0x5c>
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	d01b      	beq.n	8002632 <__aeabi_f2d+0x6e>
 80025fa:	0028      	movs	r0, r5
 80025fc:	f000 f8ac 	bl	8002758 <__clzsi2>
 8002600:	280a      	cmp	r0, #10
 8002602:	dc1c      	bgt.n	800263e <__aeabi_f2d+0x7a>
 8002604:	230b      	movs	r3, #11
 8002606:	002a      	movs	r2, r5
 8002608:	1a1b      	subs	r3, r3, r0
 800260a:	40da      	lsrs	r2, r3
 800260c:	0003      	movs	r3, r0
 800260e:	3315      	adds	r3, #21
 8002610:	409d      	lsls	r5, r3
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <__aeabi_f2d+0x88>)
 8002614:	0312      	lsls	r2, r2, #12
 8002616:	1a1b      	subs	r3, r3, r0
 8002618:	055b      	lsls	r3, r3, #21
 800261a:	0b12      	lsrs	r2, r2, #12
 800261c:	0d5b      	lsrs	r3, r3, #21
 800261e:	e7e1      	b.n	80025e4 <__aeabi_f2d+0x20>
 8002620:	2d00      	cmp	r5, #0
 8002622:	d009      	beq.n	8002638 <__aeabi_f2d+0x74>
 8002624:	0b13      	lsrs	r3, r2, #12
 8002626:	2280      	movs	r2, #128	@ 0x80
 8002628:	0312      	lsls	r2, r2, #12
 800262a:	431a      	orrs	r2, r3
 800262c:	076d      	lsls	r5, r5, #29
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <__aeabi_f2d+0x8c>)
 8002630:	e7d8      	b.n	80025e4 <__aeabi_f2d+0x20>
 8002632:	2300      	movs	r3, #0
 8002634:	2200      	movs	r2, #0
 8002636:	e7d5      	b.n	80025e4 <__aeabi_f2d+0x20>
 8002638:	2200      	movs	r2, #0
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <__aeabi_f2d+0x8c>)
 800263c:	e7d2      	b.n	80025e4 <__aeabi_f2d+0x20>
 800263e:	0003      	movs	r3, r0
 8002640:	002a      	movs	r2, r5
 8002642:	3b0b      	subs	r3, #11
 8002644:	409a      	lsls	r2, r3
 8002646:	2500      	movs	r5, #0
 8002648:	e7e3      	b.n	8002612 <__aeabi_f2d+0x4e>
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	00000389 	.word	0x00000389
 8002650:	000007ff 	.word	0x000007ff

08002654 <__aeabi_d2f>:
 8002654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002656:	004b      	lsls	r3, r1, #1
 8002658:	030f      	lsls	r7, r1, #12
 800265a:	0d5b      	lsrs	r3, r3, #21
 800265c:	4c3a      	ldr	r4, [pc, #232]	@ (8002748 <__aeabi_d2f+0xf4>)
 800265e:	0f45      	lsrs	r5, r0, #29
 8002660:	b083      	sub	sp, #12
 8002662:	0a7f      	lsrs	r7, r7, #9
 8002664:	1c5e      	adds	r6, r3, #1
 8002666:	432f      	orrs	r7, r5
 8002668:	9000      	str	r0, [sp, #0]
 800266a:	9101      	str	r1, [sp, #4]
 800266c:	0fca      	lsrs	r2, r1, #31
 800266e:	00c5      	lsls	r5, r0, #3
 8002670:	4226      	tst	r6, r4
 8002672:	d00b      	beq.n	800268c <__aeabi_d2f+0x38>
 8002674:	4935      	ldr	r1, [pc, #212]	@ (800274c <__aeabi_d2f+0xf8>)
 8002676:	185c      	adds	r4, r3, r1
 8002678:	2cfe      	cmp	r4, #254	@ 0xfe
 800267a:	dd13      	ble.n	80026a4 <__aeabi_d2f+0x50>
 800267c:	20ff      	movs	r0, #255	@ 0xff
 800267e:	2300      	movs	r3, #0
 8002680:	05c0      	lsls	r0, r0, #23
 8002682:	4318      	orrs	r0, r3
 8002684:	07d2      	lsls	r2, r2, #31
 8002686:	4310      	orrs	r0, r2
 8002688:	b003      	add	sp, #12
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	433d      	orrs	r5, r7
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <__aeabi_d2f+0x42>
 8002692:	2000      	movs	r0, #0
 8002694:	e7f4      	b.n	8002680 <__aeabi_d2f+0x2c>
 8002696:	2d00      	cmp	r5, #0
 8002698:	d0f0      	beq.n	800267c <__aeabi_d2f+0x28>
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	03db      	lsls	r3, r3, #15
 800269e:	20ff      	movs	r0, #255	@ 0xff
 80026a0:	433b      	orrs	r3, r7
 80026a2:	e7ed      	b.n	8002680 <__aeabi_d2f+0x2c>
 80026a4:	2c00      	cmp	r4, #0
 80026a6:	dd0c      	ble.n	80026c2 <__aeabi_d2f+0x6e>
 80026a8:	9b00      	ldr	r3, [sp, #0]
 80026aa:	00ff      	lsls	r7, r7, #3
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	4183      	sbcs	r3, r0
 80026b2:	0f69      	lsrs	r1, r5, #29
 80026b4:	433b      	orrs	r3, r7
 80026b6:	430b      	orrs	r3, r1
 80026b8:	0759      	lsls	r1, r3, #29
 80026ba:	d127      	bne.n	800270c <__aeabi_d2f+0xb8>
 80026bc:	08db      	lsrs	r3, r3, #3
 80026be:	b2e0      	uxtb	r0, r4
 80026c0:	e7de      	b.n	8002680 <__aeabi_d2f+0x2c>
 80026c2:	0021      	movs	r1, r4
 80026c4:	3117      	adds	r1, #23
 80026c6:	db31      	blt.n	800272c <__aeabi_d2f+0xd8>
 80026c8:	2180      	movs	r1, #128	@ 0x80
 80026ca:	201e      	movs	r0, #30
 80026cc:	0409      	lsls	r1, r1, #16
 80026ce:	4339      	orrs	r1, r7
 80026d0:	1b00      	subs	r0, r0, r4
 80026d2:	281f      	cmp	r0, #31
 80026d4:	dd2d      	ble.n	8002732 <__aeabi_d2f+0xde>
 80026d6:	2602      	movs	r6, #2
 80026d8:	4276      	negs	r6, r6
 80026da:	1b34      	subs	r4, r6, r4
 80026dc:	000e      	movs	r6, r1
 80026de:	40e6      	lsrs	r6, r4
 80026e0:	0034      	movs	r4, r6
 80026e2:	2820      	cmp	r0, #32
 80026e4:	d004      	beq.n	80026f0 <__aeabi_d2f+0x9c>
 80026e6:	481a      	ldr	r0, [pc, #104]	@ (8002750 <__aeabi_d2f+0xfc>)
 80026e8:	4684      	mov	ip, r0
 80026ea:	4463      	add	r3, ip
 80026ec:	4099      	lsls	r1, r3
 80026ee:	430d      	orrs	r5, r1
 80026f0:	002b      	movs	r3, r5
 80026f2:	1e59      	subs	r1, r3, #1
 80026f4:	418b      	sbcs	r3, r1
 80026f6:	4323      	orrs	r3, r4
 80026f8:	0759      	lsls	r1, r3, #29
 80026fa:	d003      	beq.n	8002704 <__aeabi_d2f+0xb0>
 80026fc:	210f      	movs	r1, #15
 80026fe:	4019      	ands	r1, r3
 8002700:	2904      	cmp	r1, #4
 8002702:	d10b      	bne.n	800271c <__aeabi_d2f+0xc8>
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	2000      	movs	r0, #0
 8002708:	0a5b      	lsrs	r3, r3, #9
 800270a:	e7b9      	b.n	8002680 <__aeabi_d2f+0x2c>
 800270c:	210f      	movs	r1, #15
 800270e:	4019      	ands	r1, r3
 8002710:	2904      	cmp	r1, #4
 8002712:	d104      	bne.n	800271e <__aeabi_d2f+0xca>
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	0a5b      	lsrs	r3, r3, #9
 8002718:	b2e0      	uxtb	r0, r4
 800271a:	e7b1      	b.n	8002680 <__aeabi_d2f+0x2c>
 800271c:	2400      	movs	r4, #0
 800271e:	3304      	adds	r3, #4
 8002720:	0159      	lsls	r1, r3, #5
 8002722:	d5f7      	bpl.n	8002714 <__aeabi_d2f+0xc0>
 8002724:	3401      	adds	r4, #1
 8002726:	2300      	movs	r3, #0
 8002728:	b2e0      	uxtb	r0, r4
 800272a:	e7a9      	b.n	8002680 <__aeabi_d2f+0x2c>
 800272c:	2000      	movs	r0, #0
 800272e:	2300      	movs	r3, #0
 8002730:	e7a6      	b.n	8002680 <__aeabi_d2f+0x2c>
 8002732:	4c08      	ldr	r4, [pc, #32]	@ (8002754 <__aeabi_d2f+0x100>)
 8002734:	191c      	adds	r4, r3, r4
 8002736:	002b      	movs	r3, r5
 8002738:	40a5      	lsls	r5, r4
 800273a:	40c3      	lsrs	r3, r0
 800273c:	40a1      	lsls	r1, r4
 800273e:	1e68      	subs	r0, r5, #1
 8002740:	4185      	sbcs	r5, r0
 8002742:	4329      	orrs	r1, r5
 8002744:	430b      	orrs	r3, r1
 8002746:	e7d7      	b.n	80026f8 <__aeabi_d2f+0xa4>
 8002748:	000007fe 	.word	0x000007fe
 800274c:	fffffc80 	.word	0xfffffc80
 8002750:	fffffca2 	.word	0xfffffca2
 8002754:	fffffc82 	.word	0xfffffc82

08002758 <__clzsi2>:
 8002758:	211c      	movs	r1, #28
 800275a:	2301      	movs	r3, #1
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	4298      	cmp	r0, r3
 8002760:	d301      	bcc.n	8002766 <__clzsi2+0xe>
 8002762:	0c00      	lsrs	r0, r0, #16
 8002764:	3910      	subs	r1, #16
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	4298      	cmp	r0, r3
 800276a:	d301      	bcc.n	8002770 <__clzsi2+0x18>
 800276c:	0a00      	lsrs	r0, r0, #8
 800276e:	3908      	subs	r1, #8
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	4298      	cmp	r0, r3
 8002774:	d301      	bcc.n	800277a <__clzsi2+0x22>
 8002776:	0900      	lsrs	r0, r0, #4
 8002778:	3904      	subs	r1, #4
 800277a:	a202      	add	r2, pc, #8	@ (adr r2, 8002784 <__clzsi2+0x2c>)
 800277c:	5c10      	ldrb	r0, [r2, r0]
 800277e:	1840      	adds	r0, r0, r1
 8002780:	4770      	bx	lr
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	02020304 	.word	0x02020304
 8002788:	01010101 	.word	0x01010101
	...

08002794 <TransmitHeartBeat>:

DischargeInfo_t Discharge;
uint16_t ThermistorResistance;

void TransmitHeartBeat()
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	//Increment counter by 1, if 255 forced to 0
	if(Discharge.HeartBeatCounter == 255)
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <TransmitHeartBeat+0x50>)
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2bff      	cmp	r3, #255	@ 0xff
 800279e:	d103      	bne.n	80027a8 <TransmitHeartBeat+0x14>
	{
		Discharge.HeartBeatCounter = 0;
 80027a0:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <TransmitHeartBeat+0x50>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	705a      	strb	r2, [r3, #1]
 80027a6:	e005      	b.n	80027b4 <TransmitHeartBeat+0x20>
	}
	else
	{
		Discharge.HeartBeatCounter++;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <TransmitHeartBeat+0x50>)
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <TransmitHeartBeat+0x50>)
 80027b2:	705a      	strb	r2, [r3, #1]
	}
	Discharge.canHeartBeat.TxData[1] = Discharge.HeartBeatCounter;
 80027b4:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <TransmitHeartBeat+0x50>)
 80027b6:	7859      	ldrb	r1, [r3, #1]
 80027b8:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <TransmitHeartBeat+0x50>)
 80027ba:	2241      	movs	r2, #65	@ 0x41
 80027bc:	5499      	strb	r1, [r3, r2]

	//Toggle debug LED
	HAL_GPIO_TogglePin(Discharge.dbgLedPort, Discharge.dbgLedPin);
 80027be:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <TransmitHeartBeat+0x50>)
 80027c0:	22e8      	movs	r2, #232	@ 0xe8
 80027c2:	589a      	ldr	r2, [r3, r2]
 80027c4:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <TransmitHeartBeat+0x50>)
 80027c6:	21ec      	movs	r1, #236	@ 0xec
 80027c8:	5a5b      	ldrh	r3, [r3, r1]
 80027ca:	0019      	movs	r1, r3
 80027cc:	0010      	movs	r0, r2
 80027ce:	f002 fb41 	bl	8004e54 <HAL_GPIO_TogglePin>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Discharge.canHeartBeat.TxHeader, Discharge.canHeartBeat.TxData);
 80027d2:	4a05      	ldr	r2, [pc, #20]	@ (80027e8 <TransmitHeartBeat+0x54>)
 80027d4:	4905      	ldr	r1, [pc, #20]	@ (80027ec <TransmitHeartBeat+0x58>)
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <TransmitHeartBeat+0x5c>)
 80027d8:	0018      	movs	r0, r3
 80027da:	f002 f867 	bl	80048ac <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000100 	.word	0x20000100
 80027e8:	20000140 	.word	0x20000140
 80027ec:	2000011c 	.word	0x2000011c
 80027f0:	20000310 	.word	0x20000310

080027f4 <TransmitDigital>:

void TransmitDigital()
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	Discharge.canDigital.TxData[0] = Discharge.DischargeDisable;
 80027f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <TransmitDigital+0x34>)
 80027fa:	7c99      	ldrb	r1, [r3, #18]
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <TransmitDigital+0x34>)
 80027fe:	22dc      	movs	r2, #220	@ 0xdc
 8002800:	5499      	strb	r1, [r3, r2]
	Discharge.canDigital.TxData[1] = Discharge.FiveKW;
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <TransmitDigital+0x34>)
 8002804:	7cd9      	ldrb	r1, [r3, #19]
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <TransmitDigital+0x34>)
 8002808:	22dd      	movs	r2, #221	@ 0xdd
 800280a:	5499      	strb	r1, [r3, r2]
	Discharge.canDigital.TxData[2] = Discharge.PDOC_ok;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <TransmitDigital+0x34>)
 800280e:	7d19      	ldrb	r1, [r3, #20]
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <TransmitDigital+0x34>)
 8002812:	22de      	movs	r2, #222	@ 0xde
 8002814:	5499      	strb	r1, [r3, r2]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Discharge.canDigital.TxHeader, Discharge.canDigital.TxData);
 8002816:	4a05      	ldr	r2, [pc, #20]	@ (800282c <TransmitDigital+0x38>)
 8002818:	4905      	ldr	r1, [pc, #20]	@ (8002830 <TransmitDigital+0x3c>)
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <TransmitDigital+0x40>)
 800281c:	0018      	movs	r0, r3
 800281e:	f002 f845 	bl	80048ac <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000100 	.word	0x20000100
 800282c:	200001dc 	.word	0x200001dc
 8002830:	200001b8 	.word	0x200001b8
 8002834:	20000310 	.word	0x20000310

08002838 <UpdateDigital>:

void UpdateDigital()
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	Discharge.DischargeDisable = HAL_GPIO_ReadPin(Discharge.DischargeDisableInPort, Discharge.DischargeDisableInPin);
 800283c:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <UpdateDigital+0x60>)
 800283e:	22f0      	movs	r2, #240	@ 0xf0
 8002840:	589a      	ldr	r2, [r3, r2]
 8002842:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <UpdateDigital+0x60>)
 8002844:	21f4      	movs	r1, #244	@ 0xf4
 8002846:	5a5b      	ldrh	r3, [r3, r1]
 8002848:	0019      	movs	r1, r3
 800284a:	0010      	movs	r0, r2
 800284c:	f002 fac8 	bl	8004de0 <HAL_GPIO_ReadPin>
 8002850:	0003      	movs	r3, r0
 8002852:	001a      	movs	r2, r3
 8002854:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <UpdateDigital+0x60>)
 8002856:	749a      	strb	r2, [r3, #18]
	Discharge.FiveKW = HAL_GPIO_ReadPin(Discharge.FiveKWInPort, Discharge.FiveKWInPin);
 8002858:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <UpdateDigital+0x60>)
 800285a:	22f8      	movs	r2, #248	@ 0xf8
 800285c:	589a      	ldr	r2, [r3, r2]
 800285e:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <UpdateDigital+0x60>)
 8002860:	21fc      	movs	r1, #252	@ 0xfc
 8002862:	5a5b      	ldrh	r3, [r3, r1]
 8002864:	0019      	movs	r1, r3
 8002866:	0010      	movs	r0, r2
 8002868:	f002 faba 	bl	8004de0 <HAL_GPIO_ReadPin>
 800286c:	0003      	movs	r3, r0
 800286e:	001a      	movs	r2, r3
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <UpdateDigital+0x60>)
 8002872:	74da      	strb	r2, [r3, #19]
	Discharge.PDOC_ok = HAL_GPIO_ReadPin(Discharge.PDOCokInPort, Discharge.PDOCokInPin);
 8002874:	4a08      	ldr	r2, [pc, #32]	@ (8002898 <UpdateDigital+0x60>)
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	58d0      	ldr	r0, [r2, r3]
 800287c:	4a06      	ldr	r2, [pc, #24]	@ (8002898 <UpdateDigital+0x60>)
 800287e:	2382      	movs	r3, #130	@ 0x82
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	5ad3      	ldrh	r3, [r2, r3]
 8002884:	0019      	movs	r1, r3
 8002886:	f002 faab 	bl	8004de0 <HAL_GPIO_ReadPin>
 800288a:	0003      	movs	r3, r0
 800288c:	001a      	movs	r2, r3
 800288e:	4b02      	ldr	r3, [pc, #8]	@ (8002898 <UpdateDigital+0x60>)
 8002890:	751a      	strb	r2, [r3, #20]
}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000100 	.word	0x20000100

0800289c <TransmitAnalogue>:

/**
 * Sets flag to enable the transmission of the Analogue frames.
**/
void TransmitAnalogue()
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	Discharge.canAnalogue.TxData[0] = (Discharge.MC_Voltage >> 8);
 80028a0:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <TransmitAnalogue+0x88>)
 80028a2:	891b      	ldrh	r3, [r3, #8]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	b2d9      	uxtb	r1, r3
 80028aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <TransmitAnalogue+0x88>)
 80028ac:	2274      	movs	r2, #116	@ 0x74
 80028ae:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogue.TxData[1] = (Discharge.MC_Voltage & 0xFF);
 80028b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002924 <TransmitAnalogue+0x88>)
 80028b2:	891b      	ldrh	r3, [r3, #8]
 80028b4:	b2d9      	uxtb	r1, r3
 80028b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <TransmitAnalogue+0x88>)
 80028b8:	2275      	movs	r2, #117	@ 0x75
 80028ba:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogue.TxData[2] = (Discharge.HV_Active_Voltage >> 8);
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <TransmitAnalogue+0x88>)
 80028be:	899b      	ldrh	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	b2d9      	uxtb	r1, r3
 80028c6:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <TransmitAnalogue+0x88>)
 80028c8:	2276      	movs	r2, #118	@ 0x76
 80028ca:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogue.TxData[3] = (Discharge.HV_Active_Voltage & 0xFF);
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <TransmitAnalogue+0x88>)
 80028ce:	899b      	ldrh	r3, [r3, #12]
 80028d0:	b2d9      	uxtb	r1, r3
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <TransmitAnalogue+0x88>)
 80028d4:	2277      	movs	r2, #119	@ 0x77
 80028d6:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogue.TxData[4] = (Discharge.PDOC_Sensor_Temp >> 8);
 80028d8:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <TransmitAnalogue+0x88>)
 80028da:	8a1b      	ldrh	r3, [r3, #16]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	b29b      	uxth	r3, r3
 80028e0:	b2d9      	uxtb	r1, r3
 80028e2:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <TransmitAnalogue+0x88>)
 80028e4:	2278      	movs	r2, #120	@ 0x78
 80028e6:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogue.TxData[5] = (Discharge.PDOC_Sensor_Temp & 0xFF);
 80028e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <TransmitAnalogue+0x88>)
 80028ea:	8a1b      	ldrh	r3, [r3, #16]
 80028ec:	b2d9      	uxtb	r1, r3
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <TransmitAnalogue+0x88>)
 80028f0:	2279      	movs	r2, #121	@ 0x79
 80028f2:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogue.TxData[6] = (Discharge.PDOC_Ref_Temp >> 8);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <TransmitAnalogue+0x88>)
 80028f6:	889b      	ldrh	r3, [r3, #4]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b2d9      	uxtb	r1, r3
 80028fe:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <TransmitAnalogue+0x88>)
 8002900:	227a      	movs	r2, #122	@ 0x7a
 8002902:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogue.TxData[7] = (Discharge.PDOC_Ref_Temp & 0xFF);
 8002904:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <TransmitAnalogue+0x88>)
 8002906:	889b      	ldrh	r3, [r3, #4]
 8002908:	b2d9      	uxtb	r1, r3
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <TransmitAnalogue+0x88>)
 800290c:	227b      	movs	r2, #123	@ 0x7b
 800290e:	5499      	strb	r1, [r3, r2]

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Discharge.canAnalogue.TxHeader, Discharge.canAnalogue.TxData);
 8002910:	4a05      	ldr	r2, [pc, #20]	@ (8002928 <TransmitAnalogue+0x8c>)
 8002912:	4906      	ldr	r1, [pc, #24]	@ (800292c <TransmitAnalogue+0x90>)
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <TransmitAnalogue+0x94>)
 8002916:	0018      	movs	r0, r3
 8002918:	f001 ffc8 	bl	80048ac <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	20000100 	.word	0x20000100
 8002928:	20000174 	.word	0x20000174
 800292c:	20000150 	.word	0x20000150
 8002930:	20000310 	.word	0x20000310

08002934 <TransmitAnalogueRaw>:

/**
 * Sets flag to enable the transmission of the Analogue RAW frames.
**/
void TransmitAnalogueRaw()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	Discharge.canAnalogueRaw.TxData[0] = (Discharge.HV_Sense_Raw_Voltage >> 8);
 8002938:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 800293a:	88db      	ldrh	r3, [r3, #6]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	b29b      	uxth	r3, r3
 8002940:	b2d9      	uxtb	r1, r3
 8002942:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 8002944:	22a8      	movs	r2, #168	@ 0xa8
 8002946:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogueRaw.TxData[1] = (Discharge.HV_Sense_Raw_Voltage & 0xFF);
 8002948:	4b1c      	ldr	r3, [pc, #112]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 800294a:	88db      	ldrh	r3, [r3, #6]
 800294c:	b2d9      	uxtb	r1, r3
 800294e:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 8002950:	22a9      	movs	r2, #169	@ 0xa9
 8002952:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogueRaw.TxData[2] = (Discharge.HV_Sense_Ref_Raw_Voltage >> 8);
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 8002956:	895b      	ldrh	r3, [r3, #10]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	b29b      	uxth	r3, r3
 800295c:	b2d9      	uxtb	r1, r3
 800295e:	4b17      	ldr	r3, [pc, #92]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 8002960:	22aa      	movs	r2, #170	@ 0xaa
 8002962:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogueRaw.TxData[3] = (Discharge.HV_Sense_Ref_Raw_Voltage & 0xFF);
 8002964:	4b15      	ldr	r3, [pc, #84]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 8002966:	895b      	ldrh	r3, [r3, #10]
 8002968:	b2d9      	uxtb	r1, r3
 800296a:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 800296c:	22ab      	movs	r2, #171	@ 0xab
 800296e:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogueRaw.TxData[4] = (Discharge.PDOC_Sensor_Raw_Voltage >> 8);
 8002970:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 8002972:	89db      	ldrh	r3, [r3, #14]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29b      	uxth	r3, r3
 8002978:	b2d9      	uxtb	r1, r3
 800297a:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 800297c:	22ac      	movs	r2, #172	@ 0xac
 800297e:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogueRaw.TxData[5] = (Discharge.PDOC_Sensor_Raw_Voltage & 0xFF);
 8002980:	4b0e      	ldr	r3, [pc, #56]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 8002982:	89db      	ldrh	r3, [r3, #14]
 8002984:	b2d9      	uxtb	r1, r3
 8002986:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 8002988:	22ad      	movs	r2, #173	@ 0xad
 800298a:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogueRaw.TxData[6] = (Discharge.PDOC_Ref_Raw_Voltage >> 8);
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 800298e:	885b      	ldrh	r3, [r3, #2]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	b29b      	uxth	r3, r3
 8002994:	b2d9      	uxtb	r1, r3
 8002996:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 8002998:	22ae      	movs	r2, #174	@ 0xae
 800299a:	5499      	strb	r1, [r3, r2]
		Discharge.canAnalogueRaw.TxData[7] = (Discharge.PDOC_Ref_Raw_Voltage & 0xFF);
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 800299e:	885b      	ldrh	r3, [r3, #2]
 80029a0:	b2d9      	uxtb	r1, r3
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <TransmitAnalogueRaw+0x88>)
 80029a4:	22af      	movs	r2, #175	@ 0xaf
 80029a6:	5499      	strb	r1, [r3, r2]

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Discharge.canAnalogueRaw.TxHeader, Discharge.canAnalogueRaw.TxData);
 80029a8:	4a05      	ldr	r2, [pc, #20]	@ (80029c0 <TransmitAnalogueRaw+0x8c>)
 80029aa:	4906      	ldr	r1, [pc, #24]	@ (80029c4 <TransmitAnalogueRaw+0x90>)
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <TransmitAnalogueRaw+0x94>)
 80029ae:	0018      	movs	r0, r3
 80029b0:	f001 ff7c 	bl	80048ac <HAL_FDCAN_AddMessageToTxFifoQ>
	}
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	20000100 	.word	0x20000100
 80029c0:	200001a8 	.word	0x200001a8
 80029c4:	20000184 	.word	0x20000184
 80029c8:	20000310 	.word	0x20000310

080029cc <UpdateAnalogue>:

void UpdateAnalogue()
{
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
	uint8_t test[2] = { 0xAA, 0xAA};
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	4aee      	ldr	r2, [pc, #952]	@ (8002d90 <UpdateAnalogue+0x3c4>)
 80029d6:	801a      	strh	r2, [r3, #0]
	uint8_t testRX[2] = { 0, 0 };
 80029d8:	003b      	movs	r3, r7
 80029da:	2200      	movs	r2, #0
 80029dc:	801a      	strh	r2, [r3, #0]

	//Read HV sense input
	writeSingleRegister(&Discharge.HVSense_ADC, CHANNEL_SEL_ADDRESS, 6);
 80029de:	4bed      	ldr	r3, [pc, #948]	@ (8002d94 <UpdateAnalogue+0x3c8>)
 80029e0:	2206      	movs	r2, #6
 80029e2:	2111      	movs	r1, #17
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 fcdb 	bl	80033a0 <writeSingleRegister>
	spiSendReceiveArray(&Discharge.HVSense_ADC, test, testRX, 2);
 80029ea:	003a      	movs	r2, r7
 80029ec:	1d39      	adds	r1, r7, #4
 80029ee:	48e9      	ldr	r0, [pc, #932]	@ (8002d94 <UpdateAnalogue+0x3c8>)
 80029f0:	2302      	movs	r3, #2
 80029f2:	f000 fba7 	bl	8003144 <spiSendReceiveArray>
	Discharge.HV_Sense_Raw_Voltage = (HV_SENSE_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 80029f6:	003b      	movs	r3, r7
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	003a      	movs	r2, r7
 80029fe:	7852      	ldrb	r2, [r2, #1]
 8002a00:	189b      	adds	r3, r3, r2
 8002a02:	111b      	asrs	r3, r3, #4
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff fdaf 	bl	8002568 <__aeabi_i2d>
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4be2      	ldr	r3, [pc, #904]	@ (8002d98 <UpdateAnalogue+0x3cc>)
 8002a0e:	f7fe fa23 	bl	8000e58 <__aeabi_ddiv>
 8002a12:	0002      	movs	r2, r0
 8002a14:	000b      	movs	r3, r1
 8002a16:	0010      	movs	r0, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4bdf      	ldr	r3, [pc, #892]	@ (8002d9c <UpdateAnalogue+0x3d0>)
 8002a1e:	f7fe fe55 	bl	80016cc <__aeabi_dmul>
 8002a22:	0002      	movs	r2, r0
 8002a24:	000b      	movs	r3, r1
 8002a26:	0010      	movs	r0, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	f7fd fc3f 	bl	80002ac <__aeabi_d2uiz>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	4bdb      	ldr	r3, [pc, #876]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002a34:	80da      	strh	r2, [r3, #6]
	Discharge.MC_Voltage = ((HV_R1+HV_R2)/(HV_R2))*(Discharge.HV_Sense_Raw_Voltage/1000.0)*10;
 8002a36:	4bda      	ldr	r3, [pc, #872]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002a38:	88db      	ldrh	r3, [r3, #6]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f7ff fd94 	bl	8002568 <__aeabi_i2d>
 8002a40:	2200      	movs	r2, #0
 8002a42:	4bd8      	ldr	r3, [pc, #864]	@ (8002da4 <UpdateAnalogue+0x3d8>)
 8002a44:	f7fe fa08 	bl	8000e58 <__aeabi_ddiv>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	000b      	movs	r3, r1
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	4bd5      	ldr	r3, [pc, #852]	@ (8002da8 <UpdateAnalogue+0x3dc>)
 8002a54:	f7fe fe3a 	bl	80016cc <__aeabi_dmul>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	000b      	movs	r3, r1
 8002a5c:	0010      	movs	r0, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	2200      	movs	r2, #0
 8002a62:	4bd2      	ldr	r3, [pc, #840]	@ (8002dac <UpdateAnalogue+0x3e0>)
 8002a64:	f7fe fe32 	bl	80016cc <__aeabi_dmul>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	000b      	movs	r3, r1
 8002a6c:	0010      	movs	r0, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	f7fd fc1c 	bl	80002ac <__aeabi_d2uiz>
 8002a74:	0003      	movs	r3, r0
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	4bc9      	ldr	r3, [pc, #804]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002a7a:	811a      	strh	r2, [r3, #8]

	//Read HV sense input
	writeSingleRegister(&Discharge.HVSense_ADC, CHANNEL_SEL_ADDRESS, 7);
 8002a7c:	4bc5      	ldr	r3, [pc, #788]	@ (8002d94 <UpdateAnalogue+0x3c8>)
 8002a7e:	2207      	movs	r2, #7
 8002a80:	2111      	movs	r1, #17
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fc8c 	bl	80033a0 <writeSingleRegister>
	spiSendReceiveArray(&Discharge.HVSense_ADC, test, testRX, 2);
 8002a88:	003a      	movs	r2, r7
 8002a8a:	1d39      	adds	r1, r7, #4
 8002a8c:	48c1      	ldr	r0, [pc, #772]	@ (8002d94 <UpdateAnalogue+0x3c8>)
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f000 fb58 	bl	8003144 <spiSendReceiveArray>
	Discharge.HV_Sense_Ref_Raw_Voltage = (HV_SENSE_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8002a94:	003b      	movs	r3, r7
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	003a      	movs	r2, r7
 8002a9c:	7852      	ldrb	r2, [r2, #1]
 8002a9e:	189b      	adds	r3, r3, r2
 8002aa0:	111b      	asrs	r3, r3, #4
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7ff fd60 	bl	8002568 <__aeabi_i2d>
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4bbb      	ldr	r3, [pc, #748]	@ (8002d98 <UpdateAnalogue+0x3cc>)
 8002aac:	f7fe f9d4 	bl	8000e58 <__aeabi_ddiv>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	000b      	movs	r3, r1
 8002ab4:	0010      	movs	r0, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4bb8      	ldr	r3, [pc, #736]	@ (8002d9c <UpdateAnalogue+0x3d0>)
 8002abc:	f7fe fe06 	bl	80016cc <__aeabi_dmul>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	000b      	movs	r3, r1
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	f7fd fbf0 	bl	80002ac <__aeabi_d2uiz>
 8002acc:	0003      	movs	r3, r0
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	4bb3      	ldr	r3, [pc, #716]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002ad2:	815a      	strh	r2, [r3, #10]
	Discharge.HV_Active_Voltage = ((HV_R1+HV_R2)/(HV_R2))*(Discharge.HV_Sense_Ref_Raw_Voltage/1000.0)*10;
 8002ad4:	4bb2      	ldr	r3, [pc, #712]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002ad6:	895b      	ldrh	r3, [r3, #10]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7ff fd45 	bl	8002568 <__aeabi_i2d>
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4bb0      	ldr	r3, [pc, #704]	@ (8002da4 <UpdateAnalogue+0x3d8>)
 8002ae2:	f7fe f9b9 	bl	8000e58 <__aeabi_ddiv>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	000b      	movs	r3, r1
 8002aea:	0010      	movs	r0, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	2200      	movs	r2, #0
 8002af0:	4bad      	ldr	r3, [pc, #692]	@ (8002da8 <UpdateAnalogue+0x3dc>)
 8002af2:	f7fe fdeb 	bl	80016cc <__aeabi_dmul>
 8002af6:	0002      	movs	r2, r0
 8002af8:	000b      	movs	r3, r1
 8002afa:	0010      	movs	r0, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	2200      	movs	r2, #0
 8002b00:	4baa      	ldr	r3, [pc, #680]	@ (8002dac <UpdateAnalogue+0x3e0>)
 8002b02:	f7fe fde3 	bl	80016cc <__aeabi_dmul>
 8002b06:	0002      	movs	r2, r0
 8002b08:	000b      	movs	r3, r1
 8002b0a:	0010      	movs	r0, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	f7fd fbcd 	bl	80002ac <__aeabi_d2uiz>
 8002b12:	0003      	movs	r3, r0
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	4ba2      	ldr	r3, [pc, #648]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002b18:	819a      	strh	r2, [r3, #12]

	//Read PDOC sense input
	writeSingleRegister(&Discharge.PDOC_ADC, CHANNEL_SEL_ADDRESS, 5);
 8002b1a:	4ba5      	ldr	r3, [pc, #660]	@ (8002db0 <UpdateAnalogue+0x3e4>)
 8002b1c:	2205      	movs	r2, #5
 8002b1e:	2111      	movs	r1, #17
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 fc3d 	bl	80033a0 <writeSingleRegister>
	spiSendReceiveArray(&Discharge.PDOC_ADC, test, testRX, 2);
 8002b26:	003a      	movs	r2, r7
 8002b28:	1d39      	adds	r1, r7, #4
 8002b2a:	48a1      	ldr	r0, [pc, #644]	@ (8002db0 <UpdateAnalogue+0x3e4>)
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f000 fb09 	bl	8003144 <spiSendReceiveArray>
	Discharge.PDOC_Sensor_Raw_Voltage = (PDOC_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8002b32:	003b      	movs	r3, r7
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	003a      	movs	r2, r7
 8002b3a:	7852      	ldrb	r2, [r2, #1]
 8002b3c:	189b      	adds	r3, r3, r2
 8002b3e:	111b      	asrs	r3, r3, #4
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7ff fd11 	bl	8002568 <__aeabi_i2d>
 8002b46:	2200      	movs	r2, #0
 8002b48:	4b93      	ldr	r3, [pc, #588]	@ (8002d98 <UpdateAnalogue+0x3cc>)
 8002b4a:	f7fe f985 	bl	8000e58 <__aeabi_ddiv>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	000b      	movs	r3, r1
 8002b52:	0010      	movs	r0, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	2200      	movs	r2, #0
 8002b58:	4b96      	ldr	r3, [pc, #600]	@ (8002db4 <UpdateAnalogue+0x3e8>)
 8002b5a:	f7fe fdb7 	bl	80016cc <__aeabi_dmul>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	000b      	movs	r3, r1
 8002b62:	0010      	movs	r0, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	f7fd fba1 	bl	80002ac <__aeabi_d2uiz>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b8c      	ldr	r3, [pc, #560]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002b70:	81da      	strh	r2, [r3, #14]

	//Converts thermistor measurement to temperature
	ThermistorResistance = ((Discharge.PDOC_Sensor_Raw_Voltage)/(PDOC_VDD - Discharge.PDOC_Sensor_Raw_Voltage))*(THERM_BIAS_RESIS);
 8002b72:	4b8b      	ldr	r3, [pc, #556]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002b74:	89db      	ldrh	r3, [r3, #14]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7ff fcf6 	bl	8002568 <__aeabi_i2d>
 8002b7c:	0004      	movs	r4, r0
 8002b7e:	000d      	movs	r5, r1
 8002b80:	4b87      	ldr	r3, [pc, #540]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002b82:	89db      	ldrh	r3, [r3, #14]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7ff fcef 	bl	8002568 <__aeabi_i2d>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	000b      	movs	r3, r1
 8002b8e:	2000      	movs	r0, #0
 8002b90:	4988      	ldr	r1, [pc, #544]	@ (8002db4 <UpdateAnalogue+0x3e8>)
 8002b92:	f7ff f881 	bl	8001c98 <__aeabi_dsub>
 8002b96:	0002      	movs	r2, r0
 8002b98:	000b      	movs	r3, r1
 8002b9a:	0020      	movs	r0, r4
 8002b9c:	0029      	movs	r1, r5
 8002b9e:	f7fe f95b 	bl	8000e58 <__aeabi_ddiv>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	000b      	movs	r3, r1
 8002ba6:	0010      	movs	r0, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	2200      	movs	r2, #0
 8002bac:	4b82      	ldr	r3, [pc, #520]	@ (8002db8 <UpdateAnalogue+0x3ec>)
 8002bae:	f7fe fd8d 	bl	80016cc <__aeabi_dmul>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	000b      	movs	r3, r1
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	f7fd fb77 	bl	80002ac <__aeabi_d2uiz>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b7e      	ldr	r3, [pc, #504]	@ (8002dbc <UpdateAnalogue+0x3f0>)
 8002bc4:	801a      	strh	r2, [r3, #0]
	float term1 = ( 1.0 )/( 298.15 );
 8002bc6:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc0 <UpdateAnalogue+0x3f4>)
 8002bc8:	60fb      	str	r3, [r7, #12]
	float term2 = (( 1.0 )/( THERMISTOR_BETA ))*log( (ThermistorResistance) / (10000.0) );
 8002bca:	4b7c      	ldr	r3, [pc, #496]	@ (8002dbc <UpdateAnalogue+0x3f0>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7ff fcca 	bl	8002568 <__aeabi_i2d>
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8002dc4 <UpdateAnalogue+0x3f8>)
 8002bd8:	f7fe f93e 	bl	8000e58 <__aeabi_ddiv>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	000b      	movs	r3, r1
 8002be0:	0010      	movs	r0, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	f005 f910 	bl	8007e08 <log>
 8002be8:	4a77      	ldr	r2, [pc, #476]	@ (8002dc8 <UpdateAnalogue+0x3fc>)
 8002bea:	4b78      	ldr	r3, [pc, #480]	@ (8002dcc <UpdateAnalogue+0x400>)
 8002bec:	f7fe fd6e 	bl	80016cc <__aeabi_dmul>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	000b      	movs	r3, r1
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	f7ff fd2c 	bl	8002654 <__aeabi_d2f>
 8002bfc:	1c03      	adds	r3, r0, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
	Discharge.PDOC_Sensor_Temp = 10*(( ( 1.0 ) / (term1 + term2)) - 273.15);
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7fd fb70 	bl	80002e8 <__aeabi_fadd>
 8002c08:	1c03      	adds	r3, r0, #0
 8002c0a:	1c18      	adds	r0, r3, #0
 8002c0c:	f7ff fcda 	bl	80025c4 <__aeabi_f2d>
 8002c10:	0002      	movs	r2, r0
 8002c12:	000b      	movs	r3, r1
 8002c14:	2000      	movs	r0, #0
 8002c16:	496e      	ldr	r1, [pc, #440]	@ (8002dd0 <UpdateAnalogue+0x404>)
 8002c18:	f7fe f91e 	bl	8000e58 <__aeabi_ddiv>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	000b      	movs	r3, r1
 8002c20:	0010      	movs	r0, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd4 <UpdateAnalogue+0x408>)
 8002c26:	4b6c      	ldr	r3, [pc, #432]	@ (8002dd8 <UpdateAnalogue+0x40c>)
 8002c28:	f7ff f836 	bl	8001c98 <__aeabi_dsub>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	000b      	movs	r3, r1
 8002c30:	0010      	movs	r0, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	4b5d      	ldr	r3, [pc, #372]	@ (8002dac <UpdateAnalogue+0x3e0>)
 8002c38:	f7fe fd48 	bl	80016cc <__aeabi_dmul>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	000b      	movs	r3, r1
 8002c40:	0010      	movs	r0, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	f7fd fb32 	bl	80002ac <__aeabi_d2uiz>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	4b54      	ldr	r3, [pc, #336]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002c4e:	821a      	strh	r2, [r3, #16]

	//Read PDOC REF sense input
	writeSingleRegister(&Discharge.PDOC_ADC, CHANNEL_SEL_ADDRESS, 6);
 8002c50:	4b57      	ldr	r3, [pc, #348]	@ (8002db0 <UpdateAnalogue+0x3e4>)
 8002c52:	2206      	movs	r2, #6
 8002c54:	2111      	movs	r1, #17
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 fba2 	bl	80033a0 <writeSingleRegister>
	spiSendReceiveArray(&Discharge.PDOC_ADC, test, testRX, 2);
 8002c5c:	003a      	movs	r2, r7
 8002c5e:	1d39      	adds	r1, r7, #4
 8002c60:	4853      	ldr	r0, [pc, #332]	@ (8002db0 <UpdateAnalogue+0x3e4>)
 8002c62:	2302      	movs	r3, #2
 8002c64:	f000 fa6e 	bl	8003144 <spiSendReceiveArray>
	Discharge.PDOC_Ref_Raw_Voltage = (PDOC_VDD*(((256*(testRX[0]) + (testRX[1])) >> 4)/4096.0));
 8002c68:	003b      	movs	r3, r7
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	003a      	movs	r2, r7
 8002c70:	7852      	ldrb	r2, [r2, #1]
 8002c72:	189b      	adds	r3, r3, r2
 8002c74:	111b      	asrs	r3, r3, #4
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7ff fc76 	bl	8002568 <__aeabi_i2d>
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4b46      	ldr	r3, [pc, #280]	@ (8002d98 <UpdateAnalogue+0x3cc>)
 8002c80:	f7fe f8ea 	bl	8000e58 <__aeabi_ddiv>
 8002c84:	0002      	movs	r2, r0
 8002c86:	000b      	movs	r3, r1
 8002c88:	0010      	movs	r0, r2
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4b49      	ldr	r3, [pc, #292]	@ (8002db4 <UpdateAnalogue+0x3e8>)
 8002c90:	f7fe fd1c 	bl	80016cc <__aeabi_dmul>
 8002c94:	0002      	movs	r2, r0
 8002c96:	000b      	movs	r3, r1
 8002c98:	0010      	movs	r0, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	f7fd fb06 	bl	80002ac <__aeabi_d2uiz>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002ca6:	805a      	strh	r2, [r3, #2]

	//Converts thermistor measurement to temperature
	ThermistorResistance = ((Discharge.PDOC_Ref_Raw_Voltage)/(PDOC_VDD - Discharge.PDOC_Ref_Raw_Voltage))*(THERM_BIAS_RESIS);
 8002ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002caa:	885b      	ldrh	r3, [r3, #2]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff fc5b 	bl	8002568 <__aeabi_i2d>
 8002cb2:	0004      	movs	r4, r0
 8002cb4:	000d      	movs	r5, r1
 8002cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002cb8:	885b      	ldrh	r3, [r3, #2]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7ff fc54 	bl	8002568 <__aeabi_i2d>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	000b      	movs	r3, r1
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	493b      	ldr	r1, [pc, #236]	@ (8002db4 <UpdateAnalogue+0x3e8>)
 8002cc8:	f7fe ffe6 	bl	8001c98 <__aeabi_dsub>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	000b      	movs	r3, r1
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	0029      	movs	r1, r5
 8002cd4:	f7fe f8c0 	bl	8000e58 <__aeabi_ddiv>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	000b      	movs	r3, r1
 8002cdc:	0010      	movs	r0, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4b35      	ldr	r3, [pc, #212]	@ (8002db8 <UpdateAnalogue+0x3ec>)
 8002ce4:	f7fe fcf2 	bl	80016cc <__aeabi_dmul>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	000b      	movs	r3, r1
 8002cec:	0010      	movs	r0, r2
 8002cee:	0019      	movs	r1, r3
 8002cf0:	f7fd fadc 	bl	80002ac <__aeabi_d2uiz>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b30      	ldr	r3, [pc, #192]	@ (8002dbc <UpdateAnalogue+0x3f0>)
 8002cfa:	801a      	strh	r2, [r3, #0]
	term1 = ( 1.0 )/( 298.15 );
 8002cfc:	4b30      	ldr	r3, [pc, #192]	@ (8002dc0 <UpdateAnalogue+0x3f4>)
 8002cfe:	60fb      	str	r3, [r7, #12]
	term2 = (( 1.0 )/( THERMISTOR_BETA ))*log( (ThermistorResistance) / (10000.0) );
 8002d00:	4b2e      	ldr	r3, [pc, #184]	@ (8002dbc <UpdateAnalogue+0x3f0>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff fc2f 	bl	8002568 <__aeabi_i2d>
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc4 <UpdateAnalogue+0x3f8>)
 8002d0e:	f7fe f8a3 	bl	8000e58 <__aeabi_ddiv>
 8002d12:	0002      	movs	r2, r0
 8002d14:	000b      	movs	r3, r1
 8002d16:	0010      	movs	r0, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	f005 f875 	bl	8007e08 <log>
 8002d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc8 <UpdateAnalogue+0x3fc>)
 8002d20:	4b2a      	ldr	r3, [pc, #168]	@ (8002dcc <UpdateAnalogue+0x400>)
 8002d22:	f7fe fcd3 	bl	80016cc <__aeabi_dmul>
 8002d26:	0002      	movs	r2, r0
 8002d28:	000b      	movs	r3, r1
 8002d2a:	0010      	movs	r0, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	f7ff fc91 	bl	8002654 <__aeabi_d2f>
 8002d32:	1c03      	adds	r3, r0, #0
 8002d34:	60bb      	str	r3, [r7, #8]
	Discharge.PDOC_Ref_Temp = 10*(( ( 1.0 ) / (term1 + term2)) - 273.15);
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7fd fad5 	bl	80002e8 <__aeabi_fadd>
 8002d3e:	1c03      	adds	r3, r0, #0
 8002d40:	1c18      	adds	r0, r3, #0
 8002d42:	f7ff fc3f 	bl	80025c4 <__aeabi_f2d>
 8002d46:	0002      	movs	r2, r0
 8002d48:	000b      	movs	r3, r1
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	4920      	ldr	r1, [pc, #128]	@ (8002dd0 <UpdateAnalogue+0x404>)
 8002d4e:	f7fe f883 	bl	8000e58 <__aeabi_ddiv>
 8002d52:	0002      	movs	r2, r0
 8002d54:	000b      	movs	r3, r1
 8002d56:	0010      	movs	r0, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002dd4 <UpdateAnalogue+0x408>)
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <UpdateAnalogue+0x40c>)
 8002d5e:	f7fe ff9b 	bl	8001c98 <__aeabi_dsub>
 8002d62:	0002      	movs	r2, r0
 8002d64:	000b      	movs	r3, r1
 8002d66:	0010      	movs	r0, r2
 8002d68:	0019      	movs	r1, r3
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <UpdateAnalogue+0x3e0>)
 8002d6e:	f7fe fcad 	bl	80016cc <__aeabi_dmul>
 8002d72:	0002      	movs	r2, r0
 8002d74:	000b      	movs	r3, r1
 8002d76:	0010      	movs	r0, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	f7fd fa97 	bl	80002ac <__aeabi_d2uiz>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <UpdateAnalogue+0x3d4>)
 8002d84:	809a      	strh	r2, [r3, #4]
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b004      	add	sp, #16
 8002d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	ffffaaaa 	.word	0xffffaaaa
 8002d94:	20000208 	.word	0x20000208
 8002d98:	40b00000 	.word	0x40b00000
 8002d9c:	40aa2e00 	.word	0x40aa2e00
 8002da0:	20000100 	.word	0x20000100
 8002da4:	408f4000 	.word	0x408f4000
 8002da8:	4068c000 	.word	0x4068c000
 8002dac:	40240000 	.word	0x40240000
 8002db0:	20000214 	.word	0x20000214
 8002db4:	40aa8400 	.word	0x40aa8400
 8002db8:	409ef800 	.word	0x409ef800
 8002dbc:	20000220 	.word	0x20000220
 8002dc0:	3b5bcf0f 	.word	0x3b5bcf0f
 8002dc4:	40c38800 	.word	0x40c38800
 8002dc8:	ca33a894 	.word	0xca33a894
 8002dcc:	3f33901f 	.word	0x3f33901f
 8002dd0:	3ff00000 	.word	0x3ff00000
 8002dd4:	66666666 	.word	0x66666666
 8002dd8:	40711266 	.word	0x40711266

08002ddc <canFramesDefine>:

void canFramesDefine()
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
	//Heartbeat
	Discharge.canHeartBeat.canPeripheral = &hfdcan2;
 8002de0:	4b4e      	ldr	r3, [pc, #312]	@ (8002f1c <canFramesDefine+0x140>)
 8002de2:	4a4f      	ldr	r2, [pc, #316]	@ (8002f20 <canFramesDefine+0x144>)
 8002de4:	619a      	str	r2, [r3, #24]
	Discharge.canHeartBeat.TxHeader.IdType = FDCAN_STANDARD_ID;
 8002de6:	4b4d      	ldr	r3, [pc, #308]	@ (8002f1c <canFramesDefine+0x140>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
	Discharge.canHeartBeat.TxHeader.Identifier = 0x500;
 8002dec:	4b4b      	ldr	r3, [pc, #300]	@ (8002f1c <canFramesDefine+0x140>)
 8002dee:	22a0      	movs	r2, #160	@ 0xa0
 8002df0:	00d2      	lsls	r2, r2, #3
 8002df2:	61da      	str	r2, [r3, #28]
	Discharge.canHeartBeat.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002df4:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <canFramesDefine+0x140>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	625a      	str	r2, [r3, #36]	@ 0x24
	Discharge.canHeartBeat.TxHeader.DataLength = 0x02;
 8002dfa:	4b48      	ldr	r3, [pc, #288]	@ (8002f1c <canFramesDefine+0x140>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	629a      	str	r2, [r3, #40]	@ 0x28
	Discharge.canHeartBeat.TxData[0] = 0;
 8002e00:	4b46      	ldr	r3, [pc, #280]	@ (8002f1c <canFramesDefine+0x140>)
 8002e02:	2240      	movs	r2, #64	@ 0x40
 8002e04:	2100      	movs	r1, #0
 8002e06:	5499      	strb	r1, [r3, r2]
	Discharge.canHeartBeat.TxData[1] = 0;
 8002e08:	4b44      	ldr	r3, [pc, #272]	@ (8002f1c <canFramesDefine+0x140>)
 8002e0a:	2241      	movs	r2, #65	@ 0x41
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	5499      	strb	r1, [r3, r2]

	//Digital
	Discharge.canDigital.canPeripheral = &hfdcan2;
 8002e10:	4b42      	ldr	r3, [pc, #264]	@ (8002f1c <canFramesDefine+0x140>)
 8002e12:	21b4      	movs	r1, #180	@ 0xb4
 8002e14:	4a42      	ldr	r2, [pc, #264]	@ (8002f20 <canFramesDefine+0x144>)
 8002e16:	505a      	str	r2, [r3, r1]
	Discharge.canDigital.TxHeader.IdType = FDCAN_STANDARD_ID;
 8002e18:	4b40      	ldr	r3, [pc, #256]	@ (8002f1c <canFramesDefine+0x140>)
 8002e1a:	22bc      	movs	r2, #188	@ 0xbc
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	5099      	str	r1, [r3, r2]
	Discharge.canDigital.TxHeader.Identifier = 0x453;
 8002e20:	4b3e      	ldr	r3, [pc, #248]	@ (8002f1c <canFramesDefine+0x140>)
 8002e22:	22b8      	movs	r2, #184	@ 0xb8
 8002e24:	493f      	ldr	r1, [pc, #252]	@ (8002f24 <canFramesDefine+0x148>)
 8002e26:	5099      	str	r1, [r3, r2]
	Discharge.canDigital.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002e28:	4b3c      	ldr	r3, [pc, #240]	@ (8002f1c <canFramesDefine+0x140>)
 8002e2a:	22c0      	movs	r2, #192	@ 0xc0
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5099      	str	r1, [r3, r2]
	Discharge.canDigital.TxHeader.DataLength = 0x03;
 8002e30:	4b3a      	ldr	r3, [pc, #232]	@ (8002f1c <canFramesDefine+0x140>)
 8002e32:	22c4      	movs	r2, #196	@ 0xc4
 8002e34:	2103      	movs	r1, #3
 8002e36:	5099      	str	r1, [r3, r2]
	Discharge.canDigital.TxData[0] = 0;
 8002e38:	4b38      	ldr	r3, [pc, #224]	@ (8002f1c <canFramesDefine+0x140>)
 8002e3a:	22dc      	movs	r2, #220	@ 0xdc
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]
	Discharge.canDigital.TxData[1] = 0;
 8002e40:	4b36      	ldr	r3, [pc, #216]	@ (8002f1c <canFramesDefine+0x140>)
 8002e42:	22dd      	movs	r2, #221	@ 0xdd
 8002e44:	2100      	movs	r1, #0
 8002e46:	5499      	strb	r1, [r3, r2]
	Discharge.canDigital.TxData[2] = 0;
 8002e48:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <canFramesDefine+0x140>)
 8002e4a:	22de      	movs	r2, #222	@ 0xde
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

	//Analogue
	Discharge.canAnalogue.canPeripheral = &hfdcan2;
 8002e50:	4b32      	ldr	r3, [pc, #200]	@ (8002f1c <canFramesDefine+0x140>)
 8002e52:	4a33      	ldr	r2, [pc, #204]	@ (8002f20 <canFramesDefine+0x144>)
 8002e54:	64da      	str	r2, [r3, #76]	@ 0x4c
	Discharge.canAnalogue.TxHeader.IdType = FDCAN_STANDARD_ID;
 8002e56:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <canFramesDefine+0x140>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	655a      	str	r2, [r3, #84]	@ 0x54
	Discharge.canAnalogue.TxHeader.Identifier = 0x504;
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f1c <canFramesDefine+0x140>)
 8002e5e:	4a32      	ldr	r2, [pc, #200]	@ (8002f28 <canFramesDefine+0x14c>)
 8002e60:	651a      	str	r2, [r3, #80]	@ 0x50
	Discharge.canAnalogue.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002e62:	4b2e      	ldr	r3, [pc, #184]	@ (8002f1c <canFramesDefine+0x140>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	659a      	str	r2, [r3, #88]	@ 0x58
	Discharge.canAnalogue.TxHeader.DataLength = 0x08;
 8002e68:	4b2c      	ldr	r3, [pc, #176]	@ (8002f1c <canFramesDefine+0x140>)
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
	Discharge.canAnalogue.TxData[0] = 0;
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f1c <canFramesDefine+0x140>)
 8002e70:	2274      	movs	r2, #116	@ 0x74
 8002e72:	2100      	movs	r1, #0
 8002e74:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogue.TxData[1] = 0;
 8002e76:	4b29      	ldr	r3, [pc, #164]	@ (8002f1c <canFramesDefine+0x140>)
 8002e78:	2275      	movs	r2, #117	@ 0x75
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogue.TxData[2] = 0;
 8002e7e:	4b27      	ldr	r3, [pc, #156]	@ (8002f1c <canFramesDefine+0x140>)
 8002e80:	2276      	movs	r2, #118	@ 0x76
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogue.TxData[3] = 0;
 8002e86:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <canFramesDefine+0x140>)
 8002e88:	2277      	movs	r2, #119	@ 0x77
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogue.TxData[4] = 0;
 8002e8e:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <canFramesDefine+0x140>)
 8002e90:	2278      	movs	r2, #120	@ 0x78
 8002e92:	2100      	movs	r1, #0
 8002e94:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogue.TxData[5] = 0;
 8002e96:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <canFramesDefine+0x140>)
 8002e98:	2279      	movs	r2, #121	@ 0x79
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogue.TxData[6] = 0;
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <canFramesDefine+0x140>)
 8002ea0:	227a      	movs	r2, #122	@ 0x7a
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogue.TxData[7] = 0;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <canFramesDefine+0x140>)
 8002ea8:	227b      	movs	r2, #123	@ 0x7b
 8002eaa:	2100      	movs	r1, #0
 8002eac:	5499      	strb	r1, [r3, r2]

	//Analogue RAW
	Discharge.canAnalogueRaw.canPeripheral = &hfdcan2;
 8002eae:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <canFramesDefine+0x140>)
 8002eb0:	2180      	movs	r1, #128	@ 0x80
 8002eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <canFramesDefine+0x144>)
 8002eb4:	505a      	str	r2, [r3, r1]
	Discharge.canAnalogueRaw.TxHeader.IdType = FDCAN_STANDARD_ID;
 8002eb6:	4b19      	ldr	r3, [pc, #100]	@ (8002f1c <canFramesDefine+0x140>)
 8002eb8:	2288      	movs	r2, #136	@ 0x88
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5099      	str	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxHeader.Identifier = 0x505;
 8002ebe:	4b17      	ldr	r3, [pc, #92]	@ (8002f1c <canFramesDefine+0x140>)
 8002ec0:	2284      	movs	r2, #132	@ 0x84
 8002ec2:	491a      	ldr	r1, [pc, #104]	@ (8002f2c <canFramesDefine+0x150>)
 8002ec4:	5099      	str	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002ec6:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <canFramesDefine+0x140>)
 8002ec8:	228c      	movs	r2, #140	@ 0x8c
 8002eca:	2100      	movs	r1, #0
 8002ecc:	5099      	str	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxHeader.DataLength = 0x08;
 8002ece:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <canFramesDefine+0x140>)
 8002ed0:	2290      	movs	r2, #144	@ 0x90
 8002ed2:	2108      	movs	r1, #8
 8002ed4:	5099      	str	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxData[0] = 0;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <canFramesDefine+0x140>)
 8002ed8:	22a8      	movs	r2, #168	@ 0xa8
 8002eda:	2100      	movs	r1, #0
 8002edc:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxData[1] = 0;
 8002ede:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <canFramesDefine+0x140>)
 8002ee0:	22a9      	movs	r2, #169	@ 0xa9
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxData[2] = 0;
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <canFramesDefine+0x140>)
 8002ee8:	22aa      	movs	r2, #170	@ 0xaa
 8002eea:	2100      	movs	r1, #0
 8002eec:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxData[3] = 0;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <canFramesDefine+0x140>)
 8002ef0:	22ab      	movs	r2, #171	@ 0xab
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxData[4] = 0;
 8002ef6:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <canFramesDefine+0x140>)
 8002ef8:	22ac      	movs	r2, #172	@ 0xac
 8002efa:	2100      	movs	r1, #0
 8002efc:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxData[5] = 0;
 8002efe:	4b07      	ldr	r3, [pc, #28]	@ (8002f1c <canFramesDefine+0x140>)
 8002f00:	22ad      	movs	r2, #173	@ 0xad
 8002f02:	2100      	movs	r1, #0
 8002f04:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxData[6] = 0;
 8002f06:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <canFramesDefine+0x140>)
 8002f08:	22ae      	movs	r2, #174	@ 0xae
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5499      	strb	r1, [r3, r2]
	Discharge.canAnalogueRaw.TxData[7] = 0;
 8002f0e:	4b03      	ldr	r3, [pc, #12]	@ (8002f1c <canFramesDefine+0x140>)
 8002f10:	22af      	movs	r2, #175	@ 0xaf
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000100 	.word	0x20000100
 8002f20:	20000310 	.word	0x20000310
 8002f24:	00000453 	.word	0x00000453
 8002f28:	00000504 	.word	0x00000504
 8002f2c:	00000505 	.word	0x00000505

08002f30 <ioAssign>:

void ioAssign()
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	//SPI
	Discharge.HVSense_ADC.SPI_Handle = &hspi1;
 8002f34:	4a34      	ldr	r2, [pc, #208]	@ (8003008 <ioAssign+0xd8>)
 8002f36:	2384      	movs	r3, #132	@ 0x84
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4934      	ldr	r1, [pc, #208]	@ (800300c <ioAssign+0xdc>)
 8002f3c:	50d1      	str	r1, [r2, r3]
	Discharge.HVSense_ADC.CS_Port = GPIOA;
 8002f3e:	4a32      	ldr	r2, [pc, #200]	@ (8003008 <ioAssign+0xd8>)
 8002f40:	2386      	movs	r3, #134	@ 0x86
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	21a0      	movs	r1, #160	@ 0xa0
 8002f46:	05c9      	lsls	r1, r1, #23
 8002f48:	50d1      	str	r1, [r2, r3]
	Discharge.HVSense_ADC.CS_Pin = GPIO_PIN_2;
 8002f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8003008 <ioAssign+0xd8>)
 8002f4c:	2388      	movs	r3, #136	@ 0x88
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2104      	movs	r1, #4
 8002f52:	52d1      	strh	r1, [r2, r3]

	Discharge.PDOC_ADC.SPI_Handle = &hspi1;
 8002f54:	4a2c      	ldr	r2, [pc, #176]	@ (8003008 <ioAssign+0xd8>)
 8002f56:	238a      	movs	r3, #138	@ 0x8a
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	492c      	ldr	r1, [pc, #176]	@ (800300c <ioAssign+0xdc>)
 8002f5c:	50d1      	str	r1, [r2, r3]
	Discharge.PDOC_ADC.CS_Port = GPIOB;
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003008 <ioAssign+0xd8>)
 8002f60:	238c      	movs	r3, #140	@ 0x8c
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	492a      	ldr	r1, [pc, #168]	@ (8003010 <ioAssign+0xe0>)
 8002f66:	50d1      	str	r1, [r2, r3]
	Discharge.PDOC_ADC.CS_Pin = GPIO_PIN_6;
 8002f68:	4a27      	ldr	r2, [pc, #156]	@ (8003008 <ioAssign+0xd8>)
 8002f6a:	238e      	movs	r3, #142	@ 0x8e
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2140      	movs	r1, #64	@ 0x40
 8002f70:	52d1      	strh	r1, [r2, r3]

	//Outputs
	Discharge.dbgLedPort = GPIOA;
 8002f72:	4b25      	ldr	r3, [pc, #148]	@ (8003008 <ioAssign+0xd8>)
 8002f74:	21e8      	movs	r1, #232	@ 0xe8
 8002f76:	22a0      	movs	r2, #160	@ 0xa0
 8002f78:	05d2      	lsls	r2, r2, #23
 8002f7a:	505a      	str	r2, [r3, r1]
	Discharge.dbgLedPin = GPIO_PIN_3;
 8002f7c:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <ioAssign+0xd8>)
 8002f7e:	22ec      	movs	r2, #236	@ 0xec
 8002f80:	2108      	movs	r1, #8
 8002f82:	5299      	strh	r1, [r3, r2]
	HAL_GPIO_WritePin(Discharge.dbgLedPort, Discharge.dbgLedPin, GPIO_PIN_RESET); //LED on (default)
 8002f84:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <ioAssign+0xd8>)
 8002f86:	22e8      	movs	r2, #232	@ 0xe8
 8002f88:	5898      	ldr	r0, [r3, r2]
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003008 <ioAssign+0xd8>)
 8002f8c:	22ec      	movs	r2, #236	@ 0xec
 8002f8e:	5a9b      	ldrh	r3, [r3, r2]
 8002f90:	2200      	movs	r2, #0
 8002f92:	0019      	movs	r1, r3
 8002f94:	f001 ff41 	bl	8004e1a <HAL_GPIO_WritePin>

	//CS set to high (default state)
	HAL_GPIO_WritePin(Discharge.HVSense_ADC.CS_Port, Discharge.HVSense_ADC.CS_Pin, GPIO_PIN_SET);
 8002f98:	4a1b      	ldr	r2, [pc, #108]	@ (8003008 <ioAssign+0xd8>)
 8002f9a:	2386      	movs	r3, #134	@ 0x86
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	58d0      	ldr	r0, [r2, r3]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <ioAssign+0xd8>)
 8002fa2:	2388      	movs	r3, #136	@ 0x88
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	5ad3      	ldrh	r3, [r2, r3]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	0019      	movs	r1, r3
 8002fac:	f001 ff35 	bl	8004e1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Discharge.PDOC_ADC.CS_Port, Discharge.PDOC_ADC.CS_Pin, GPIO_PIN_SET);
 8002fb0:	4a15      	ldr	r2, [pc, #84]	@ (8003008 <ioAssign+0xd8>)
 8002fb2:	238c      	movs	r3, #140	@ 0x8c
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	58d0      	ldr	r0, [r2, r3]
 8002fb8:	4a13      	ldr	r2, [pc, #76]	@ (8003008 <ioAssign+0xd8>)
 8002fba:	238e      	movs	r3, #142	@ 0x8e
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	5ad3      	ldrh	r3, [r2, r3]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	f001 ff29 	bl	8004e1a <HAL_GPIO_WritePin>

	//Inputs
	Discharge.DischargeDisableInPort = GPIOA;
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <ioAssign+0xd8>)
 8002fca:	21f0      	movs	r1, #240	@ 0xf0
 8002fcc:	22a0      	movs	r2, #160	@ 0xa0
 8002fce:	05d2      	lsls	r2, r2, #23
 8002fd0:	505a      	str	r2, [r3, r1]
	Discharge.DischargeDisableInPin = GPIO_PIN_7;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <ioAssign+0xd8>)
 8002fd4:	22f4      	movs	r2, #244	@ 0xf4
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	5299      	strh	r1, [r3, r2]

	Discharge.FiveKWInPort = GPIOA;
 8002fda:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <ioAssign+0xd8>)
 8002fdc:	21f8      	movs	r1, #248	@ 0xf8
 8002fde:	22a0      	movs	r2, #160	@ 0xa0
 8002fe0:	05d2      	lsls	r2, r2, #23
 8002fe2:	505a      	str	r2, [r3, r1]
	Discharge.FiveKWInPin = GPIO_PIN_6;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	@ (8003008 <ioAssign+0xd8>)
 8002fe6:	22fc      	movs	r2, #252	@ 0xfc
 8002fe8:	2140      	movs	r1, #64	@ 0x40
 8002fea:	5299      	strh	r1, [r3, r2]

	Discharge.PDOCokInPort = GPIOA;
 8002fec:	4a06      	ldr	r2, [pc, #24]	@ (8003008 <ioAssign+0xd8>)
 8002fee:	2380      	movs	r3, #128	@ 0x80
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	21a0      	movs	r1, #160	@ 0xa0
 8002ff4:	05c9      	lsls	r1, r1, #23
 8002ff6:	50d1      	str	r1, [r2, r3]
	Discharge.PDOCokInPin = GPIO_PIN_15;
 8002ff8:	4a03      	ldr	r2, [pc, #12]	@ (8003008 <ioAssign+0xd8>)
 8002ffa:	2382      	movs	r3, #130	@ 0x82
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4905      	ldr	r1, [pc, #20]	@ (8003014 <ioAssign+0xe4>)
 8003000:	52d1      	strh	r1, [r2, r3]
}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000100 	.word	0x20000100
 800300c:	20000374 	.word	0x20000374
 8003010:	50000400 	.word	0x50000400
 8003014:	ffff8000 	.word	0xffff8000

08003018 <initialiseADC>:

void initialiseADC()
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 800301c:	2032      	movs	r0, #50	@ 0x32
 800301e:	f001 f9a1 	bl	8004364 <HAL_Delay>

	initADS7028(&Discharge.HVSense_ADC);
 8003022:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <initialiseADC+0x2c>)
 8003024:	0018      	movs	r0, r3
 8003026:	f000 f8c1 	bl	80031ac <initADS7028>
	initADS7028(&Discharge.PDOC_ADC);
 800302a:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <initialiseADC+0x30>)
 800302c:	0018      	movs	r0, r3
 800302e:	f000 f8bd 	bl	80031ac <initADS7028>

	HAL_Delay(1000);
 8003032:	23fa      	movs	r3, #250	@ 0xfa
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	0018      	movs	r0, r3
 8003038:	f001 f994 	bl	8004364 <HAL_Delay>
}
 800303c:	46c0      	nop			@ (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	20000208 	.word	0x20000208
 8003048:	20000214 	.word	0x20000214

0800304c <TickerAttach>:
#include "Ticker.h"

TickerInfo_t Ticker = {-1, 0, 0, NULL};

void TickerAttach(TickerInfo_t* Ticker, fpointer FunctionCallback, uint32_t interval)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
    if (Ticker->tickers == MAX_NUMBER_OF_TICKERS - 1) return; //Check if max number of tickers have been reached.
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b09      	cmp	r3, #9
 800305e:	d018      	beq.n	8003092 <TickerAttach+0x46>

    Ticker->tickers++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	b2da      	uxtb	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	701a      	strb	r2, [r3, #0]
    Ticker->intervals[Ticker->tickers] = interval;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	330a      	adds	r3, #10
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	18d3      	adds	r3, r2, r3
 8003078:	3304      	adds	r3, #4
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
    Ticker->callbackFunctions[Ticker->tickers] = FunctionCallback;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	3314      	adds	r3, #20
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	18d3      	adds	r3, r2, r3
 800308a:	3304      	adds	r3, #4
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e000      	b.n	8003094 <TickerAttach+0x48>
    if (Ticker->tickers == MAX_NUMBER_OF_TICKERS - 1) return; //Check if max number of tickers have been reached.
 8003092:	46c0      	nop			@ (mov r8, r8)
}
 8003094:	46bd      	mov	sp, r7
 8003096:	b004      	add	sp, #16
 8003098:	bd80      	pop	{r7, pc}

0800309a <TickerHandler>:

void TickerHandler(TickerInfo_t* Ticker)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < Ticker->tickers + 1; i++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e02d      	b.n	8003104 <TickerHandler+0x6a>
    {
        Ticker->counter[i]++;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	18d3      	adds	r3, r2, r3
 80030b0:	3304      	adds	r3, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	18cb      	adds	r3, r1, r3
 80030be:	3304      	adds	r3, #4
 80030c0:	601a      	str	r2, [r3, #0]

        if (Ticker->counter[i]/ Ticker->intervals[i] >= 1)
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	18d3      	adds	r3, r2, r3
 80030ca:	3304      	adds	r3, #4
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	330a      	adds	r3, #10
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	18cb      	adds	r3, r1, r3
 80030d8:	3304      	adds	r3, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d30e      	bcc.n	80030fe <TickerHandler+0x64>
        {
            Ticker->counter[i] = 0;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	18d3      	adds	r3, r2, r3
 80030e8:	3304      	adds	r3, #4
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
            Ticker->callbackFunctions[i]();
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3314      	adds	r3, #20
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	18d3      	adds	r3, r2, r3
 80030f8:	3304      	adds	r3, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4798      	blx	r3
    for (int i = 0; i < Ticker->tickers + 1; i++)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3301      	adds	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	001a      	movs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4293      	cmp	r3, r2
 800310e:	ddcb      	ble.n	80030a8 <TickerHandler+0xe>
        }
    }
}
 8003110:	46c0      	nop			@ (mov r8, r8)
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b004      	add	sp, #16
 8003118:	bd80      	pop	{r7, pc}

0800311a <setCS>:

/* -------------------------------------------------------------------------- */
/*                 Other functions added in to help this works                */
/* -------------------------------------------------------------------------- */
void setCS(ADS7028_HandleTypeDef *ADC_handle, uint8_t state)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	000a      	movs	r2, r1
 8003124:	1cfb      	adds	r3, r7, #3
 8003126:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ADC_handle->CS_Port, ADC_handle->CS_Pin, state);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6858      	ldr	r0, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8919      	ldrh	r1, [r3, #8]
 8003130:	1cfb      	adds	r3, r7, #3
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	001a      	movs	r2, r3
 8003136:	f001 fe70 	bl	8004e1a <HAL_GPIO_WritePin>
};
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b002      	add	sp, #8
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <spiSendReceiveArray>:

void spiSendReceiveArray(ADS7028_HandleTypeDef *ADC_handle, uint8_t *dataTx, uint8_t *dataRx, uint8_t numberOfBytes)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b087      	sub	sp, #28
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	001a      	movs	r2, r3
 8003152:	1cfb      	adds	r3, r7, #3
 8003154:	701a      	strb	r2, [r3, #0]
    // Require that dataTx and dataRx are not NULL pointers
    assert(dataTx && dataRx);   
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <spiSendReceiveArray+0x1e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <spiSendReceiveArray+0x2a>
 8003162:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <spiSendReceiveArray+0x5c>)
 8003164:	4a0f      	ldr	r2, [pc, #60]	@ (80031a4 <spiSendReceiveArray+0x60>)
 8003166:	4810      	ldr	r0, [pc, #64]	@ (80031a8 <spiSendReceiveArray+0x64>)
 8003168:	2131      	movs	r1, #49	@ 0x31
 800316a:	f003 fe7f 	bl	8006e6c <__assert_func>
    // Set the nCS pin LOW

    setCS(ADC_handle, 0);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2100      	movs	r1, #0
 8003172:	0018      	movs	r0, r3
 8003174:	f7ff ffd1 	bl	800311a <setCS>
    //HAL_Delay(1);

    HAL_SPI_TransmitReceive(ADC_handle->SPI_Handle, dataTx, dataRx, numberOfBytes, 100);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	1cfb      	adds	r3, r7, #3
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	2464      	movs	r4, #100	@ 0x64
 8003188:	9400      	str	r4, [sp, #0]
 800318a:	f002 fe9d 	bl	8005ec8 <HAL_SPI_TransmitReceive>

    //HAL_Delay(1);
    setCS(ADC_handle, 1);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2101      	movs	r1, #1
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff ffc1 	bl	800311a <setCS>
};
 8003198:	46c0      	nop			@ (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b005      	add	sp, #20
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	080081fc 	.word	0x080081fc
 80031a4:	080082ac 	.word	0x080082ac
 80031a8:	08008210 	.word	0x08008210

080031ac <initADS7028>:
//!
//! \return None.
//
//*****************************************************************************
void initADS7028(ADS7028_HandleTypeDef *ADC_handle)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    // (OPTIONAL) Provide additional delay time for power supply settling
    HAL_Delay(50);
 80031b4:	2032      	movs	r0, #50	@ 0x32
 80031b6:	f001 f8d5 	bl	8004364 <HAL_Delay>

    // Reset device
    resetDevice(ADC_handle);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 f80a 	bl	80031d6 <resetDevice>

    // Clear BOR flag
    setRegisterBits(ADC_handle, SYSTEM_STATUS_ADDRESS, SYSTEM_STATUS_BOR_MASK);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	2100      	movs	r1, #0
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 f981 	bl	80034d0 <setRegisterBits>

    // (RECOMMENDED) If you plan to modify the CRC_EN or CPOL_CPHA bits,
    // do so here (and only here) to be simplify the code implementation.
    // (OPTIONAL) Read back registers and check STATUS register for faults

}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <resetDevice>:
//!
//! \return None
//
//*****************************************************************************
void resetDevice(ADS7028_HandleTypeDef *ADC_handle)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
    // Set the RST bit high to reset the device
    setRegisterBits(ADC_handle, GENERAL_CFG_ADDRESS, GENERAL_CFG_RST_MASK);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	2101      	movs	r1, #1
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 f973 	bl	80034d0 <setRegisterBits>

    // Update internal register map array
    restoreRegisterDefaults();
 80031ea:	f000 fa49 	bl	8003680 <restoreRegisterDefaults>
}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b002      	add	sp, #8
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <readSingleRegister>:
//!
//! \return Returns the 8-bit register read result.
//
//*****************************************************************************
uint8_t readSingleRegister(ADS7028_HandleTypeDef *ADC_handle, uint8_t address)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	000a      	movs	r2, r1
 8003202:	1cfb      	adds	r3, r7, #3
 8003204:	701a      	strb	r2, [r3, #0]
    // Check that the register address is in range
    assert(address <= MAX_REGISTER_ADDRESS);
 8003206:	1cfb      	adds	r3, r7, #3
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2beb      	cmp	r3, #235	@ 0xeb
 800320c:	d905      	bls.n	800321a <readSingleRegister+0x22>
 800320e:	4b4f      	ldr	r3, [pc, #316]	@ (800334c <readSingleRegister+0x154>)
 8003210:	4a4f      	ldr	r2, [pc, #316]	@ (8003350 <readSingleRegister+0x158>)
 8003212:	4850      	ldr	r0, [pc, #320]	@ (8003354 <readSingleRegister+0x15c>)
 8003214:	21e2      	movs	r1, #226	@ 0xe2
 8003216:	f003 fe29 	bl	8006e6c <__assert_func>

    uint8_t dataTx[4] = {0};
 800321a:	2310      	movs	r3, #16
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
    uint8_t dataRx[4] = {0};
 8003222:	230c      	movs	r3, #12
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
    uint8_t numberOfBytes = SPI_CRC_ENABLED ? 4 : 3;
 800322a:	2001      	movs	r0, #1
 800322c:	f000 f896 	bl	800335c <getRegisterValue>
 8003230:	0003      	movs	r3, r0
 8003232:	001a      	movs	r2, r3
 8003234:	2340      	movs	r3, #64	@ 0x40
 8003236:	4013      	ands	r3, r2
 8003238:	d001      	beq.n	800323e <readSingleRegister+0x46>
 800323a:	2204      	movs	r2, #4
 800323c:	e000      	b.n	8003240 <readSingleRegister+0x48>
 800323e:	2203      	movs	r2, #3
 8003240:	2516      	movs	r5, #22
 8003242:	197b      	adds	r3, r7, r5
 8003244:	701a      	strb	r2, [r3, #0]
    bool crcError = false;
 8003246:	2317      	movs	r3, #23
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]

    //
    // [FRAME 1] RREG command
    //
    dataTx[0] = OPCODE_RREG;
 800324e:	2410      	movs	r4, #16
 8003250:	193b      	adds	r3, r7, r4
 8003252:	2210      	movs	r2, #16
 8003254:	701a      	strb	r2, [r3, #0]
    dataTx[1] = address;
 8003256:	193b      	adds	r3, r7, r4
 8003258:	1cfa      	adds	r2, r7, #3
 800325a:	7812      	ldrb	r2, [r2, #0]
 800325c:	705a      	strb	r2, [r3, #1]
    dataTx[2] = OPCODE_NULL;
 800325e:	193b      	adds	r3, r7, r4
 8003260:	2200      	movs	r2, #0
 8003262:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 8003264:	2001      	movs	r0, #1
 8003266:	f000 f879 	bl	800335c <getRegisterValue>
 800326a:	0003      	movs	r3, r0
 800326c:	001a      	movs	r2, r3
 800326e:	2340      	movs	r3, #64	@ 0x40
 8003270:	4013      	ands	r3, r2
 8003272:	d00c      	beq.n	800328e <readSingleRegister+0x96>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 8003274:	197b      	adds	r3, r7, r5
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	3b01      	subs	r3, #1
 800327a:	b2d9      	uxtb	r1, r3
 800327c:	193b      	adds	r3, r7, r4
 800327e:	2200      	movs	r2, #0
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f995 	bl	80035b0 <calculateCRC>
 8003286:	0003      	movs	r3, r0
 8003288:	001a      	movs	r2, r3
 800328a:	193b      	adds	r3, r7, r4
 800328c:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 800328e:	2516      	movs	r5, #22
 8003290:	197b      	adds	r3, r7, r5
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	220c      	movs	r2, #12
 8003296:	18ba      	adds	r2, r7, r2
 8003298:	2410      	movs	r4, #16
 800329a:	1939      	adds	r1, r7, r4
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff51 	bl	8003144 <spiSendReceiveArray>

    //
    // [FRAME 2] NULL command
    //
    dataTx[0] = OPCODE_NULL;
 80032a2:	193b      	adds	r3, r7, r4
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
    dataTx[1] = OPCODE_NULL;
 80032a8:	193b      	adds	r3, r7, r4
 80032aa:	2200      	movs	r2, #0
 80032ac:	705a      	strb	r2, [r3, #1]
    dataTx[2] = OPCODE_NULL;
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	2200      	movs	r2, #0
 80032b2:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 80032b4:	2001      	movs	r0, #1
 80032b6:	f000 f851 	bl	800335c <getRegisterValue>
 80032ba:	0003      	movs	r3, r0
 80032bc:	001a      	movs	r2, r3
 80032be:	2340      	movs	r3, #64	@ 0x40
 80032c0:	4013      	ands	r3, r2
 80032c2:	d00c      	beq.n	80032de <readSingleRegister+0xe6>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 80032c4:	197b      	adds	r3, r7, r5
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b2d9      	uxtb	r1, r3
 80032cc:	193b      	adds	r3, r7, r4
 80032ce:	2200      	movs	r2, #0
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 f96d 	bl	80035b0 <calculateCRC>
 80032d6:	0003      	movs	r3, r0
 80032d8:	001a      	movs	r2, r3
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 80032de:	2316      	movs	r3, #22
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	240c      	movs	r4, #12
 80032e6:	193a      	adds	r2, r7, r4
 80032e8:	2110      	movs	r1, #16
 80032ea:	1879      	adds	r1, r7, r1
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff29 	bl	8003144 <spiSendReceiveArray>

    // Check for CRC error
    if (SPI_CRC_ENABLED)
 80032f2:	2001      	movs	r0, #1
 80032f4:	f000 f832 	bl	800335c <getRegisterValue>
 80032f8:	0003      	movs	r3, r0
 80032fa:	001a      	movs	r2, r3
 80032fc:	2340      	movs	r3, #64	@ 0x40
 80032fe:	4013      	ands	r3, r2
 8003300:	d00c      	beq.n	800331c <readSingleRegister+0x124>
    {
        // To check the CRC validity you can test either of the following conditions:
        // 1) "dataRx[1] == calculateCRC(dataRx, 1, CRC_INITIAL_SEED)" - true means no CRC error occurred.
        // 2) "0x00 == calculateCRC(dataRx, 2, CRC_INITIAL_SEED) - including the CRC byte in the calculation should return 0x00.
        crcError = (bool) calculateCRC(dataRx, 2, CRC_INITIAL_SEED);
 8003302:	193b      	adds	r3, r7, r4
 8003304:	2200      	movs	r2, #0
 8003306:	2102      	movs	r1, #2
 8003308:	0018      	movs	r0, r3
 800330a:	f000 f951 	bl	80035b0 <calculateCRC>
 800330e:	0003      	movs	r3, r0
 8003310:	001a      	movs	r2, r3
 8003312:	2317      	movs	r3, #23
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	1e51      	subs	r1, r2, #1
 8003318:	418a      	sbcs	r2, r1
 800331a:	701a      	strb	r2, [r3, #0]
    }
    if (crcError)
 800331c:	2317      	movs	r3, #23
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <readSingleRegister+0x136>
    {
        // Update internal register array
        registerMap[SYSTEM_STATUS_ADDRESS] = registerMap[SYSTEM_STATUS_ADDRESS] || SYSTEM_STATUS_CRCERR_IN_MASK;
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <readSingleRegister+0x160>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e006      	b.n	800333c <readSingleRegister+0x144>

        // (OPTIONAL) Consider notifying the system of the error and repeating the previous command.
    }
    else
    {
        registerMap[address] = dataRx[0];
 800332e:	1cfb      	adds	r3, r7, #3
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	220c      	movs	r2, #12
 8003334:	18ba      	adds	r2, r7, r2
 8003336:	7811      	ldrb	r1, [r2, #0]
 8003338:	4a07      	ldr	r2, [pc, #28]	@ (8003358 <readSingleRegister+0x160>)
 800333a:	54d1      	strb	r1, [r2, r3]
    }

    return registerMap[address];
 800333c:	1cfb      	adds	r3, r7, #3
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	4a05      	ldr	r2, [pc, #20]	@ (8003358 <readSingleRegister+0x160>)
 8003342:	5cd3      	ldrb	r3, [r2, r3]
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b006      	add	sp, #24
 800334a:	bdb0      	pop	{r4, r5, r7, pc}
 800334c:	08008228 	.word	0x08008228
 8003350:	080082c0 	.word	0x080082c0
 8003354:	08008210 	.word	0x08008210
 8003358:	20000224 	.word	0x20000224

0800335c <getRegisterValue>:
//!
//! \return unsigned 8-bit register value.
//
//*****************************************************************************
uint8_t getRegisterValue(uint8_t address)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	0002      	movs	r2, r0
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	701a      	strb	r2, [r3, #0]
    assert(address <= MAX_REGISTER_ADDRESS);
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2beb      	cmp	r3, #235	@ 0xeb
 800336e:	d906      	bls.n	800337e <getRegisterValue+0x22>
 8003370:	4b07      	ldr	r3, [pc, #28]	@ (8003390 <getRegisterValue+0x34>)
 8003372:	4a08      	ldr	r2, [pc, #32]	@ (8003394 <getRegisterValue+0x38>)
 8003374:	212c      	movs	r1, #44	@ 0x2c
 8003376:	31ff      	adds	r1, #255	@ 0xff
 8003378:	4807      	ldr	r0, [pc, #28]	@ (8003398 <getRegisterValue+0x3c>)
 800337a:	f003 fd77 	bl	8006e6c <__assert_func>
    return registerMap[address];
 800337e:	1dfb      	adds	r3, r7, #7
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	4a06      	ldr	r2, [pc, #24]	@ (800339c <getRegisterValue+0x40>)
 8003384:	5cd3      	ldrb	r3, [r2, r3]
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	08008228 	.word	0x08008228
 8003394:	080082d4 	.word	0x080082d4
 8003398:	08008210 	.word	0x08008210
 800339c:	20000224 	.word	0x20000224

080033a0 <writeSingleRegister>:
//!
//! \return None.
//
//*****************************************************************************
void writeSingleRegister(ADS7028_HandleTypeDef *ADC_handle, uint8_t address, uint8_t data)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	0008      	movs	r0, r1
 80033aa:	0011      	movs	r1, r2
 80033ac:	1cfb      	adds	r3, r7, #3
 80033ae:	1c02      	adds	r2, r0, #0
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	1cbb      	adds	r3, r7, #2
 80033b4:	1c0a      	adds	r2, r1, #0
 80033b6:	701a      	strb	r2, [r3, #0]
    // Check that the register address is in range
    assert(address <= MAX_REGISTER_ADDRESS);
 80033b8:	1cfb      	adds	r3, r7, #3
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2beb      	cmp	r3, #235	@ 0xeb
 80033be:	d906      	bls.n	80033ce <writeSingleRegister+0x2e>
 80033c0:	4b3f      	ldr	r3, [pc, #252]	@ (80034c0 <writeSingleRegister+0x120>)
 80033c2:	4a40      	ldr	r2, [pc, #256]	@ (80034c4 <writeSingleRegister+0x124>)
 80033c4:	2140      	movs	r1, #64	@ 0x40
 80033c6:	31ff      	adds	r1, #255	@ 0xff
 80033c8:	483f      	ldr	r0, [pc, #252]	@ (80034c8 <writeSingleRegister+0x128>)
 80033ca:	f003 fd4f 	bl	8006e6c <__assert_func>

    uint8_t dataTx[4] = { 0 };
 80033ce:	2310      	movs	r3, #16
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
    uint8_t dataRx[4] = { 0 };
 80033d6:	230c      	movs	r3, #12
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    uint8_t numberOfBytes = SPI_CRC_ENABLED ? 4 : 3;
 80033de:	2001      	movs	r0, #1
 80033e0:	f7ff ffbc 	bl	800335c <getRegisterValue>
 80033e4:	0003      	movs	r3, r0
 80033e6:	001a      	movs	r2, r3
 80033e8:	2340      	movs	r3, #64	@ 0x40
 80033ea:	4013      	ands	r3, r2
 80033ec:	d001      	beq.n	80033f2 <writeSingleRegister+0x52>
 80033ee:	2204      	movs	r2, #4
 80033f0:	e000      	b.n	80033f4 <writeSingleRegister+0x54>
 80033f2:	2203      	movs	r2, #3
 80033f4:	2317      	movs	r3, #23
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	701a      	strb	r2, [r3, #0]

    // (OPTIONAL) Check for and clear CRC error to proceed with register write.
    // Once a CRC error has occurred, writes are only allowed to the SYSTEM_STATUS and GENERAL_CFG registers
    if (SPI_CRC_ENABLED && (address > GENERAL_CFG_ADDRESS))
 80033fa:	2001      	movs	r0, #1
 80033fc:	f7ff ffae 	bl	800335c <getRegisterValue>
 8003400:	0003      	movs	r3, r0
 8003402:	001a      	movs	r2, r3
 8003404:	2340      	movs	r3, #64	@ 0x40
 8003406:	4013      	ands	r3, r2
 8003408:	d016      	beq.n	8003438 <writeSingleRegister+0x98>
 800340a:	1cfb      	adds	r3, r7, #3
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d912      	bls.n	8003438 <writeSingleRegister+0x98>
    {
        // Read STATUS register to check whether CRC error has occurred or not.
        readSingleRegister(ADC_handle, SYSTEM_STATUS_ADDRESS);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2100      	movs	r1, #0
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff feee 	bl	80031f8 <readSingleRegister>
        if (SPI_CRCERR_IN)
 800341c:	2000      	movs	r0, #0
 800341e:	f7ff ff9d 	bl	800335c <getRegisterValue>
 8003422:	0003      	movs	r3, r0
 8003424:	001a      	movs	r2, r3
 8003426:	2302      	movs	r3, #2
 8003428:	4013      	ands	r3, r2
 800342a:	d005      	beq.n	8003438 <writeSingleRegister+0x98>
        {
            // (OPTIONAL) Clear the CRC error by writing 1b to CRCERR_IN bit
            setRegisterBits(ADC_handle, SYSTEM_STATUS_ADDRESS, SYSTEM_STATUS_CRCERR_IN_MASK);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	2100      	movs	r1, #0
 8003432:	0018      	movs	r0, r3
 8003434:	f000 f84c 	bl	80034d0 <setRegisterBits>
            // (OPTIONAL) Consider notifying the system of the error and repeating the previous command.
        }
    }

    // WREG command
    dataTx[0] = OPCODE_WREG;
 8003438:	2410      	movs	r4, #16
 800343a:	193b      	adds	r3, r7, r4
 800343c:	2208      	movs	r2, #8
 800343e:	701a      	strb	r2, [r3, #0]
    dataTx[1] = address;
 8003440:	193b      	adds	r3, r7, r4
 8003442:	1cfa      	adds	r2, r7, #3
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	705a      	strb	r2, [r3, #1]
    dataTx[2] = data;
 8003448:	193b      	adds	r3, r7, r4
 800344a:	1cba      	adds	r2, r7, #2
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 8003450:	2001      	movs	r0, #1
 8003452:	f7ff ff83 	bl	800335c <getRegisterValue>
 8003456:	0003      	movs	r3, r0
 8003458:	001a      	movs	r2, r3
 800345a:	2340      	movs	r3, #64	@ 0x40
 800345c:	4013      	ands	r3, r2
 800345e:	d00d      	beq.n	800347c <writeSingleRegister+0xdc>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 8003460:	2317      	movs	r3, #23
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	3b01      	subs	r3, #1
 8003468:	b2d9      	uxtb	r1, r3
 800346a:	193b      	adds	r3, r7, r4
 800346c:	2200      	movs	r2, #0
 800346e:	0018      	movs	r0, r3
 8003470:	f000 f89e 	bl	80035b0 <calculateCRC>
 8003474:	0003      	movs	r3, r0
 8003476:	001a      	movs	r2, r3
 8003478:	193b      	adds	r3, r7, r4
 800347a:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 800347c:	2317      	movs	r3, #23
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	220c      	movs	r2, #12
 8003484:	18ba      	adds	r2, r7, r2
 8003486:	2110      	movs	r1, #16
 8003488:	1879      	adds	r1, r7, r1
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fe5a 	bl	8003144 <spiSendReceiveArray>

    // Update internal register map array (assume command was successful).
    // NOTE: This is required for writing to the CRC_EN bit to ensure read back uses the correct mode.
    registerMap[address] = data;
 8003490:	1cfb      	adds	r3, r7, #3
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4a0d      	ldr	r2, [pc, #52]	@ (80034cc <writeSingleRegister+0x12c>)
 8003496:	1cb9      	adds	r1, r7, #2
 8003498:	7809      	ldrb	r1, [r1, #0]
 800349a:	54d1      	strb	r1, [r2, r3]

    // NOTE: If you modify the CPOL_CPHA bits in the DATA_CFG register, the SPI perhiperal will need to be reconfigured here.

    // (RECOMMENDED) Read back register to confirm register write was successful
    registerMap[address] = readSingleRegister(ADC_handle, address);
 800349c:	1cfb      	adds	r3, r7, #3
 800349e:	781c      	ldrb	r4, [r3, #0]
 80034a0:	1cfb      	adds	r3, r7, #3
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0011      	movs	r1, r2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff fea5 	bl	80031f8 <readSingleRegister>
 80034ae:	0003      	movs	r3, r0
 80034b0:	001a      	movs	r2, r3
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <writeSingleRegister+0x12c>)
 80034b4:	551a      	strb	r2, [r3, r4]
}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b007      	add	sp, #28
 80034bc:	bd90      	pop	{r4, r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	08008228 	.word	0x08008228
 80034c4:	080082e8 	.word	0x080082e8
 80034c8:	08008210 	.word	0x08008210
 80034cc:	20000224 	.word	0x20000224

080034d0 <setRegisterBits>:
//!
//! \return None.
//
//*****************************************************************************
void setRegisterBits(ADS7028_HandleTypeDef *ADC_handle, uint8_t address, uint8_t bitMask)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	0008      	movs	r0, r1
 80034da:	0011      	movs	r1, r2
 80034dc:	1cfb      	adds	r3, r7, #3
 80034de:	1c02      	adds	r2, r0, #0
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	1cbb      	adds	r3, r7, #2
 80034e4:	1c0a      	adds	r2, r1, #0
 80034e6:	701a      	strb	r2, [r3, #0]
    // Check that the register address is in range
    assert(address <= MAX_REGISTER_ADDRESS);
 80034e8:	1cfb      	adds	r3, r7, #3
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2beb      	cmp	r3, #235	@ 0xeb
 80034ee:	d906      	bls.n	80034fe <setRegisterBits+0x2e>
 80034f0:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <setRegisterBits+0xd0>)
 80034f2:	4a2c      	ldr	r2, [pc, #176]	@ (80035a4 <setRegisterBits+0xd4>)
 80034f4:	21bc      	movs	r1, #188	@ 0xbc
 80034f6:	0049      	lsls	r1, r1, #1
 80034f8:	482b      	ldr	r0, [pc, #172]	@ (80035a8 <setRegisterBits+0xd8>)
 80034fa:	f003 fcb7 	bl	8006e6c <__assert_func>

    uint8_t dataTx[4] = {0};
 80034fe:	2310      	movs	r3, #16
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
    uint8_t dataRx[4] = {0};
 8003506:	230c      	movs	r3, #12
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    uint8_t numberOfBytes = SPI_CRC_ENABLED ? 4 : 3;
 800350e:	2001      	movs	r0, #1
 8003510:	f7ff ff24 	bl	800335c <getRegisterValue>
 8003514:	0003      	movs	r3, r0
 8003516:	001a      	movs	r2, r3
 8003518:	2340      	movs	r3, #64	@ 0x40
 800351a:	4013      	ands	r3, r2
 800351c:	d001      	beq.n	8003522 <setRegisterBits+0x52>
 800351e:	2204      	movs	r2, #4
 8003520:	e000      	b.n	8003524 <setRegisterBits+0x54>
 8003522:	2203      	movs	r2, #3
 8003524:	2517      	movs	r5, #23
 8003526:	197b      	adds	r3, r7, r5
 8003528:	701a      	strb	r2, [r3, #0]

    // SETBIT command
    dataTx[0] = OPCODE_SETBIT;
 800352a:	2410      	movs	r4, #16
 800352c:	193b      	adds	r3, r7, r4
 800352e:	2218      	movs	r2, #24
 8003530:	701a      	strb	r2, [r3, #0]
    dataTx[1] = address;
 8003532:	193b      	adds	r3, r7, r4
 8003534:	1cfa      	adds	r2, r7, #3
 8003536:	7812      	ldrb	r2, [r2, #0]
 8003538:	705a      	strb	r2, [r3, #1]
    dataTx[2] = bitMask;
 800353a:	193b      	adds	r3, r7, r4
 800353c:	1cba      	adds	r2, r7, #2
 800353e:	7812      	ldrb	r2, [r2, #0]
 8003540:	709a      	strb	r2, [r3, #2]
    if (SPI_CRC_ENABLED)
 8003542:	2001      	movs	r0, #1
 8003544:	f7ff ff0a 	bl	800335c <getRegisterValue>
 8003548:	0003      	movs	r3, r0
 800354a:	001a      	movs	r2, r3
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	4013      	ands	r3, r2
 8003550:	d00c      	beq.n	800356c <setRegisterBits+0x9c>
    {
        dataTx[3] = calculateCRC(dataTx, numberOfBytes - 1, CRC_INITIAL_SEED);
 8003552:	197b      	adds	r3, r7, r5
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	3b01      	subs	r3, #1
 8003558:	b2d9      	uxtb	r1, r3
 800355a:	193b      	adds	r3, r7, r4
 800355c:	2200      	movs	r2, #0
 800355e:	0018      	movs	r0, r3
 8003560:	f000 f826 	bl	80035b0 <calculateCRC>
 8003564:	0003      	movs	r3, r0
 8003566:	001a      	movs	r2, r3
 8003568:	193b      	adds	r3, r7, r4
 800356a:	70da      	strb	r2, [r3, #3]
    }
    spiSendReceiveArray(ADC_handle, dataTx, dataRx, numberOfBytes);
 800356c:	2317      	movs	r3, #23
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	220c      	movs	r2, #12
 8003574:	18ba      	adds	r2, r7, r2
 8003576:	2110      	movs	r1, #16
 8003578:	1879      	adds	r1, r7, r1
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fde2 	bl	8003144 <spiSendReceiveArray>

    // Update internal register map array (assume command was successful).
    // NOTE: This is required for writing to the CRC_EN bit to ensure read back uses the correct mode.
    registerMap[address] = registerMap[address] | bitMask;
 8003580:	1cfb      	adds	r3, r7, #3
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	4a09      	ldr	r2, [pc, #36]	@ (80035ac <setRegisterBits+0xdc>)
 8003586:	5cd1      	ldrb	r1, [r2, r3]
 8003588:	1cfb      	adds	r3, r7, #3
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	1cba      	adds	r2, r7, #2
 800358e:	7812      	ldrb	r2, [r2, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	b2d1      	uxtb	r1, r2
 8003594:	4a05      	ldr	r2, [pc, #20]	@ (80035ac <setRegisterBits+0xdc>)
 8003596:	54d1      	strb	r1, [r2, r3]

    // (OPTIONAL) Check if a CRC error occurred
}
 8003598:	46c0      	nop			@ (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b006      	add	sp, #24
 800359e:	bdb0      	pop	{r4, r5, r7, pc}
 80035a0:	08008228 	.word	0x08008228
 80035a4:	080082fc 	.word	0x080082fc
 80035a8:	08008210 	.word	0x08008210
 80035ac:	20000224 	.word	0x20000224

080035b0 <calculateCRC>:
//!
//! \return 8-bit calculated CRC word
//
//*****************************************************************************
uint8_t calculateCRC(const uint8_t dataBytes[], uint8_t numberBytes, uint8_t initialValue)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	0008      	movs	r0, r1
 80035ba:	0011      	movs	r1, r2
 80035bc:	1cfb      	adds	r3, r7, #3
 80035be:	1c02      	adds	r2, r0, #0
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	1cbb      	adds	r3, r7, #2
 80035c4:	1c0a      	adds	r2, r1, #0
 80035c6:	701a      	strb	r2, [r3, #0]
    // Check that "dataBytes" is not a null pointer
    assert(dataBytes != 0x00);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <calculateCRC+0x2c>
 80035ce:	4b29      	ldr	r3, [pc, #164]	@ (8003674 <calculateCRC+0xc4>)
 80035d0:	4a29      	ldr	r2, [pc, #164]	@ (8003678 <calculateCRC+0xc8>)
 80035d2:	21e5      	movs	r1, #229	@ 0xe5
 80035d4:	0049      	lsls	r1, r1, #1
 80035d6:	4829      	ldr	r0, [pc, #164]	@ (800367c <calculateCRC+0xcc>)
 80035d8:	f003 fc48 	bl	8006e6c <__assert_func>
    bool        dataMSb;                        /* Most significant bit of data byte */
    bool        crcMSb;                         /* Most significant bit of crc byte  */

    // Initial value of crc register
    // Use 0x00 when starting a new computation OR provide result of previous CRC calculation when continuing an on-going calculation.
    uint8_t crc = initialValue;
 80035dc:	230f      	movs	r3, #15
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	1cba      	adds	r2, r7, #2
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	701a      	strb	r2, [r3, #0]

    // CRC polynomial = x^8 + x^2 + x^1 + 1
    const uint8_t poly = 0x07;
 80035e6:	230e      	movs	r3, #14
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	2207      	movs	r2, #7
 80035ec:	701a      	strb	r2, [r3, #0]

    /* CRC algorithm */

    // Loop through all bytes in the dataBytes[] array
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e033      	b.n	800365c <calculateCRC+0xac>
    {
        // Point to MSb in byte
        bitIndex = 0x80u;
 80035f4:	2380      	movs	r3, #128	@ 0x80
 80035f6:	617b      	str	r3, [r7, #20]

        // Loop through all bits in the current byte
        while (bitIndex > 0)
 80035f8:	e02a      	b.n	8003650 <calculateCRC+0xa0>
        {
            // Check MSB's of data and crc
            dataMSb = (bool) (dataBytes[byteIndex] & bitIndex);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	18d3      	adds	r3, r2, r3
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	001a      	movs	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	401a      	ands	r2, r3
 8003608:	200d      	movs	r0, #13
 800360a:	183b      	adds	r3, r7, r0
 800360c:	1e51      	subs	r1, r2, #1
 800360e:	418a      	sbcs	r2, r1
 8003610:	701a      	strb	r2, [r3, #0]
            crcMSb  = (bool) (crc & 0x80u);
 8003612:	210f      	movs	r1, #15
 8003614:	187b      	adds	r3, r7, r1
 8003616:	2200      	movs	r2, #0
 8003618:	569a      	ldrsb	r2, [r3, r2]
 800361a:	240c      	movs	r4, #12
 800361c:	193b      	adds	r3, r7, r4
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	09d2      	lsrs	r2, r2, #7
 8003622:	701a      	strb	r2, [r3, #0]

            // Update crc register
            crc <<= 1;
 8003624:	187a      	adds	r2, r7, r1
 8003626:	187b      	adds	r3, r7, r1
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	18db      	adds	r3, r3, r3
 800362c:	7013      	strb	r3, [r2, #0]
            if (dataMSb ^ crcMSb) { crc ^= poly; }
 800362e:	183a      	adds	r2, r7, r0
 8003630:	193b      	adds	r3, r7, r4
 8003632:	7812      	ldrb	r2, [r2, #0]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d007      	beq.n	800364a <calculateCRC+0x9a>
 800363a:	187b      	adds	r3, r7, r1
 800363c:	1879      	adds	r1, r7, r1
 800363e:	220e      	movs	r2, #14
 8003640:	18ba      	adds	r2, r7, r2
 8003642:	7809      	ldrb	r1, [r1, #0]
 8003644:	7812      	ldrb	r2, [r2, #0]
 8003646:	404a      	eors	r2, r1
 8003648:	701a      	strb	r2, [r3, #0]

            // Shift MSb pointer to the next data bit
            bitIndex >>= 1;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	105b      	asrs	r3, r3, #1
 800364e:	617b      	str	r3, [r7, #20]
        while (bitIndex > 0)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b00      	cmp	r3, #0
 8003654:	dcd1      	bgt.n	80035fa <calculateCRC+0x4a>
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	3301      	adds	r3, #1
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	1cfb      	adds	r3, r7, #3
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	429a      	cmp	r2, r3
 8003664:	dbc6      	blt.n	80035f4 <calculateCRC+0x44>
        }
    }

    return crc;
 8003666:	230f      	movs	r3, #15
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	781b      	ldrb	r3, [r3, #0]
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b007      	add	sp, #28
 8003672:	bd90      	pop	{r4, r7, pc}
 8003674:	08008248 	.word	0x08008248
 8003678:	0800830c 	.word	0x0800830c
 800367c:	08008210 	.word	0x08008210

08003680 <restoreRegisterDefaults>:
//!
//! \return None.
//
//*****************************************************************************
static void restoreRegisterDefaults(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
    registerMap[SYSTEM_STATUS_ADDRESS]          = SYSTEM_STATUS_DEFAULT;
 8003684:	4bd3      	ldr	r3, [pc, #844]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003686:	2281      	movs	r2, #129	@ 0x81
 8003688:	701a      	strb	r2, [r3, #0]
    registerMap[GENERAL_CFG_ADDRESS]            = GENERAL_CFG_DEFAULT;
 800368a:	4bd2      	ldr	r3, [pc, #840]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800368c:	2200      	movs	r2, #0
 800368e:	705a      	strb	r2, [r3, #1]

    registerMap[DATA_CFG_ADDRESS]               = DATA_CFG_DEFAULT;
 8003690:	4bd0      	ldr	r3, [pc, #832]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003692:	2200      	movs	r2, #0
 8003694:	709a      	strb	r2, [r3, #2]
    registerMap[OSR_CFG_ADDRESS]                = OSR_CFG_DEFAULT;
 8003696:	4bcf      	ldr	r3, [pc, #828]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003698:	2200      	movs	r2, #0
 800369a:	70da      	strb	r2, [r3, #3]
    registerMap[OPMODE_CFG_ADDRESS]             = OPMODE_CFG_DEFAULT;
 800369c:	4bcd      	ldr	r3, [pc, #820]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800369e:	2200      	movs	r2, #0
 80036a0:	711a      	strb	r2, [r3, #4]
    registerMap[PIN_CFG_ADDRESS]                = PIN_CFG_DEFAULT;
 80036a2:	4bcc      	ldr	r3, [pc, #816]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	715a      	strb	r2, [r3, #5]

    registerMap[GPIO_CFG_ADDRESS]               = GPIO_CFG_DEFAULT;
 80036a8:	4bca      	ldr	r3, [pc, #808]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	71da      	strb	r2, [r3, #7]
    registerMap[GPO_DRIVE_CFG_ADDRESS]          = GPO_DRIVE_CFG_DEFAULT;
 80036ae:	4bc9      	ldr	r3, [pc, #804]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	725a      	strb	r2, [r3, #9]
    registerMap[GPO_OUTPUT_VALUE_ADDRESS]       = GPO_OUTPUT_VALUE_DEFAULT;
 80036b4:	4bc7      	ldr	r3, [pc, #796]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	72da      	strb	r2, [r3, #11]
    registerMap[GPI_VALUE_ADDRESS]              = GPI_VALUE_DEFAULT;
 80036ba:	4bc6      	ldr	r3, [pc, #792]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036bc:	2200      	movs	r2, #0
 80036be:	735a      	strb	r2, [r3, #13]

    registerMap[SEQUENCE_CFG_ADDRESS]           = SEQUENCE_CFG_DEFAULT;
 80036c0:	4bc4      	ldr	r3, [pc, #784]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	741a      	strb	r2, [r3, #16]
    registerMap[CHANNEL_SEL_ADDRESS]            = CHANNEL_SEL_DEFAULT;
 80036c6:	4bc3      	ldr	r3, [pc, #780]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	745a      	strb	r2, [r3, #17]
    registerMap[AUTO_SEQ_CHSEL_ADDRESS]         = AUTO_SEQ_CHSEL_DEFAULT;
 80036cc:	4bc1      	ldr	r3, [pc, #772]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	749a      	strb	r2, [r3, #18]

    registerMap[ALERT_CH_SEL_ADDRESS]           = ALERT_CH_SEL_DEFAULT;
 80036d2:	4bc0      	ldr	r3, [pc, #768]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	751a      	strb	r2, [r3, #20]
    registerMap[ALERT_MAP_ADDRESS]              = ALERT_MAP_DEFAULT;
 80036d8:	4bbe      	ldr	r3, [pc, #760]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036da:	2200      	movs	r2, #0
 80036dc:	759a      	strb	r2, [r3, #22]
    registerMap[ALERT_PIN_CFG_ADDRESS]          = ALERT_PIN_CFG_DEFAULT;
 80036de:	4bbd      	ldr	r3, [pc, #756]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	75da      	strb	r2, [r3, #23]

    registerMap[EVENT_FLAG_ADDRESS]             = EVENT_FLAG_DEFAULT;
 80036e4:	4bbb      	ldr	r3, [pc, #748]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	761a      	strb	r2, [r3, #24]
    registerMap[EVENT_HIGH_FLAG_ADDRESS]        = EVENT_HIGH_FLAG_DEFAULT;
 80036ea:	4bba      	ldr	r3, [pc, #744]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	769a      	strb	r2, [r3, #26]
    registerMap[EVENT_LOW_FLAG_ADDRESS]         = EVENT_LOW_FLAG_DEFAULT;
 80036f0:	4bb8      	ldr	r3, [pc, #736]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	771a      	strb	r2, [r3, #28]
    registerMap[EVENT_RGN_ADDRESS]              = EVENT_RGN_DEFAULT;
 80036f6:	4bb7      	ldr	r3, [pc, #732]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	779a      	strb	r2, [r3, #30]

    registerMap[HYSTERESIS_CH0_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 80036fc:	4bb5      	ldr	r3, [pc, #724]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80036fe:	2220      	movs	r2, #32
 8003700:	21f0      	movs	r1, #240	@ 0xf0
 8003702:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH1_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8003704:	4bb3      	ldr	r3, [pc, #716]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003706:	2224      	movs	r2, #36	@ 0x24
 8003708:	21f0      	movs	r1, #240	@ 0xf0
 800370a:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH2_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 800370c:	4bb1      	ldr	r3, [pc, #708]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800370e:	2228      	movs	r2, #40	@ 0x28
 8003710:	21f0      	movs	r1, #240	@ 0xf0
 8003712:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH3_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8003714:	4baf      	ldr	r3, [pc, #700]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003716:	222c      	movs	r2, #44	@ 0x2c
 8003718:	21f0      	movs	r1, #240	@ 0xf0
 800371a:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH4_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 800371c:	4bad      	ldr	r3, [pc, #692]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800371e:	2230      	movs	r2, #48	@ 0x30
 8003720:	21f0      	movs	r1, #240	@ 0xf0
 8003722:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH5_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8003724:	4bab      	ldr	r3, [pc, #684]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003726:	2234      	movs	r2, #52	@ 0x34
 8003728:	21f0      	movs	r1, #240	@ 0xf0
 800372a:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH6_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 800372c:	4ba9      	ldr	r3, [pc, #676]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800372e:	2238      	movs	r2, #56	@ 0x38
 8003730:	21f0      	movs	r1, #240	@ 0xf0
 8003732:	5499      	strb	r1, [r3, r2]
    registerMap[HYSTERESIS_CH7_ADDRESS]         = HYSTERESIS_CHx_DEFAULT;
 8003734:	4ba7      	ldr	r3, [pc, #668]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003736:	223c      	movs	r2, #60	@ 0x3c
 8003738:	21f0      	movs	r1, #240	@ 0xf0
 800373a:	5499      	strb	r1, [r3, r2]

    registerMap[EVENT_COUNT_CH0_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 800373c:	4ba5      	ldr	r3, [pc, #660]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800373e:	2222      	movs	r2, #34	@ 0x22
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH1_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8003744:	4ba3      	ldr	r3, [pc, #652]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003746:	2226      	movs	r2, #38	@ 0x26
 8003748:	2100      	movs	r1, #0
 800374a:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH2_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 800374c:	4ba1      	ldr	r3, [pc, #644]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800374e:	222a      	movs	r2, #42	@ 0x2a
 8003750:	2100      	movs	r1, #0
 8003752:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH3_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8003754:	4b9f      	ldr	r3, [pc, #636]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003756:	222e      	movs	r2, #46	@ 0x2e
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH4_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 800375c:	4b9d      	ldr	r3, [pc, #628]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800375e:	2232      	movs	r2, #50	@ 0x32
 8003760:	2100      	movs	r1, #0
 8003762:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH5_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8003764:	4b9b      	ldr	r3, [pc, #620]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003766:	2236      	movs	r2, #54	@ 0x36
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH6_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 800376c:	4b99      	ldr	r3, [pc, #612]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800376e:	223a      	movs	r2, #58	@ 0x3a
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]
    registerMap[EVENT_COUNT_CH7_ADDRESS]        = EVENT_COUNT_CHx_DEFAULT;
 8003774:	4b97      	ldr	r3, [pc, #604]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003776:	223e      	movs	r2, #62	@ 0x3e
 8003778:	2100      	movs	r1, #0
 800377a:	5499      	strb	r1, [r3, r2]

    registerMap[HIGH_TH_CH0_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 800377c:	4b95      	ldr	r3, [pc, #596]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800377e:	2221      	movs	r2, #33	@ 0x21
 8003780:	21ff      	movs	r1, #255	@ 0xff
 8003782:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH1_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 8003784:	4b93      	ldr	r3, [pc, #588]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003786:	2225      	movs	r2, #37	@ 0x25
 8003788:	21ff      	movs	r1, #255	@ 0xff
 800378a:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH2_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 800378c:	4b91      	ldr	r3, [pc, #580]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800378e:	2229      	movs	r2, #41	@ 0x29
 8003790:	21ff      	movs	r1, #255	@ 0xff
 8003792:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH3_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 8003794:	4b8f      	ldr	r3, [pc, #572]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003796:	222d      	movs	r2, #45	@ 0x2d
 8003798:	21ff      	movs	r1, #255	@ 0xff
 800379a:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH4_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 800379c:	4b8d      	ldr	r3, [pc, #564]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800379e:	2231      	movs	r2, #49	@ 0x31
 80037a0:	21ff      	movs	r1, #255	@ 0xff
 80037a2:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH5_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80037a4:	4b8b      	ldr	r3, [pc, #556]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037a6:	2235      	movs	r2, #53	@ 0x35
 80037a8:	21ff      	movs	r1, #255	@ 0xff
 80037aa:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH6_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80037ac:	4b89      	ldr	r3, [pc, #548]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037ae:	2239      	movs	r2, #57	@ 0x39
 80037b0:	21ff      	movs	r1, #255	@ 0xff
 80037b2:	5499      	strb	r1, [r3, r2]
    registerMap[HIGH_TH_CH7_ADDRESS]            = HIGH_TH_CHx_DEFAULT;
 80037b4:	4b87      	ldr	r3, [pc, #540]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037b6:	223d      	movs	r2, #61	@ 0x3d
 80037b8:	21ff      	movs	r1, #255	@ 0xff
 80037ba:	5499      	strb	r1, [r3, r2]

    registerMap[LOW_TH_CH0_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80037bc:	4b85      	ldr	r3, [pc, #532]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037be:	2223      	movs	r2, #35	@ 0x23
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH1_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80037c4:	4b83      	ldr	r3, [pc, #524]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037c6:	2227      	movs	r2, #39	@ 0x27
 80037c8:	2100      	movs	r1, #0
 80037ca:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH2_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80037cc:	4b81      	ldr	r3, [pc, #516]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037ce:	222b      	movs	r2, #43	@ 0x2b
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH3_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80037d4:	4b7f      	ldr	r3, [pc, #508]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037d6:	222f      	movs	r2, #47	@ 0x2f
 80037d8:	2100      	movs	r1, #0
 80037da:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH4_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80037dc:	4b7d      	ldr	r3, [pc, #500]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037de:	2233      	movs	r2, #51	@ 0x33
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH5_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80037e4:	4b7b      	ldr	r3, [pc, #492]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037e6:	2237      	movs	r2, #55	@ 0x37
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH6_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80037ec:	4b79      	ldr	r3, [pc, #484]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037ee:	223b      	movs	r2, #59	@ 0x3b
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]
    registerMap[LOW_TH_CH7_ADDRESS]             = LOW_TH_CHx_DEFAULT;
 80037f4:	4b77      	ldr	r3, [pc, #476]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037f6:	223f      	movs	r2, #63	@ 0x3f
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]

    registerMap[MAX_CH0_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 80037fc:	4b75      	ldr	r3, [pc, #468]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80037fe:	2260      	movs	r2, #96	@ 0x60
 8003800:	2100      	movs	r1, #0
 8003802:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH1_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8003804:	4b73      	ldr	r3, [pc, #460]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003806:	2262      	movs	r2, #98	@ 0x62
 8003808:	2100      	movs	r1, #0
 800380a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH2_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 800380c:	4b71      	ldr	r3, [pc, #452]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800380e:	2264      	movs	r2, #100	@ 0x64
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH3_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8003814:	4b6f      	ldr	r3, [pc, #444]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003816:	2266      	movs	r2, #102	@ 0x66
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH4_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 800381c:	4b6d      	ldr	r3, [pc, #436]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800381e:	2268      	movs	r2, #104	@ 0x68
 8003820:	2100      	movs	r1, #0
 8003822:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH5_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8003824:	4b6b      	ldr	r3, [pc, #428]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003826:	226a      	movs	r2, #106	@ 0x6a
 8003828:	2100      	movs	r1, #0
 800382a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH6_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 800382c:	4b69      	ldr	r3, [pc, #420]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800382e:	226c      	movs	r2, #108	@ 0x6c
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH7_LSB_ADDRESS]            = MAX_CHx_LSB_DEFAULT;
 8003834:	4b67      	ldr	r3, [pc, #412]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003836:	226e      	movs	r2, #110	@ 0x6e
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]

    registerMap[MAX_CH0_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 800383c:	4b65      	ldr	r3, [pc, #404]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800383e:	2261      	movs	r2, #97	@ 0x61
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH1_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8003844:	4b63      	ldr	r3, [pc, #396]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003846:	2263      	movs	r2, #99	@ 0x63
 8003848:	2100      	movs	r1, #0
 800384a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH2_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 800384c:	4b61      	ldr	r3, [pc, #388]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800384e:	2265      	movs	r2, #101	@ 0x65
 8003850:	2100      	movs	r1, #0
 8003852:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH3_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8003854:	4b5f      	ldr	r3, [pc, #380]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003856:	2267      	movs	r2, #103	@ 0x67
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH4_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 800385c:	4b5d      	ldr	r3, [pc, #372]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800385e:	2269      	movs	r2, #105	@ 0x69
 8003860:	2100      	movs	r1, #0
 8003862:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH5_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8003864:	4b5b      	ldr	r3, [pc, #364]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003866:	226b      	movs	r2, #107	@ 0x6b
 8003868:	2100      	movs	r1, #0
 800386a:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH6_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 800386c:	4b59      	ldr	r3, [pc, #356]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800386e:	226d      	movs	r2, #109	@ 0x6d
 8003870:	2100      	movs	r1, #0
 8003872:	5499      	strb	r1, [r3, r2]
    registerMap[MAX_CH7_MSB_ADDRESS]            = MAX_CHx_MSB_DEFAULT;
 8003874:	4b57      	ldr	r3, [pc, #348]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003876:	226f      	movs	r2, #111	@ 0x6f
 8003878:	2100      	movs	r1, #0
 800387a:	5499      	strb	r1, [r3, r2]

    registerMap[MIN_CH0_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 800387c:	4b55      	ldr	r3, [pc, #340]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800387e:	2280      	movs	r2, #128	@ 0x80
 8003880:	21ff      	movs	r1, #255	@ 0xff
 8003882:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH1_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 8003884:	4b53      	ldr	r3, [pc, #332]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003886:	2282      	movs	r2, #130	@ 0x82
 8003888:	21ff      	movs	r1, #255	@ 0xff
 800388a:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH2_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 800388c:	4b51      	ldr	r3, [pc, #324]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800388e:	2284      	movs	r2, #132	@ 0x84
 8003890:	21ff      	movs	r1, #255	@ 0xff
 8003892:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH3_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 8003894:	4b4f      	ldr	r3, [pc, #316]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003896:	2286      	movs	r2, #134	@ 0x86
 8003898:	21ff      	movs	r1, #255	@ 0xff
 800389a:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH4_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 800389c:	4b4d      	ldr	r3, [pc, #308]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800389e:	2288      	movs	r2, #136	@ 0x88
 80038a0:	21ff      	movs	r1, #255	@ 0xff
 80038a2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH5_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80038a4:	4b4b      	ldr	r3, [pc, #300]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038a6:	228a      	movs	r2, #138	@ 0x8a
 80038a8:	21ff      	movs	r1, #255	@ 0xff
 80038aa:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH6_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80038ac:	4b49      	ldr	r3, [pc, #292]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038ae:	228c      	movs	r2, #140	@ 0x8c
 80038b0:	21ff      	movs	r1, #255	@ 0xff
 80038b2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH7_LSB_ADDRESS]            = MIN_CHx_LSB_DEFAULT;
 80038b4:	4b47      	ldr	r3, [pc, #284]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038b6:	228e      	movs	r2, #142	@ 0x8e
 80038b8:	21ff      	movs	r1, #255	@ 0xff
 80038ba:	5499      	strb	r1, [r3, r2]

    registerMap[MIN_CH0_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80038bc:	4b45      	ldr	r3, [pc, #276]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038be:	2281      	movs	r2, #129	@ 0x81
 80038c0:	21ff      	movs	r1, #255	@ 0xff
 80038c2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH1_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80038c4:	4b43      	ldr	r3, [pc, #268]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038c6:	2283      	movs	r2, #131	@ 0x83
 80038c8:	21ff      	movs	r1, #255	@ 0xff
 80038ca:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH2_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80038cc:	4b41      	ldr	r3, [pc, #260]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038ce:	2285      	movs	r2, #133	@ 0x85
 80038d0:	21ff      	movs	r1, #255	@ 0xff
 80038d2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH3_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80038d4:	4b3f      	ldr	r3, [pc, #252]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038d6:	2287      	movs	r2, #135	@ 0x87
 80038d8:	21ff      	movs	r1, #255	@ 0xff
 80038da:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH4_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80038dc:	4b3d      	ldr	r3, [pc, #244]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038de:	2289      	movs	r2, #137	@ 0x89
 80038e0:	21ff      	movs	r1, #255	@ 0xff
 80038e2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH5_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80038e4:	4b3b      	ldr	r3, [pc, #236]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038e6:	228b      	movs	r2, #139	@ 0x8b
 80038e8:	21ff      	movs	r1, #255	@ 0xff
 80038ea:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH6_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80038ec:	4b39      	ldr	r3, [pc, #228]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038ee:	228d      	movs	r2, #141	@ 0x8d
 80038f0:	21ff      	movs	r1, #255	@ 0xff
 80038f2:	5499      	strb	r1, [r3, r2]
    registerMap[MIN_CH7_MSB_ADDRESS]            = MIN_CHx_MSB_DEFAULT;
 80038f4:	4b37      	ldr	r3, [pc, #220]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038f6:	228f      	movs	r2, #143	@ 0x8f
 80038f8:	21ff      	movs	r1, #255	@ 0xff
 80038fa:	5499      	strb	r1, [r3, r2]

    registerMap[RECENT_CH0_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 80038fc:	4b35      	ldr	r3, [pc, #212]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80038fe:	22a0      	movs	r2, #160	@ 0xa0
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH1_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8003904:	4b33      	ldr	r3, [pc, #204]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003906:	22a2      	movs	r2, #162	@ 0xa2
 8003908:	2100      	movs	r1, #0
 800390a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH2_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 800390c:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800390e:	22a4      	movs	r2, #164	@ 0xa4
 8003910:	2100      	movs	r1, #0
 8003912:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH3_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8003914:	4b2f      	ldr	r3, [pc, #188]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003916:	22a6      	movs	r2, #166	@ 0xa6
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH4_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 800391c:	4b2d      	ldr	r3, [pc, #180]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800391e:	22a8      	movs	r2, #168	@ 0xa8
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH5_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8003924:	4b2b      	ldr	r3, [pc, #172]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003926:	22aa      	movs	r2, #170	@ 0xaa
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH6_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 800392c:	4b29      	ldr	r3, [pc, #164]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800392e:	22ac      	movs	r2, #172	@ 0xac
 8003930:	2100      	movs	r1, #0
 8003932:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH7_LSB_ADDRESS]         = RECENT_CHx_LSB_DEFAULT;
 8003934:	4b27      	ldr	r3, [pc, #156]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003936:	22ae      	movs	r2, #174	@ 0xae
 8003938:	2100      	movs	r1, #0
 800393a:	5499      	strb	r1, [r3, r2]

    registerMap[RECENT_CH0_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 800393c:	4b25      	ldr	r3, [pc, #148]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800393e:	22a1      	movs	r2, #161	@ 0xa1
 8003940:	2100      	movs	r1, #0
 8003942:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH1_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8003944:	4b23      	ldr	r3, [pc, #140]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003946:	22a3      	movs	r2, #163	@ 0xa3
 8003948:	2100      	movs	r1, #0
 800394a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH2_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 800394c:	4b21      	ldr	r3, [pc, #132]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800394e:	22a5      	movs	r2, #165	@ 0xa5
 8003950:	2100      	movs	r1, #0
 8003952:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH3_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8003954:	4b1f      	ldr	r3, [pc, #124]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003956:	22a7      	movs	r2, #167	@ 0xa7
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH4_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 800395c:	4b1d      	ldr	r3, [pc, #116]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800395e:	22a9      	movs	r2, #169	@ 0xa9
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH5_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8003964:	4b1b      	ldr	r3, [pc, #108]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003966:	22ab      	movs	r2, #171	@ 0xab
 8003968:	2100      	movs	r1, #0
 800396a:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH6_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 800396c:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800396e:	22ad      	movs	r2, #173	@ 0xad
 8003970:	2100      	movs	r1, #0
 8003972:	5499      	strb	r1, [r3, r2]
    registerMap[RECENT_CH7_MSB_ADDRESS]         = RECENT_CHx_MSB_DEFAULT;
 8003974:	4b17      	ldr	r3, [pc, #92]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003976:	22af      	movs	r2, #175	@ 0xaf
 8003978:	2100      	movs	r1, #0
 800397a:	5499      	strb	r1, [r3, r2]

    registerMap[GPO0_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 800397c:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800397e:	22c3      	movs	r2, #195	@ 0xc3
 8003980:	2100      	movs	r1, #0
 8003982:	5499      	strb	r1, [r3, r2]
    registerMap[GPO1_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 8003984:	4b13      	ldr	r3, [pc, #76]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003986:	22c5      	movs	r2, #197	@ 0xc5
 8003988:	2100      	movs	r1, #0
 800398a:	5499      	strb	r1, [r3, r2]
    registerMap[GPO2_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 800398c:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800398e:	22c7      	movs	r2, #199	@ 0xc7
 8003990:	2100      	movs	r1, #0
 8003992:	5499      	strb	r1, [r3, r2]
    registerMap[GPO3_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 8003994:	4b0f      	ldr	r3, [pc, #60]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 8003996:	22c9      	movs	r2, #201	@ 0xc9
 8003998:	2100      	movs	r1, #0
 800399a:	5499      	strb	r1, [r3, r2]
    registerMap[GPO4_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 800399c:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 800399e:	22cb      	movs	r2, #203	@ 0xcb
 80039a0:	2100      	movs	r1, #0
 80039a2:	5499      	strb	r1, [r3, r2]
    registerMap[GPO5_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80039a4:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80039a6:	22cd      	movs	r2, #205	@ 0xcd
 80039a8:	2100      	movs	r1, #0
 80039aa:	5499      	strb	r1, [r3, r2]
    registerMap[GPO6_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80039ac:	4b09      	ldr	r3, [pc, #36]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80039ae:	22cf      	movs	r2, #207	@ 0xcf
 80039b0:	2100      	movs	r1, #0
 80039b2:	5499      	strb	r1, [r3, r2]
    registerMap[GPO7_TRIG_EVENT_SEL_ADDRESS]    = GPOx_TRIG_EVENT_SEL_DEFAULT;
 80039b4:	4b07      	ldr	r3, [pc, #28]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80039b6:	22d1      	movs	r2, #209	@ 0xd1
 80039b8:	2100      	movs	r1, #0
 80039ba:	5499      	strb	r1, [r3, r2]

    registerMap[GPO_TRIGGER_CFG_ADDRESS]        = GPO_TRIGGER_CFG_DEFAULT;
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80039be:	22e9      	movs	r2, #233	@ 0xe9
 80039c0:	2100      	movs	r1, #0
 80039c2:	5499      	strb	r1, [r3, r2]
    registerMap[GPO_VALUE_TRIG_ADDRESS]         = GPO_VALUE_TRIG_DEFAULT;
 80039c4:	4b03      	ldr	r3, [pc, #12]	@ (80039d4 <restoreRegisterDefaults+0x354>)
 80039c6:	22eb      	movs	r2, #235	@ 0xeb
 80039c8:	2100      	movs	r1, #0
 80039ca:	5499      	strb	r1, [r3, r2]
}
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	20000224 	.word	0x20000224

080039d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039dc:	f000 fc3c 	bl	8004258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039e0:	f000 f854 	bl	8003a8c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_FDCAN_MspInit(&hfdcan2);
 80039e4:	4b21      	ldr	r3, [pc, #132]	@ (8003a6c <main+0x94>)
 80039e6:	0018      	movs	r0, r3
 80039e8:	f000 fa3c 	bl	8003e64 <HAL_FDCAN_MspInit>
  HAL_SPI_MspInit(&hspi1);
 80039ec:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <main+0x98>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 fa9a 	bl	8003f28 <HAL_SPI_MspInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039f4:	f000 f984 	bl	8003d00 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80039f8:	f000 f8a8 	bl	8003b4c <MX_FDCAN2_Init>
  MX_SPI1_Init();
 80039fc:	f000 f8ee 	bl	8003bdc <MX_SPI1_Init>
  MX_TIM2_Init();
 8003a00:	f000 f92a 	bl	8003c58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  canFramesDefine();
 8003a04:	f7ff f9ea 	bl	8002ddc <canFramesDefine>
    ioAssign();
 8003a08:	f7ff fa92 	bl	8002f30 <ioAssign>
    initialiseADC();
 8003a0c:	f7ff fb04 	bl	8003018 <initialiseADC>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //LED on (default)
 8003a10:	23a0      	movs	r3, #160	@ 0xa0
 8003a12:	05db      	lsls	r3, r3, #23
 8003a14:	2200      	movs	r2, #0
 8003a16:	2120      	movs	r1, #32
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f001 f9fe 	bl	8004e1a <HAL_GPIO_WritePin>

    TickerAttach(&Ticker, &TransmitHeartBeat, DISCHARGE_HEARTBEAT_CAN_RATE);
 8003a1e:	23fa      	movs	r3, #250	@ 0xfa
 8003a20:	009a      	lsls	r2, r3, #2
 8003a22:	4914      	ldr	r1, [pc, #80]	@ (8003a74 <main+0x9c>)
 8003a24:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <main+0xa0>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7ff fb10 	bl	800304c <TickerAttach>
    TickerAttach(&Ticker, &TransmitDigital, DISCHARGE_DIGITAL_CAN_RATE);
 8003a2c:	4913      	ldr	r1, [pc, #76]	@ (8003a7c <main+0xa4>)
 8003a2e:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <main+0xa0>)
 8003a30:	2232      	movs	r2, #50	@ 0x32
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7ff fb0a 	bl	800304c <TickerAttach>
    TickerAttach(&Ticker, &TransmitAnalogue, DISCHARGE_ANALOGUE_CAN_RATE);
 8003a38:	4911      	ldr	r1, [pc, #68]	@ (8003a80 <main+0xa8>)
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <main+0xa0>)
 8003a3c:	2232      	movs	r2, #50	@ 0x32
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7ff fb04 	bl	800304c <TickerAttach>
    TickerAttach(&Ticker, &TransmitAnalogueRaw, DISCHARGE_ANALOGUE_CAN_RATE);
 8003a44:	490f      	ldr	r1, [pc, #60]	@ (8003a84 <main+0xac>)
 8003a46:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <main+0xa0>)
 8003a48:	2232      	movs	r2, #50	@ 0x32
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7ff fafe 	bl	800304c <TickerAttach>

    HAL_FDCAN_Start(&hfdcan2);
 8003a50:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <main+0x94>)
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 ff04 	bl	8004860 <HAL_FDCAN_Start>

    HAL_TIM_Base_Start_IT(&htim2);
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <main+0xb0>)
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f002 fde4 	bl	8006628 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  UpdateDigital();
 8003a60:	f7fe feea 	bl	8002838 <UpdateDigital>
	  UpdateAnalogue();
 8003a64:	f7fe ffb2 	bl	80029cc <UpdateAnalogue>
	  UpdateDigital();
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	e7f9      	b.n	8003a60 <main+0x88>
 8003a6c:	20000310 	.word	0x20000310
 8003a70:	20000374 	.word	0x20000374
 8003a74:	08002795 	.word	0x08002795
 8003a78:	20000000 	.word	0x20000000
 8003a7c:	080027f5 	.word	0x080027f5
 8003a80:	0800289d 	.word	0x0800289d
 8003a84:	08002935 	.word	0x08002935
 8003a88:	200003d8 	.word	0x200003d8

08003a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b095      	sub	sp, #84	@ 0x54
 8003a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a92:	2414      	movs	r4, #20
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	0018      	movs	r0, r3
 8003a98:	233c      	movs	r3, #60	@ 0x3c
 8003a9a:	001a      	movs	r2, r3
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	f003 fb23 	bl	80070e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f003 fb1c 	bl	80070e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ab0:	2380      	movs	r3, #128	@ 0x80
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f001 f9e9 	bl	8004e8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	2202      	movs	r2, #2
 8003abe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ac0:	193b      	adds	r3, r7, r4
 8003ac2:	2280      	movs	r2, #128	@ 0x80
 8003ac4:	0052      	lsls	r2, r2, #1
 8003ac6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003ac8:	0021      	movs	r1, r4
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	2240      	movs	r2, #64	@ 0x40
 8003ad4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	2202      	movs	r2, #2
 8003ada:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	2202      	movs	r2, #2
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	2208      	movs	r2, #8
 8003aec:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003aee:	187b      	adds	r3, r7, r1
 8003af0:	2280      	movs	r2, #128	@ 0x80
 8003af2:	0292      	lsls	r2, r2, #10
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	2280      	movs	r2, #128	@ 0x80
 8003afa:	0492      	lsls	r2, r2, #18
 8003afc:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2280      	movs	r2, #128	@ 0x80
 8003b02:	0592      	lsls	r2, r2, #22
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f001 f9ff 	bl	8004f0c <HAL_RCC_OscConfig>
 8003b0e:	1e03      	subs	r3, r0, #0
 8003b10:	d001      	beq.n	8003b16 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003b12:	f000 f979 	bl	8003e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	2207      	movs	r2, #7
 8003b1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	2202      	movs	r2, #2
 8003b20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	2280      	movs	r2, #128	@ 0x80
 8003b2c:	01d2      	lsls	r2, r2, #7
 8003b2e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	2102      	movs	r1, #2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f001 fd49 	bl	80055cc <HAL_RCC_ClockConfig>
 8003b3a:	1e03      	subs	r3, r0, #0
 8003b3c:	d001      	beq.n	8003b42 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003b3e:	f000 f963 	bl	8003e08 <Error_Handler>
  }
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b015      	add	sp, #84	@ 0x54
 8003b48:	bd90      	pop	{r4, r7, pc}
	...

08003b4c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003b50:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b52:	4a21      	ldr	r2, [pc, #132]	@ (8003bd8 <MX_FDCAN2_Init+0x8c>)
 8003b54:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003b74:	4b17      	ldr	r3, [pc, #92]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 4;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003b80:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 11;
 8003b86:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b88:	220b      	movs	r2, #11
 8003b8a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 4;
 8003b8c:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b8e:	2204      	movs	r2, #4
 8003b90:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003b92:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003b98:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8003baa:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003bb0:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003bb6:	4b07      	ldr	r3, [pc, #28]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003bbc:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <MX_FDCAN2_Init+0x88>)
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 fce8 	bl	8004594 <HAL_FDCAN_Init>
 8003bc4:	1e03      	subs	r3, r0, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8003bc8:	f000 f91e 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003bcc:	46c0      	nop			@ (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	20000310 	.word	0x20000310
 8003bd8:	40006800 	.word	0x40006800

08003bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003be2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <MX_SPI1_Init+0x78>)
 8003be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003be6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003be8:	2282      	movs	r2, #130	@ 0x82
 8003bea:	0052      	lsls	r2, r2, #1
 8003bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bee:	4b18      	ldr	r3, [pc, #96]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003bf4:	4b16      	ldr	r3, [pc, #88]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003bf6:	22c0      	movs	r2, #192	@ 0xc0
 8003bf8:	0092      	lsls	r2, r2, #2
 8003bfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bfc:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c02:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c08:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c0a:	2280      	movs	r2, #128	@ 0x80
 8003c0c:	0092      	lsls	r2, r2, #2
 8003c0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003c10:	4b0f      	ldr	r3, [pc, #60]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c12:	2228      	movs	r2, #40	@ 0x28
 8003c14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c16:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003c28:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c36:	2208      	movs	r2, #8
 8003c38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c3a:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <MX_SPI1_Init+0x74>)
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f002 f88b 	bl	8005d58 <HAL_SPI_Init>
 8003c42:	1e03      	subs	r3, r0, #0
 8003c44:	d001      	beq.n	8003c4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003c46:	f000 f8df 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000374 	.word	0x20000374
 8003c54:	40013000 	.word	0x40013000

08003c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c5e:	2310      	movs	r3, #16
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	0018      	movs	r0, r3
 8003c64:	2310      	movs	r3, #16
 8003c66:	001a      	movs	r2, r3
 8003c68:	2100      	movs	r1, #0
 8003c6a:	f003 fa3d 	bl	80070e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	0018      	movs	r0, r3
 8003c72:	230c      	movs	r3, #12
 8003c74:	001a      	movs	r2, r3
 8003c76:	2100      	movs	r1, #0
 8003c78:	f003 fa36 	bl	80070e8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <MX_TIM2_Init+0xa0>)
 8003c7e:	2280      	movs	r2, #128	@ 0x80
 8003c80:	05d2      	lsls	r2, r2, #23
 8003c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c84:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf8 <MX_TIM2_Init+0xa0>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <MX_TIM2_Init+0xa0>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8003c90:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <MX_TIM2_Init+0xa0>)
 8003c92:	4a1a      	ldr	r2, [pc, #104]	@ (8003cfc <MX_TIM2_Init+0xa4>)
 8003c94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c96:	4b18      	ldr	r3, [pc, #96]	@ (8003cf8 <MX_TIM2_Init+0xa0>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c9c:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <MX_TIM2_Init+0xa0>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ca2:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <MX_TIM2_Init+0xa0>)
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f002 fc67 	bl	8006578 <HAL_TIM_Base_Init>
 8003caa:	1e03      	subs	r3, r0, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003cae:	f000 f8ab 	bl	8003e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cb2:	2110      	movs	r1, #16
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	0152      	lsls	r2, r2, #5
 8003cba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003cbc:	187a      	adds	r2, r7, r1
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <MX_TIM2_Init+0xa0>)
 8003cc0:	0011      	movs	r1, r2
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f002 fe1a 	bl	80068fc <HAL_TIM_ConfigClockSource>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003ccc:	f000 f89c 	bl	8003e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	2200      	movs	r2, #0
 8003cda:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cdc:	1d3a      	adds	r2, r7, #4
 8003cde:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <MX_TIM2_Init+0xa0>)
 8003ce0:	0011      	movs	r1, r2
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f003 f834 	bl	8006d50 <HAL_TIMEx_MasterConfigSynchronization>
 8003ce8:	1e03      	subs	r3, r0, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003cec:	f000 f88c 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b008      	add	sp, #32
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200003d8 	.word	0x200003d8
 8003cfc:	0000f9ff 	.word	0x0000f9ff

08003d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b089      	sub	sp, #36	@ 0x24
 8003d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d06:	240c      	movs	r4, #12
 8003d08:	193b      	adds	r3, r7, r4
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	2314      	movs	r3, #20
 8003d0e:	001a      	movs	r2, r3
 8003d10:	2100      	movs	r1, #0
 8003d12:	f003 f9e9 	bl	80070e8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d16:	4b2f      	ldr	r3, [pc, #188]	@ (8003dd4 <MX_GPIO_Init+0xd4>)
 8003d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <MX_GPIO_Init+0xd4>)
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d22:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd4 <MX_GPIO_Init+0xd4>)
 8003d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d26:	2201      	movs	r2, #1
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2e:	4b29      	ldr	r3, [pc, #164]	@ (8003dd4 <MX_GPIO_Init+0xd4>)
 8003d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d32:	4b28      	ldr	r3, [pc, #160]	@ (8003dd4 <MX_GPIO_Init+0xd4>)
 8003d34:	2102      	movs	r1, #2
 8003d36:	430a      	orrs	r2, r1
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d3a:	4b26      	ldr	r3, [pc, #152]	@ (8003dd4 <MX_GPIO_Init+0xd4>)
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3e:	2202      	movs	r2, #2
 8003d40:	4013      	ands	r3, r2
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8003d46:	23a0      	movs	r3, #160	@ 0xa0
 8003d48:	05db      	lsls	r3, r3, #23
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	212c      	movs	r1, #44	@ 0x2c
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f001 f863 	bl	8004e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003d54:	4b20      	ldr	r3, [pc, #128]	@ (8003dd8 <MX_GPIO_Init+0xd8>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	2140      	movs	r1, #64	@ 0x40
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f001 f85d 	bl	8004e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8003d60:	193b      	adds	r3, r7, r4
 8003d62:	222c      	movs	r2, #44	@ 0x2c
 8003d64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d66:	193b      	adds	r3, r7, r4
 8003d68:	2201      	movs	r2, #1
 8003d6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	193b      	adds	r3, r7, r4
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	2200      	movs	r2, #0
 8003d76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d78:	193a      	adds	r2, r7, r4
 8003d7a:	23a0      	movs	r3, #160	@ 0xa0
 8003d7c:	05db      	lsls	r3, r3, #23
 8003d7e:	0011      	movs	r1, r2
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 fec1 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	4a14      	ldr	r2, [pc, #80]	@ (8003ddc <MX_GPIO_Init+0xdc>)
 8003d8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	2200      	movs	r2, #0
 8003d90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	193b      	adds	r3, r7, r4
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d98:	193a      	adds	r2, r7, r4
 8003d9a:	23a0      	movs	r3, #160	@ 0xa0
 8003d9c:	05db      	lsls	r3, r3, #23
 8003d9e:	0011      	movs	r1, r2
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 feb1 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003da6:	0021      	movs	r1, r4
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	2240      	movs	r2, #64	@ 0x40
 8003dac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	2201      	movs	r2, #1
 8003db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	4a05      	ldr	r2, [pc, #20]	@ (8003dd8 <MX_GPIO_Init+0xd8>)
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	0010      	movs	r0, r2
 8003dc8:	f000 fe9e 	bl	8004b08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003dcc:	46c0      	nop			@ (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b009      	add	sp, #36	@ 0x24
 8003dd2:	bd90      	pop	{r4, r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	50000400 	.word	0x50000400
 8003ddc:	000080c0 	.word	0x000080c0

08003de0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	05db      	lsls	r3, r3, #23
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d103      	bne.n	8003dfc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		TickerHandler(&Ticker);
 8003df4:	4b03      	ldr	r3, [pc, #12]	@ (8003e04 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7ff f94f 	bl	800309a <TickerHandler>
	}
}
 8003dfc:	46c0      	nop			@ (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b002      	add	sp, #8
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000000 	.word	0x20000000

08003e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e0c:	b672      	cpsid	i
}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e10:	46c0      	nop			@ (mov r8, r8)
 8003e12:	e7fd      	b.n	8003e10 <Error_Handler+0x8>

08003e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1a:	4b11      	ldr	r3, [pc, #68]	@ (8003e60 <HAL_MspInit+0x4c>)
 8003e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_MspInit+0x4c>)
 8003e20:	2101      	movs	r1, #1
 8003e22:	430a      	orrs	r2, r1
 8003e24:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e26:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <HAL_MspInit+0x4c>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_MspInit+0x4c>)
 8003e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <HAL_MspInit+0x4c>)
 8003e38:	2180      	movs	r1, #128	@ 0x80
 8003e3a:	0549      	lsls	r1, r1, #21
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e40:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <HAL_MspInit+0x4c>)
 8003e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e44:	2380      	movs	r3, #128	@ 0x80
 8003e46:	055b      	lsls	r3, r3, #21
 8003e48:	4013      	ands	r3, r2
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8003e4e:	2380      	movs	r3, #128	@ 0x80
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f000 faaa 	bl	80043ac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000

08003e64 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b09d      	sub	sp, #116	@ 0x74
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6c:	235c      	movs	r3, #92	@ 0x5c
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	0018      	movs	r0, r3
 8003e72:	2314      	movs	r3, #20
 8003e74:	001a      	movs	r2, r3
 8003e76:	2100      	movs	r1, #0
 8003e78:	f003 f936 	bl	80070e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e7c:	2410      	movs	r4, #16
 8003e7e:	193b      	adds	r3, r7, r4
 8003e80:	0018      	movs	r0, r3
 8003e82:	234c      	movs	r3, #76	@ 0x4c
 8003e84:	001a      	movs	r2, r3
 8003e86:	2100      	movs	r1, #0
 8003e88:	f003 f92e 	bl	80070e8 <memset>
  if(hfdcan->Instance==FDCAN2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a22      	ldr	r2, [pc, #136]	@ (8003f1c <HAL_FDCAN_MspInit+0xb8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d13e      	bne.n	8003f14 <HAL_FDCAN_MspInit+0xb0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	2280      	movs	r2, #128	@ 0x80
 8003e9a:	0492      	lsls	r2, r2, #18
 8003e9c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003e9e:	193b      	adds	r3, r7, r4
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ea4:	193b      	adds	r3, r7, r4
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f001 fd1a 	bl	80058e0 <HAL_RCCEx_PeriphCLKConfig>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003eb0:	f7ff ffaa 	bl	8003e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f20 <HAL_FDCAN_MspInit+0xbc>)
 8003eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eb8:	4b19      	ldr	r3, [pc, #100]	@ (8003f20 <HAL_FDCAN_MspInit+0xbc>)
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	0149      	lsls	r1, r1, #5
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ec2:	4b17      	ldr	r3, [pc, #92]	@ (8003f20 <HAL_FDCAN_MspInit+0xbc>)
 8003ec4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	015b      	lsls	r3, r3, #5
 8003eca:	4013      	ands	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed0:	4b13      	ldr	r3, [pc, #76]	@ (8003f20 <HAL_FDCAN_MspInit+0xbc>)
 8003ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ed4:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <HAL_FDCAN_MspInit+0xbc>)
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	635a      	str	r2, [r3, #52]	@ 0x34
 8003edc:	4b10      	ldr	r3, [pc, #64]	@ (8003f20 <HAL_FDCAN_MspInit+0xbc>)
 8003ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ee8:	215c      	movs	r1, #92	@ 0x5c
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	2203      	movs	r2, #3
 8003eee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	187b      	adds	r3, r7, r1
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	2200      	movs	r2, #0
 8003f00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	2203      	movs	r2, #3
 8003f06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	4a06      	ldr	r2, [pc, #24]	@ (8003f24 <HAL_FDCAN_MspInit+0xc0>)
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	0010      	movs	r0, r2
 8003f10:	f000 fdfa 	bl	8004b08 <HAL_GPIO_Init>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8003f14:	46c0      	nop			@ (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b01d      	add	sp, #116	@ 0x74
 8003f1a:	bd90      	pop	{r4, r7, pc}
 8003f1c:	40006800 	.word	0x40006800
 8003f20:	40021000 	.word	0x40021000
 8003f24:	50000400 	.word	0x50000400

08003f28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b08b      	sub	sp, #44	@ 0x2c
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	2414      	movs	r4, #20
 8003f32:	193b      	adds	r3, r7, r4
 8003f34:	0018      	movs	r0, r3
 8003f36:	2314      	movs	r3, #20
 8003f38:	001a      	movs	r2, r3
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f003 f8d4 	bl	80070e8 <memset>
  if(hspi->Instance==SPI1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a25      	ldr	r2, [pc, #148]	@ (8003fdc <HAL_SPI_MspInit+0xb4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d144      	bne.n	8003fd4 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f4a:	4b25      	ldr	r3, [pc, #148]	@ (8003fe0 <HAL_SPI_MspInit+0xb8>)
 8003f4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f4e:	4b24      	ldr	r3, [pc, #144]	@ (8003fe0 <HAL_SPI_MspInit+0xb8>)
 8003f50:	2180      	movs	r1, #128	@ 0x80
 8003f52:	0149      	lsls	r1, r1, #5
 8003f54:	430a      	orrs	r2, r1
 8003f56:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f58:	4b21      	ldr	r3, [pc, #132]	@ (8003fe0 <HAL_SPI_MspInit+0xb8>)
 8003f5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f5c:	2380      	movs	r3, #128	@ 0x80
 8003f5e:	015b      	lsls	r3, r3, #5
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f66:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe0 <HAL_SPI_MspInit+0xb8>)
 8003f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe0 <HAL_SPI_MspInit+0xb8>)
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_SPI_MspInit+0xb8>)
 8003f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f76:	2202      	movs	r2, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003f7e:	193b      	adds	r3, r7, r4
 8003f80:	2228      	movs	r2, #40	@ 0x28
 8003f82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	193b      	adds	r3, r7, r4
 8003f86:	2202      	movs	r2, #2
 8003f88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f90:	193b      	adds	r3, r7, r4
 8003f92:	2200      	movs	r2, #0
 8003f94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003f96:	193b      	adds	r3, r7, r4
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9c:	193b      	adds	r3, r7, r4
 8003f9e:	4a11      	ldr	r2, [pc, #68]	@ (8003fe4 <HAL_SPI_MspInit+0xbc>)
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	0010      	movs	r0, r2
 8003fa4:	f000 fdb0 	bl	8004b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fa8:	0021      	movs	r1, r4
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	2210      	movs	r2, #16
 8003fae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	187b      	adds	r3, r7, r1
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003fb6:	187b      	adds	r3, r7, r1
 8003fb8:	2202      	movs	r2, #2
 8003fba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	4a06      	ldr	r2, [pc, #24]	@ (8003fe4 <HAL_SPI_MspInit+0xbc>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	0010      	movs	r0, r2
 8003fd0:	f000 fd9a 	bl	8004b08 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003fd4:	46c0      	nop			@ (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b00b      	add	sp, #44	@ 0x2c
 8003fda:	bd90      	pop	{r4, r7, pc}
 8003fdc:	40013000 	.word	0x40013000
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	50000400 	.word	0x50000400

08003fe8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2380      	movs	r3, #128	@ 0x80
 8003ff6:	05db      	lsls	r3, r3, #23
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d113      	bne.n	8004024 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_TIM_Base_MspInit+0x44>)
 8003ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004000:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <HAL_TIM_Base_MspInit+0x44>)
 8004002:	2101      	movs	r1, #1
 8004004:	430a      	orrs	r2, r1
 8004006:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004008:	4b08      	ldr	r3, [pc, #32]	@ (800402c <HAL_TIM_Base_MspInit+0x44>)
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	2201      	movs	r2, #1
 800400e:	4013      	ands	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004014:	2200      	movs	r2, #0
 8004016:	2100      	movs	r1, #0
 8004018:	200f      	movs	r0, #15
 800401a:	f000 fa89 	bl	8004530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800401e:	200f      	movs	r0, #15
 8004020:	f000 fa9b 	bl	800455a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004024:	46c0      	nop			@ (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b004      	add	sp, #16
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000

08004030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	e7fd      	b.n	8004034 <NMI_Handler+0x4>

08004038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	e7fd      	b.n	800403c <HardFault_Handler+0x4>

08004040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004044:	46c0      	nop			@ (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004058:	f000 f968 	bl	800432c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004068:	4b03      	ldr	r3, [pc, #12]	@ (8004078 <TIM2_IRQHandler+0x14>)
 800406a:	0018      	movs	r0, r3
 800406c:	f002 fb3e 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	200003d8 	.word	0x200003d8

0800407c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  return 1;
 8004080:	2301      	movs	r3, #1
}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <_kill>:

int _kill(int pid, int sig)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004092:	f003 f87f 	bl	8007194 <__errno>
 8004096:	0003      	movs	r3, r0
 8004098:	2216      	movs	r2, #22
 800409a:	601a      	str	r2, [r3, #0]
  return -1;
 800409c:	2301      	movs	r3, #1
 800409e:	425b      	negs	r3, r3
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b002      	add	sp, #8
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_exit>:

void _exit (int status)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040b0:	2301      	movs	r3, #1
 80040b2:	425a      	negs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	0011      	movs	r1, r2
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7ff ffe5 	bl	8004088 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	e7fd      	b.n	80040be <_exit+0x16>

080040c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	e00a      	b.n	80040ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040d4:	e000      	b.n	80040d8 <_read+0x16>
 80040d6:	bf00      	nop
 80040d8:	0001      	movs	r1, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	60ba      	str	r2, [r7, #8]
 80040e0:	b2ca      	uxtb	r2, r1
 80040e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3301      	adds	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	dbf0      	blt.n	80040d4 <_read+0x12>
  }

  return len;
 80040f2:	687b      	ldr	r3, [r7, #4]
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b006      	add	sp, #24
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	e009      	b.n	8004122 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	60ba      	str	r2, [r7, #8]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	0018      	movs	r0, r3
 8004118:	e000      	b.n	800411c <_write+0x20>
 800411a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	3301      	adds	r3, #1
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	dbf1      	blt.n	800410e <_write+0x12>
  }
  return len;
 800412a:	687b      	ldr	r3, [r7, #4]
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b006      	add	sp, #24
 8004132:	bd80      	pop	{r7, pc}

08004134 <_close>:

int _close(int file)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800413c:	2301      	movs	r3, #1
 800413e:	425b      	negs	r3, r3
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	b002      	add	sp, #8
 8004146:	bd80      	pop	{r7, pc}

08004148 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2280      	movs	r2, #128	@ 0x80
 8004156:	0192      	lsls	r2, r2, #6
 8004158:	605a      	str	r2, [r3, #4]
  return 0;
 800415a:	2300      	movs	r3, #0
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}

08004164 <_isatty>:

int _isatty(int file)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800416c:	2301      	movs	r3, #1
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b002      	add	sp, #8
 8004174:	bd80      	pop	{r7, pc}

08004176 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004182:	2300      	movs	r3, #0
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b004      	add	sp, #16
 800418a:	bd80      	pop	{r7, pc}

0800418c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004194:	4a14      	ldr	r2, [pc, #80]	@ (80041e8 <_sbrk+0x5c>)
 8004196:	4b15      	ldr	r3, [pc, #84]	@ (80041ec <_sbrk+0x60>)
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041a0:	4b13      	ldr	r3, [pc, #76]	@ (80041f0 <_sbrk+0x64>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a8:	4b11      	ldr	r3, [pc, #68]	@ (80041f0 <_sbrk+0x64>)
 80041aa:	4a12      	ldr	r2, [pc, #72]	@ (80041f4 <_sbrk+0x68>)
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ae:	4b10      	ldr	r3, [pc, #64]	@ (80041f0 <_sbrk+0x64>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	18d3      	adds	r3, r2, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d207      	bcs.n	80041cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041bc:	f002 ffea 	bl	8007194 <__errno>
 80041c0:	0003      	movs	r3, r0
 80041c2:	220c      	movs	r2, #12
 80041c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	425b      	negs	r3, r3
 80041ca:	e009      	b.n	80041e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041cc:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <_sbrk+0x64>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041d2:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <_sbrk+0x64>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	18d2      	adds	r2, r2, r3
 80041da:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <_sbrk+0x64>)
 80041dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80041de:	68fb      	ldr	r3, [r7, #12]
}
 80041e0:	0018      	movs	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b006      	add	sp, #24
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20024000 	.word	0x20024000
 80041ec:	00000400 	.word	0x00000400
 80041f0:	20000424 	.word	0x20000424
 80041f4:	20000578 	.word	0x20000578

080041f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041fc:	46c0      	nop			@ (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004204:	480d      	ldr	r0, [pc, #52]	@ (800423c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004206:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004208:	f7ff fff6 	bl	80041f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800420c:	480c      	ldr	r0, [pc, #48]	@ (8004240 <LoopForever+0x6>)
  ldr r1, =_edata
 800420e:	490d      	ldr	r1, [pc, #52]	@ (8004244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004210:	4a0d      	ldr	r2, [pc, #52]	@ (8004248 <LoopForever+0xe>)
  movs r3, #0
 8004212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004214:	e002      	b.n	800421c <LoopCopyDataInit>

08004216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800421a:	3304      	adds	r3, #4

0800421c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800421c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800421e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004220:	d3f9      	bcc.n	8004216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004222:	4a0a      	ldr	r2, [pc, #40]	@ (800424c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004224:	4c0a      	ldr	r4, [pc, #40]	@ (8004250 <LoopForever+0x16>)
  movs r3, #0
 8004226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004228:	e001      	b.n	800422e <LoopFillZerobss>

0800422a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800422a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800422c:	3204      	adds	r2, #4

0800422e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800422e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004230:	d3fb      	bcc.n	800422a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004232:	f002 ffb5 	bl	80071a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004236:	f7ff fbcf 	bl	80039d8 <main>

0800423a <LoopForever>:

LoopForever:
  b LoopForever
 800423a:	e7fe      	b.n	800423a <LoopForever>
  ldr   r0, =_estack
 800423c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004244:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8004248:	080083e4 	.word	0x080083e4
  ldr r2, =_sbss
 800424c:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8004250:	20000578 	.word	0x20000578

08004254 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004254:	e7fe      	b.n	8004254 <ADC1_COMP_IRQHandler>
	...

08004258 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800425e:	1dfb      	adds	r3, r7, #7
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004264:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <HAL_Init+0x3c>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b0a      	ldr	r3, [pc, #40]	@ (8004294 <HAL_Init+0x3c>)
 800426a:	2180      	movs	r1, #128	@ 0x80
 800426c:	0049      	lsls	r1, r1, #1
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004272:	2003      	movs	r0, #3
 8004274:	f000 f810 	bl	8004298 <HAL_InitTick>
 8004278:	1e03      	subs	r3, r0, #0
 800427a:	d003      	beq.n	8004284 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800427c:	1dfb      	adds	r3, r7, #7
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e001      	b.n	8004288 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004284:	f7ff fdc6 	bl	8003e14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	781b      	ldrb	r3, [r3, #0]
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b002      	add	sp, #8
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40022000 	.word	0x40022000

08004298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042a0:	230f      	movs	r3, #15
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80042a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004320 <HAL_InitTick+0x88>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02b      	beq.n	8004308 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80042b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004324 <HAL_InitTick+0x8c>)
 80042b2:	681c      	ldr	r4, [r3, #0]
 80042b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004320 <HAL_InitTick+0x88>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	0019      	movs	r1, r3
 80042ba:	23fa      	movs	r3, #250	@ 0xfa
 80042bc:	0098      	lsls	r0, r3, #2
 80042be:	f7fb ff2b 	bl	8000118 <__udivsi3>
 80042c2:	0003      	movs	r3, r0
 80042c4:	0019      	movs	r1, r3
 80042c6:	0020      	movs	r0, r4
 80042c8:	f7fb ff26 	bl	8000118 <__udivsi3>
 80042cc:	0003      	movs	r3, r0
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 f953 	bl	800457a <HAL_SYSTICK_Config>
 80042d4:	1e03      	subs	r3, r0, #0
 80042d6:	d112      	bne.n	80042fe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d80a      	bhi.n	80042f4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	2301      	movs	r3, #1
 80042e2:	425b      	negs	r3, r3
 80042e4:	2200      	movs	r2, #0
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 f922 	bl	8004530 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <HAL_InitTick+0x90>)
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e00d      	b.n	8004310 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80042f4:	230f      	movs	r3, #15
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e008      	b.n	8004310 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80042fe:	230f      	movs	r3, #15
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e003      	b.n	8004310 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004308:	230f      	movs	r3, #15
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004310:	230f      	movs	r3, #15
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	781b      	ldrb	r3, [r3, #0]
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b005      	add	sp, #20
 800431c:	bd90      	pop	{r4, r7, pc}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	20000084 	.word	0x20000084
 8004324:	2000007c 	.word	0x2000007c
 8004328:	20000080 	.word	0x20000080

0800432c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004330:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <HAL_IncTick+0x1c>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	001a      	movs	r2, r3
 8004336:	4b05      	ldr	r3, [pc, #20]	@ (800434c <HAL_IncTick+0x20>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	18d2      	adds	r2, r2, r3
 800433c:	4b03      	ldr	r3, [pc, #12]	@ (800434c <HAL_IncTick+0x20>)
 800433e:	601a      	str	r2, [r3, #0]
}
 8004340:	46c0      	nop			@ (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	46c0      	nop			@ (mov r8, r8)
 8004348:	20000084 	.word	0x20000084
 800434c:	20000428 	.word	0x20000428

08004350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  return uwTick;
 8004354:	4b02      	ldr	r3, [pc, #8]	@ (8004360 <HAL_GetTick+0x10>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	20000428 	.word	0x20000428

08004364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff fff0 	bl	8004350 <HAL_GetTick>
 8004370:	0003      	movs	r3, r0
 8004372:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
 800437c:	d005      	beq.n	800438a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800437e:	4b0a      	ldr	r3, [pc, #40]	@ (80043a8 <HAL_Delay+0x44>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	001a      	movs	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	189b      	adds	r3, r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	f7ff ffe0 	bl	8004350 <HAL_GetTick>
 8004390:	0002      	movs	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d8f7      	bhi.n	800438c <HAL_Delay+0x28>
  {
  }
}
 800439c:	46c0      	nop			@ (mov r8, r8)
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b004      	add	sp, #16
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	20000084 	.word	0x20000084

080043ac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80043b4:	4b06      	ldr	r3, [pc, #24]	@ (80043d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a06      	ldr	r2, [pc, #24]	@ (80043d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b002      	add	sp, #8
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	40010000 	.word	0x40010000
 80043d4:	fffff9ff 	.word	0xfffff9ff

080043d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	0002      	movs	r2, r0
 80043e0:	1dfb      	adds	r3, r7, #7
 80043e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043e4:	1dfb      	adds	r3, r7, #7
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80043ea:	d809      	bhi.n	8004400 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ec:	1dfb      	adds	r3, r7, #7
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	001a      	movs	r2, r3
 80043f2:	231f      	movs	r3, #31
 80043f4:	401a      	ands	r2, r3
 80043f6:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <__NVIC_EnableIRQ+0x30>)
 80043f8:	2101      	movs	r1, #1
 80043fa:	4091      	lsls	r1, r2
 80043fc:	000a      	movs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004400:	46c0      	nop			@ (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	b002      	add	sp, #8
 8004406:	bd80      	pop	{r7, pc}
 8004408:	e000e100 	.word	0xe000e100

0800440c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800440c:	b590      	push	{r4, r7, lr}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	0002      	movs	r2, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	1dfb      	adds	r3, r7, #7
 8004418:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800441a:	1dfb      	adds	r3, r7, #7
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004420:	d828      	bhi.n	8004474 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004422:	4a2f      	ldr	r2, [pc, #188]	@ (80044e0 <__NVIC_SetPriority+0xd4>)
 8004424:	1dfb      	adds	r3, r7, #7
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	b25b      	sxtb	r3, r3
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	33c0      	adds	r3, #192	@ 0xc0
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	589b      	ldr	r3, [r3, r2]
 8004432:	1dfa      	adds	r2, r7, #7
 8004434:	7812      	ldrb	r2, [r2, #0]
 8004436:	0011      	movs	r1, r2
 8004438:	2203      	movs	r2, #3
 800443a:	400a      	ands	r2, r1
 800443c:	00d2      	lsls	r2, r2, #3
 800443e:	21ff      	movs	r1, #255	@ 0xff
 8004440:	4091      	lsls	r1, r2
 8004442:	000a      	movs	r2, r1
 8004444:	43d2      	mvns	r2, r2
 8004446:	401a      	ands	r2, r3
 8004448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	019b      	lsls	r3, r3, #6
 800444e:	22ff      	movs	r2, #255	@ 0xff
 8004450:	401a      	ands	r2, r3
 8004452:	1dfb      	adds	r3, r7, #7
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	0018      	movs	r0, r3
 8004458:	2303      	movs	r3, #3
 800445a:	4003      	ands	r3, r0
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004460:	481f      	ldr	r0, [pc, #124]	@ (80044e0 <__NVIC_SetPriority+0xd4>)
 8004462:	1dfb      	adds	r3, r7, #7
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b25b      	sxtb	r3, r3
 8004468:	089b      	lsrs	r3, r3, #2
 800446a:	430a      	orrs	r2, r1
 800446c:	33c0      	adds	r3, #192	@ 0xc0
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004472:	e031      	b.n	80044d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004474:	4a1b      	ldr	r2, [pc, #108]	@ (80044e4 <__NVIC_SetPriority+0xd8>)
 8004476:	1dfb      	adds	r3, r7, #7
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	0019      	movs	r1, r3
 800447c:	230f      	movs	r3, #15
 800447e:	400b      	ands	r3, r1
 8004480:	3b08      	subs	r3, #8
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	3306      	adds	r3, #6
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	18d3      	adds	r3, r2, r3
 800448a:	3304      	adds	r3, #4
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	1dfa      	adds	r2, r7, #7
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	0011      	movs	r1, r2
 8004494:	2203      	movs	r2, #3
 8004496:	400a      	ands	r2, r1
 8004498:	00d2      	lsls	r2, r2, #3
 800449a:	21ff      	movs	r1, #255	@ 0xff
 800449c:	4091      	lsls	r1, r2
 800449e:	000a      	movs	r2, r1
 80044a0:	43d2      	mvns	r2, r2
 80044a2:	401a      	ands	r2, r3
 80044a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	019b      	lsls	r3, r3, #6
 80044aa:	22ff      	movs	r2, #255	@ 0xff
 80044ac:	401a      	ands	r2, r3
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	0018      	movs	r0, r3
 80044b4:	2303      	movs	r3, #3
 80044b6:	4003      	ands	r3, r0
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044bc:	4809      	ldr	r0, [pc, #36]	@ (80044e4 <__NVIC_SetPriority+0xd8>)
 80044be:	1dfb      	adds	r3, r7, #7
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	001c      	movs	r4, r3
 80044c4:	230f      	movs	r3, #15
 80044c6:	4023      	ands	r3, r4
 80044c8:	3b08      	subs	r3, #8
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	430a      	orrs	r2, r1
 80044ce:	3306      	adds	r3, #6
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	18c3      	adds	r3, r0, r3
 80044d4:	3304      	adds	r3, #4
 80044d6:	601a      	str	r2, [r3, #0]
}
 80044d8:	46c0      	nop			@ (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b003      	add	sp, #12
 80044de:	bd90      	pop	{r4, r7, pc}
 80044e0:	e000e100 	.word	0xe000e100
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1e5a      	subs	r2, r3, #1
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	045b      	lsls	r3, r3, #17
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d301      	bcc.n	8004500 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044fc:	2301      	movs	r3, #1
 80044fe:	e010      	b.n	8004522 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004500:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <SysTick_Config+0x44>)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	3a01      	subs	r2, #1
 8004506:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004508:	2301      	movs	r3, #1
 800450a:	425b      	negs	r3, r3
 800450c:	2103      	movs	r1, #3
 800450e:	0018      	movs	r0, r3
 8004510:	f7ff ff7c 	bl	800440c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004514:	4b05      	ldr	r3, [pc, #20]	@ (800452c <SysTick_Config+0x44>)
 8004516:	2200      	movs	r2, #0
 8004518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800451a:	4b04      	ldr	r3, [pc, #16]	@ (800452c <SysTick_Config+0x44>)
 800451c:	2207      	movs	r2, #7
 800451e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004520:	2300      	movs	r3, #0
}
 8004522:	0018      	movs	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	b002      	add	sp, #8
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	e000e010 	.word	0xe000e010

08004530 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	210f      	movs	r1, #15
 800453c:	187b      	adds	r3, r7, r1
 800453e:	1c02      	adds	r2, r0, #0
 8004540:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	187b      	adds	r3, r7, r1
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b25b      	sxtb	r3, r3
 800454a:	0011      	movs	r1, r2
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff ff5d 	bl	800440c <__NVIC_SetPriority>
}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	46bd      	mov	sp, r7
 8004556:	b004      	add	sp, #16
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	0002      	movs	r2, r0
 8004562:	1dfb      	adds	r3, r7, #7
 8004564:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004566:	1dfb      	adds	r3, r7, #7
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b25b      	sxtb	r3, r3
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff ff33 	bl	80043d8 <__NVIC_EnableIRQ>
}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	46bd      	mov	sp, r7
 8004576:	b002      	add	sp, #8
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0018      	movs	r0, r3
 8004586:	f7ff ffaf 	bl	80044e8 <SysTick_Config>
 800458a:	0003      	movs	r3, r0
}
 800458c:	0018      	movs	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	b002      	add	sp, #8
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e14e      	b.n	8004844 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	225c      	movs	r2, #92	@ 0x5c
 80045aa:	5c9b      	ldrb	r3, [r3, r2]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d107      	bne.n	80045c2 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	225d      	movs	r2, #93	@ 0x5d
 80045b6:	2100      	movs	r1, #0
 80045b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f7ff fc51 	bl	8003e64 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2110      	movs	r1, #16
 80045ce:	438a      	bics	r2, r1
 80045d0:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045d2:	f7ff febd 	bl	8004350 <HAL_GetTick>
 80045d6:	0003      	movs	r3, r0
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045da:	e012      	b.n	8004602 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80045dc:	f7ff feb8 	bl	8004350 <HAL_GetTick>
 80045e0:	0002      	movs	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b0a      	cmp	r3, #10
 80045e8:	d90b      	bls.n	8004602 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ee:	2201      	movs	r2, #1
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	225c      	movs	r2, #92	@ 0x5c
 80045fa:	2103      	movs	r1, #3
 80045fc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e120      	b.n	8004844 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2208      	movs	r2, #8
 800460a:	4013      	ands	r3, r2
 800460c:	2b08      	cmp	r3, #8
 800460e:	d0e5      	beq.n	80045dc <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2101      	movs	r1, #1
 800461c:	430a      	orrs	r2, r1
 800461e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004620:	f7ff fe96 	bl	8004350 <HAL_GetTick>
 8004624:	0003      	movs	r3, r0
 8004626:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004628:	e012      	b.n	8004650 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800462a:	f7ff fe91 	bl	8004350 <HAL_GetTick>
 800462e:	0002      	movs	r2, r0
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b0a      	cmp	r3, #10
 8004636:	d90b      	bls.n	8004650 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463c:	2201      	movs	r2, #1
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	225c      	movs	r2, #92	@ 0x5c
 8004648:	2103      	movs	r1, #3
 800464a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0f9      	b.n	8004844 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2201      	movs	r2, #1
 8004658:	4013      	ands	r3, r2
 800465a:	d0e6      	beq.n	800462a <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2102      	movs	r1, #2
 8004668:	430a      	orrs	r2, r1
 800466a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a76      	ldr	r2, [pc, #472]	@ (800484c <HAL_FDCAN_Init+0x2b8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d103      	bne.n	800467e <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004676:	4a76      	ldr	r2, [pc, #472]	@ (8004850 <HAL_FDCAN_Init+0x2bc>)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7c1b      	ldrb	r3, [r3, #16]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d108      	bne.n	8004698 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2140      	movs	r1, #64	@ 0x40
 8004692:	438a      	bics	r2, r1
 8004694:	619a      	str	r2, [r3, #24]
 8004696:	e007      	b.n	80046a8 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2140      	movs	r1, #64	@ 0x40
 80046a4:	430a      	orrs	r2, r1
 80046a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	7c5b      	ldrb	r3, [r3, #17]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d109      	bne.n	80046c4 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2180      	movs	r1, #128	@ 0x80
 80046bc:	01c9      	lsls	r1, r1, #7
 80046be:	430a      	orrs	r2, r1
 80046c0:	619a      	str	r2, [r3, #24]
 80046c2:	e007      	b.n	80046d4 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4961      	ldr	r1, [pc, #388]	@ (8004854 <HAL_FDCAN_Init+0x2c0>)
 80046d0:	400a      	ands	r2, r1
 80046d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7c9b      	ldrb	r3, [r3, #18]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d108      	bne.n	80046ee <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	495c      	ldr	r1, [pc, #368]	@ (8004858 <HAL_FDCAN_Init+0x2c4>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	619a      	str	r2, [r3, #24]
 80046ec:	e008      	b.n	8004700 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699a      	ldr	r2, [r3, #24]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2180      	movs	r1, #128	@ 0x80
 80046fa:	0149      	lsls	r1, r1, #5
 80046fc:	430a      	orrs	r2, r1
 80046fe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	4a55      	ldr	r2, [pc, #340]	@ (800485c <HAL_FDCAN_Init+0x2c8>)
 8004708:	4013      	ands	r3, r2
 800470a:	0019      	movs	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	21a4      	movs	r1, #164	@ 0xa4
 8004724:	438a      	bics	r2, r1
 8004726:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2110      	movs	r1, #16
 8004734:	438a      	bics	r2, r1
 8004736:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d108      	bne.n	8004752 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2104      	movs	r1, #4
 800474c:	430a      	orrs	r2, r1
 800474e:	619a      	str	r2, [r3, #24]
 8004750:	e02c      	b.n	80047ac <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d028      	beq.n	80047ac <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d01c      	beq.n	800479c <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2180      	movs	r1, #128	@ 0x80
 800476e:	430a      	orrs	r2, r1
 8004770:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2110      	movs	r1, #16
 800477e:	430a      	orrs	r2, r1
 8004780:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d110      	bne.n	80047ac <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2120      	movs	r1, #32
 8004796:	430a      	orrs	r2, r1
 8004798:	619a      	str	r2, [r3, #24]
 800479a:	e007      	b.n	80047ac <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2120      	movs	r1, #32
 80047a8:	430a      	orrs	r2, r1
 80047aa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047bc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047c4:	431a      	orrs	r2, r3
 80047c6:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047d4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047d6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	23c0      	movs	r3, #192	@ 0xc0
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d115      	bne.n	8004810 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	3b01      	subs	r3, #1
 80047f0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047f2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	3b01      	subs	r3, #1
 80047fa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047fc:	431a      	orrs	r2, r3
 80047fe:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	3b01      	subs	r3, #1
 8004806:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800480c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800480e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	22c0      	movs	r2, #192	@ 0xc0
 8004816:	5899      	ldr	r1, [r3, r2]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	21c0      	movs	r1, #192	@ 0xc0
 8004824:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	0018      	movs	r0, r3
 800482a:	f000 f885 	bl	8004938 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	225c      	movs	r2, #92	@ 0x5c
 800483e:	2101      	movs	r1, #1
 8004840:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	b004      	add	sp, #16
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40006400 	.word	0x40006400
 8004850:	40006500 	.word	0x40006500
 8004854:	ffffbfff 	.word	0xffffbfff
 8004858:	ffffefff 	.word	0xffffefff
 800485c:	fffffcff 	.word	0xfffffcff

08004860 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	225c      	movs	r2, #92	@ 0x5c
 800486c:	5c9b      	ldrb	r3, [r3, r2]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d110      	bne.n	8004896 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	225c      	movs	r2, #92	@ 0x5c
 8004878:	2102      	movs	r1, #2
 800487a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2101      	movs	r1, #1
 8004888:	438a      	bics	r2, r1
 800488a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e006      	b.n	80048a4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489a:	2204      	movs	r2, #4
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
  }
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	225c      	movs	r2, #92	@ 0x5c
 80048bc:	5c9b      	ldrb	r3, [r3, r2]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d12d      	bne.n	8004920 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	22c4      	movs	r2, #196	@ 0xc4
 80048ca:	589a      	ldr	r2, [r3, r2]
 80048cc:	2380      	movs	r3, #128	@ 0x80
 80048ce:	039b      	lsls	r3, r3, #14
 80048d0:	4013      	ands	r3, r2
 80048d2:	d008      	beq.n	80048e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d8:	2280      	movs	r2, #128	@ 0x80
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e023      	b.n	800492e <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	22c4      	movs	r2, #196	@ 0xc4
 80048ec:	589b      	ldr	r3, [r3, r2]
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	2203      	movs	r2, #3
 80048f2:	4013      	ands	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f887 	bl	8004a10 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2101      	movs	r1, #1
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4091      	lsls	r1, r2
 800490c:	000a      	movs	r2, r1
 800490e:	21cc      	movs	r1, #204	@ 0xcc
 8004910:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004912:	2201      	movs	r2, #1
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	409a      	lsls	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e006      	b.n	800492e <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004924:	2208      	movs	r2, #8
 8004926:	431a      	orrs	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
  }
}
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b006      	add	sp, #24
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004940:	4b2f      	ldr	r3, [pc, #188]	@ (8004a00 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8004942:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2e      	ldr	r2, [pc, #184]	@ (8004a04 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d105      	bne.n	800495a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	22d4      	movs	r2, #212	@ 0xd4
 8004952:	0092      	lsls	r2, r2, #2
 8004954:	4694      	mov	ip, r2
 8004956:	4463      	add	r3, ip
 8004958:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2280      	movs	r2, #128	@ 0x80
 8004966:	589b      	ldr	r3, [r3, r2]
 8004968:	4a27      	ldr	r2, [pc, #156]	@ (8004a08 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800496a:	4013      	ands	r3, r2
 800496c:	0019      	movs	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004972:	041a      	lsls	r2, r3, #16
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	2180      	movs	r1, #128	@ 0x80
 800497c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3370      	adds	r3, #112	@ 0x70
 8004982:	001a      	movs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2280      	movs	r2, #128	@ 0x80
 800498e:	589b      	ldr	r3, [r3, r2]
 8004990:	4a1e      	ldr	r2, [pc, #120]	@ (8004a0c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004992:	4013      	ands	r3, r2
 8004994:	0019      	movs	r1, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499a:	061a      	lsls	r2, r3, #24
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	2180      	movs	r1, #128	@ 0x80
 80049a4:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	33b0      	adds	r3, #176	@ 0xb0
 80049aa:	001a      	movs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	3389      	adds	r3, #137	@ 0x89
 80049b4:	33ff      	adds	r3, #255	@ 0xff
 80049b6:	001a      	movs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2298      	movs	r2, #152	@ 0x98
 80049c0:	0092      	lsls	r2, r2, #2
 80049c2:	189a      	adds	r2, r3, r2
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	229e      	movs	r2, #158	@ 0x9e
 80049cc:	0092      	lsls	r2, r2, #2
 80049ce:	189a      	adds	r2, r3, r2
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e005      	b.n	80049e6 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3304      	adds	r3, #4
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	22d4      	movs	r2, #212	@ 0xd4
 80049ea:	0092      	lsls	r2, r2, #2
 80049ec:	4694      	mov	ip, r2
 80049ee:	4463      	add	r3, ip
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d3f1      	bcc.n	80049da <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b004      	add	sp, #16
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	4000b400 	.word	0x4000b400
 8004a04:	40006800 	.word	0x40006800
 8004a08:	ffe0ffff 	.word	0xffe0ffff
 8004a0c:	f0ffffff 	.word	0xf0ffffff

08004a10 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10a      	bne.n	8004a3c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004a2e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	e00b      	b.n	8004a54 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004a44:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004a4a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a4c:	2280      	movs	r2, #128	@ 0x80
 8004a4e:	05d2      	lsls	r2, r2, #23
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004a5e:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004a64:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004a6a:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	0013      	movs	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	18cb      	adds	r3, r1, r3
 8004a86:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	3304      	adds	r3, #4
 8004a92:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e020      	b.n	8004ae8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	3303      	adds	r3, #3
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	18d3      	adds	r3, r2, r3
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	18cb      	adds	r3, r1, r3
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004abe:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	18cb      	adds	r3, r1, r3
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004acc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	188a      	adds	r2, r1, r2
 8004ad4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004ad6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a05      	ldr	r2, [pc, #20]	@ (8004b04 <FDCAN_CopyMessageToRAM+0xf4>)
 8004aee:	5cd3      	ldrb	r3, [r2, r3]
 8004af0:	001a      	movs	r2, r3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d3d6      	bcc.n	8004aa6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004af8:	46c0      	nop			@ (mov r8, r8)
 8004afa:	46c0      	nop			@ (mov r8, r8)
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b008      	add	sp, #32
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	0800835c 	.word	0x0800835c

08004b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b16:	e14d      	b.n	8004db4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4091      	lsls	r1, r2
 8004b22:	000a      	movs	r2, r1
 8004b24:	4013      	ands	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d100      	bne.n	8004b30 <HAL_GPIO_Init+0x28>
 8004b2e:	e13e      	b.n	8004dae <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2203      	movs	r2, #3
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d005      	beq.n	8004b48 <HAL_GPIO_Init+0x40>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2203      	movs	r2, #3
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d130      	bne.n	8004baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	2203      	movs	r2, #3
 8004b54:	409a      	lsls	r2, r3
 8004b56:	0013      	movs	r3, r2
 8004b58:	43da      	mvns	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	0013      	movs	r3, r2
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b7e:	2201      	movs	r2, #1
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	409a      	lsls	r2, r3
 8004b84:	0013      	movs	r3, r2
 8004b86:	43da      	mvns	r2, r3
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	091b      	lsrs	r3, r3, #4
 8004b94:	2201      	movs	r2, #1
 8004b96:	401a      	ands	r2, r3
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	0013      	movs	r3, r2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2203      	movs	r2, #3
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d017      	beq.n	8004be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	0013      	movs	r3, r2
 8004bc6:	43da      	mvns	r2, r3
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	0013      	movs	r3, r2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2203      	movs	r2, #3
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d123      	bne.n	8004c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	08da      	lsrs	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3208      	adds	r2, #8
 8004bfa:	0092      	lsls	r2, r2, #2
 8004bfc:	58d3      	ldr	r3, [r2, r3]
 8004bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2207      	movs	r2, #7
 8004c04:	4013      	ands	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	220f      	movs	r2, #15
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	0013      	movs	r3, r2
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4013      	ands	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2107      	movs	r1, #7
 8004c1e:	400b      	ands	r3, r1
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	409a      	lsls	r2, r3
 8004c24:	0013      	movs	r3, r2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	08da      	lsrs	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3208      	adds	r2, #8
 8004c34:	0092      	lsls	r2, r2, #2
 8004c36:	6939      	ldr	r1, [r7, #16]
 8004c38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	2203      	movs	r2, #3
 8004c46:	409a      	lsls	r2, r3
 8004c48:	0013      	movs	r3, r2
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2203      	movs	r2, #3
 8004c58:	401a      	ands	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	0013      	movs	r3, r2
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	23c0      	movs	r3, #192	@ 0xc0
 8004c74:	029b      	lsls	r3, r3, #10
 8004c76:	4013      	ands	r3, r2
 8004c78:	d100      	bne.n	8004c7c <HAL_GPIO_Init+0x174>
 8004c7a:	e098      	b.n	8004dae <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004c7c:	4a53      	ldr	r2, [pc, #332]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	3318      	adds	r3, #24
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	589b      	ldr	r3, [r3, r2]
 8004c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	4013      	ands	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	220f      	movs	r2, #15
 8004c94:	409a      	lsls	r2, r3
 8004c96:	0013      	movs	r3, r2
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	23a0      	movs	r3, #160	@ 0xa0
 8004ca4:	05db      	lsls	r3, r3, #23
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d019      	beq.n	8004cde <HAL_GPIO_Init+0x1d6>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a48      	ldr	r2, [pc, #288]	@ (8004dd0 <HAL_GPIO_Init+0x2c8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_GPIO_Init+0x1d2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a47      	ldr	r2, [pc, #284]	@ (8004dd4 <HAL_GPIO_Init+0x2cc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_GPIO_Init+0x1ce>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a46      	ldr	r2, [pc, #280]	@ (8004dd8 <HAL_GPIO_Init+0x2d0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <HAL_GPIO_Init+0x1ca>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a45      	ldr	r2, [pc, #276]	@ (8004ddc <HAL_GPIO_Init+0x2d4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d101      	bne.n	8004cce <HAL_GPIO_Init+0x1c6>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	e008      	b.n	8004ce0 <HAL_GPIO_Init+0x1d8>
 8004cce:	2305      	movs	r3, #5
 8004cd0:	e006      	b.n	8004ce0 <HAL_GPIO_Init+0x1d8>
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e004      	b.n	8004ce0 <HAL_GPIO_Init+0x1d8>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e002      	b.n	8004ce0 <HAL_GPIO_Init+0x1d8>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_GPIO_Init+0x1d8>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	2103      	movs	r1, #3
 8004ce4:	400a      	ands	r2, r1
 8004ce6:	00d2      	lsls	r2, r2, #3
 8004ce8:	4093      	lsls	r3, r2
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004cf0:	4936      	ldr	r1, [pc, #216]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	089b      	lsrs	r3, r3, #2
 8004cf6:	3318      	adds	r3, #24
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cfe:	4b33      	ldr	r3, [pc, #204]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43da      	mvns	r2, r3
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	2380      	movs	r3, #128	@ 0x80
 8004d14:	035b      	lsls	r3, r3, #13
 8004d16:	4013      	ands	r3, r2
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d22:	4b2a      	ldr	r3, [pc, #168]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004d28:	4b28      	ldr	r3, [pc, #160]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	039b      	lsls	r3, r3, #14
 8004d40:	4013      	ands	r3, r2
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d52:	4a1e      	ldr	r2, [pc, #120]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004d54:	2384      	movs	r3, #132	@ 0x84
 8004d56:	58d3      	ldr	r3, [r2, r3]
 8004d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	43da      	mvns	r2, r3
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4013      	ands	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	2380      	movs	r3, #128	@ 0x80
 8004d6a:	029b      	lsls	r3, r3, #10
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d78:	4914      	ldr	r1, [pc, #80]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004d7a:	2284      	movs	r2, #132	@ 0x84
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004d80:	4a12      	ldr	r2, [pc, #72]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004d82:	2380      	movs	r3, #128	@ 0x80
 8004d84:	58d3      	ldr	r3, [r2, r3]
 8004d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	025b      	lsls	r3, r3, #9
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004da6:	4909      	ldr	r1, [pc, #36]	@ (8004dcc <HAL_GPIO_Init+0x2c4>)
 8004da8:	2280      	movs	r2, #128	@ 0x80
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	3301      	adds	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	40da      	lsrs	r2, r3
 8004dbc:	1e13      	subs	r3, r2, #0
 8004dbe:	d000      	beq.n	8004dc2 <HAL_GPIO_Init+0x2ba>
 8004dc0:	e6aa      	b.n	8004b18 <HAL_GPIO_Init+0x10>
  }
}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	46c0      	nop			@ (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b006      	add	sp, #24
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021800 	.word	0x40021800
 8004dd0:	50000400 	.word	0x50000400
 8004dd4:	50000800 	.word	0x50000800
 8004dd8:	50000c00 	.word	0x50000c00
 8004ddc:	50001000 	.word	0x50001000

08004de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	000a      	movs	r2, r1
 8004dea:	1cbb      	adds	r3, r7, #2
 8004dec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	1cba      	adds	r2, r7, #2
 8004df4:	8812      	ldrh	r2, [r2, #0]
 8004df6:	4013      	ands	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004dfa:	230f      	movs	r3, #15
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	e003      	b.n	8004e0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e04:	230f      	movs	r3, #15
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004e0c:	230f      	movs	r3, #15
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	781b      	ldrb	r3, [r3, #0]
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b004      	add	sp, #16
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	0008      	movs	r0, r1
 8004e24:	0011      	movs	r1, r2
 8004e26:	1cbb      	adds	r3, r7, #2
 8004e28:	1c02      	adds	r2, r0, #0
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	1c7b      	adds	r3, r7, #1
 8004e2e:	1c0a      	adds	r2, r1, #0
 8004e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e32:	1c7b      	adds	r3, r7, #1
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e3a:	1cbb      	adds	r3, r7, #2
 8004e3c:	881a      	ldrh	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e42:	e003      	b.n	8004e4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e44:	1cbb      	adds	r3, r7, #2
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e4c:	46c0      	nop			@ (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b002      	add	sp, #8
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	000a      	movs	r2, r1
 8004e5e:	1cbb      	adds	r3, r7, #2
 8004e60:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e68:	1cbb      	adds	r3, r7, #2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	041a      	lsls	r2, r3, #16
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	1cb9      	adds	r1, r7, #2
 8004e78:	8809      	ldrh	r1, [r1, #0]
 8004e7a:	400b      	ands	r3, r1
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	619a      	str	r2, [r3, #24]
}
 8004e82:	46c0      	nop			@ (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b004      	add	sp, #16
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e94:	4b19      	ldr	r3, [pc, #100]	@ (8004efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a19      	ldr	r2, [pc, #100]	@ (8004f00 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	4b17      	ldr	r3, [pc, #92]	@ (8004efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	2380      	movs	r3, #128	@ 0x80
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d11f      	bne.n	8004ef0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004eb0:	4b14      	ldr	r3, [pc, #80]	@ (8004f04 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	0013      	movs	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	189b      	adds	r3, r3, r2
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	4912      	ldr	r1, [pc, #72]	@ (8004f08 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7fb f92a 	bl	8000118 <__udivsi3>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eca:	e008      	b.n	8004ede <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e001      	b.n	8004ede <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e009      	b.n	8004ef2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ede:	4b07      	ldr	r3, [pc, #28]	@ (8004efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	2380      	movs	r3, #128	@ 0x80
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	2380      	movs	r3, #128	@ 0x80
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d0ed      	beq.n	8004ecc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b004      	add	sp, #16
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	40007000 	.word	0x40007000
 8004f00:	fffff9ff 	.word	0xfffff9ff
 8004f04:	2000007c 	.word	0x2000007c
 8004f08:	000f4240 	.word	0x000f4240

08004f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f000 fb50 	bl	80055c0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2201      	movs	r2, #1
 8004f26:	4013      	ands	r3, r2
 8004f28:	d100      	bne.n	8004f2c <HAL_RCC_OscConfig+0x20>
 8004f2a:	e07c      	b.n	8005026 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f2c:	4bc3      	ldr	r3, [pc, #780]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2238      	movs	r2, #56	@ 0x38
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f36:	4bc1      	ldr	r3, [pc, #772]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d102      	bne.n	8004f4c <HAL_RCC_OscConfig+0x40>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d002      	beq.n	8004f52 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d10b      	bne.n	8004f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f52:	4bba      	ldr	r3, [pc, #744]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	2380      	movs	r3, #128	@ 0x80
 8004f58:	029b      	lsls	r3, r3, #10
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d062      	beq.n	8005024 <HAL_RCC_OscConfig+0x118>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d15e      	bne.n	8005024 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e32a      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	2380      	movs	r3, #128	@ 0x80
 8004f70:	025b      	lsls	r3, r3, #9
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_OscConfig+0x7a>
 8004f76:	4bb1      	ldr	r3, [pc, #708]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4bb0      	ldr	r3, [pc, #704]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004f7c:	2180      	movs	r1, #128	@ 0x80
 8004f7e:	0249      	lsls	r1, r1, #9
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e020      	b.n	8004fc8 <HAL_RCC_OscConfig+0xbc>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	23a0      	movs	r3, #160	@ 0xa0
 8004f8c:	02db      	lsls	r3, r3, #11
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d10e      	bne.n	8004fb0 <HAL_RCC_OscConfig+0xa4>
 8004f92:	4baa      	ldr	r3, [pc, #680]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4ba9      	ldr	r3, [pc, #676]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004f98:	2180      	movs	r1, #128	@ 0x80
 8004f9a:	02c9      	lsls	r1, r1, #11
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	4ba6      	ldr	r3, [pc, #664]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4ba5      	ldr	r3, [pc, #660]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004fa6:	2180      	movs	r1, #128	@ 0x80
 8004fa8:	0249      	lsls	r1, r1, #9
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCC_OscConfig+0xbc>
 8004fb0:	4ba2      	ldr	r3, [pc, #648]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4ba1      	ldr	r3, [pc, #644]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004fb6:	49a2      	ldr	r1, [pc, #648]	@ (8005240 <HAL_RCC_OscConfig+0x334>)
 8004fb8:	400a      	ands	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	4b9f      	ldr	r3, [pc, #636]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b9e      	ldr	r3, [pc, #632]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004fc2:	49a0      	ldr	r1, [pc, #640]	@ (8005244 <HAL_RCC_OscConfig+0x338>)
 8004fc4:	400a      	ands	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d014      	beq.n	8004ffa <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7ff f9be 	bl	8004350 <HAL_GetTick>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fda:	f7ff f9b9 	bl	8004350 <HAL_GetTick>
 8004fde:	0002      	movs	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b64      	cmp	r3, #100	@ 0x64
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e2e9      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fec:	4b93      	ldr	r3, [pc, #588]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	029b      	lsls	r3, r3, #10
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0xce>
 8004ff8:	e015      	b.n	8005026 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7ff f9a9 	bl	8004350 <HAL_GetTick>
 8004ffe:	0003      	movs	r3, r0
 8005000:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005004:	f7ff f9a4 	bl	8004350 <HAL_GetTick>
 8005008:	0002      	movs	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	@ 0x64
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e2d4      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005016:	4b89      	ldr	r3, [pc, #548]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	2380      	movs	r3, #128	@ 0x80
 800501c:	029b      	lsls	r3, r3, #10
 800501e:	4013      	ands	r3, r2
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0xf8>
 8005022:	e000      	b.n	8005026 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2202      	movs	r2, #2
 800502c:	4013      	ands	r3, r2
 800502e:	d100      	bne.n	8005032 <HAL_RCC_OscConfig+0x126>
 8005030:	e099      	b.n	8005166 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005032:	4b82      	ldr	r3, [pc, #520]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2238      	movs	r2, #56	@ 0x38
 8005038:	4013      	ands	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800503c:	4b7f      	ldr	r3, [pc, #508]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2203      	movs	r2, #3
 8005042:	4013      	ands	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b10      	cmp	r3, #16
 800504a:	d102      	bne.n	8005052 <HAL_RCC_OscConfig+0x146>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d002      	beq.n	8005058 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d135      	bne.n	80050c4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005058:	4b78      	ldr	r3, [pc, #480]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	2380      	movs	r3, #128	@ 0x80
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4013      	ands	r3, r2
 8005062:	d005      	beq.n	8005070 <HAL_RCC_OscConfig+0x164>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e2a7      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005070:	4b72      	ldr	r3, [pc, #456]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	4a74      	ldr	r2, [pc, #464]	@ (8005248 <HAL_RCC_OscConfig+0x33c>)
 8005076:	4013      	ands	r3, r2
 8005078:	0019      	movs	r1, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	4b6e      	ldr	r3, [pc, #440]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d112      	bne.n	80050b2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800508c:	4b6b      	ldr	r3, [pc, #428]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6e      	ldr	r2, [pc, #440]	@ (800524c <HAL_RCC_OscConfig+0x340>)
 8005092:	4013      	ands	r3, r2
 8005094:	0019      	movs	r1, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	4b68      	ldr	r3, [pc, #416]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 800509c:	430a      	orrs	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80050a0:	4b66      	ldr	r3, [pc, #408]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	0adb      	lsrs	r3, r3, #11
 80050a6:	2207      	movs	r2, #7
 80050a8:	4013      	ands	r3, r2
 80050aa:	4a69      	ldr	r2, [pc, #420]	@ (8005250 <HAL_RCC_OscConfig+0x344>)
 80050ac:	40da      	lsrs	r2, r3
 80050ae:	4b69      	ldr	r3, [pc, #420]	@ (8005254 <HAL_RCC_OscConfig+0x348>)
 80050b0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050b2:	4b69      	ldr	r3, [pc, #420]	@ (8005258 <HAL_RCC_OscConfig+0x34c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f7ff f8ee 	bl	8004298 <HAL_InitTick>
 80050bc:	1e03      	subs	r3, r0, #0
 80050be:	d051      	beq.n	8005164 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e27d      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d030      	beq.n	800512e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050cc:	4b5b      	ldr	r3, [pc, #364]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a5e      	ldr	r2, [pc, #376]	@ (800524c <HAL_RCC_OscConfig+0x340>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	0019      	movs	r1, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	4b58      	ldr	r3, [pc, #352]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050e0:	4b56      	ldr	r3, [pc, #344]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b55      	ldr	r3, [pc, #340]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80050e6:	2180      	movs	r1, #128	@ 0x80
 80050e8:	0049      	lsls	r1, r1, #1
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ee:	f7ff f92f 	bl	8004350 <HAL_GetTick>
 80050f2:	0003      	movs	r3, r0
 80050f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f8:	f7ff f92a 	bl	8004350 <HAL_GetTick>
 80050fc:	0002      	movs	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e25a      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800510a:	4b4c      	ldr	r3, [pc, #304]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4013      	ands	r3, r2
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005116:	4b49      	ldr	r3, [pc, #292]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4a4b      	ldr	r2, [pc, #300]	@ (8005248 <HAL_RCC_OscConfig+0x33c>)
 800511c:	4013      	ands	r3, r2
 800511e:	0019      	movs	r1, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	4b45      	ldr	r3, [pc, #276]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
 800512c:	e01b      	b.n	8005166 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800512e:	4b43      	ldr	r3, [pc, #268]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b42      	ldr	r3, [pc, #264]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005134:	4949      	ldr	r1, [pc, #292]	@ (800525c <HAL_RCC_OscConfig+0x350>)
 8005136:	400a      	ands	r2, r1
 8005138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7ff f909 	bl	8004350 <HAL_GetTick>
 800513e:	0003      	movs	r3, r0
 8005140:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005144:	f7ff f904 	bl	8004350 <HAL_GetTick>
 8005148:	0002      	movs	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e234      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005156:	4b39      	ldr	r3, [pc, #228]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	2380      	movs	r3, #128	@ 0x80
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4013      	ands	r3, r2
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x238>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005164:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2208      	movs	r2, #8
 800516c:	4013      	ands	r3, r2
 800516e:	d047      	beq.n	8005200 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005170:	4b32      	ldr	r3, [pc, #200]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2238      	movs	r2, #56	@ 0x38
 8005176:	4013      	ands	r3, r2
 8005178:	2b18      	cmp	r3, #24
 800517a:	d10a      	bne.n	8005192 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800517c:	4b2f      	ldr	r3, [pc, #188]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 800517e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005180:	2202      	movs	r2, #2
 8005182:	4013      	ands	r3, r2
 8005184:	d03c      	beq.n	8005200 <HAL_RCC_OscConfig+0x2f4>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d138      	bne.n	8005200 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e216      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d019      	beq.n	80051ce <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800519a:	4b28      	ldr	r3, [pc, #160]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 800519c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800519e:	4b27      	ldr	r3, [pc, #156]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80051a0:	2101      	movs	r1, #1
 80051a2:	430a      	orrs	r2, r1
 80051a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7ff f8d3 	bl	8004350 <HAL_GetTick>
 80051aa:	0003      	movs	r3, r0
 80051ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b0:	f7ff f8ce 	bl	8004350 <HAL_GetTick>
 80051b4:	0002      	movs	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e1fe      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051c2:	4b1e      	ldr	r3, [pc, #120]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80051c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c6:	2202      	movs	r2, #2
 80051c8:	4013      	ands	r3, r2
 80051ca:	d0f1      	beq.n	80051b0 <HAL_RCC_OscConfig+0x2a4>
 80051cc:	e018      	b.n	8005200 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80051ce:	4b1b      	ldr	r3, [pc, #108]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80051d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051d2:	4b1a      	ldr	r3, [pc, #104]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80051d4:	2101      	movs	r1, #1
 80051d6:	438a      	bics	r2, r1
 80051d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051da:	f7ff f8b9 	bl	8004350 <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e4:	f7ff f8b4 	bl	8004350 <HAL_GetTick>
 80051e8:	0002      	movs	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e1e4      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051f6:	4b11      	ldr	r3, [pc, #68]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 80051f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051fa:	2202      	movs	r2, #2
 80051fc:	4013      	ands	r3, r2
 80051fe:	d1f1      	bne.n	80051e4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2204      	movs	r2, #4
 8005206:	4013      	ands	r3, r2
 8005208:	d100      	bne.n	800520c <HAL_RCC_OscConfig+0x300>
 800520a:	e0c7      	b.n	800539c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800520c:	231f      	movs	r3, #31
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005214:	4b09      	ldr	r3, [pc, #36]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2238      	movs	r2, #56	@ 0x38
 800521a:	4013      	ands	r3, r2
 800521c:	2b20      	cmp	r3, #32
 800521e:	d11f      	bne.n	8005260 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005220:	4b06      	ldr	r3, [pc, #24]	@ (800523c <HAL_RCC_OscConfig+0x330>)
 8005222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005224:	2202      	movs	r2, #2
 8005226:	4013      	ands	r3, r2
 8005228:	d100      	bne.n	800522c <HAL_RCC_OscConfig+0x320>
 800522a:	e0b7      	b.n	800539c <HAL_RCC_OscConfig+0x490>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d000      	beq.n	8005236 <HAL_RCC_OscConfig+0x32a>
 8005234:	e0b2      	b.n	800539c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e1c2      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	40021000 	.word	0x40021000
 8005240:	fffeffff 	.word	0xfffeffff
 8005244:	fffbffff 	.word	0xfffbffff
 8005248:	ffff80ff 	.word	0xffff80ff
 800524c:	ffffc7ff 	.word	0xffffc7ff
 8005250:	00f42400 	.word	0x00f42400
 8005254:	2000007c 	.word	0x2000007c
 8005258:	20000080 	.word	0x20000080
 800525c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005260:	4bb5      	ldr	r3, [pc, #724]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005262:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005264:	2380      	movs	r3, #128	@ 0x80
 8005266:	055b      	lsls	r3, r3, #21
 8005268:	4013      	ands	r3, r2
 800526a:	d101      	bne.n	8005270 <HAL_RCC_OscConfig+0x364>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <HAL_RCC_OscConfig+0x366>
 8005270:	2300      	movs	r3, #0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d011      	beq.n	800529a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4bb0      	ldr	r3, [pc, #704]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800527a:	4baf      	ldr	r3, [pc, #700]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 800527c:	2180      	movs	r1, #128	@ 0x80
 800527e:	0549      	lsls	r1, r1, #21
 8005280:	430a      	orrs	r2, r1
 8005282:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005284:	4bac      	ldr	r3, [pc, #688]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005288:	2380      	movs	r3, #128	@ 0x80
 800528a:	055b      	lsls	r3, r3, #21
 800528c:	4013      	ands	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005292:	231f      	movs	r3, #31
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800529a:	4ba8      	ldr	r3, [pc, #672]	@ (800553c <HAL_RCC_OscConfig+0x630>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	2380      	movs	r3, #128	@ 0x80
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	4013      	ands	r3, r2
 80052a4:	d11a      	bne.n	80052dc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a6:	4ba5      	ldr	r3, [pc, #660]	@ (800553c <HAL_RCC_OscConfig+0x630>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4ba4      	ldr	r3, [pc, #656]	@ (800553c <HAL_RCC_OscConfig+0x630>)
 80052ac:	2180      	movs	r1, #128	@ 0x80
 80052ae:	0049      	lsls	r1, r1, #1
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80052b4:	f7ff f84c 	bl	8004350 <HAL_GetTick>
 80052b8:	0003      	movs	r3, r0
 80052ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052be:	f7ff f847 	bl	8004350 <HAL_GetTick>
 80052c2:	0002      	movs	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e177      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d0:	4b9a      	ldr	r3, [pc, #616]	@ (800553c <HAL_RCC_OscConfig+0x630>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2380      	movs	r3, #128	@ 0x80
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	4013      	ands	r3, r2
 80052da:	d0f0      	beq.n	80052be <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d106      	bne.n	80052f2 <HAL_RCC_OscConfig+0x3e6>
 80052e4:	4b94      	ldr	r3, [pc, #592]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80052e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052e8:	4b93      	ldr	r3, [pc, #588]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80052ea:	2101      	movs	r1, #1
 80052ec:	430a      	orrs	r2, r1
 80052ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052f0:	e01c      	b.n	800532c <HAL_RCC_OscConfig+0x420>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b05      	cmp	r3, #5
 80052f8:	d10c      	bne.n	8005314 <HAL_RCC_OscConfig+0x408>
 80052fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80052fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052fe:	4b8e      	ldr	r3, [pc, #568]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005300:	2104      	movs	r1, #4
 8005302:	430a      	orrs	r2, r1
 8005304:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005306:	4b8c      	ldr	r3, [pc, #560]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005308:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800530a:	4b8b      	ldr	r3, [pc, #556]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 800530c:	2101      	movs	r1, #1
 800530e:	430a      	orrs	r2, r1
 8005310:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005312:	e00b      	b.n	800532c <HAL_RCC_OscConfig+0x420>
 8005314:	4b88      	ldr	r3, [pc, #544]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005316:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005318:	4b87      	ldr	r3, [pc, #540]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 800531a:	2101      	movs	r1, #1
 800531c:	438a      	bics	r2, r1
 800531e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005320:	4b85      	ldr	r3, [pc, #532]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005322:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005324:	4b84      	ldr	r3, [pc, #528]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005326:	2104      	movs	r1, #4
 8005328:	438a      	bics	r2, r1
 800532a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d014      	beq.n	800535e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7ff f80c 	bl	8004350 <HAL_GetTick>
 8005338:	0003      	movs	r3, r0
 800533a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533c:	e009      	b.n	8005352 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533e:	f7ff f807 	bl	8004350 <HAL_GetTick>
 8005342:	0002      	movs	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	4a7d      	ldr	r2, [pc, #500]	@ (8005540 <HAL_RCC_OscConfig+0x634>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e136      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005352:	4b79      	ldr	r3, [pc, #484]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005356:	2202      	movs	r2, #2
 8005358:	4013      	ands	r3, r2
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x432>
 800535c:	e013      	b.n	8005386 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535e:	f7fe fff7 	bl	8004350 <HAL_GetTick>
 8005362:	0003      	movs	r3, r0
 8005364:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005366:	e009      	b.n	800537c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005368:	f7fe fff2 	bl	8004350 <HAL_GetTick>
 800536c:	0002      	movs	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	4a73      	ldr	r2, [pc, #460]	@ (8005540 <HAL_RCC_OscConfig+0x634>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e121      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800537c:	4b6e      	ldr	r3, [pc, #440]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 800537e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005380:	2202      	movs	r2, #2
 8005382:	4013      	ands	r3, r2
 8005384:	d1f0      	bne.n	8005368 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005386:	231f      	movs	r3, #31
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d105      	bne.n	800539c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005390:	4b69      	ldr	r3, [pc, #420]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005394:	4b68      	ldr	r3, [pc, #416]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005396:	496b      	ldr	r1, [pc, #428]	@ (8005544 <HAL_RCC_OscConfig+0x638>)
 8005398:	400a      	ands	r2, r1
 800539a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2220      	movs	r2, #32
 80053a2:	4013      	ands	r3, r2
 80053a4:	d039      	beq.n	800541a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01b      	beq.n	80053e6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053ae:	4b62      	ldr	r3, [pc, #392]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b61      	ldr	r3, [pc, #388]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80053b4:	2180      	movs	r1, #128	@ 0x80
 80053b6:	03c9      	lsls	r1, r1, #15
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fe ffc8 	bl	8004350 <HAL_GetTick>
 80053c0:	0003      	movs	r3, r0
 80053c2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053c6:	f7fe ffc3 	bl	8004350 <HAL_GetTick>
 80053ca:	0002      	movs	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e0f3      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80053d8:	4b57      	ldr	r3, [pc, #348]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	2380      	movs	r3, #128	@ 0x80
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	4013      	ands	r3, r2
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x4ba>
 80053e4:	e019      	b.n	800541a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053e6:	4b54      	ldr	r3, [pc, #336]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b53      	ldr	r3, [pc, #332]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80053ec:	4956      	ldr	r1, [pc, #344]	@ (8005548 <HAL_RCC_OscConfig+0x63c>)
 80053ee:	400a      	ands	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f2:	f7fe ffad 	bl	8004350 <HAL_GetTick>
 80053f6:	0003      	movs	r3, r0
 80053f8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053fc:	f7fe ffa8 	bl	8004350 <HAL_GetTick>
 8005400:	0002      	movs	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0d8      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800540e:	4b4a      	ldr	r3, [pc, #296]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	2380      	movs	r3, #128	@ 0x80
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	4013      	ands	r3, r2
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d100      	bne.n	8005424 <HAL_RCC_OscConfig+0x518>
 8005422:	e0cc      	b.n	80055be <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005424:	4b44      	ldr	r3, [pc, #272]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2238      	movs	r2, #56	@ 0x38
 800542a:	4013      	ands	r3, r2
 800542c:	2b10      	cmp	r3, #16
 800542e:	d100      	bne.n	8005432 <HAL_RCC_OscConfig+0x526>
 8005430:	e07b      	b.n	800552a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d156      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543a:	4b3f      	ldr	r3, [pc, #252]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4b3e      	ldr	r3, [pc, #248]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005440:	4942      	ldr	r1, [pc, #264]	@ (800554c <HAL_RCC_OscConfig+0x640>)
 8005442:	400a      	ands	r2, r1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005446:	f7fe ff83 	bl	8004350 <HAL_GetTick>
 800544a:	0003      	movs	r3, r0
 800544c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005450:	f7fe ff7e 	bl	8004350 <HAL_GetTick>
 8005454:	0002      	movs	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e0ae      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005462:	4b35      	ldr	r3, [pc, #212]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	2380      	movs	r3, #128	@ 0x80
 8005468:	049b      	lsls	r3, r3, #18
 800546a:	4013      	ands	r3, r2
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800546e:	4b32      	ldr	r3, [pc, #200]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	4a37      	ldr	r2, [pc, #220]	@ (8005550 <HAL_RCC_OscConfig+0x644>)
 8005474:	4013      	ands	r3, r2
 8005476:	0019      	movs	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	431a      	orrs	r2, r3
 800549c:	4b26      	ldr	r3, [pc, #152]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 800549e:	430a      	orrs	r2, r1
 80054a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a2:	4b25      	ldr	r3, [pc, #148]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80054a8:	2180      	movs	r1, #128	@ 0x80
 80054aa:	0449      	lsls	r1, r1, #17
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80054b0:	4b21      	ldr	r3, [pc, #132]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80054b6:	2180      	movs	r1, #128	@ 0x80
 80054b8:	0549      	lsls	r1, r1, #21
 80054ba:	430a      	orrs	r2, r1
 80054bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054be:	f7fe ff47 	bl	8004350 <HAL_GetTick>
 80054c2:	0003      	movs	r3, r0
 80054c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fe ff42 	bl	8004350 <HAL_GetTick>
 80054cc:	0002      	movs	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e072      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054da:	4b17      	ldr	r3, [pc, #92]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	2380      	movs	r3, #128	@ 0x80
 80054e0:	049b      	lsls	r3, r3, #18
 80054e2:	4013      	ands	r3, r2
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x5bc>
 80054e6:	e06a      	b.n	80055be <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e8:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 80054ee:	4917      	ldr	r1, [pc, #92]	@ (800554c <HAL_RCC_OscConfig+0x640>)
 80054f0:	400a      	ands	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fe ff2c 	bl	8004350 <HAL_GetTick>
 80054f8:	0003      	movs	r3, r0
 80054fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fe:	f7fe ff27 	bl	8004350 <HAL_GetTick>
 8005502:	0002      	movs	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e057      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005510:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	2380      	movs	r3, #128	@ 0x80
 8005516:	049b      	lsls	r3, r3, #18
 8005518:	4013      	ands	r3, r2
 800551a:	d1f0      	bne.n	80054fe <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <HAL_RCC_OscConfig+0x62c>)
 8005522:	490c      	ldr	r1, [pc, #48]	@ (8005554 <HAL_RCC_OscConfig+0x648>)
 8005524:	400a      	ands	r2, r1
 8005526:	60da      	str	r2, [r3, #12]
 8005528:	e049      	b.n	80055be <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d112      	bne.n	8005558 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e044      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
 8005536:	46c0      	nop			@ (mov r8, r8)
 8005538:	40021000 	.word	0x40021000
 800553c:	40007000 	.word	0x40007000
 8005540:	00001388 	.word	0x00001388
 8005544:	efffffff 	.word	0xefffffff
 8005548:	ffbfffff 	.word	0xffbfffff
 800554c:	feffffff 	.word	0xfeffffff
 8005550:	11c1808c 	.word	0x11c1808c
 8005554:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005558:	4b1b      	ldr	r3, [pc, #108]	@ (80055c8 <HAL_RCC_OscConfig+0x6bc>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2203      	movs	r2, #3
 8005562:	401a      	ands	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	429a      	cmp	r2, r3
 800556a:	d126      	bne.n	80055ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2270      	movs	r2, #112	@ 0x70
 8005570:	401a      	ands	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005576:	429a      	cmp	r2, r3
 8005578:	d11f      	bne.n	80055ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	23fe      	movs	r3, #254	@ 0xfe
 800557e:	01db      	lsls	r3, r3, #7
 8005580:	401a      	ands	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005586:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d116      	bne.n	80055ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	23f8      	movs	r3, #248	@ 0xf8
 8005590:	039b      	lsls	r3, r3, #14
 8005592:	401a      	ands	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d10e      	bne.n	80055ba <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	23e0      	movs	r3, #224	@ 0xe0
 80055a0:	051b      	lsls	r3, r3, #20
 80055a2:	401a      	ands	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d106      	bne.n	80055ba <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	0f5b      	lsrs	r3, r3, #29
 80055b0:	075a      	lsls	r2, r3, #29
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d001      	beq.n	80055be <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b008      	add	sp, #32
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000

080055cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0e9      	b.n	80057b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e0:	4b76      	ldr	r3, [pc, #472]	@ (80057bc <HAL_RCC_ClockConfig+0x1f0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2207      	movs	r2, #7
 80055e6:	4013      	ands	r3, r2
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d91e      	bls.n	800562c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ee:	4b73      	ldr	r3, [pc, #460]	@ (80057bc <HAL_RCC_ClockConfig+0x1f0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2207      	movs	r2, #7
 80055f4:	4393      	bics	r3, r2
 80055f6:	0019      	movs	r1, r3
 80055f8:	4b70      	ldr	r3, [pc, #448]	@ (80057bc <HAL_RCC_ClockConfig+0x1f0>)
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005600:	f7fe fea6 	bl	8004350 <HAL_GetTick>
 8005604:	0003      	movs	r3, r0
 8005606:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005608:	e009      	b.n	800561e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560a:	f7fe fea1 	bl	8004350 <HAL_GetTick>
 800560e:	0002      	movs	r2, r0
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	4a6a      	ldr	r2, [pc, #424]	@ (80057c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d901      	bls.n	800561e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e0ca      	b.n	80057b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800561e:	4b67      	ldr	r3, [pc, #412]	@ (80057bc <HAL_RCC_ClockConfig+0x1f0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2207      	movs	r2, #7
 8005624:	4013      	ands	r3, r2
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d1ee      	bne.n	800560a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2202      	movs	r2, #2
 8005632:	4013      	ands	r3, r2
 8005634:	d015      	beq.n	8005662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2204      	movs	r2, #4
 800563c:	4013      	ands	r3, r2
 800563e:	d006      	beq.n	800564e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005640:	4b60      	ldr	r3, [pc, #384]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	4b5f      	ldr	r3, [pc, #380]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005646:	21e0      	movs	r1, #224	@ 0xe0
 8005648:	01c9      	lsls	r1, r1, #7
 800564a:	430a      	orrs	r2, r1
 800564c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800564e:	4b5d      	ldr	r3, [pc, #372]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	4a5d      	ldr	r2, [pc, #372]	@ (80057c8 <HAL_RCC_ClockConfig+0x1fc>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	4b59      	ldr	r3, [pc, #356]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2201      	movs	r2, #1
 8005668:	4013      	ands	r3, r2
 800566a:	d057      	beq.n	800571c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d107      	bne.n	8005684 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005674:	4b53      	ldr	r3, [pc, #332]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	029b      	lsls	r3, r3, #10
 800567c:	4013      	ands	r3, r2
 800567e:	d12b      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e097      	b.n	80057b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d107      	bne.n	800569c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800568c:	4b4d      	ldr	r3, [pc, #308]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	2380      	movs	r3, #128	@ 0x80
 8005692:	049b      	lsls	r3, r3, #18
 8005694:	4013      	ands	r3, r2
 8005696:	d11f      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e08b      	b.n	80057b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056a4:	4b47      	ldr	r3, [pc, #284]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	2380      	movs	r3, #128	@ 0x80
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4013      	ands	r3, r2
 80056ae:	d113      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e07f      	b.n	80057b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d106      	bne.n	80056ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056bc:	4b41      	ldr	r3, [pc, #260]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 80056be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c0:	2202      	movs	r2, #2
 80056c2:	4013      	ands	r3, r2
 80056c4:	d108      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e074      	b.n	80057b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ca:	4b3e      	ldr	r3, [pc, #248]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 80056cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ce:	2202      	movs	r2, #2
 80056d0:	4013      	ands	r3, r2
 80056d2:	d101      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e06d      	b.n	80057b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d8:	4b3a      	ldr	r3, [pc, #232]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2207      	movs	r2, #7
 80056de:	4393      	bics	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	4b37      	ldr	r3, [pc, #220]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 80056e8:	430a      	orrs	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ec:	f7fe fe30 	bl	8004350 <HAL_GetTick>
 80056f0:	0003      	movs	r3, r0
 80056f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f4:	e009      	b.n	800570a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f6:	f7fe fe2b 	bl	8004350 <HAL_GetTick>
 80056fa:	0002      	movs	r2, r0
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	4a2f      	ldr	r2, [pc, #188]	@ (80057c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d901      	bls.n	800570a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e054      	b.n	80057b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570a:	4b2e      	ldr	r3, [pc, #184]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2238      	movs	r2, #56	@ 0x38
 8005710:	401a      	ands	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	429a      	cmp	r2, r3
 800571a:	d1ec      	bne.n	80056f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800571c:	4b27      	ldr	r3, [pc, #156]	@ (80057bc <HAL_RCC_ClockConfig+0x1f0>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2207      	movs	r2, #7
 8005722:	4013      	ands	r3, r2
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d21e      	bcs.n	8005768 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <HAL_RCC_ClockConfig+0x1f0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2207      	movs	r2, #7
 8005730:	4393      	bics	r3, r2
 8005732:	0019      	movs	r1, r3
 8005734:	4b21      	ldr	r3, [pc, #132]	@ (80057bc <HAL_RCC_ClockConfig+0x1f0>)
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800573c:	f7fe fe08 	bl	8004350 <HAL_GetTick>
 8005740:	0003      	movs	r3, r0
 8005742:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005744:	e009      	b.n	800575a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005746:	f7fe fe03 	bl	8004350 <HAL_GetTick>
 800574a:	0002      	movs	r2, r0
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	4a1b      	ldr	r2, [pc, #108]	@ (80057c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e02c      	b.n	80057b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800575a:	4b18      	ldr	r3, [pc, #96]	@ (80057bc <HAL_RCC_ClockConfig+0x1f0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2207      	movs	r2, #7
 8005760:	4013      	ands	r3, r2
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d1ee      	bne.n	8005746 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2204      	movs	r2, #4
 800576e:	4013      	ands	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005772:	4b14      	ldr	r3, [pc, #80]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	4a15      	ldr	r2, [pc, #84]	@ (80057cc <HAL_RCC_ClockConfig+0x200>)
 8005778:	4013      	ands	r3, r2
 800577a:	0019      	movs	r1, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	4b10      	ldr	r3, [pc, #64]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005782:	430a      	orrs	r2, r1
 8005784:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005786:	f000 f829 	bl	80057dc <HAL_RCC_GetSysClockFreq>
 800578a:	0001      	movs	r1, r0
 800578c:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f8>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	220f      	movs	r2, #15
 8005794:	401a      	ands	r2, r3
 8005796:	4b0e      	ldr	r3, [pc, #56]	@ (80057d0 <HAL_RCC_ClockConfig+0x204>)
 8005798:	0092      	lsls	r2, r2, #2
 800579a:	58d3      	ldr	r3, [r2, r3]
 800579c:	221f      	movs	r2, #31
 800579e:	4013      	ands	r3, r2
 80057a0:	000a      	movs	r2, r1
 80057a2:	40da      	lsrs	r2, r3
 80057a4:	4b0b      	ldr	r3, [pc, #44]	@ (80057d4 <HAL_RCC_ClockConfig+0x208>)
 80057a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057a8:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <HAL_RCC_ClockConfig+0x20c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fe fd73 	bl	8004298 <HAL_InitTick>
 80057b2:	0003      	movs	r3, r0
}
 80057b4:	0018      	movs	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b004      	add	sp, #16
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40022000 	.word	0x40022000
 80057c0:	00001388 	.word	0x00001388
 80057c4:	40021000 	.word	0x40021000
 80057c8:	fffff0ff 	.word	0xfffff0ff
 80057cc:	ffff8fff 	.word	0xffff8fff
 80057d0:	0800831c 	.word	0x0800831c
 80057d4:	2000007c 	.word	0x2000007c
 80057d8:	20000080 	.word	0x20000080

080057dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057e2:	4b3c      	ldr	r3, [pc, #240]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2238      	movs	r2, #56	@ 0x38
 80057e8:	4013      	ands	r3, r2
 80057ea:	d10f      	bne.n	800580c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80057ec:	4b39      	ldr	r3, [pc, #228]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	0adb      	lsrs	r3, r3, #11
 80057f2:	2207      	movs	r2, #7
 80057f4:	4013      	ands	r3, r2
 80057f6:	2201      	movs	r2, #1
 80057f8:	409a      	lsls	r2, r3
 80057fa:	0013      	movs	r3, r2
 80057fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	4835      	ldr	r0, [pc, #212]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005802:	f7fa fc89 	bl	8000118 <__udivsi3>
 8005806:	0003      	movs	r3, r0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	e05d      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800580c:	4b31      	ldr	r3, [pc, #196]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2238      	movs	r2, #56	@ 0x38
 8005812:	4013      	ands	r3, r2
 8005814:	2b08      	cmp	r3, #8
 8005816:	d102      	bne.n	800581e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005818:	4b30      	ldr	r3, [pc, #192]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x100>)
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	e054      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800581e:	4b2d      	ldr	r3, [pc, #180]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2238      	movs	r2, #56	@ 0x38
 8005824:	4013      	ands	r3, r2
 8005826:	2b10      	cmp	r3, #16
 8005828:	d138      	bne.n	800589c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800582a:	4b2a      	ldr	r3, [pc, #168]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	2203      	movs	r2, #3
 8005830:	4013      	ands	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005834:	4b27      	ldr	r3, [pc, #156]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	2207      	movs	r2, #7
 800583c:	4013      	ands	r3, r2
 800583e:	3301      	adds	r3, #1
 8005840:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d10d      	bne.n	8005864 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	4824      	ldr	r0, [pc, #144]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x100>)
 800584c:	f7fa fc64 	bl	8000118 <__udivsi3>
 8005850:	0003      	movs	r3, r0
 8005852:	0019      	movs	r1, r3
 8005854:	4b1f      	ldr	r3, [pc, #124]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	0a1b      	lsrs	r3, r3, #8
 800585a:	227f      	movs	r2, #127	@ 0x7f
 800585c:	4013      	ands	r3, r2
 800585e:	434b      	muls	r3, r1
 8005860:	617b      	str	r3, [r7, #20]
        break;
 8005862:	e00d      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	481c      	ldr	r0, [pc, #112]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005868:	f7fa fc56 	bl	8000118 <__udivsi3>
 800586c:	0003      	movs	r3, r0
 800586e:	0019      	movs	r1, r3
 8005870:	4b18      	ldr	r3, [pc, #96]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	0a1b      	lsrs	r3, r3, #8
 8005876:	227f      	movs	r2, #127	@ 0x7f
 8005878:	4013      	ands	r3, r2
 800587a:	434b      	muls	r3, r1
 800587c:	617b      	str	r3, [r7, #20]
        break;
 800587e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005880:	4b14      	ldr	r3, [pc, #80]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	0f5b      	lsrs	r3, r3, #29
 8005886:	2207      	movs	r2, #7
 8005888:	4013      	ands	r3, r2
 800588a:	3301      	adds	r3, #1
 800588c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	6978      	ldr	r0, [r7, #20]
 8005892:	f7fa fc41 	bl	8000118 <__udivsi3>
 8005896:	0003      	movs	r3, r0
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e015      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800589c:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2238      	movs	r2, #56	@ 0x38
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d103      	bne.n	80058b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80058a8:	2380      	movs	r3, #128	@ 0x80
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	e00b      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80058b0:	4b08      	ldr	r3, [pc, #32]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2238      	movs	r2, #56	@ 0x38
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b18      	cmp	r3, #24
 80058ba:	d103      	bne.n	80058c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80058bc:	23fa      	movs	r3, #250	@ 0xfa
 80058be:	01db      	lsls	r3, r3, #7
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	e001      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058c8:	693b      	ldr	r3, [r7, #16]
}
 80058ca:	0018      	movs	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	b006      	add	sp, #24
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	40021000 	.word	0x40021000
 80058d8:	00f42400 	.word	0x00f42400
 80058dc:	007a1200 	.word	0x007a1200

080058e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80058e8:	2313      	movs	r3, #19
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058f0:	2312      	movs	r3, #18
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	2380      	movs	r3, #128	@ 0x80
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	4013      	ands	r3, r2
 8005902:	d100      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005904:	e0ad      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005906:	2011      	movs	r0, #17
 8005908:	183b      	adds	r3, r7, r0
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590e:	4b47      	ldr	r3, [pc, #284]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005912:	2380      	movs	r3, #128	@ 0x80
 8005914:	055b      	lsls	r3, r3, #21
 8005916:	4013      	ands	r3, r2
 8005918:	d110      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591a:	4b44      	ldr	r3, [pc, #272]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800591c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800591e:	4b43      	ldr	r3, [pc, #268]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005920:	2180      	movs	r1, #128	@ 0x80
 8005922:	0549      	lsls	r1, r1, #21
 8005924:	430a      	orrs	r2, r1
 8005926:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005928:	4b40      	ldr	r3, [pc, #256]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800592a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	055b      	lsls	r3, r3, #21
 8005930:	4013      	ands	r3, r2
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005936:	183b      	adds	r3, r7, r0
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800593c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4b3b      	ldr	r3, [pc, #236]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005942:	2180      	movs	r1, #128	@ 0x80
 8005944:	0049      	lsls	r1, r1, #1
 8005946:	430a      	orrs	r2, r1
 8005948:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800594a:	f7fe fd01 	bl	8004350 <HAL_GetTick>
 800594e:	0003      	movs	r3, r0
 8005950:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005952:	e00b      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005954:	f7fe fcfc 	bl	8004350 <HAL_GetTick>
 8005958:	0002      	movs	r2, r0
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d904      	bls.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005962:	2313      	movs	r3, #19
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	2203      	movs	r2, #3
 8005968:	701a      	strb	r2, [r3, #0]
        break;
 800596a:	e005      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800596c:	4b30      	ldr	r3, [pc, #192]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	2380      	movs	r3, #128	@ 0x80
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	4013      	ands	r3, r2
 8005976:	d0ed      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005978:	2313      	movs	r3, #19
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d15e      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005982:	4b2a      	ldr	r3, [pc, #168]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005984:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005986:	23c0      	movs	r3, #192	@ 0xc0
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4013      	ands	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d019      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	429a      	cmp	r2, r3
 800599c:	d014      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800599e:	4b23      	ldr	r3, [pc, #140]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a2:	4a24      	ldr	r2, [pc, #144]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059a8:	4b20      	ldr	r3, [pc, #128]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059ac:	4b1f      	ldr	r3, [pc, #124]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059ae:	2180      	movs	r1, #128	@ 0x80
 80059b0:	0249      	lsls	r1, r1, #9
 80059b2:	430a      	orrs	r2, r1
 80059b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059b6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059ba:	4b1c      	ldr	r3, [pc, #112]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059bc:	491e      	ldr	r1, [pc, #120]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80059be:	400a      	ands	r2, r1
 80059c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059c2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2201      	movs	r2, #1
 80059cc:	4013      	ands	r3, r2
 80059ce:	d016      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fe fcbe 	bl	8004350 <HAL_GetTick>
 80059d4:	0003      	movs	r3, r0
 80059d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059d8:	e00c      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059da:	f7fe fcb9 	bl	8004350 <HAL_GetTick>
 80059de:	0002      	movs	r2, r0
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	4a15      	ldr	r2, [pc, #84]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d904      	bls.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80059ea:	2313      	movs	r3, #19
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	2203      	movs	r2, #3
 80059f0:	701a      	strb	r2, [r3, #0]
            break;
 80059f2:	e004      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f4:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f8:	2202      	movs	r2, #2
 80059fa:	4013      	ands	r3, r2
 80059fc:	d0ed      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80059fe:	2313      	movs	r3, #19
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a08:	4b08      	ldr	r3, [pc, #32]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a0c:	4a09      	ldr	r2, [pc, #36]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a16:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a1c:	e016      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a1e:	2312      	movs	r3, #18
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	2213      	movs	r2, #19
 8005a24:	18ba      	adds	r2, r7, r2
 8005a26:	7812      	ldrb	r2, [r2, #0]
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e00f      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40007000 	.word	0x40007000
 8005a34:	fffffcff 	.word	0xfffffcff
 8005a38:	fffeffff 	.word	0xfffeffff
 8005a3c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a40:	2312      	movs	r3, #18
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	2213      	movs	r2, #19
 8005a46:	18ba      	adds	r2, r7, r2
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a4c:	2311      	movs	r3, #17
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d105      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a56:	4bb6      	ldr	r3, [pc, #728]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a5a:	4bb5      	ldr	r3, [pc, #724]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a5c:	49b5      	ldr	r1, [pc, #724]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005a5e:	400a      	ands	r2, r1
 8005a60:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2201      	movs	r2, #1
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d009      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a6c:	4bb0      	ldr	r3, [pc, #704]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a70:	2203      	movs	r2, #3
 8005a72:	4393      	bics	r3, r2
 8005a74:	0019      	movs	r1, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	4bad      	ldr	r3, [pc, #692]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2202      	movs	r2, #2
 8005a86:	4013      	ands	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a8a:	4ba9      	ldr	r3, [pc, #676]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8e:	220c      	movs	r2, #12
 8005a90:	4393      	bics	r3, r2
 8005a92:	0019      	movs	r1, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	4ba5      	ldr	r3, [pc, #660]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aa8:	4ba1      	ldr	r3, [pc, #644]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aac:	2230      	movs	r2, #48	@ 0x30
 8005aae:	4393      	bics	r3, r2
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	4b9e      	ldr	r3, [pc, #632]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2210      	movs	r2, #16
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d009      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ac6:	4b9a      	ldr	r3, [pc, #616]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aca:	4a9b      	ldr	r2, [pc, #620]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	0019      	movs	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	4b96      	ldr	r3, [pc, #600]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	2380      	movs	r3, #128	@ 0x80
 8005ae0:	015b      	lsls	r3, r3, #5
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d009      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005ae6:	4b92      	ldr	r3, [pc, #584]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aea:	4a94      	ldr	r2, [pc, #592]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	0019      	movs	r1, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	4b8e      	ldr	r3, [pc, #568]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005af6:	430a      	orrs	r2, r1
 8005af8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	2380      	movs	r3, #128	@ 0x80
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4013      	ands	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b06:	4b8a      	ldr	r3, [pc, #552]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0a:	4a8d      	ldr	r2, [pc, #564]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	0019      	movs	r1, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b14:	4b86      	ldr	r3, [pc, #536]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b16:	430a      	orrs	r2, r1
 8005b18:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	2380      	movs	r3, #128	@ 0x80
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4013      	ands	r3, r2
 8005b24:	d009      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b26:	4b82      	ldr	r3, [pc, #520]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2a:	4a86      	ldr	r2, [pc, #536]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	0019      	movs	r1, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b34:	4b7e      	ldr	r3, [pc, #504]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b36:	430a      	orrs	r2, r1
 8005b38:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	4013      	ands	r3, r2
 8005b42:	d009      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b44:	4b7a      	ldr	r3, [pc, #488]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b48:	4a7f      	ldr	r2, [pc, #508]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	0019      	movs	r1, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	4b77      	ldr	r3, [pc, #476]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b54:	430a      	orrs	r2, r1
 8005b56:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2240      	movs	r2, #64	@ 0x40
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b62:	4b73      	ldr	r3, [pc, #460]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b66:	4a79      	ldr	r2, [pc, #484]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	0019      	movs	r1, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	4b6f      	ldr	r3, [pc, #444]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b72:	430a      	orrs	r2, r1
 8005b74:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	2380      	movs	r3, #128	@ 0x80
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d015      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b82:	4b6b      	ldr	r3, [pc, #428]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	0899      	lsrs	r1, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b8e:	4b68      	ldr	r3, [pc, #416]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b90:	430a      	orrs	r2, r1
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b98:	2380      	movs	r3, #128	@ 0x80
 8005b9a:	05db      	lsls	r3, r3, #23
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d106      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ba0:	4b63      	ldr	r3, [pc, #396]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	4b62      	ldr	r3, [pc, #392]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba6:	2180      	movs	r1, #128	@ 0x80
 8005ba8:	0249      	lsls	r1, r1, #9
 8005baa:	430a      	orrs	r2, r1
 8005bac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	2380      	movs	r3, #128	@ 0x80
 8005bb4:	031b      	lsls	r3, r3, #12
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bba:	4b5d      	ldr	r3, [pc, #372]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbe:	2240      	movs	r2, #64	@ 0x40
 8005bc0:	4393      	bics	r3, r2
 8005bc2:	0019      	movs	r1, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bc8:	4b59      	ldr	r3, [pc, #356]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	2380      	movs	r3, #128	@ 0x80
 8005bd4:	039b      	lsls	r3, r3, #14
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d016      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005bda:	4b55      	ldr	r3, [pc, #340]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	4a5c      	ldr	r2, [pc, #368]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	0019      	movs	r1, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005be8:	4b51      	ldr	r3, [pc, #324]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bea:	430a      	orrs	r2, r1
 8005bec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bf2:	2380      	movs	r3, #128	@ 0x80
 8005bf4:	03db      	lsls	r3, r3, #15
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d106      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c00:	2180      	movs	r1, #128	@ 0x80
 8005c02:	0449      	lsls	r1, r1, #17
 8005c04:	430a      	orrs	r2, r1
 8005c06:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	2380      	movs	r3, #128	@ 0x80
 8005c0e:	03db      	lsls	r3, r3, #15
 8005c10:	4013      	ands	r3, r2
 8005c12:	d016      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005c14:	4b46      	ldr	r3, [pc, #280]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c18:	4a4e      	ldr	r2, [pc, #312]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c22:	4b43      	ldr	r3, [pc, #268]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c24:	430a      	orrs	r2, r1
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c2c:	2380      	movs	r3, #128	@ 0x80
 8005c2e:	045b      	lsls	r3, r3, #17
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d106      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c34:	4b3e      	ldr	r3, [pc, #248]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	4b3d      	ldr	r3, [pc, #244]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c3a:	2180      	movs	r1, #128	@ 0x80
 8005c3c:	0449      	lsls	r1, r1, #17
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	2380      	movs	r3, #128	@ 0x80
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d014      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005c4e:	4b38      	ldr	r3, [pc, #224]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c52:	2203      	movs	r2, #3
 8005c54:	4393      	bics	r3, r2
 8005c56:	0019      	movs	r1, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1a      	ldr	r2, [r3, #32]
 8005c5c:	4b34      	ldr	r3, [pc, #208]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d106      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c6a:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	4b30      	ldr	r3, [pc, #192]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c70:	2180      	movs	r1, #128	@ 0x80
 8005c72:	0249      	lsls	r1, r1, #9
 8005c74:	430a      	orrs	r2, r1
 8005c76:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2380      	movs	r3, #128	@ 0x80
 8005c7e:	019b      	lsls	r3, r3, #6
 8005c80:	4013      	ands	r3, r2
 8005c82:	d014      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005c84:	4b2a      	ldr	r3, [pc, #168]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c88:	220c      	movs	r2, #12
 8005c8a:	4393      	bics	r3, r2
 8005c8c:	0019      	movs	r1, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c92:	4b27      	ldr	r3, [pc, #156]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c94:	430a      	orrs	r2, r1
 8005c96:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d106      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ca0:	4b23      	ldr	r3, [pc, #140]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	4b22      	ldr	r3, [pc, #136]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ca6:	2180      	movs	r1, #128	@ 0x80
 8005ca8:	0249      	lsls	r1, r1, #9
 8005caa:	430a      	orrs	r2, r1
 8005cac:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	2380      	movs	r3, #128	@ 0x80
 8005cb4:	045b      	lsls	r3, r3, #17
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d016      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cba:	4b1d      	ldr	r3, [pc, #116]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cbe:	4a22      	ldr	r2, [pc, #136]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cc8:	4b19      	ldr	r3, [pc, #100]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cd2:	2380      	movs	r3, #128	@ 0x80
 8005cd4:	019b      	lsls	r3, r3, #6
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d106      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005cda:	4b15      	ldr	r3, [pc, #84]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ce0:	2180      	movs	r1, #128	@ 0x80
 8005ce2:	0449      	lsls	r1, r1, #17
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	2380      	movs	r3, #128	@ 0x80
 8005cee:	049b      	lsls	r3, r3, #18
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d016      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf8:	4a10      	ldr	r2, [pc, #64]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d02:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d04:	430a      	orrs	r2, r1
 8005d06:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d0c:	2380      	movs	r3, #128	@ 0x80
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d106      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005d14:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	4b05      	ldr	r3, [pc, #20]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d1a:	2180      	movs	r1, #128	@ 0x80
 8005d1c:	0449      	lsls	r1, r1, #17
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005d22:	2312      	movs	r3, #18
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	781b      	ldrb	r3, [r3, #0]
}
 8005d28:	0018      	movs	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b006      	add	sp, #24
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40021000 	.word	0x40021000
 8005d34:	efffffff 	.word	0xefffffff
 8005d38:	fffff3ff 	.word	0xfffff3ff
 8005d3c:	fffffcff 	.word	0xfffffcff
 8005d40:	fff3ffff 	.word	0xfff3ffff
 8005d44:	ffcfffff 	.word	0xffcfffff
 8005d48:	ffffcfff 	.word	0xffffcfff
 8005d4c:	ffff3fff 	.word	0xffff3fff
 8005d50:	ffbfffff 	.word	0xffbfffff
 8005d54:	feffffff 	.word	0xfeffffff

08005d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e0a8      	b.n	8005ebc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	2382      	movs	r3, #130	@ 0x82
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d009      	beq.n	8005d92 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	61da      	str	r2, [r3, #28]
 8005d84:	e005      	b.n	8005d92 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	225d      	movs	r2, #93	@ 0x5d
 8005d9c:	5c9b      	ldrb	r3, [r3, r2]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d107      	bne.n	8005db4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	225c      	movs	r2, #92	@ 0x5c
 8005da8:	2100      	movs	r1, #0
 8005daa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7fe f8ba 	bl	8003f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	225d      	movs	r2, #93	@ 0x5d
 8005db8:	2102      	movs	r1, #2
 8005dba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2140      	movs	r1, #64	@ 0x40
 8005dc8:	438a      	bics	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	23e0      	movs	r3, #224	@ 0xe0
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d902      	bls.n	8005dde <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e002      	b.n	8005de4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dde:	2380      	movs	r3, #128	@ 0x80
 8005de0:	015b      	lsls	r3, r3, #5
 8005de2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	23f0      	movs	r3, #240	@ 0xf0
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d008      	beq.n	8005e02 <HAL_SPI_Init+0xaa>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	23e0      	movs	r3, #224	@ 0xe0
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d002      	beq.n	8005e02 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	2382      	movs	r3, #130	@ 0x82
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	401a      	ands	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6899      	ldr	r1, [r3, #8]
 8005e10:	2384      	movs	r3, #132	@ 0x84
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	400b      	ands	r3, r1
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	400b      	ands	r3, r1
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	2101      	movs	r1, #1
 8005e28:	400b      	ands	r3, r1
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6999      	ldr	r1, [r3, #24]
 8005e30:	2380      	movs	r3, #128	@ 0x80
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	400b      	ands	r3, r1
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	2138      	movs	r1, #56	@ 0x38
 8005e3e:	400b      	ands	r3, r1
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	2180      	movs	r1, #128	@ 0x80
 8005e48:	400b      	ands	r3, r1
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	0011      	movs	r1, r2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e52:	2380      	movs	r3, #128	@ 0x80
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	401a      	ands	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	2204      	movs	r2, #4
 8005e68:	401a      	ands	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	2110      	movs	r1, #16
 8005e70:	400b      	ands	r3, r1
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e78:	2108      	movs	r1, #8
 8005e7a:	400b      	ands	r3, r1
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68d9      	ldr	r1, [r3, #12]
 8005e82:	23f0      	movs	r3, #240	@ 0xf0
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	400b      	ands	r3, r1
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	0011      	movs	r1, r2
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	2380      	movs	r3, #128	@ 0x80
 8005e90:	015b      	lsls	r3, r3, #5
 8005e92:	401a      	ands	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69da      	ldr	r2, [r3, #28]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4907      	ldr	r1, [pc, #28]	@ (8005ec4 <HAL_SPI_Init+0x16c>)
 8005ea8:	400a      	ands	r2, r1
 8005eaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	225d      	movs	r2, #93	@ 0x5d
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b004      	add	sp, #16
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	fffff7ff 	.word	0xfffff7ff

08005ec8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	@ 0x28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	001a      	movs	r2, r3
 8005ed6:	1cbb      	adds	r3, r7, #2
 8005ed8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005eda:	2301      	movs	r3, #1
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ede:	2323      	movs	r3, #35	@ 0x23
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	225c      	movs	r2, #92	@ 0x5c
 8005eea:	5c9b      	ldrb	r3, [r3, r2]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_SPI_TransmitReceive+0x2c>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e1c4      	b.n	800627e <HAL_SPI_TransmitReceive+0x3b6>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	225c      	movs	r2, #92	@ 0x5c
 8005ef8:	2101      	movs	r1, #1
 8005efa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005efc:	f7fe fa28 	bl	8004350 <HAL_GetTick>
 8005f00:	0003      	movs	r3, r0
 8005f02:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f04:	201b      	movs	r0, #27
 8005f06:	183b      	adds	r3, r7, r0
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	215d      	movs	r1, #93	@ 0x5d
 8005f0c:	5c52      	ldrb	r2, [r2, r1]
 8005f0e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f16:	2312      	movs	r3, #18
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	1cba      	adds	r2, r7, #2
 8005f1c:	8812      	ldrh	r2, [r2, #0]
 8005f1e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f20:	183b      	adds	r3, r7, r0
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d011      	beq.n	8005f4c <HAL_SPI_TransmitReceive+0x84>
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	2382      	movs	r3, #130	@ 0x82
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d107      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x7a>
 8005f3a:	183b      	adds	r3, r7, r0
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d004      	beq.n	8005f4c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005f42:	2323      	movs	r3, #35	@ 0x23
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	2202      	movs	r2, #2
 8005f48:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f4a:	e191      	b.n	8006270 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d006      	beq.n	8005f60 <HAL_SPI_TransmitReceive+0x98>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_SPI_TransmitReceive+0x98>
 8005f58:	1cbb      	adds	r3, r7, #2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005f60:	2323      	movs	r3, #35	@ 0x23
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	2201      	movs	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f68:	e182      	b.n	8006270 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	225d      	movs	r2, #93	@ 0x5d
 8005f6e:	5c9b      	ldrb	r3, [r3, r2]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d003      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	225d      	movs	r2, #93	@ 0x5d
 8005f7a:	2105      	movs	r1, #5
 8005f7c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1cba      	adds	r2, r7, #2
 8005f8e:	2146      	movs	r1, #70	@ 0x46
 8005f90:	8812      	ldrh	r2, [r2, #0]
 8005f92:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1cba      	adds	r2, r7, #2
 8005f98:	2144      	movs	r1, #68	@ 0x44
 8005f9a:	8812      	ldrh	r2, [r2, #0]
 8005f9c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1cba      	adds	r2, r7, #2
 8005fa8:	8812      	ldrh	r2, [r2, #0]
 8005faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	1cba      	adds	r2, r7, #2
 8005fb0:	8812      	ldrh	r2, [r2, #0]
 8005fb2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	23e0      	movs	r3, #224	@ 0xe0
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d908      	bls.n	8005fde <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	49ac      	ldr	r1, [pc, #688]	@ (8006288 <HAL_SPI_TransmitReceive+0x3c0>)
 8005fd8:	400a      	ands	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
 8005fdc:	e008      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2180      	movs	r1, #128	@ 0x80
 8005fea:	0149      	lsls	r1, r1, #5
 8005fec:	430a      	orrs	r2, r1
 8005fee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2240      	movs	r2, #64	@ 0x40
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b40      	cmp	r3, #64	@ 0x40
 8005ffc:	d007      	beq.n	800600e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2140      	movs	r1, #64	@ 0x40
 800600a:	430a      	orrs	r2, r1
 800600c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	23e0      	movs	r3, #224	@ 0xe0
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	429a      	cmp	r2, r3
 8006018:	d800      	bhi.n	800601c <HAL_SPI_TransmitReceive+0x154>
 800601a:	e083      	b.n	8006124 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_SPI_TransmitReceive+0x168>
 8006024:	2312      	movs	r3, #18
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d000      	beq.n	8006030 <HAL_SPI_TransmitReceive+0x168>
 800602e:	e06d      	b.n	800610c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006040:	1c9a      	adds	r2, r3, #2
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006054:	e05a      	b.n	800610c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2202      	movs	r2, #2
 800605e:	4013      	ands	r3, r2
 8006060:	2b02      	cmp	r3, #2
 8006062:	d11b      	bne.n	800609c <HAL_SPI_TransmitReceive+0x1d4>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d016      	beq.n	800609c <HAL_SPI_TransmitReceive+0x1d4>
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	2b01      	cmp	r3, #1
 8006072:	d113      	bne.n	800609c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	881a      	ldrh	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006084:	1c9a      	adds	r2, r3, #2
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2201      	movs	r2, #1
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d11c      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x21c>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2246      	movs	r2, #70	@ 0x46
 80060ae:	5a9b      	ldrh	r3, [r3, r2]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c0:	b292      	uxth	r2, r2
 80060c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	1c9a      	adds	r2, r3, #2
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2246      	movs	r2, #70	@ 0x46
 80060d2:	5a9b      	ldrh	r3, [r3, r2]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b299      	uxth	r1, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2246      	movs	r2, #70	@ 0x46
 80060de:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060e0:	2301      	movs	r3, #1
 80060e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060e4:	f7fe f934 	bl	8004350 <HAL_GetTick>
 80060e8:	0002      	movs	r2, r0
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d80b      	bhi.n	800610c <HAL_SPI_TransmitReceive+0x244>
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	3301      	adds	r3, #1
 80060f8:	d008      	beq.n	800610c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80060fa:	2323      	movs	r3, #35	@ 0x23
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	2203      	movs	r2, #3
 8006100:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	225d      	movs	r2, #93	@ 0x5d
 8006106:	2101      	movs	r1, #1
 8006108:	5499      	strb	r1, [r3, r2]
        goto error;
 800610a:	e0b1      	b.n	8006270 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d19f      	bne.n	8006056 <HAL_SPI_TransmitReceive+0x18e>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2246      	movs	r2, #70	@ 0x46
 800611a:	5a9b      	ldrh	r3, [r3, r2]
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d199      	bne.n	8006056 <HAL_SPI_TransmitReceive+0x18e>
 8006122:	e089      	b.n	8006238 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <HAL_SPI_TransmitReceive+0x270>
 800612c:	2312      	movs	r3, #18
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d000      	beq.n	8006138 <HAL_SPI_TransmitReceive+0x270>
 8006136:	e074      	b.n	8006222 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	7812      	ldrb	r2, [r2, #0]
 8006144:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800615e:	e060      	b.n	8006222 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2202      	movs	r2, #2
 8006168:	4013      	ands	r3, r2
 800616a:	2b02      	cmp	r3, #2
 800616c:	d11c      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x2e0>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d017      	beq.n	80061a8 <HAL_SPI_TransmitReceive+0x2e0>
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	2b01      	cmp	r3, #1
 800617c:	d114      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2201      	movs	r2, #1
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d11e      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x32c>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2246      	movs	r2, #70	@ 0x46
 80061ba:	5a9b      	ldrh	r3, [r3, r2]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d018      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	001a      	movs	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2246      	movs	r2, #70	@ 0x46
 80061e2:	5a9b      	ldrh	r3, [r3, r2]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b299      	uxth	r1, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2246      	movs	r2, #70	@ 0x46
 80061ee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061f0:	2301      	movs	r3, #1
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061f4:	f7fe f8ac 	bl	8004350 <HAL_GetTick>
 80061f8:	0002      	movs	r2, r0
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006200:	429a      	cmp	r2, r3
 8006202:	d802      	bhi.n	800620a <HAL_SPI_TransmitReceive+0x342>
 8006204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006206:	3301      	adds	r3, #1
 8006208:	d102      	bne.n	8006210 <HAL_SPI_TransmitReceive+0x348>
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	2b00      	cmp	r3, #0
 800620e:	d108      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8006210:	2323      	movs	r3, #35	@ 0x23
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	2203      	movs	r2, #3
 8006216:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	225d      	movs	r2, #93	@ 0x5d
 800621c:	2101      	movs	r1, #1
 800621e:	5499      	strb	r1, [r3, r2]
        goto error;
 8006220:	e026      	b.n	8006270 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d199      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x298>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2246      	movs	r2, #70	@ 0x46
 8006230:	5a9b      	ldrh	r3, [r3, r2]
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d193      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	0018      	movs	r0, r3
 8006240:	f000 f954 	bl	80064ec <SPI_EndRxTxTransaction>
 8006244:	1e03      	subs	r3, r0, #0
 8006246:	d006      	beq.n	8006256 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8006248:	2323      	movs	r3, #35	@ 0x23
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	2201      	movs	r2, #1
 800624e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800625e:	2323      	movs	r3, #35	@ 0x23
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e003      	b.n	8006270 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	225d      	movs	r2, #93	@ 0x5d
 800626c:	2101      	movs	r1, #1
 800626e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	225c      	movs	r2, #92	@ 0x5c
 8006274:	2100      	movs	r1, #0
 8006276:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006278:	2323      	movs	r3, #35	@ 0x23
 800627a:	18fb      	adds	r3, r7, r3
 800627c:	781b      	ldrb	r3, [r3, #0]
}
 800627e:	0018      	movs	r0, r3
 8006280:	46bd      	mov	sp, r7
 8006282:	b00a      	add	sp, #40	@ 0x28
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	ffffefff 	.word	0xffffefff

0800628c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	1dfb      	adds	r3, r7, #7
 800629a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800629c:	f7fe f858 	bl	8004350 <HAL_GetTick>
 80062a0:	0002      	movs	r2, r0
 80062a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	18d3      	adds	r3, r2, r3
 80062aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062ac:	f7fe f850 	bl	8004350 <HAL_GetTick>
 80062b0:	0003      	movs	r3, r0
 80062b2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062b4:	4b3a      	ldr	r3, [pc, #232]	@ (80063a0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	015b      	lsls	r3, r3, #5
 80062ba:	0d1b      	lsrs	r3, r3, #20
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	4353      	muls	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062c2:	e058      	b.n	8006376 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	d055      	beq.n	8006376 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062ca:	f7fe f841 	bl	8004350 <HAL_GetTick>
 80062ce:	0002      	movs	r2, r0
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d902      	bls.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d142      	bne.n	8006366 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	21e0      	movs	r1, #224	@ 0xe0
 80062ec:	438a      	bics	r2, r1
 80062ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	2382      	movs	r3, #130	@ 0x82
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d113      	bne.n	8006324 <SPI_WaitFlagStateUntilTimeout+0x98>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	429a      	cmp	r2, r3
 8006306:	d005      	beq.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	2380      	movs	r3, #128	@ 0x80
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	429a      	cmp	r2, r3
 8006312:	d107      	bne.n	8006324 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2140      	movs	r1, #64	@ 0x40
 8006320:	438a      	bics	r2, r1
 8006322:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006328:	2380      	movs	r3, #128	@ 0x80
 800632a:	019b      	lsls	r3, r3, #6
 800632c:	429a      	cmp	r2, r3
 800632e:	d110      	bne.n	8006352 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	491a      	ldr	r1, [pc, #104]	@ (80063a4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800633c:	400a      	ands	r2, r1
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2180      	movs	r1, #128	@ 0x80
 800634c:	0189      	lsls	r1, r1, #6
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	225d      	movs	r2, #93	@ 0x5d
 8006356:	2101      	movs	r1, #1
 8006358:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	225c      	movs	r2, #92	@ 0x5c
 800635e:	2100      	movs	r1, #0
 8006360:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e017      	b.n	8006396 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	3b01      	subs	r3, #1
 8006374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	425a      	negs	r2, r3
 8006386:	4153      	adcs	r3, r2
 8006388:	b2db      	uxtb	r3, r3
 800638a:	001a      	movs	r2, r3
 800638c:	1dfb      	adds	r3, r7, #7
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d197      	bne.n	80062c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	0018      	movs	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	b008      	add	sp, #32
 800639c:	bd80      	pop	{r7, pc}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	2000007c 	.word	0x2000007c
 80063a4:	ffffdfff 	.word	0xffffdfff

080063a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	@ 0x28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063b6:	2317      	movs	r3, #23
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063be:	f7fd ffc7 	bl	8004350 <HAL_GetTick>
 80063c2:	0002      	movs	r2, r0
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	18d3      	adds	r3, r2, r3
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80063ce:	f7fd ffbf 	bl	8004350 <HAL_GetTick>
 80063d2:	0003      	movs	r3, r0
 80063d4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063de:	4b41      	ldr	r3, [pc, #260]	@ (80064e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	0013      	movs	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	189b      	adds	r3, r3, r2
 80063e8:	00da      	lsls	r2, r3, #3
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	0d1b      	lsrs	r3, r3, #20
 80063ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f0:	4353      	muls	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063f4:	e068      	b.n	80064c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	23c0      	movs	r3, #192	@ 0xc0
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d10a      	bne.n	8006416 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d107      	bne.n	8006416 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	b2da      	uxtb	r2, r3
 800640c:	2117      	movs	r1, #23
 800640e:	187b      	adds	r3, r7, r1
 8006410:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006412:	187b      	adds	r3, r7, r1
 8006414:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	d055      	beq.n	80064c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800641c:	f7fd ff98 	bl	8004350 <HAL_GetTick>
 8006420:	0002      	movs	r2, r0
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006428:	429a      	cmp	r2, r3
 800642a:	d902      	bls.n	8006432 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	2b00      	cmp	r3, #0
 8006430:	d142      	bne.n	80064b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	21e0      	movs	r1, #224	@ 0xe0
 800643e:	438a      	bics	r2, r1
 8006440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	2382      	movs	r3, #130	@ 0x82
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	429a      	cmp	r2, r3
 800644c:	d113      	bne.n	8006476 <SPI_WaitFifoStateUntilTimeout+0xce>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	2380      	movs	r3, #128	@ 0x80
 8006454:	021b      	lsls	r3, r3, #8
 8006456:	429a      	cmp	r2, r3
 8006458:	d005      	beq.n	8006466 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	2380      	movs	r3, #128	@ 0x80
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	429a      	cmp	r2, r3
 8006464:	d107      	bne.n	8006476 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2140      	movs	r1, #64	@ 0x40
 8006472:	438a      	bics	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800647a:	2380      	movs	r3, #128	@ 0x80
 800647c:	019b      	lsls	r3, r3, #6
 800647e:	429a      	cmp	r2, r3
 8006480:	d110      	bne.n	80064a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4916      	ldr	r1, [pc, #88]	@ (80064e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800648e:	400a      	ands	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2180      	movs	r1, #128	@ 0x80
 800649e:	0189      	lsls	r1, r1, #6
 80064a0:	430a      	orrs	r2, r1
 80064a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	225d      	movs	r2, #93	@ 0x5d
 80064a8:	2101      	movs	r1, #1
 80064aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	225c      	movs	r2, #92	@ 0x5c
 80064b0:	2100      	movs	r1, #0
 80064b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e010      	b.n	80064da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4013      	ands	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d18e      	bne.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	0018      	movs	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	b00a      	add	sp, #40	@ 0x28
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	2000007c 	.word	0x2000007c
 80064e8:	ffffdfff 	.word	0xffffdfff

080064ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	23c0      	movs	r3, #192	@ 0xc0
 80064fc:	0159      	lsls	r1, r3, #5
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	0013      	movs	r3, r2
 8006506:	2200      	movs	r2, #0
 8006508:	f7ff ff4e 	bl	80063a8 <SPI_WaitFifoStateUntilTimeout>
 800650c:	1e03      	subs	r3, r0, #0
 800650e:	d007      	beq.n	8006520 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006514:	2220      	movs	r2, #32
 8006516:	431a      	orrs	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e027      	b.n	8006570 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	0013      	movs	r3, r2
 800652a:	2200      	movs	r2, #0
 800652c:	2180      	movs	r1, #128	@ 0x80
 800652e:	f7ff fead 	bl	800628c <SPI_WaitFlagStateUntilTimeout>
 8006532:	1e03      	subs	r3, r0, #0
 8006534:	d007      	beq.n	8006546 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800653a:	2220      	movs	r2, #32
 800653c:	431a      	orrs	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e014      	b.n	8006570 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	23c0      	movs	r3, #192	@ 0xc0
 800654a:	00d9      	lsls	r1, r3, #3
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	0013      	movs	r3, r2
 8006554:	2200      	movs	r2, #0
 8006556:	f7ff ff27 	bl	80063a8 <SPI_WaitFifoStateUntilTimeout>
 800655a:	1e03      	subs	r3, r0, #0
 800655c:	d007      	beq.n	800656e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006562:	2220      	movs	r2, #32
 8006564:	431a      	orrs	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e000      	b.n	8006570 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	0018      	movs	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	b004      	add	sp, #16
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e04a      	b.n	8006620 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	223d      	movs	r2, #61	@ 0x3d
 800658e:	5c9b      	ldrb	r3, [r3, r2]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d107      	bne.n	80065a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	223c      	movs	r2, #60	@ 0x3c
 800659a:	2100      	movs	r1, #0
 800659c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7fd fd21 	bl	8003fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	223d      	movs	r2, #61	@ 0x3d
 80065aa:	2102      	movs	r1, #2
 80065ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3304      	adds	r3, #4
 80065b6:	0019      	movs	r1, r3
 80065b8:	0010      	movs	r0, r2
 80065ba:	f000 fa95 	bl	8006ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2248      	movs	r2, #72	@ 0x48
 80065c2:	2101      	movs	r1, #1
 80065c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	223e      	movs	r2, #62	@ 0x3e
 80065ca:	2101      	movs	r1, #1
 80065cc:	5499      	strb	r1, [r3, r2]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	223f      	movs	r2, #63	@ 0x3f
 80065d2:	2101      	movs	r1, #1
 80065d4:	5499      	strb	r1, [r3, r2]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2240      	movs	r2, #64	@ 0x40
 80065da:	2101      	movs	r1, #1
 80065dc:	5499      	strb	r1, [r3, r2]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2241      	movs	r2, #65	@ 0x41
 80065e2:	2101      	movs	r1, #1
 80065e4:	5499      	strb	r1, [r3, r2]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2242      	movs	r2, #66	@ 0x42
 80065ea:	2101      	movs	r1, #1
 80065ec:	5499      	strb	r1, [r3, r2]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2243      	movs	r2, #67	@ 0x43
 80065f2:	2101      	movs	r1, #1
 80065f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2244      	movs	r2, #68	@ 0x44
 80065fa:	2101      	movs	r1, #1
 80065fc:	5499      	strb	r1, [r3, r2]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2245      	movs	r2, #69	@ 0x45
 8006602:	2101      	movs	r1, #1
 8006604:	5499      	strb	r1, [r3, r2]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2246      	movs	r2, #70	@ 0x46
 800660a:	2101      	movs	r1, #1
 800660c:	5499      	strb	r1, [r3, r2]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2247      	movs	r2, #71	@ 0x47
 8006612:	2101      	movs	r1, #1
 8006614:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	223d      	movs	r2, #61	@ 0x3d
 800661a:	2101      	movs	r1, #1
 800661c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	0018      	movs	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	223d      	movs	r2, #61	@ 0x3d
 8006634:	5c9b      	ldrb	r3, [r3, r2]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	d001      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e047      	b.n	80066d0 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	223d      	movs	r2, #61	@ 0x3d
 8006644:	2102      	movs	r1, #2
 8006646:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2101      	movs	r1, #1
 8006654:	430a      	orrs	r2, r1
 8006656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1e      	ldr	r2, [pc, #120]	@ (80066d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d014      	beq.n	800668c <HAL_TIM_Base_Start_IT+0x64>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	2380      	movs	r3, #128	@ 0x80
 8006668:	05db      	lsls	r3, r3, #23
 800666a:	429a      	cmp	r2, r3
 800666c:	d00e      	beq.n	800668c <HAL_TIM_Base_Start_IT+0x64>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1a      	ldr	r2, [pc, #104]	@ (80066dc <HAL_TIM_Base_Start_IT+0xb4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_TIM_Base_Start_IT+0x64>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a18      	ldr	r2, [pc, #96]	@ (80066e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_TIM_Base_Start_IT+0x64>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a17      	ldr	r2, [pc, #92]	@ (80066e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d116      	bne.n	80066ba <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	4a15      	ldr	r2, [pc, #84]	@ (80066e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006694:	4013      	ands	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b06      	cmp	r3, #6
 800669c:	d016      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0xa4>
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	025b      	lsls	r3, r3, #9
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d011      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2101      	movs	r1, #1
 80066b4:	430a      	orrs	r2, r1
 80066b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b8:	e008      	b.n	80066cc <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2101      	movs	r1, #1
 80066c6:	430a      	orrs	r2, r1
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e000      	b.n	80066ce <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b004      	add	sp, #16
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40014000 	.word	0x40014000
 80066e8:	00010007 	.word	0x00010007

080066ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2202      	movs	r2, #2
 8006708:	4013      	ands	r3, r2
 800670a:	d021      	beq.n	8006750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2202      	movs	r2, #2
 8006710:	4013      	ands	r3, r2
 8006712:	d01d      	beq.n	8006750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2203      	movs	r2, #3
 800671a:	4252      	negs	r2, r2
 800671c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	2203      	movs	r2, #3
 800672c:	4013      	ands	r3, r2
 800672e:	d004      	beq.n	800673a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	0018      	movs	r0, r3
 8006734:	f000 f9c0 	bl	8006ab8 <HAL_TIM_IC_CaptureCallback>
 8006738:	e007      	b.n	800674a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	0018      	movs	r0, r3
 800673e:	f000 f9b3 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	0018      	movs	r0, r3
 8006746:	f000 f9bf 	bl	8006ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2204      	movs	r2, #4
 8006754:	4013      	ands	r3, r2
 8006756:	d022      	beq.n	800679e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2204      	movs	r2, #4
 800675c:	4013      	ands	r3, r2
 800675e:	d01e      	beq.n	800679e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2205      	movs	r2, #5
 8006766:	4252      	negs	r2, r2
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	23c0      	movs	r3, #192	@ 0xc0
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4013      	ands	r3, r2
 800677c:	d004      	beq.n	8006788 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	0018      	movs	r0, r3
 8006782:	f000 f999 	bl	8006ab8 <HAL_TIM_IC_CaptureCallback>
 8006786:	e007      	b.n	8006798 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	0018      	movs	r0, r3
 800678c:	f000 f98c 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	0018      	movs	r0, r3
 8006794:	f000 f998 	bl	8006ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2208      	movs	r2, #8
 80067a2:	4013      	ands	r3, r2
 80067a4:	d021      	beq.n	80067ea <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2208      	movs	r2, #8
 80067aa:	4013      	ands	r3, r2
 80067ac:	d01d      	beq.n	80067ea <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2209      	movs	r2, #9
 80067b4:	4252      	negs	r2, r2
 80067b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2204      	movs	r2, #4
 80067bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	2203      	movs	r2, #3
 80067c6:	4013      	ands	r3, r2
 80067c8:	d004      	beq.n	80067d4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	0018      	movs	r0, r3
 80067ce:	f000 f973 	bl	8006ab8 <HAL_TIM_IC_CaptureCallback>
 80067d2:	e007      	b.n	80067e4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	0018      	movs	r0, r3
 80067d8:	f000 f966 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	0018      	movs	r0, r3
 80067e0:	f000 f972 	bl	8006ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2210      	movs	r2, #16
 80067ee:	4013      	ands	r3, r2
 80067f0:	d022      	beq.n	8006838 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2210      	movs	r2, #16
 80067f6:	4013      	ands	r3, r2
 80067f8:	d01e      	beq.n	8006838 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2211      	movs	r2, #17
 8006800:	4252      	negs	r2, r2
 8006802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2208      	movs	r2, #8
 8006808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	23c0      	movs	r3, #192	@ 0xc0
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4013      	ands	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	0018      	movs	r0, r3
 800681c:	f000 f94c 	bl	8006ab8 <HAL_TIM_IC_CaptureCallback>
 8006820:	e007      	b.n	8006832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0018      	movs	r0, r3
 8006826:	f000 f93f 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0018      	movs	r0, r3
 800682e:	f000 f94b 	bl	8006ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2201      	movs	r2, #1
 800683c:	4013      	ands	r3, r2
 800683e:	d00c      	beq.n	800685a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	4013      	ands	r3, r2
 8006846:	d008      	beq.n	800685a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2202      	movs	r2, #2
 800684e:	4252      	negs	r2, r2
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	0018      	movs	r0, r3
 8006856:	f7fd fac3 	bl	8003de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2280      	movs	r2, #128	@ 0x80
 800685e:	4013      	ands	r3, r2
 8006860:	d104      	bne.n	800686c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	2380      	movs	r3, #128	@ 0x80
 8006866:	019b      	lsls	r3, r3, #6
 8006868:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800686a:	d00b      	beq.n	8006884 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2280      	movs	r2, #128	@ 0x80
 8006870:	4013      	ands	r3, r2
 8006872:	d007      	beq.n	8006884 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1e      	ldr	r2, [pc, #120]	@ (80068f4 <HAL_TIM_IRQHandler+0x208>)
 800687a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	0018      	movs	r0, r3
 8006880:	f000 fae4 	bl	8006e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	2380      	movs	r3, #128	@ 0x80
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4013      	ands	r3, r2
 800688c:	d00b      	beq.n	80068a6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2280      	movs	r2, #128	@ 0x80
 8006892:	4013      	ands	r3, r2
 8006894:	d007      	beq.n	80068a6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a17      	ldr	r2, [pc, #92]	@ (80068f8 <HAL_TIM_IRQHandler+0x20c>)
 800689c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 fadb 	bl	8006e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2240      	movs	r2, #64	@ 0x40
 80068aa:	4013      	ands	r3, r2
 80068ac:	d00c      	beq.n	80068c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2240      	movs	r2, #64	@ 0x40
 80068b2:	4013      	ands	r3, r2
 80068b4:	d008      	beq.n	80068c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2241      	movs	r2, #65	@ 0x41
 80068bc:	4252      	negs	r2, r2
 80068be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	0018      	movs	r0, r3
 80068c4:	f000 f908 	bl	8006ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2220      	movs	r2, #32
 80068cc:	4013      	ands	r3, r2
 80068ce:	d00c      	beq.n	80068ea <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	4013      	ands	r3, r2
 80068d6:	d008      	beq.n	80068ea <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2221      	movs	r2, #33	@ 0x21
 80068de:	4252      	negs	r2, r2
 80068e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f000 faa9 	bl	8006e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b004      	add	sp, #16
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	ffffdf7f 	.word	0xffffdf7f
 80068f8:	fffffeff 	.word	0xfffffeff

080068fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006906:	230f      	movs	r3, #15
 8006908:	18fb      	adds	r3, r7, r3
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	223c      	movs	r2, #60	@ 0x3c
 8006912:	5c9b      	ldrb	r3, [r3, r2]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_TIM_ConfigClockSource+0x20>
 8006918:	2302      	movs	r3, #2
 800691a:	e0bc      	b.n	8006a96 <HAL_TIM_ConfigClockSource+0x19a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	223c      	movs	r2, #60	@ 0x3c
 8006920:	2101      	movs	r1, #1
 8006922:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	223d      	movs	r2, #61	@ 0x3d
 8006928:	2102      	movs	r1, #2
 800692a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4a5a      	ldr	r2, [pc, #360]	@ (8006aa0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006938:	4013      	ands	r3, r2
 800693a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4a59      	ldr	r2, [pc, #356]	@ (8006aa4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006940:	4013      	ands	r3, r2
 8006942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2280      	movs	r2, #128	@ 0x80
 8006952:	0192      	lsls	r2, r2, #6
 8006954:	4293      	cmp	r3, r2
 8006956:	d040      	beq.n	80069da <HAL_TIM_ConfigClockSource+0xde>
 8006958:	2280      	movs	r2, #128	@ 0x80
 800695a:	0192      	lsls	r2, r2, #6
 800695c:	4293      	cmp	r3, r2
 800695e:	d900      	bls.n	8006962 <HAL_TIM_ConfigClockSource+0x66>
 8006960:	e088      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
 8006962:	2280      	movs	r2, #128	@ 0x80
 8006964:	0152      	lsls	r2, r2, #5
 8006966:	4293      	cmp	r3, r2
 8006968:	d100      	bne.n	800696c <HAL_TIM_ConfigClockSource+0x70>
 800696a:	e088      	b.n	8006a7e <HAL_TIM_ConfigClockSource+0x182>
 800696c:	2280      	movs	r2, #128	@ 0x80
 800696e:	0152      	lsls	r2, r2, #5
 8006970:	4293      	cmp	r3, r2
 8006972:	d900      	bls.n	8006976 <HAL_TIM_ConfigClockSource+0x7a>
 8006974:	e07e      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
 8006976:	2b70      	cmp	r3, #112	@ 0x70
 8006978:	d018      	beq.n	80069ac <HAL_TIM_ConfigClockSource+0xb0>
 800697a:	d900      	bls.n	800697e <HAL_TIM_ConfigClockSource+0x82>
 800697c:	e07a      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
 800697e:	2b60      	cmp	r3, #96	@ 0x60
 8006980:	d04f      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x126>
 8006982:	d900      	bls.n	8006986 <HAL_TIM_ConfigClockSource+0x8a>
 8006984:	e076      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
 8006986:	2b50      	cmp	r3, #80	@ 0x50
 8006988:	d03b      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x106>
 800698a:	d900      	bls.n	800698e <HAL_TIM_ConfigClockSource+0x92>
 800698c:	e072      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
 800698e:	2b40      	cmp	r3, #64	@ 0x40
 8006990:	d057      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x146>
 8006992:	d900      	bls.n	8006996 <HAL_TIM_ConfigClockSource+0x9a>
 8006994:	e06e      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
 8006996:	2b30      	cmp	r3, #48	@ 0x30
 8006998:	d063      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x166>
 800699a:	d86b      	bhi.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
 800699c:	2b20      	cmp	r3, #32
 800699e:	d060      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x166>
 80069a0:	d868      	bhi.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d05d      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x166>
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d05b      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x166>
 80069aa:	e063      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069bc:	f000 f9a8 	bl	8006d10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2277      	movs	r2, #119	@ 0x77
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	609a      	str	r2, [r3, #8]
      break;
 80069d8:	e052      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069ea:	f000 f991 	bl	8006d10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2180      	movs	r1, #128	@ 0x80
 80069fa:	01c9      	lsls	r1, r1, #7
 80069fc:	430a      	orrs	r2, r1
 80069fe:	609a      	str	r2, [r3, #8]
      break;
 8006a00:	e03e      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a0e:	001a      	movs	r2, r3
 8006a10:	f000 f902 	bl	8006c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2150      	movs	r1, #80	@ 0x50
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f000 f95c 	bl	8006cd8 <TIM_ITRx_SetConfig>
      break;
 8006a20:	e02e      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a2e:	001a      	movs	r2, r3
 8006a30:	f000 f920 	bl	8006c74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2160      	movs	r1, #96	@ 0x60
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f000 f94c 	bl	8006cd8 <TIM_ITRx_SetConfig>
      break;
 8006a40:	e01e      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a4e:	001a      	movs	r2, r3
 8006a50:	f000 f8e2 	bl	8006c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2140      	movs	r1, #64	@ 0x40
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 f93c 	bl	8006cd8 <TIM_ITRx_SetConfig>
      break;
 8006a60:	e00e      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	0019      	movs	r1, r3
 8006a6c:	0010      	movs	r0, r2
 8006a6e:	f000 f933 	bl	8006cd8 <TIM_ITRx_SetConfig>
      break;
 8006a72:	e005      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006a74:	230f      	movs	r3, #15
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	2201      	movs	r2, #1
 8006a7a:	701a      	strb	r2, [r3, #0]
      break;
 8006a7c:	e000      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006a7e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	223d      	movs	r2, #61	@ 0x3d
 8006a84:	2101      	movs	r1, #1
 8006a86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	223c      	movs	r2, #60	@ 0x3c
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	5499      	strb	r1, [r3, r2]

  return status;
 8006a90:	230f      	movs	r3, #15
 8006a92:	18fb      	adds	r3, r7, r3
 8006a94:	781b      	ldrb	r3, [r3, #0]
}
 8006a96:	0018      	movs	r0, r3
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	b004      	add	sp, #16
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	46c0      	nop			@ (mov r8, r8)
 8006aa0:	ffceff88 	.word	0xffceff88
 8006aa4:	ffff00ff 	.word	0xffff00ff

08006aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ab0:	46c0      	nop			@ (mov r8, r8)
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b002      	add	sp, #8
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ac0:	46c0      	nop			@ (mov r8, r8)
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b002      	add	sp, #8
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ad0:	46c0      	nop			@ (mov r8, r8)
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b002      	add	sp, #8
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ae0:	46c0      	nop			@ (mov r8, r8)
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b002      	add	sp, #8
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a3f      	ldr	r2, [pc, #252]	@ (8006bf8 <TIM_Base_SetConfig+0x110>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00c      	beq.n	8006b1a <TIM_Base_SetConfig+0x32>
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	2380      	movs	r3, #128	@ 0x80
 8006b04:	05db      	lsls	r3, r3, #23
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d007      	beq.n	8006b1a <TIM_Base_SetConfig+0x32>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8006bfc <TIM_Base_SetConfig+0x114>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_Base_SetConfig+0x32>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a3a      	ldr	r2, [pc, #232]	@ (8006c00 <TIM_Base_SetConfig+0x118>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d108      	bne.n	8006b2c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2270      	movs	r2, #112	@ 0x70
 8006b1e:	4393      	bics	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a32      	ldr	r2, [pc, #200]	@ (8006bf8 <TIM_Base_SetConfig+0x110>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d01c      	beq.n	8006b6e <TIM_Base_SetConfig+0x86>
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	2380      	movs	r3, #128	@ 0x80
 8006b38:	05db      	lsls	r3, r3, #23
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d017      	beq.n	8006b6e <TIM_Base_SetConfig+0x86>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2e      	ldr	r2, [pc, #184]	@ (8006bfc <TIM_Base_SetConfig+0x114>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <TIM_Base_SetConfig+0x86>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2d      	ldr	r2, [pc, #180]	@ (8006c00 <TIM_Base_SetConfig+0x118>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00f      	beq.n	8006b6e <TIM_Base_SetConfig+0x86>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2c      	ldr	r2, [pc, #176]	@ (8006c04 <TIM_Base_SetConfig+0x11c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0x86>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2b      	ldr	r2, [pc, #172]	@ (8006c08 <TIM_Base_SetConfig+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0x86>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a2a      	ldr	r2, [pc, #168]	@ (8006c0c <TIM_Base_SetConfig+0x124>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0x86>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a29      	ldr	r2, [pc, #164]	@ (8006c10 <TIM_Base_SetConfig+0x128>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a28      	ldr	r2, [pc, #160]	@ (8006c14 <TIM_Base_SetConfig+0x12c>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2280      	movs	r2, #128	@ 0x80
 8006b84:	4393      	bics	r3, r2
 8006b86:	001a      	movs	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a13      	ldr	r2, [pc, #76]	@ (8006bf8 <TIM_Base_SetConfig+0x110>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00b      	beq.n	8006bc6 <TIM_Base_SetConfig+0xde>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a15      	ldr	r2, [pc, #84]	@ (8006c08 <TIM_Base_SetConfig+0x120>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d007      	beq.n	8006bc6 <TIM_Base_SetConfig+0xde>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a14      	ldr	r2, [pc, #80]	@ (8006c0c <TIM_Base_SetConfig+0x124>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d003      	beq.n	8006bc6 <TIM_Base_SetConfig+0xde>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a13      	ldr	r2, [pc, #76]	@ (8006c10 <TIM_Base_SetConfig+0x128>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d103      	bne.n	8006bce <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d106      	bne.n	8006bee <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2201      	movs	r2, #1
 8006be6:	4393      	bics	r3, r2
 8006be8:	001a      	movs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	611a      	str	r2, [r3, #16]
  }
}
 8006bee:	46c0      	nop			@ (mov r8, r8)
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b004      	add	sp, #16
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	46c0      	nop			@ (mov r8, r8)
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40002000 	.word	0x40002000
 8006c08:	40014000 	.word	0x40014000
 8006c0c:	40014400 	.word	0x40014400
 8006c10:	40014800 	.word	0x40014800
 8006c14:	fffffcff 	.word	0xfffffcff

08006c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	4393      	bics	r3, r2
 8006c32:	001a      	movs	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	22f0      	movs	r2, #240	@ 0xf0
 8006c42:	4393      	bics	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	220a      	movs	r2, #10
 8006c54:	4393      	bics	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	621a      	str	r2, [r3, #32]
}
 8006c6c:	46c0      	nop			@ (mov r8, r8)
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b006      	add	sp, #24
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	4393      	bics	r3, r2
 8006c8e:	001a      	movs	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8006cd4 <TIM_TI2_ConfigInputStage+0x60>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	22a0      	movs	r2, #160	@ 0xa0
 8006cb0:	4393      	bics	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	46c0      	nop			@ (mov r8, r8)
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	b006      	add	sp, #24
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	ffff0fff 	.word	0xffff0fff

08006cd8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a08      	ldr	r2, [pc, #32]	@ (8006d0c <TIM_ITRx_SetConfig+0x34>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	2207      	movs	r2, #7
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	609a      	str	r2, [r3, #8]
}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	b004      	add	sp, #16
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	46c0      	nop			@ (mov r8, r8)
 8006d0c:	ffcfff8f 	.word	0xffcfff8f

08006d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	4a09      	ldr	r2, [pc, #36]	@ (8006d4c <TIM_ETR_SetConfig+0x3c>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	021a      	lsls	r2, r3, #8
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	609a      	str	r2, [r3, #8]
}
 8006d44:	46c0      	nop			@ (mov r8, r8)
 8006d46:	46bd      	mov	sp, r7
 8006d48:	b006      	add	sp, #24
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	ffff00ff 	.word	0xffff00ff

08006d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	223c      	movs	r2, #60	@ 0x3c
 8006d5e:	5c9b      	ldrb	r3, [r3, r2]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e05a      	b.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	223c      	movs	r2, #60	@ 0x3c
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	223d      	movs	r2, #61	@ 0x3d
 8006d74:	2102      	movs	r1, #2
 8006d76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a26      	ldr	r2, [pc, #152]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d108      	bne.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4a25      	ldr	r2, [pc, #148]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2270      	movs	r2, #112	@ 0x70
 8006da8:	4393      	bics	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a19      	ldr	r2, [pc, #100]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d014      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	05db      	lsls	r3, r3, #23
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d00e      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a15      	ldr	r2, [pc, #84]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a14      	ldr	r2, [pc, #80]	@ (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a12      	ldr	r2, [pc, #72]	@ (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10c      	bne.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2280      	movs	r2, #128	@ 0x80
 8006df6:	4393      	bics	r3, r2
 8006df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	223d      	movs	r2, #61	@ 0x3d
 8006e10:	2101      	movs	r1, #1
 8006e12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	223c      	movs	r2, #60	@ 0x3c
 8006e18:	2100      	movs	r1, #0
 8006e1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	0018      	movs	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	b004      	add	sp, #16
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	ff0fffff 	.word	0xff0fffff
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40014000 	.word	0x40014000

08006e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e44:	46c0      	nop			@ (mov r8, r8)
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b002      	add	sp, #8
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e54:	46c0      	nop			@ (mov r8, r8)
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b002      	add	sp, #8
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e64:	46c0      	nop			@ (mov r8, r8)
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b002      	add	sp, #8
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <__assert_func>:
 8006e6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006e6e:	0014      	movs	r4, r2
 8006e70:	001a      	movs	r2, r3
 8006e72:	4b09      	ldr	r3, [pc, #36]	@ (8006e98 <__assert_func+0x2c>)
 8006e74:	0005      	movs	r5, r0
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	000e      	movs	r6, r1
 8006e7a:	68d8      	ldr	r0, [r3, #12]
 8006e7c:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <__assert_func+0x30>)
 8006e7e:	2c00      	cmp	r4, #0
 8006e80:	d101      	bne.n	8006e86 <__assert_func+0x1a>
 8006e82:	4b07      	ldr	r3, [pc, #28]	@ (8006ea0 <__assert_func+0x34>)
 8006e84:	001c      	movs	r4, r3
 8006e86:	4907      	ldr	r1, [pc, #28]	@ (8006ea4 <__assert_func+0x38>)
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	9402      	str	r4, [sp, #8]
 8006e8c:	002b      	movs	r3, r5
 8006e8e:	9600      	str	r6, [sp, #0]
 8006e90:	f000 f8b2 	bl	8006ff8 <fiprintf>
 8006e94:	f000 f9ab 	bl	80071ee <abort>
 8006e98:	20000094 	.word	0x20000094
 8006e9c:	0800836c 	.word	0x0800836c
 8006ea0:	080083a7 	.word	0x080083a7
 8006ea4:	08008379 	.word	0x08008379

08006ea8 <std>:
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	0004      	movs	r4, r0
 8006eae:	6003      	str	r3, [r0, #0]
 8006eb0:	6043      	str	r3, [r0, #4]
 8006eb2:	6083      	str	r3, [r0, #8]
 8006eb4:	8181      	strh	r1, [r0, #12]
 8006eb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006eb8:	81c2      	strh	r2, [r0, #14]
 8006eba:	6103      	str	r3, [r0, #16]
 8006ebc:	6143      	str	r3, [r0, #20]
 8006ebe:	6183      	str	r3, [r0, #24]
 8006ec0:	0019      	movs	r1, r3
 8006ec2:	2208      	movs	r2, #8
 8006ec4:	305c      	adds	r0, #92	@ 0x5c
 8006ec6:	f000 f90f 	bl	80070e8 <memset>
 8006eca:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef8 <std+0x50>)
 8006ecc:	6224      	str	r4, [r4, #32]
 8006ece:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8006efc <std+0x54>)
 8006ed2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <std+0x58>)
 8006ed6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8006f04 <std+0x5c>)
 8006eda:	6323      	str	r3, [r4, #48]	@ 0x30
 8006edc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f08 <std+0x60>)
 8006ede:	429c      	cmp	r4, r3
 8006ee0:	d005      	beq.n	8006eee <std+0x46>
 8006ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8006f0c <std+0x64>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	d002      	beq.n	8006eee <std+0x46>
 8006ee8:	4b09      	ldr	r3, [pc, #36]	@ (8006f10 <std+0x68>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d103      	bne.n	8006ef6 <std+0x4e>
 8006eee:	0020      	movs	r0, r4
 8006ef0:	3058      	adds	r0, #88	@ 0x58
 8006ef2:	f000 f979 	bl	80071e8 <__retarget_lock_init_recursive>
 8006ef6:	bd10      	pop	{r4, pc}
 8006ef8:	08007051 	.word	0x08007051
 8006efc:	08007079 	.word	0x08007079
 8006f00:	080070b1 	.word	0x080070b1
 8006f04:	080070dd 	.word	0x080070dd
 8006f08:	2000042c 	.word	0x2000042c
 8006f0c:	20000494 	.word	0x20000494
 8006f10:	200004fc 	.word	0x200004fc

08006f14 <stdio_exit_handler>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	4a03      	ldr	r2, [pc, #12]	@ (8006f24 <stdio_exit_handler+0x10>)
 8006f18:	4903      	ldr	r1, [pc, #12]	@ (8006f28 <stdio_exit_handler+0x14>)
 8006f1a:	4804      	ldr	r0, [pc, #16]	@ (8006f2c <stdio_exit_handler+0x18>)
 8006f1c:	f000 f87c 	bl	8007018 <_fwalk_sglue>
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	20000088 	.word	0x20000088
 8006f28:	08007a81 	.word	0x08007a81
 8006f2c:	20000098 	.word	0x20000098

08006f30 <cleanup_stdio>:
 8006f30:	6841      	ldr	r1, [r0, #4]
 8006f32:	4b0b      	ldr	r3, [pc, #44]	@ (8006f60 <cleanup_stdio+0x30>)
 8006f34:	b510      	push	{r4, lr}
 8006f36:	0004      	movs	r4, r0
 8006f38:	4299      	cmp	r1, r3
 8006f3a:	d001      	beq.n	8006f40 <cleanup_stdio+0x10>
 8006f3c:	f000 fda0 	bl	8007a80 <_fflush_r>
 8006f40:	68a1      	ldr	r1, [r4, #8]
 8006f42:	4b08      	ldr	r3, [pc, #32]	@ (8006f64 <cleanup_stdio+0x34>)
 8006f44:	4299      	cmp	r1, r3
 8006f46:	d002      	beq.n	8006f4e <cleanup_stdio+0x1e>
 8006f48:	0020      	movs	r0, r4
 8006f4a:	f000 fd99 	bl	8007a80 <_fflush_r>
 8006f4e:	68e1      	ldr	r1, [r4, #12]
 8006f50:	4b05      	ldr	r3, [pc, #20]	@ (8006f68 <cleanup_stdio+0x38>)
 8006f52:	4299      	cmp	r1, r3
 8006f54:	d002      	beq.n	8006f5c <cleanup_stdio+0x2c>
 8006f56:	0020      	movs	r0, r4
 8006f58:	f000 fd92 	bl	8007a80 <_fflush_r>
 8006f5c:	bd10      	pop	{r4, pc}
 8006f5e:	46c0      	nop			@ (mov r8, r8)
 8006f60:	2000042c 	.word	0x2000042c
 8006f64:	20000494 	.word	0x20000494
 8006f68:	200004fc 	.word	0x200004fc

08006f6c <global_stdio_init.part.0>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4b09      	ldr	r3, [pc, #36]	@ (8006f94 <global_stdio_init.part.0+0x28>)
 8006f70:	4a09      	ldr	r2, [pc, #36]	@ (8006f98 <global_stdio_init.part.0+0x2c>)
 8006f72:	2104      	movs	r1, #4
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	4809      	ldr	r0, [pc, #36]	@ (8006f9c <global_stdio_init.part.0+0x30>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f7ff ff95 	bl	8006ea8 <std>
 8006f7e:	2201      	movs	r2, #1
 8006f80:	2109      	movs	r1, #9
 8006f82:	4807      	ldr	r0, [pc, #28]	@ (8006fa0 <global_stdio_init.part.0+0x34>)
 8006f84:	f7ff ff90 	bl	8006ea8 <std>
 8006f88:	2202      	movs	r2, #2
 8006f8a:	2112      	movs	r1, #18
 8006f8c:	4805      	ldr	r0, [pc, #20]	@ (8006fa4 <global_stdio_init.part.0+0x38>)
 8006f8e:	f7ff ff8b 	bl	8006ea8 <std>
 8006f92:	bd10      	pop	{r4, pc}
 8006f94:	20000564 	.word	0x20000564
 8006f98:	08006f15 	.word	0x08006f15
 8006f9c:	2000042c 	.word	0x2000042c
 8006fa0:	20000494 	.word	0x20000494
 8006fa4:	200004fc 	.word	0x200004fc

08006fa8 <__sfp_lock_acquire>:
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	4802      	ldr	r0, [pc, #8]	@ (8006fb4 <__sfp_lock_acquire+0xc>)
 8006fac:	f000 f91d 	bl	80071ea <__retarget_lock_acquire_recursive>
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	46c0      	nop			@ (mov r8, r8)
 8006fb4:	2000056d 	.word	0x2000056d

08006fb8 <__sfp_lock_release>:
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	4802      	ldr	r0, [pc, #8]	@ (8006fc4 <__sfp_lock_release+0xc>)
 8006fbc:	f000 f916 	bl	80071ec <__retarget_lock_release_recursive>
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	46c0      	nop			@ (mov r8, r8)
 8006fc4:	2000056d 	.word	0x2000056d

08006fc8 <__sinit>:
 8006fc8:	b510      	push	{r4, lr}
 8006fca:	0004      	movs	r4, r0
 8006fcc:	f7ff ffec 	bl	8006fa8 <__sfp_lock_acquire>
 8006fd0:	6a23      	ldr	r3, [r4, #32]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <__sinit+0x14>
 8006fd6:	f7ff ffef 	bl	8006fb8 <__sfp_lock_release>
 8006fda:	bd10      	pop	{r4, pc}
 8006fdc:	4b04      	ldr	r3, [pc, #16]	@ (8006ff0 <__sinit+0x28>)
 8006fde:	6223      	str	r3, [r4, #32]
 8006fe0:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <__sinit+0x2c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1f6      	bne.n	8006fd6 <__sinit+0xe>
 8006fe8:	f7ff ffc0 	bl	8006f6c <global_stdio_init.part.0>
 8006fec:	e7f3      	b.n	8006fd6 <__sinit+0xe>
 8006fee:	46c0      	nop			@ (mov r8, r8)
 8006ff0:	08006f31 	.word	0x08006f31
 8006ff4:	20000564 	.word	0x20000564

08006ff8 <fiprintf>:
 8006ff8:	b40e      	push	{r1, r2, r3}
 8006ffa:	b517      	push	{r0, r1, r2, r4, lr}
 8006ffc:	4c05      	ldr	r4, [pc, #20]	@ (8007014 <fiprintf+0x1c>)
 8006ffe:	ab05      	add	r3, sp, #20
 8007000:	cb04      	ldmia	r3!, {r2}
 8007002:	0001      	movs	r1, r0
 8007004:	6820      	ldr	r0, [r4, #0]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	f000 fa1c 	bl	8007444 <_vfiprintf_r>
 800700c:	bc1e      	pop	{r1, r2, r3, r4}
 800700e:	bc08      	pop	{r3}
 8007010:	b003      	add	sp, #12
 8007012:	4718      	bx	r3
 8007014:	20000094 	.word	0x20000094

08007018 <_fwalk_sglue>:
 8007018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800701a:	0014      	movs	r4, r2
 800701c:	2600      	movs	r6, #0
 800701e:	9000      	str	r0, [sp, #0]
 8007020:	9101      	str	r1, [sp, #4]
 8007022:	68a5      	ldr	r5, [r4, #8]
 8007024:	6867      	ldr	r7, [r4, #4]
 8007026:	3f01      	subs	r7, #1
 8007028:	d504      	bpl.n	8007034 <_fwalk_sglue+0x1c>
 800702a:	6824      	ldr	r4, [r4, #0]
 800702c:	2c00      	cmp	r4, #0
 800702e:	d1f8      	bne.n	8007022 <_fwalk_sglue+0xa>
 8007030:	0030      	movs	r0, r6
 8007032:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007034:	89ab      	ldrh	r3, [r5, #12]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d908      	bls.n	800704c <_fwalk_sglue+0x34>
 800703a:	220e      	movs	r2, #14
 800703c:	5eab      	ldrsh	r3, [r5, r2]
 800703e:	3301      	adds	r3, #1
 8007040:	d004      	beq.n	800704c <_fwalk_sglue+0x34>
 8007042:	0029      	movs	r1, r5
 8007044:	9800      	ldr	r0, [sp, #0]
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	4798      	blx	r3
 800704a:	4306      	orrs	r6, r0
 800704c:	3568      	adds	r5, #104	@ 0x68
 800704e:	e7ea      	b.n	8007026 <_fwalk_sglue+0xe>

08007050 <__sread>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	000c      	movs	r4, r1
 8007054:	250e      	movs	r5, #14
 8007056:	5f49      	ldrsh	r1, [r1, r5]
 8007058:	f000 f874 	bl	8007144 <_read_r>
 800705c:	2800      	cmp	r0, #0
 800705e:	db03      	blt.n	8007068 <__sread+0x18>
 8007060:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007062:	181b      	adds	r3, r3, r0
 8007064:	6563      	str	r3, [r4, #84]	@ 0x54
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	4a02      	ldr	r2, [pc, #8]	@ (8007074 <__sread+0x24>)
 800706c:	4013      	ands	r3, r2
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	e7f9      	b.n	8007066 <__sread+0x16>
 8007072:	46c0      	nop			@ (mov r8, r8)
 8007074:	ffffefff 	.word	0xffffefff

08007078 <__swrite>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	001f      	movs	r7, r3
 800707c:	898b      	ldrh	r3, [r1, #12]
 800707e:	0005      	movs	r5, r0
 8007080:	000c      	movs	r4, r1
 8007082:	0016      	movs	r6, r2
 8007084:	05db      	lsls	r3, r3, #23
 8007086:	d505      	bpl.n	8007094 <__swrite+0x1c>
 8007088:	230e      	movs	r3, #14
 800708a:	5ec9      	ldrsh	r1, [r1, r3]
 800708c:	2200      	movs	r2, #0
 800708e:	2302      	movs	r3, #2
 8007090:	f000 f844 	bl	800711c <_lseek_r>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	4a05      	ldr	r2, [pc, #20]	@ (80070ac <__swrite+0x34>)
 8007098:	0028      	movs	r0, r5
 800709a:	4013      	ands	r3, r2
 800709c:	81a3      	strh	r3, [r4, #12]
 800709e:	0032      	movs	r2, r6
 80070a0:	230e      	movs	r3, #14
 80070a2:	5ee1      	ldrsh	r1, [r4, r3]
 80070a4:	003b      	movs	r3, r7
 80070a6:	f000 f861 	bl	800716c <_write_r>
 80070aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ac:	ffffefff 	.word	0xffffefff

080070b0 <__sseek>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	000c      	movs	r4, r1
 80070b4:	250e      	movs	r5, #14
 80070b6:	5f49      	ldrsh	r1, [r1, r5]
 80070b8:	f000 f830 	bl	800711c <_lseek_r>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	1c42      	adds	r2, r0, #1
 80070c0:	d103      	bne.n	80070ca <__sseek+0x1a>
 80070c2:	4a05      	ldr	r2, [pc, #20]	@ (80070d8 <__sseek+0x28>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	2280      	movs	r2, #128	@ 0x80
 80070cc:	0152      	lsls	r2, r2, #5
 80070ce:	4313      	orrs	r3, r2
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80070d4:	e7f8      	b.n	80070c8 <__sseek+0x18>
 80070d6:	46c0      	nop			@ (mov r8, r8)
 80070d8:	ffffefff 	.word	0xffffefff

080070dc <__sclose>:
 80070dc:	b510      	push	{r4, lr}
 80070de:	230e      	movs	r3, #14
 80070e0:	5ec9      	ldrsh	r1, [r1, r3]
 80070e2:	f000 f809 	bl	80070f8 <_close_r>
 80070e6:	bd10      	pop	{r4, pc}

080070e8 <memset>:
 80070e8:	0003      	movs	r3, r0
 80070ea:	1882      	adds	r2, r0, r2
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d100      	bne.n	80070f2 <memset+0xa>
 80070f0:	4770      	bx	lr
 80070f2:	7019      	strb	r1, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	e7f9      	b.n	80070ec <memset+0x4>

080070f8 <_close_r>:
 80070f8:	2300      	movs	r3, #0
 80070fa:	b570      	push	{r4, r5, r6, lr}
 80070fc:	4d06      	ldr	r5, [pc, #24]	@ (8007118 <_close_r+0x20>)
 80070fe:	0004      	movs	r4, r0
 8007100:	0008      	movs	r0, r1
 8007102:	602b      	str	r3, [r5, #0]
 8007104:	f7fd f816 	bl	8004134 <_close>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d103      	bne.n	8007114 <_close_r+0x1c>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d000      	beq.n	8007114 <_close_r+0x1c>
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	20000568 	.word	0x20000568

0800711c <_lseek_r>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	0004      	movs	r4, r0
 8007120:	0008      	movs	r0, r1
 8007122:	0011      	movs	r1, r2
 8007124:	001a      	movs	r2, r3
 8007126:	2300      	movs	r3, #0
 8007128:	4d05      	ldr	r5, [pc, #20]	@ (8007140 <_lseek_r+0x24>)
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	f7fd f823 	bl	8004176 <_lseek>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d103      	bne.n	800713c <_lseek_r+0x20>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d000      	beq.n	800713c <_lseek_r+0x20>
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	46c0      	nop			@ (mov r8, r8)
 8007140:	20000568 	.word	0x20000568

08007144 <_read_r>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	0004      	movs	r4, r0
 8007148:	0008      	movs	r0, r1
 800714a:	0011      	movs	r1, r2
 800714c:	001a      	movs	r2, r3
 800714e:	2300      	movs	r3, #0
 8007150:	4d05      	ldr	r5, [pc, #20]	@ (8007168 <_read_r+0x24>)
 8007152:	602b      	str	r3, [r5, #0]
 8007154:	f7fc ffb5 	bl	80040c2 <_read>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d103      	bne.n	8007164 <_read_r+0x20>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d000      	beq.n	8007164 <_read_r+0x20>
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	46c0      	nop			@ (mov r8, r8)
 8007168:	20000568 	.word	0x20000568

0800716c <_write_r>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	0004      	movs	r4, r0
 8007170:	0008      	movs	r0, r1
 8007172:	0011      	movs	r1, r2
 8007174:	001a      	movs	r2, r3
 8007176:	2300      	movs	r3, #0
 8007178:	4d05      	ldr	r5, [pc, #20]	@ (8007190 <_write_r+0x24>)
 800717a:	602b      	str	r3, [r5, #0]
 800717c:	f7fc ffbe 	bl	80040fc <_write>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d103      	bne.n	800718c <_write_r+0x20>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d000      	beq.n	800718c <_write_r+0x20>
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	bd70      	pop	{r4, r5, r6, pc}
 800718e:	46c0      	nop			@ (mov r8, r8)
 8007190:	20000568 	.word	0x20000568

08007194 <__errno>:
 8007194:	4b01      	ldr	r3, [pc, #4]	@ (800719c <__errno+0x8>)
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	4770      	bx	lr
 800719a:	46c0      	nop			@ (mov r8, r8)
 800719c:	20000094 	.word	0x20000094

080071a0 <__libc_init_array>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	2600      	movs	r6, #0
 80071a4:	4c0c      	ldr	r4, [pc, #48]	@ (80071d8 <__libc_init_array+0x38>)
 80071a6:	4d0d      	ldr	r5, [pc, #52]	@ (80071dc <__libc_init_array+0x3c>)
 80071a8:	1b64      	subs	r4, r4, r5
 80071aa:	10a4      	asrs	r4, r4, #2
 80071ac:	42a6      	cmp	r6, r4
 80071ae:	d109      	bne.n	80071c4 <__libc_init_array+0x24>
 80071b0:	2600      	movs	r6, #0
 80071b2:	f001 f817 	bl	80081e4 <_init>
 80071b6:	4c0a      	ldr	r4, [pc, #40]	@ (80071e0 <__libc_init_array+0x40>)
 80071b8:	4d0a      	ldr	r5, [pc, #40]	@ (80071e4 <__libc_init_array+0x44>)
 80071ba:	1b64      	subs	r4, r4, r5
 80071bc:	10a4      	asrs	r4, r4, #2
 80071be:	42a6      	cmp	r6, r4
 80071c0:	d105      	bne.n	80071ce <__libc_init_array+0x2e>
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	00b3      	lsls	r3, r6, #2
 80071c6:	58eb      	ldr	r3, [r5, r3]
 80071c8:	4798      	blx	r3
 80071ca:	3601      	adds	r6, #1
 80071cc:	e7ee      	b.n	80071ac <__libc_init_array+0xc>
 80071ce:	00b3      	lsls	r3, r6, #2
 80071d0:	58eb      	ldr	r3, [r5, r3]
 80071d2:	4798      	blx	r3
 80071d4:	3601      	adds	r6, #1
 80071d6:	e7f2      	b.n	80071be <__libc_init_array+0x1e>
 80071d8:	080083dc 	.word	0x080083dc
 80071dc:	080083dc 	.word	0x080083dc
 80071e0:	080083e0 	.word	0x080083e0
 80071e4:	080083dc 	.word	0x080083dc

080071e8 <__retarget_lock_init_recursive>:
 80071e8:	4770      	bx	lr

080071ea <__retarget_lock_acquire_recursive>:
 80071ea:	4770      	bx	lr

080071ec <__retarget_lock_release_recursive>:
 80071ec:	4770      	bx	lr

080071ee <abort>:
 80071ee:	2006      	movs	r0, #6
 80071f0:	b510      	push	{r4, lr}
 80071f2:	f000 fd3b 	bl	8007c6c <raise>
 80071f6:	2001      	movs	r0, #1
 80071f8:	f7fc ff56 	bl	80040a8 <_exit>

080071fc <_free_r>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	0005      	movs	r5, r0
 8007200:	1e0c      	subs	r4, r1, #0
 8007202:	d010      	beq.n	8007226 <_free_r+0x2a>
 8007204:	3c04      	subs	r4, #4
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	da00      	bge.n	800720e <_free_r+0x12>
 800720c:	18e4      	adds	r4, r4, r3
 800720e:	0028      	movs	r0, r5
 8007210:	f000 f8e0 	bl	80073d4 <__malloc_lock>
 8007214:	4a1d      	ldr	r2, [pc, #116]	@ (800728c <_free_r+0x90>)
 8007216:	6813      	ldr	r3, [r2, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d105      	bne.n	8007228 <_free_r+0x2c>
 800721c:	6063      	str	r3, [r4, #4]
 800721e:	6014      	str	r4, [r2, #0]
 8007220:	0028      	movs	r0, r5
 8007222:	f000 f8df 	bl	80073e4 <__malloc_unlock>
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	42a3      	cmp	r3, r4
 800722a:	d908      	bls.n	800723e <_free_r+0x42>
 800722c:	6820      	ldr	r0, [r4, #0]
 800722e:	1821      	adds	r1, r4, r0
 8007230:	428b      	cmp	r3, r1
 8007232:	d1f3      	bne.n	800721c <_free_r+0x20>
 8007234:	6819      	ldr	r1, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	1809      	adds	r1, r1, r0
 800723a:	6021      	str	r1, [r4, #0]
 800723c:	e7ee      	b.n	800721c <_free_r+0x20>
 800723e:	001a      	movs	r2, r3
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <_free_r+0x4e>
 8007246:	42a3      	cmp	r3, r4
 8007248:	d9f9      	bls.n	800723e <_free_r+0x42>
 800724a:	6811      	ldr	r1, [r2, #0]
 800724c:	1850      	adds	r0, r2, r1
 800724e:	42a0      	cmp	r0, r4
 8007250:	d10b      	bne.n	800726a <_free_r+0x6e>
 8007252:	6820      	ldr	r0, [r4, #0]
 8007254:	1809      	adds	r1, r1, r0
 8007256:	1850      	adds	r0, r2, r1
 8007258:	6011      	str	r1, [r2, #0]
 800725a:	4283      	cmp	r3, r0
 800725c:	d1e0      	bne.n	8007220 <_free_r+0x24>
 800725e:	6818      	ldr	r0, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	1841      	adds	r1, r0, r1
 8007264:	6011      	str	r1, [r2, #0]
 8007266:	6053      	str	r3, [r2, #4]
 8007268:	e7da      	b.n	8007220 <_free_r+0x24>
 800726a:	42a0      	cmp	r0, r4
 800726c:	d902      	bls.n	8007274 <_free_r+0x78>
 800726e:	230c      	movs	r3, #12
 8007270:	602b      	str	r3, [r5, #0]
 8007272:	e7d5      	b.n	8007220 <_free_r+0x24>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	1821      	adds	r1, r4, r0
 8007278:	428b      	cmp	r3, r1
 800727a:	d103      	bne.n	8007284 <_free_r+0x88>
 800727c:	6819      	ldr	r1, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	1809      	adds	r1, r1, r0
 8007282:	6021      	str	r1, [r4, #0]
 8007284:	6063      	str	r3, [r4, #4]
 8007286:	6054      	str	r4, [r2, #4]
 8007288:	e7ca      	b.n	8007220 <_free_r+0x24>
 800728a:	46c0      	nop			@ (mov r8, r8)
 800728c:	20000574 	.word	0x20000574

08007290 <sbrk_aligned>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	4e0f      	ldr	r6, [pc, #60]	@ (80072d0 <sbrk_aligned+0x40>)
 8007294:	000d      	movs	r5, r1
 8007296:	6831      	ldr	r1, [r6, #0]
 8007298:	0004      	movs	r4, r0
 800729a:	2900      	cmp	r1, #0
 800729c:	d102      	bne.n	80072a4 <sbrk_aligned+0x14>
 800729e:	f000 fd05 	bl	8007cac <_sbrk_r>
 80072a2:	6030      	str	r0, [r6, #0]
 80072a4:	0029      	movs	r1, r5
 80072a6:	0020      	movs	r0, r4
 80072a8:	f000 fd00 	bl	8007cac <_sbrk_r>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d103      	bne.n	80072b8 <sbrk_aligned+0x28>
 80072b0:	2501      	movs	r5, #1
 80072b2:	426d      	negs	r5, r5
 80072b4:	0028      	movs	r0, r5
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	2303      	movs	r3, #3
 80072ba:	1cc5      	adds	r5, r0, #3
 80072bc:	439d      	bics	r5, r3
 80072be:	42a8      	cmp	r0, r5
 80072c0:	d0f8      	beq.n	80072b4 <sbrk_aligned+0x24>
 80072c2:	1a29      	subs	r1, r5, r0
 80072c4:	0020      	movs	r0, r4
 80072c6:	f000 fcf1 	bl	8007cac <_sbrk_r>
 80072ca:	3001      	adds	r0, #1
 80072cc:	d1f2      	bne.n	80072b4 <sbrk_aligned+0x24>
 80072ce:	e7ef      	b.n	80072b0 <sbrk_aligned+0x20>
 80072d0:	20000570 	.word	0x20000570

080072d4 <_malloc_r>:
 80072d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072d6:	2203      	movs	r2, #3
 80072d8:	1ccb      	adds	r3, r1, #3
 80072da:	4393      	bics	r3, r2
 80072dc:	3308      	adds	r3, #8
 80072de:	0005      	movs	r5, r0
 80072e0:	001f      	movs	r7, r3
 80072e2:	2b0c      	cmp	r3, #12
 80072e4:	d234      	bcs.n	8007350 <_malloc_r+0x7c>
 80072e6:	270c      	movs	r7, #12
 80072e8:	42b9      	cmp	r1, r7
 80072ea:	d833      	bhi.n	8007354 <_malloc_r+0x80>
 80072ec:	0028      	movs	r0, r5
 80072ee:	f000 f871 	bl	80073d4 <__malloc_lock>
 80072f2:	4e37      	ldr	r6, [pc, #220]	@ (80073d0 <_malloc_r+0xfc>)
 80072f4:	6833      	ldr	r3, [r6, #0]
 80072f6:	001c      	movs	r4, r3
 80072f8:	2c00      	cmp	r4, #0
 80072fa:	d12f      	bne.n	800735c <_malloc_r+0x88>
 80072fc:	0039      	movs	r1, r7
 80072fe:	0028      	movs	r0, r5
 8007300:	f7ff ffc6 	bl	8007290 <sbrk_aligned>
 8007304:	0004      	movs	r4, r0
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	d15f      	bne.n	80073ca <_malloc_r+0xf6>
 800730a:	6834      	ldr	r4, [r6, #0]
 800730c:	9400      	str	r4, [sp, #0]
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d14a      	bne.n	80073aa <_malloc_r+0xd6>
 8007314:	2c00      	cmp	r4, #0
 8007316:	d052      	beq.n	80073be <_malloc_r+0xea>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	0028      	movs	r0, r5
 800731c:	18e3      	adds	r3, r4, r3
 800731e:	9900      	ldr	r1, [sp, #0]
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	f000 fcc3 	bl	8007cac <_sbrk_r>
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	4283      	cmp	r3, r0
 800732a:	d148      	bne.n	80073be <_malloc_r+0xea>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	0028      	movs	r0, r5
 8007330:	1aff      	subs	r7, r7, r3
 8007332:	0039      	movs	r1, r7
 8007334:	f7ff ffac 	bl	8007290 <sbrk_aligned>
 8007338:	3001      	adds	r0, #1
 800733a:	d040      	beq.n	80073be <_malloc_r+0xea>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	19db      	adds	r3, r3, r7
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	6833      	ldr	r3, [r6, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	2a00      	cmp	r2, #0
 8007348:	d133      	bne.n	80073b2 <_malloc_r+0xde>
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	6033      	str	r3, [r6, #0]
 800734e:	e019      	b.n	8007384 <_malloc_r+0xb0>
 8007350:	2b00      	cmp	r3, #0
 8007352:	dac9      	bge.n	80072e8 <_malloc_r+0x14>
 8007354:	230c      	movs	r3, #12
 8007356:	602b      	str	r3, [r5, #0]
 8007358:	2000      	movs	r0, #0
 800735a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800735c:	6821      	ldr	r1, [r4, #0]
 800735e:	1bc9      	subs	r1, r1, r7
 8007360:	d420      	bmi.n	80073a4 <_malloc_r+0xd0>
 8007362:	290b      	cmp	r1, #11
 8007364:	d90a      	bls.n	800737c <_malloc_r+0xa8>
 8007366:	19e2      	adds	r2, r4, r7
 8007368:	6027      	str	r7, [r4, #0]
 800736a:	42a3      	cmp	r3, r4
 800736c:	d104      	bne.n	8007378 <_malloc_r+0xa4>
 800736e:	6032      	str	r2, [r6, #0]
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	6011      	str	r1, [r2, #0]
 8007374:	6053      	str	r3, [r2, #4]
 8007376:	e005      	b.n	8007384 <_malloc_r+0xb0>
 8007378:	605a      	str	r2, [r3, #4]
 800737a:	e7f9      	b.n	8007370 <_malloc_r+0x9c>
 800737c:	6862      	ldr	r2, [r4, #4]
 800737e:	42a3      	cmp	r3, r4
 8007380:	d10e      	bne.n	80073a0 <_malloc_r+0xcc>
 8007382:	6032      	str	r2, [r6, #0]
 8007384:	0028      	movs	r0, r5
 8007386:	f000 f82d 	bl	80073e4 <__malloc_unlock>
 800738a:	0020      	movs	r0, r4
 800738c:	2207      	movs	r2, #7
 800738e:	300b      	adds	r0, #11
 8007390:	1d23      	adds	r3, r4, #4
 8007392:	4390      	bics	r0, r2
 8007394:	1ac2      	subs	r2, r0, r3
 8007396:	4298      	cmp	r0, r3
 8007398:	d0df      	beq.n	800735a <_malloc_r+0x86>
 800739a:	1a1b      	subs	r3, r3, r0
 800739c:	50a3      	str	r3, [r4, r2]
 800739e:	e7dc      	b.n	800735a <_malloc_r+0x86>
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	e7ef      	b.n	8007384 <_malloc_r+0xb0>
 80073a4:	0023      	movs	r3, r4
 80073a6:	6864      	ldr	r4, [r4, #4]
 80073a8:	e7a6      	b.n	80072f8 <_malloc_r+0x24>
 80073aa:	9c00      	ldr	r4, [sp, #0]
 80073ac:	6863      	ldr	r3, [r4, #4]
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	e7ad      	b.n	800730e <_malloc_r+0x3a>
 80073b2:	001a      	movs	r2, r3
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	42a3      	cmp	r3, r4
 80073b8:	d1fb      	bne.n	80073b2 <_malloc_r+0xde>
 80073ba:	2300      	movs	r3, #0
 80073bc:	e7da      	b.n	8007374 <_malloc_r+0xa0>
 80073be:	230c      	movs	r3, #12
 80073c0:	0028      	movs	r0, r5
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	f000 f80e 	bl	80073e4 <__malloc_unlock>
 80073c8:	e7c6      	b.n	8007358 <_malloc_r+0x84>
 80073ca:	6007      	str	r7, [r0, #0]
 80073cc:	e7da      	b.n	8007384 <_malloc_r+0xb0>
 80073ce:	46c0      	nop			@ (mov r8, r8)
 80073d0:	20000574 	.word	0x20000574

080073d4 <__malloc_lock>:
 80073d4:	b510      	push	{r4, lr}
 80073d6:	4802      	ldr	r0, [pc, #8]	@ (80073e0 <__malloc_lock+0xc>)
 80073d8:	f7ff ff07 	bl	80071ea <__retarget_lock_acquire_recursive>
 80073dc:	bd10      	pop	{r4, pc}
 80073de:	46c0      	nop			@ (mov r8, r8)
 80073e0:	2000056c 	.word	0x2000056c

080073e4 <__malloc_unlock>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	4802      	ldr	r0, [pc, #8]	@ (80073f0 <__malloc_unlock+0xc>)
 80073e8:	f7ff ff00 	bl	80071ec <__retarget_lock_release_recursive>
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	46c0      	nop			@ (mov r8, r8)
 80073f0:	2000056c 	.word	0x2000056c

080073f4 <__sfputc_r>:
 80073f4:	6893      	ldr	r3, [r2, #8]
 80073f6:	b510      	push	{r4, lr}
 80073f8:	3b01      	subs	r3, #1
 80073fa:	6093      	str	r3, [r2, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da04      	bge.n	800740a <__sfputc_r+0x16>
 8007400:	6994      	ldr	r4, [r2, #24]
 8007402:	42a3      	cmp	r3, r4
 8007404:	db07      	blt.n	8007416 <__sfputc_r+0x22>
 8007406:	290a      	cmp	r1, #10
 8007408:	d005      	beq.n	8007416 <__sfputc_r+0x22>
 800740a:	6813      	ldr	r3, [r2, #0]
 800740c:	1c58      	adds	r0, r3, #1
 800740e:	6010      	str	r0, [r2, #0]
 8007410:	7019      	strb	r1, [r3, #0]
 8007412:	0008      	movs	r0, r1
 8007414:	bd10      	pop	{r4, pc}
 8007416:	f000 fb5e 	bl	8007ad6 <__swbuf_r>
 800741a:	0001      	movs	r1, r0
 800741c:	e7f9      	b.n	8007412 <__sfputc_r+0x1e>

0800741e <__sfputs_r>:
 800741e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007420:	0006      	movs	r6, r0
 8007422:	000f      	movs	r7, r1
 8007424:	0014      	movs	r4, r2
 8007426:	18d5      	adds	r5, r2, r3
 8007428:	42ac      	cmp	r4, r5
 800742a:	d101      	bne.n	8007430 <__sfputs_r+0x12>
 800742c:	2000      	movs	r0, #0
 800742e:	e007      	b.n	8007440 <__sfputs_r+0x22>
 8007430:	7821      	ldrb	r1, [r4, #0]
 8007432:	003a      	movs	r2, r7
 8007434:	0030      	movs	r0, r6
 8007436:	f7ff ffdd 	bl	80073f4 <__sfputc_r>
 800743a:	3401      	adds	r4, #1
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d1f3      	bne.n	8007428 <__sfputs_r+0xa>
 8007440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007444 <_vfiprintf_r>:
 8007444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007446:	b0a1      	sub	sp, #132	@ 0x84
 8007448:	000f      	movs	r7, r1
 800744a:	0015      	movs	r5, r2
 800744c:	001e      	movs	r6, r3
 800744e:	9003      	str	r0, [sp, #12]
 8007450:	2800      	cmp	r0, #0
 8007452:	d004      	beq.n	800745e <_vfiprintf_r+0x1a>
 8007454:	6a03      	ldr	r3, [r0, #32]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <_vfiprintf_r+0x1a>
 800745a:	f7ff fdb5 	bl	8006fc8 <__sinit>
 800745e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007460:	07db      	lsls	r3, r3, #31
 8007462:	d405      	bmi.n	8007470 <_vfiprintf_r+0x2c>
 8007464:	89bb      	ldrh	r3, [r7, #12]
 8007466:	059b      	lsls	r3, r3, #22
 8007468:	d402      	bmi.n	8007470 <_vfiprintf_r+0x2c>
 800746a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800746c:	f7ff febd 	bl	80071ea <__retarget_lock_acquire_recursive>
 8007470:	89bb      	ldrh	r3, [r7, #12]
 8007472:	071b      	lsls	r3, r3, #28
 8007474:	d502      	bpl.n	800747c <_vfiprintf_r+0x38>
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d113      	bne.n	80074a4 <_vfiprintf_r+0x60>
 800747c:	0039      	movs	r1, r7
 800747e:	9803      	ldr	r0, [sp, #12]
 8007480:	f000 fb6c 	bl	8007b5c <__swsetup_r>
 8007484:	2800      	cmp	r0, #0
 8007486:	d00d      	beq.n	80074a4 <_vfiprintf_r+0x60>
 8007488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800748a:	07db      	lsls	r3, r3, #31
 800748c:	d503      	bpl.n	8007496 <_vfiprintf_r+0x52>
 800748e:	2001      	movs	r0, #1
 8007490:	4240      	negs	r0, r0
 8007492:	b021      	add	sp, #132	@ 0x84
 8007494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007496:	89bb      	ldrh	r3, [r7, #12]
 8007498:	059b      	lsls	r3, r3, #22
 800749a:	d4f8      	bmi.n	800748e <_vfiprintf_r+0x4a>
 800749c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800749e:	f7ff fea5 	bl	80071ec <__retarget_lock_release_recursive>
 80074a2:	e7f4      	b.n	800748e <_vfiprintf_r+0x4a>
 80074a4:	2300      	movs	r3, #0
 80074a6:	ac08      	add	r4, sp, #32
 80074a8:	6163      	str	r3, [r4, #20]
 80074aa:	3320      	adds	r3, #32
 80074ac:	7663      	strb	r3, [r4, #25]
 80074ae:	3310      	adds	r3, #16
 80074b0:	76a3      	strb	r3, [r4, #26]
 80074b2:	9607      	str	r6, [sp, #28]
 80074b4:	002e      	movs	r6, r5
 80074b6:	7833      	ldrb	r3, [r6, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <_vfiprintf_r+0x7c>
 80074bc:	2b25      	cmp	r3, #37	@ 0x25
 80074be:	d148      	bne.n	8007552 <_vfiprintf_r+0x10e>
 80074c0:	1b73      	subs	r3, r6, r5
 80074c2:	9305      	str	r3, [sp, #20]
 80074c4:	42ae      	cmp	r6, r5
 80074c6:	d00b      	beq.n	80074e0 <_vfiprintf_r+0x9c>
 80074c8:	002a      	movs	r2, r5
 80074ca:	0039      	movs	r1, r7
 80074cc:	9803      	ldr	r0, [sp, #12]
 80074ce:	f7ff ffa6 	bl	800741e <__sfputs_r>
 80074d2:	3001      	adds	r0, #1
 80074d4:	d100      	bne.n	80074d8 <_vfiprintf_r+0x94>
 80074d6:	e0ae      	b.n	8007636 <_vfiprintf_r+0x1f2>
 80074d8:	6963      	ldr	r3, [r4, #20]
 80074da:	9a05      	ldr	r2, [sp, #20]
 80074dc:	189b      	adds	r3, r3, r2
 80074de:	6163      	str	r3, [r4, #20]
 80074e0:	7833      	ldrb	r3, [r6, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d100      	bne.n	80074e8 <_vfiprintf_r+0xa4>
 80074e6:	e0a6      	b.n	8007636 <_vfiprintf_r+0x1f2>
 80074e8:	2201      	movs	r2, #1
 80074ea:	2300      	movs	r3, #0
 80074ec:	4252      	negs	r2, r2
 80074ee:	6062      	str	r2, [r4, #4]
 80074f0:	a904      	add	r1, sp, #16
 80074f2:	3254      	adds	r2, #84	@ 0x54
 80074f4:	1852      	adds	r2, r2, r1
 80074f6:	1c75      	adds	r5, r6, #1
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	60e3      	str	r3, [r4, #12]
 80074fc:	60a3      	str	r3, [r4, #8]
 80074fe:	7013      	strb	r3, [r2, #0]
 8007500:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007502:	4b59      	ldr	r3, [pc, #356]	@ (8007668 <_vfiprintf_r+0x224>)
 8007504:	2205      	movs	r2, #5
 8007506:	0018      	movs	r0, r3
 8007508:	7829      	ldrb	r1, [r5, #0]
 800750a:	9305      	str	r3, [sp, #20]
 800750c:	f000 fbe0 	bl	8007cd0 <memchr>
 8007510:	1c6e      	adds	r6, r5, #1
 8007512:	2800      	cmp	r0, #0
 8007514:	d11f      	bne.n	8007556 <_vfiprintf_r+0x112>
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	06d3      	lsls	r3, r2, #27
 800751a:	d504      	bpl.n	8007526 <_vfiprintf_r+0xe2>
 800751c:	2353      	movs	r3, #83	@ 0x53
 800751e:	a904      	add	r1, sp, #16
 8007520:	185b      	adds	r3, r3, r1
 8007522:	2120      	movs	r1, #32
 8007524:	7019      	strb	r1, [r3, #0]
 8007526:	0713      	lsls	r3, r2, #28
 8007528:	d504      	bpl.n	8007534 <_vfiprintf_r+0xf0>
 800752a:	2353      	movs	r3, #83	@ 0x53
 800752c:	a904      	add	r1, sp, #16
 800752e:	185b      	adds	r3, r3, r1
 8007530:	212b      	movs	r1, #43	@ 0x2b
 8007532:	7019      	strb	r1, [r3, #0]
 8007534:	782b      	ldrb	r3, [r5, #0]
 8007536:	2b2a      	cmp	r3, #42	@ 0x2a
 8007538:	d016      	beq.n	8007568 <_vfiprintf_r+0x124>
 800753a:	002e      	movs	r6, r5
 800753c:	2100      	movs	r1, #0
 800753e:	200a      	movs	r0, #10
 8007540:	68e3      	ldr	r3, [r4, #12]
 8007542:	7832      	ldrb	r2, [r6, #0]
 8007544:	1c75      	adds	r5, r6, #1
 8007546:	3a30      	subs	r2, #48	@ 0x30
 8007548:	2a09      	cmp	r2, #9
 800754a:	d950      	bls.n	80075ee <_vfiprintf_r+0x1aa>
 800754c:	2900      	cmp	r1, #0
 800754e:	d111      	bne.n	8007574 <_vfiprintf_r+0x130>
 8007550:	e017      	b.n	8007582 <_vfiprintf_r+0x13e>
 8007552:	3601      	adds	r6, #1
 8007554:	e7af      	b.n	80074b6 <_vfiprintf_r+0x72>
 8007556:	9b05      	ldr	r3, [sp, #20]
 8007558:	6822      	ldr	r2, [r4, #0]
 800755a:	1ac0      	subs	r0, r0, r3
 800755c:	2301      	movs	r3, #1
 800755e:	4083      	lsls	r3, r0
 8007560:	4313      	orrs	r3, r2
 8007562:	0035      	movs	r5, r6
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	e7cc      	b.n	8007502 <_vfiprintf_r+0xbe>
 8007568:	9b07      	ldr	r3, [sp, #28]
 800756a:	1d19      	adds	r1, r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	9107      	str	r1, [sp, #28]
 8007570:	2b00      	cmp	r3, #0
 8007572:	db01      	blt.n	8007578 <_vfiprintf_r+0x134>
 8007574:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007576:	e004      	b.n	8007582 <_vfiprintf_r+0x13e>
 8007578:	425b      	negs	r3, r3
 800757a:	60e3      	str	r3, [r4, #12]
 800757c:	2302      	movs	r3, #2
 800757e:	4313      	orrs	r3, r2
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	7833      	ldrb	r3, [r6, #0]
 8007584:	2b2e      	cmp	r3, #46	@ 0x2e
 8007586:	d10c      	bne.n	80075a2 <_vfiprintf_r+0x15e>
 8007588:	7873      	ldrb	r3, [r6, #1]
 800758a:	2b2a      	cmp	r3, #42	@ 0x2a
 800758c:	d134      	bne.n	80075f8 <_vfiprintf_r+0x1b4>
 800758e:	9b07      	ldr	r3, [sp, #28]
 8007590:	3602      	adds	r6, #2
 8007592:	1d1a      	adds	r2, r3, #4
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	9207      	str	r2, [sp, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	da01      	bge.n	80075a0 <_vfiprintf_r+0x15c>
 800759c:	2301      	movs	r3, #1
 800759e:	425b      	negs	r3, r3
 80075a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a2:	4d32      	ldr	r5, [pc, #200]	@ (800766c <_vfiprintf_r+0x228>)
 80075a4:	2203      	movs	r2, #3
 80075a6:	0028      	movs	r0, r5
 80075a8:	7831      	ldrb	r1, [r6, #0]
 80075aa:	f000 fb91 	bl	8007cd0 <memchr>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d006      	beq.n	80075c0 <_vfiprintf_r+0x17c>
 80075b2:	2340      	movs	r3, #64	@ 0x40
 80075b4:	1b40      	subs	r0, r0, r5
 80075b6:	4083      	lsls	r3, r0
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	3601      	adds	r6, #1
 80075bc:	4313      	orrs	r3, r2
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	7831      	ldrb	r1, [r6, #0]
 80075c2:	2206      	movs	r2, #6
 80075c4:	482a      	ldr	r0, [pc, #168]	@ (8007670 <_vfiprintf_r+0x22c>)
 80075c6:	1c75      	adds	r5, r6, #1
 80075c8:	7621      	strb	r1, [r4, #24]
 80075ca:	f000 fb81 	bl	8007cd0 <memchr>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d040      	beq.n	8007654 <_vfiprintf_r+0x210>
 80075d2:	4b28      	ldr	r3, [pc, #160]	@ (8007674 <_vfiprintf_r+0x230>)
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d122      	bne.n	800761e <_vfiprintf_r+0x1da>
 80075d8:	2207      	movs	r2, #7
 80075da:	9b07      	ldr	r3, [sp, #28]
 80075dc:	3307      	adds	r3, #7
 80075de:	4393      	bics	r3, r2
 80075e0:	3308      	adds	r3, #8
 80075e2:	9307      	str	r3, [sp, #28]
 80075e4:	6963      	ldr	r3, [r4, #20]
 80075e6:	9a04      	ldr	r2, [sp, #16]
 80075e8:	189b      	adds	r3, r3, r2
 80075ea:	6163      	str	r3, [r4, #20]
 80075ec:	e762      	b.n	80074b4 <_vfiprintf_r+0x70>
 80075ee:	4343      	muls	r3, r0
 80075f0:	002e      	movs	r6, r5
 80075f2:	2101      	movs	r1, #1
 80075f4:	189b      	adds	r3, r3, r2
 80075f6:	e7a4      	b.n	8007542 <_vfiprintf_r+0xfe>
 80075f8:	2300      	movs	r3, #0
 80075fa:	200a      	movs	r0, #10
 80075fc:	0019      	movs	r1, r3
 80075fe:	3601      	adds	r6, #1
 8007600:	6063      	str	r3, [r4, #4]
 8007602:	7832      	ldrb	r2, [r6, #0]
 8007604:	1c75      	adds	r5, r6, #1
 8007606:	3a30      	subs	r2, #48	@ 0x30
 8007608:	2a09      	cmp	r2, #9
 800760a:	d903      	bls.n	8007614 <_vfiprintf_r+0x1d0>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0c8      	beq.n	80075a2 <_vfiprintf_r+0x15e>
 8007610:	9109      	str	r1, [sp, #36]	@ 0x24
 8007612:	e7c6      	b.n	80075a2 <_vfiprintf_r+0x15e>
 8007614:	4341      	muls	r1, r0
 8007616:	002e      	movs	r6, r5
 8007618:	2301      	movs	r3, #1
 800761a:	1889      	adds	r1, r1, r2
 800761c:	e7f1      	b.n	8007602 <_vfiprintf_r+0x1be>
 800761e:	aa07      	add	r2, sp, #28
 8007620:	9200      	str	r2, [sp, #0]
 8007622:	0021      	movs	r1, r4
 8007624:	003a      	movs	r2, r7
 8007626:	4b14      	ldr	r3, [pc, #80]	@ (8007678 <_vfiprintf_r+0x234>)
 8007628:	9803      	ldr	r0, [sp, #12]
 800762a:	e000      	b.n	800762e <_vfiprintf_r+0x1ea>
 800762c:	bf00      	nop
 800762e:	9004      	str	r0, [sp, #16]
 8007630:	9b04      	ldr	r3, [sp, #16]
 8007632:	3301      	adds	r3, #1
 8007634:	d1d6      	bne.n	80075e4 <_vfiprintf_r+0x1a0>
 8007636:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007638:	07db      	lsls	r3, r3, #31
 800763a:	d405      	bmi.n	8007648 <_vfiprintf_r+0x204>
 800763c:	89bb      	ldrh	r3, [r7, #12]
 800763e:	059b      	lsls	r3, r3, #22
 8007640:	d402      	bmi.n	8007648 <_vfiprintf_r+0x204>
 8007642:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007644:	f7ff fdd2 	bl	80071ec <__retarget_lock_release_recursive>
 8007648:	89bb      	ldrh	r3, [r7, #12]
 800764a:	065b      	lsls	r3, r3, #25
 800764c:	d500      	bpl.n	8007650 <_vfiprintf_r+0x20c>
 800764e:	e71e      	b.n	800748e <_vfiprintf_r+0x4a>
 8007650:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007652:	e71e      	b.n	8007492 <_vfiprintf_r+0x4e>
 8007654:	aa07      	add	r2, sp, #28
 8007656:	9200      	str	r2, [sp, #0]
 8007658:	0021      	movs	r1, r4
 800765a:	003a      	movs	r2, r7
 800765c:	4b06      	ldr	r3, [pc, #24]	@ (8007678 <_vfiprintf_r+0x234>)
 800765e:	9803      	ldr	r0, [sp, #12]
 8007660:	f000 f87c 	bl	800775c <_printf_i>
 8007664:	e7e3      	b.n	800762e <_vfiprintf_r+0x1ea>
 8007666:	46c0      	nop			@ (mov r8, r8)
 8007668:	080083a8 	.word	0x080083a8
 800766c:	080083ae 	.word	0x080083ae
 8007670:	080083b2 	.word	0x080083b2
 8007674:	00000000 	.word	0x00000000
 8007678:	0800741f 	.word	0x0800741f

0800767c <_printf_common>:
 800767c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800767e:	0016      	movs	r6, r2
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	688a      	ldr	r2, [r1, #8]
 8007684:	690b      	ldr	r3, [r1, #16]
 8007686:	000c      	movs	r4, r1
 8007688:	9000      	str	r0, [sp, #0]
 800768a:	4293      	cmp	r3, r2
 800768c:	da00      	bge.n	8007690 <_printf_common+0x14>
 800768e:	0013      	movs	r3, r2
 8007690:	0022      	movs	r2, r4
 8007692:	6033      	str	r3, [r6, #0]
 8007694:	3243      	adds	r2, #67	@ 0x43
 8007696:	7812      	ldrb	r2, [r2, #0]
 8007698:	2a00      	cmp	r2, #0
 800769a:	d001      	beq.n	80076a0 <_printf_common+0x24>
 800769c:	3301      	adds	r3, #1
 800769e:	6033      	str	r3, [r6, #0]
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	069b      	lsls	r3, r3, #26
 80076a4:	d502      	bpl.n	80076ac <_printf_common+0x30>
 80076a6:	6833      	ldr	r3, [r6, #0]
 80076a8:	3302      	adds	r3, #2
 80076aa:	6033      	str	r3, [r6, #0]
 80076ac:	6822      	ldr	r2, [r4, #0]
 80076ae:	2306      	movs	r3, #6
 80076b0:	0015      	movs	r5, r2
 80076b2:	401d      	ands	r5, r3
 80076b4:	421a      	tst	r2, r3
 80076b6:	d027      	beq.n	8007708 <_printf_common+0x8c>
 80076b8:	0023      	movs	r3, r4
 80076ba:	3343      	adds	r3, #67	@ 0x43
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	1e5a      	subs	r2, r3, #1
 80076c0:	4193      	sbcs	r3, r2
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	0692      	lsls	r2, r2, #26
 80076c6:	d430      	bmi.n	800772a <_printf_common+0xae>
 80076c8:	0022      	movs	r2, r4
 80076ca:	9901      	ldr	r1, [sp, #4]
 80076cc:	9800      	ldr	r0, [sp, #0]
 80076ce:	9d08      	ldr	r5, [sp, #32]
 80076d0:	3243      	adds	r2, #67	@ 0x43
 80076d2:	47a8      	blx	r5
 80076d4:	3001      	adds	r0, #1
 80076d6:	d025      	beq.n	8007724 <_printf_common+0xa8>
 80076d8:	2206      	movs	r2, #6
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	2500      	movs	r5, #0
 80076de:	4013      	ands	r3, r2
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d105      	bne.n	80076f0 <_printf_common+0x74>
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	68e5      	ldr	r5, [r4, #12]
 80076e8:	1aed      	subs	r5, r5, r3
 80076ea:	43eb      	mvns	r3, r5
 80076ec:	17db      	asrs	r3, r3, #31
 80076ee:	401d      	ands	r5, r3
 80076f0:	68a3      	ldr	r3, [r4, #8]
 80076f2:	6922      	ldr	r2, [r4, #16]
 80076f4:	4293      	cmp	r3, r2
 80076f6:	dd01      	ble.n	80076fc <_printf_common+0x80>
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	18ed      	adds	r5, r5, r3
 80076fc:	2600      	movs	r6, #0
 80076fe:	42b5      	cmp	r5, r6
 8007700:	d120      	bne.n	8007744 <_printf_common+0xc8>
 8007702:	2000      	movs	r0, #0
 8007704:	e010      	b.n	8007728 <_printf_common+0xac>
 8007706:	3501      	adds	r5, #1
 8007708:	68e3      	ldr	r3, [r4, #12]
 800770a:	6832      	ldr	r2, [r6, #0]
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	42ab      	cmp	r3, r5
 8007710:	ddd2      	ble.n	80076b8 <_printf_common+0x3c>
 8007712:	0022      	movs	r2, r4
 8007714:	2301      	movs	r3, #1
 8007716:	9901      	ldr	r1, [sp, #4]
 8007718:	9800      	ldr	r0, [sp, #0]
 800771a:	9f08      	ldr	r7, [sp, #32]
 800771c:	3219      	adds	r2, #25
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	d1f0      	bne.n	8007706 <_printf_common+0x8a>
 8007724:	2001      	movs	r0, #1
 8007726:	4240      	negs	r0, r0
 8007728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800772a:	2030      	movs	r0, #48	@ 0x30
 800772c:	18e1      	adds	r1, r4, r3
 800772e:	3143      	adds	r1, #67	@ 0x43
 8007730:	7008      	strb	r0, [r1, #0]
 8007732:	0021      	movs	r1, r4
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	3145      	adds	r1, #69	@ 0x45
 8007738:	7809      	ldrb	r1, [r1, #0]
 800773a:	18a2      	adds	r2, r4, r2
 800773c:	3243      	adds	r2, #67	@ 0x43
 800773e:	3302      	adds	r3, #2
 8007740:	7011      	strb	r1, [r2, #0]
 8007742:	e7c1      	b.n	80076c8 <_printf_common+0x4c>
 8007744:	0022      	movs	r2, r4
 8007746:	2301      	movs	r3, #1
 8007748:	9901      	ldr	r1, [sp, #4]
 800774a:	9800      	ldr	r0, [sp, #0]
 800774c:	9f08      	ldr	r7, [sp, #32]
 800774e:	321a      	adds	r2, #26
 8007750:	47b8      	blx	r7
 8007752:	3001      	adds	r0, #1
 8007754:	d0e6      	beq.n	8007724 <_printf_common+0xa8>
 8007756:	3601      	adds	r6, #1
 8007758:	e7d1      	b.n	80076fe <_printf_common+0x82>
	...

0800775c <_printf_i>:
 800775c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775e:	b08b      	sub	sp, #44	@ 0x2c
 8007760:	9206      	str	r2, [sp, #24]
 8007762:	000a      	movs	r2, r1
 8007764:	3243      	adds	r2, #67	@ 0x43
 8007766:	9307      	str	r3, [sp, #28]
 8007768:	9005      	str	r0, [sp, #20]
 800776a:	9203      	str	r2, [sp, #12]
 800776c:	7e0a      	ldrb	r2, [r1, #24]
 800776e:	000c      	movs	r4, r1
 8007770:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007772:	2a78      	cmp	r2, #120	@ 0x78
 8007774:	d809      	bhi.n	800778a <_printf_i+0x2e>
 8007776:	2a62      	cmp	r2, #98	@ 0x62
 8007778:	d80b      	bhi.n	8007792 <_printf_i+0x36>
 800777a:	2a00      	cmp	r2, #0
 800777c:	d100      	bne.n	8007780 <_printf_i+0x24>
 800777e:	e0ba      	b.n	80078f6 <_printf_i+0x19a>
 8007780:	497a      	ldr	r1, [pc, #488]	@ (800796c <_printf_i+0x210>)
 8007782:	9104      	str	r1, [sp, #16]
 8007784:	2a58      	cmp	r2, #88	@ 0x58
 8007786:	d100      	bne.n	800778a <_printf_i+0x2e>
 8007788:	e08e      	b.n	80078a8 <_printf_i+0x14c>
 800778a:	0025      	movs	r5, r4
 800778c:	3542      	adds	r5, #66	@ 0x42
 800778e:	702a      	strb	r2, [r5, #0]
 8007790:	e022      	b.n	80077d8 <_printf_i+0x7c>
 8007792:	0010      	movs	r0, r2
 8007794:	3863      	subs	r0, #99	@ 0x63
 8007796:	2815      	cmp	r0, #21
 8007798:	d8f7      	bhi.n	800778a <_printf_i+0x2e>
 800779a:	f7f8 fcb3 	bl	8000104 <__gnu_thumb1_case_shi>
 800779e:	0016      	.short	0x0016
 80077a0:	fff6001f 	.word	0xfff6001f
 80077a4:	fff6fff6 	.word	0xfff6fff6
 80077a8:	001ffff6 	.word	0x001ffff6
 80077ac:	fff6fff6 	.word	0xfff6fff6
 80077b0:	fff6fff6 	.word	0xfff6fff6
 80077b4:	0036009f 	.word	0x0036009f
 80077b8:	fff6007e 	.word	0xfff6007e
 80077bc:	00b0fff6 	.word	0x00b0fff6
 80077c0:	0036fff6 	.word	0x0036fff6
 80077c4:	fff6fff6 	.word	0xfff6fff6
 80077c8:	0082      	.short	0x0082
 80077ca:	0025      	movs	r5, r4
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	3542      	adds	r5, #66	@ 0x42
 80077d0:	1d11      	adds	r1, r2, #4
 80077d2:	6019      	str	r1, [r3, #0]
 80077d4:	6813      	ldr	r3, [r2, #0]
 80077d6:	702b      	strb	r3, [r5, #0]
 80077d8:	2301      	movs	r3, #1
 80077da:	e09e      	b.n	800791a <_printf_i+0x1be>
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	6809      	ldr	r1, [r1, #0]
 80077e0:	1d02      	adds	r2, r0, #4
 80077e2:	060d      	lsls	r5, r1, #24
 80077e4:	d50b      	bpl.n	80077fe <_printf_i+0xa2>
 80077e6:	6806      	ldr	r6, [r0, #0]
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	da03      	bge.n	80077f6 <_printf_i+0x9a>
 80077ee:	232d      	movs	r3, #45	@ 0x2d
 80077f0:	9a03      	ldr	r2, [sp, #12]
 80077f2:	4276      	negs	r6, r6
 80077f4:	7013      	strb	r3, [r2, #0]
 80077f6:	4b5d      	ldr	r3, [pc, #372]	@ (800796c <_printf_i+0x210>)
 80077f8:	270a      	movs	r7, #10
 80077fa:	9304      	str	r3, [sp, #16]
 80077fc:	e018      	b.n	8007830 <_printf_i+0xd4>
 80077fe:	6806      	ldr	r6, [r0, #0]
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	0649      	lsls	r1, r1, #25
 8007804:	d5f1      	bpl.n	80077ea <_printf_i+0x8e>
 8007806:	b236      	sxth	r6, r6
 8007808:	e7ef      	b.n	80077ea <_printf_i+0x8e>
 800780a:	6808      	ldr	r0, [r1, #0]
 800780c:	6819      	ldr	r1, [r3, #0]
 800780e:	c940      	ldmia	r1!, {r6}
 8007810:	0605      	lsls	r5, r0, #24
 8007812:	d402      	bmi.n	800781a <_printf_i+0xbe>
 8007814:	0640      	lsls	r0, r0, #25
 8007816:	d500      	bpl.n	800781a <_printf_i+0xbe>
 8007818:	b2b6      	uxth	r6, r6
 800781a:	6019      	str	r1, [r3, #0]
 800781c:	4b53      	ldr	r3, [pc, #332]	@ (800796c <_printf_i+0x210>)
 800781e:	270a      	movs	r7, #10
 8007820:	9304      	str	r3, [sp, #16]
 8007822:	2a6f      	cmp	r2, #111	@ 0x6f
 8007824:	d100      	bne.n	8007828 <_printf_i+0xcc>
 8007826:	3f02      	subs	r7, #2
 8007828:	0023      	movs	r3, r4
 800782a:	2200      	movs	r2, #0
 800782c:	3343      	adds	r3, #67	@ 0x43
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	6863      	ldr	r3, [r4, #4]
 8007832:	60a3      	str	r3, [r4, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	db06      	blt.n	8007846 <_printf_i+0xea>
 8007838:	2104      	movs	r1, #4
 800783a:	6822      	ldr	r2, [r4, #0]
 800783c:	9d03      	ldr	r5, [sp, #12]
 800783e:	438a      	bics	r2, r1
 8007840:	6022      	str	r2, [r4, #0]
 8007842:	4333      	orrs	r3, r6
 8007844:	d00c      	beq.n	8007860 <_printf_i+0x104>
 8007846:	9d03      	ldr	r5, [sp, #12]
 8007848:	0030      	movs	r0, r6
 800784a:	0039      	movs	r1, r7
 800784c:	f7f8 fcea 	bl	8000224 <__aeabi_uidivmod>
 8007850:	9b04      	ldr	r3, [sp, #16]
 8007852:	3d01      	subs	r5, #1
 8007854:	5c5b      	ldrb	r3, [r3, r1]
 8007856:	702b      	strb	r3, [r5, #0]
 8007858:	0033      	movs	r3, r6
 800785a:	0006      	movs	r6, r0
 800785c:	429f      	cmp	r7, r3
 800785e:	d9f3      	bls.n	8007848 <_printf_i+0xec>
 8007860:	2f08      	cmp	r7, #8
 8007862:	d109      	bne.n	8007878 <_printf_i+0x11c>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	07db      	lsls	r3, r3, #31
 8007868:	d506      	bpl.n	8007878 <_printf_i+0x11c>
 800786a:	6862      	ldr	r2, [r4, #4]
 800786c:	6923      	ldr	r3, [r4, #16]
 800786e:	429a      	cmp	r2, r3
 8007870:	dc02      	bgt.n	8007878 <_printf_i+0x11c>
 8007872:	2330      	movs	r3, #48	@ 0x30
 8007874:	3d01      	subs	r5, #1
 8007876:	702b      	strb	r3, [r5, #0]
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	1b5b      	subs	r3, r3, r5
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	9b07      	ldr	r3, [sp, #28]
 8007880:	0021      	movs	r1, r4
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	9805      	ldr	r0, [sp, #20]
 8007886:	9b06      	ldr	r3, [sp, #24]
 8007888:	aa09      	add	r2, sp, #36	@ 0x24
 800788a:	f7ff fef7 	bl	800767c <_printf_common>
 800788e:	3001      	adds	r0, #1
 8007890:	d148      	bne.n	8007924 <_printf_i+0x1c8>
 8007892:	2001      	movs	r0, #1
 8007894:	4240      	negs	r0, r0
 8007896:	b00b      	add	sp, #44	@ 0x2c
 8007898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800789a:	2220      	movs	r2, #32
 800789c:	6809      	ldr	r1, [r1, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	6022      	str	r2, [r4, #0]
 80078a2:	2278      	movs	r2, #120	@ 0x78
 80078a4:	4932      	ldr	r1, [pc, #200]	@ (8007970 <_printf_i+0x214>)
 80078a6:	9104      	str	r1, [sp, #16]
 80078a8:	0021      	movs	r1, r4
 80078aa:	3145      	adds	r1, #69	@ 0x45
 80078ac:	700a      	strb	r2, [r1, #0]
 80078ae:	6819      	ldr	r1, [r3, #0]
 80078b0:	6822      	ldr	r2, [r4, #0]
 80078b2:	c940      	ldmia	r1!, {r6}
 80078b4:	0610      	lsls	r0, r2, #24
 80078b6:	d402      	bmi.n	80078be <_printf_i+0x162>
 80078b8:	0650      	lsls	r0, r2, #25
 80078ba:	d500      	bpl.n	80078be <_printf_i+0x162>
 80078bc:	b2b6      	uxth	r6, r6
 80078be:	6019      	str	r1, [r3, #0]
 80078c0:	07d3      	lsls	r3, r2, #31
 80078c2:	d502      	bpl.n	80078ca <_printf_i+0x16e>
 80078c4:	2320      	movs	r3, #32
 80078c6:	4313      	orrs	r3, r2
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	2e00      	cmp	r6, #0
 80078cc:	d001      	beq.n	80078d2 <_printf_i+0x176>
 80078ce:	2710      	movs	r7, #16
 80078d0:	e7aa      	b.n	8007828 <_printf_i+0xcc>
 80078d2:	2220      	movs	r2, #32
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	4393      	bics	r3, r2
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	e7f8      	b.n	80078ce <_printf_i+0x172>
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	680d      	ldr	r5, [r1, #0]
 80078e0:	1d10      	adds	r0, r2, #4
 80078e2:	6949      	ldr	r1, [r1, #20]
 80078e4:	6018      	str	r0, [r3, #0]
 80078e6:	6813      	ldr	r3, [r2, #0]
 80078e8:	062e      	lsls	r6, r5, #24
 80078ea:	d501      	bpl.n	80078f0 <_printf_i+0x194>
 80078ec:	6019      	str	r1, [r3, #0]
 80078ee:	e002      	b.n	80078f6 <_printf_i+0x19a>
 80078f0:	066d      	lsls	r5, r5, #25
 80078f2:	d5fb      	bpl.n	80078ec <_printf_i+0x190>
 80078f4:	8019      	strh	r1, [r3, #0]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9d03      	ldr	r5, [sp, #12]
 80078fa:	6123      	str	r3, [r4, #16]
 80078fc:	e7bf      	b.n	800787e <_printf_i+0x122>
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	1d11      	adds	r1, r2, #4
 8007902:	6019      	str	r1, [r3, #0]
 8007904:	6815      	ldr	r5, [r2, #0]
 8007906:	2100      	movs	r1, #0
 8007908:	0028      	movs	r0, r5
 800790a:	6862      	ldr	r2, [r4, #4]
 800790c:	f000 f9e0 	bl	8007cd0 <memchr>
 8007910:	2800      	cmp	r0, #0
 8007912:	d001      	beq.n	8007918 <_printf_i+0x1bc>
 8007914:	1b40      	subs	r0, r0, r5
 8007916:	6060      	str	r0, [r4, #4]
 8007918:	6863      	ldr	r3, [r4, #4]
 800791a:	6123      	str	r3, [r4, #16]
 800791c:	2300      	movs	r3, #0
 800791e:	9a03      	ldr	r2, [sp, #12]
 8007920:	7013      	strb	r3, [r2, #0]
 8007922:	e7ac      	b.n	800787e <_printf_i+0x122>
 8007924:	002a      	movs	r2, r5
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	9906      	ldr	r1, [sp, #24]
 800792a:	9805      	ldr	r0, [sp, #20]
 800792c:	9d07      	ldr	r5, [sp, #28]
 800792e:	47a8      	blx	r5
 8007930:	3001      	adds	r0, #1
 8007932:	d0ae      	beq.n	8007892 <_printf_i+0x136>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	079b      	lsls	r3, r3, #30
 8007938:	d415      	bmi.n	8007966 <_printf_i+0x20a>
 800793a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800793c:	68e0      	ldr	r0, [r4, #12]
 800793e:	4298      	cmp	r0, r3
 8007940:	daa9      	bge.n	8007896 <_printf_i+0x13a>
 8007942:	0018      	movs	r0, r3
 8007944:	e7a7      	b.n	8007896 <_printf_i+0x13a>
 8007946:	0022      	movs	r2, r4
 8007948:	2301      	movs	r3, #1
 800794a:	9906      	ldr	r1, [sp, #24]
 800794c:	9805      	ldr	r0, [sp, #20]
 800794e:	9e07      	ldr	r6, [sp, #28]
 8007950:	3219      	adds	r2, #25
 8007952:	47b0      	blx	r6
 8007954:	3001      	adds	r0, #1
 8007956:	d09c      	beq.n	8007892 <_printf_i+0x136>
 8007958:	3501      	adds	r5, #1
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	42ab      	cmp	r3, r5
 8007962:	dcf0      	bgt.n	8007946 <_printf_i+0x1ea>
 8007964:	e7e9      	b.n	800793a <_printf_i+0x1de>
 8007966:	2500      	movs	r5, #0
 8007968:	e7f7      	b.n	800795a <_printf_i+0x1fe>
 800796a:	46c0      	nop			@ (mov r8, r8)
 800796c:	080083b9 	.word	0x080083b9
 8007970:	080083ca 	.word	0x080083ca

08007974 <__sflush_r>:
 8007974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007976:	220c      	movs	r2, #12
 8007978:	5e8b      	ldrsh	r3, [r1, r2]
 800797a:	0005      	movs	r5, r0
 800797c:	000c      	movs	r4, r1
 800797e:	071a      	lsls	r2, r3, #28
 8007980:	d456      	bmi.n	8007a30 <__sflush_r+0xbc>
 8007982:	684a      	ldr	r2, [r1, #4]
 8007984:	2a00      	cmp	r2, #0
 8007986:	dc02      	bgt.n	800798e <__sflush_r+0x1a>
 8007988:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800798a:	2a00      	cmp	r2, #0
 800798c:	dd4e      	ble.n	8007a2c <__sflush_r+0xb8>
 800798e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007990:	2f00      	cmp	r7, #0
 8007992:	d04b      	beq.n	8007a2c <__sflush_r+0xb8>
 8007994:	2200      	movs	r2, #0
 8007996:	2080      	movs	r0, #128	@ 0x80
 8007998:	682e      	ldr	r6, [r5, #0]
 800799a:	602a      	str	r2, [r5, #0]
 800799c:	001a      	movs	r2, r3
 800799e:	0140      	lsls	r0, r0, #5
 80079a0:	6a21      	ldr	r1, [r4, #32]
 80079a2:	4002      	ands	r2, r0
 80079a4:	4203      	tst	r3, r0
 80079a6:	d033      	beq.n	8007a10 <__sflush_r+0x9c>
 80079a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	075b      	lsls	r3, r3, #29
 80079ae:	d506      	bpl.n	80079be <__sflush_r+0x4a>
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <__sflush_r+0x4a>
 80079ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079bc:	1ad2      	subs	r2, r2, r3
 80079be:	2300      	movs	r3, #0
 80079c0:	0028      	movs	r0, r5
 80079c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80079c4:	6a21      	ldr	r1, [r4, #32]
 80079c6:	47b8      	blx	r7
 80079c8:	89a2      	ldrh	r2, [r4, #12]
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	d106      	bne.n	80079dc <__sflush_r+0x68>
 80079ce:	6829      	ldr	r1, [r5, #0]
 80079d0:	291d      	cmp	r1, #29
 80079d2:	d846      	bhi.n	8007a62 <__sflush_r+0xee>
 80079d4:	4b29      	ldr	r3, [pc, #164]	@ (8007a7c <__sflush_r+0x108>)
 80079d6:	40cb      	lsrs	r3, r1
 80079d8:	07db      	lsls	r3, r3, #31
 80079da:	d542      	bpl.n	8007a62 <__sflush_r+0xee>
 80079dc:	2300      	movs	r3, #0
 80079de:	6063      	str	r3, [r4, #4]
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	04d2      	lsls	r2, r2, #19
 80079e6:	d505      	bpl.n	80079f4 <__sflush_r+0x80>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <__sflush_r+0x7e>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d100      	bne.n	80079f4 <__sflush_r+0x80>
 80079f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80079f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079f6:	602e      	str	r6, [r5, #0]
 80079f8:	2900      	cmp	r1, #0
 80079fa:	d017      	beq.n	8007a2c <__sflush_r+0xb8>
 80079fc:	0023      	movs	r3, r4
 80079fe:	3344      	adds	r3, #68	@ 0x44
 8007a00:	4299      	cmp	r1, r3
 8007a02:	d002      	beq.n	8007a0a <__sflush_r+0x96>
 8007a04:	0028      	movs	r0, r5
 8007a06:	f7ff fbf9 	bl	80071fc <_free_r>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a0e:	e00d      	b.n	8007a2c <__sflush_r+0xb8>
 8007a10:	2301      	movs	r3, #1
 8007a12:	0028      	movs	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	0002      	movs	r2, r0
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d1c6      	bne.n	80079aa <__sflush_r+0x36>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0c3      	beq.n	80079aa <__sflush_r+0x36>
 8007a22:	2b1d      	cmp	r3, #29
 8007a24:	d001      	beq.n	8007a2a <__sflush_r+0xb6>
 8007a26:	2b16      	cmp	r3, #22
 8007a28:	d11a      	bne.n	8007a60 <__sflush_r+0xec>
 8007a2a:	602e      	str	r6, [r5, #0]
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	e01e      	b.n	8007a6e <__sflush_r+0xfa>
 8007a30:	690e      	ldr	r6, [r1, #16]
 8007a32:	2e00      	cmp	r6, #0
 8007a34:	d0fa      	beq.n	8007a2c <__sflush_r+0xb8>
 8007a36:	680f      	ldr	r7, [r1, #0]
 8007a38:	600e      	str	r6, [r1, #0]
 8007a3a:	1bba      	subs	r2, r7, r6
 8007a3c:	9201      	str	r2, [sp, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	079b      	lsls	r3, r3, #30
 8007a42:	d100      	bne.n	8007a46 <__sflush_r+0xd2>
 8007a44:	694a      	ldr	r2, [r1, #20]
 8007a46:	60a2      	str	r2, [r4, #8]
 8007a48:	9b01      	ldr	r3, [sp, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	ddee      	ble.n	8007a2c <__sflush_r+0xb8>
 8007a4e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007a50:	0032      	movs	r2, r6
 8007a52:	001f      	movs	r7, r3
 8007a54:	0028      	movs	r0, r5
 8007a56:	9b01      	ldr	r3, [sp, #4]
 8007a58:	6a21      	ldr	r1, [r4, #32]
 8007a5a:	47b8      	blx	r7
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	dc07      	bgt.n	8007a70 <__sflush_r+0xfc>
 8007a60:	89a2      	ldrh	r2, [r4, #12]
 8007a62:	2340      	movs	r3, #64	@ 0x40
 8007a64:	2001      	movs	r0, #1
 8007a66:	4313      	orrs	r3, r2
 8007a68:	b21b      	sxth	r3, r3
 8007a6a:	81a3      	strh	r3, [r4, #12]
 8007a6c:	4240      	negs	r0, r0
 8007a6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	1836      	adds	r6, r6, r0
 8007a74:	1a1b      	subs	r3, r3, r0
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	e7e6      	b.n	8007a48 <__sflush_r+0xd4>
 8007a7a:	46c0      	nop			@ (mov r8, r8)
 8007a7c:	20400001 	.word	0x20400001

08007a80 <_fflush_r>:
 8007a80:	690b      	ldr	r3, [r1, #16]
 8007a82:	b570      	push	{r4, r5, r6, lr}
 8007a84:	0005      	movs	r5, r0
 8007a86:	000c      	movs	r4, r1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <_fflush_r+0x12>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	0028      	movs	r0, r5
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d004      	beq.n	8007aa0 <_fflush_r+0x20>
 8007a96:	6a03      	ldr	r3, [r0, #32]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <_fflush_r+0x20>
 8007a9c:	f7ff fa94 	bl	8006fc8 <__sinit>
 8007aa0:	220c      	movs	r2, #12
 8007aa2:	5ea3      	ldrsh	r3, [r4, r2]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0f1      	beq.n	8007a8c <_fflush_r+0xc>
 8007aa8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007aaa:	07d2      	lsls	r2, r2, #31
 8007aac:	d404      	bmi.n	8007ab8 <_fflush_r+0x38>
 8007aae:	059b      	lsls	r3, r3, #22
 8007ab0:	d402      	bmi.n	8007ab8 <_fflush_r+0x38>
 8007ab2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ab4:	f7ff fb99 	bl	80071ea <__retarget_lock_acquire_recursive>
 8007ab8:	0028      	movs	r0, r5
 8007aba:	0021      	movs	r1, r4
 8007abc:	f7ff ff5a 	bl	8007974 <__sflush_r>
 8007ac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ac2:	0005      	movs	r5, r0
 8007ac4:	07db      	lsls	r3, r3, #31
 8007ac6:	d4e2      	bmi.n	8007a8e <_fflush_r+0xe>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	059b      	lsls	r3, r3, #22
 8007acc:	d4df      	bmi.n	8007a8e <_fflush_r+0xe>
 8007ace:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ad0:	f7ff fb8c 	bl	80071ec <__retarget_lock_release_recursive>
 8007ad4:	e7db      	b.n	8007a8e <_fflush_r+0xe>

08007ad6 <__swbuf_r>:
 8007ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad8:	0006      	movs	r6, r0
 8007ada:	000d      	movs	r5, r1
 8007adc:	0014      	movs	r4, r2
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d004      	beq.n	8007aec <__swbuf_r+0x16>
 8007ae2:	6a03      	ldr	r3, [r0, #32]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <__swbuf_r+0x16>
 8007ae8:	f7ff fa6e 	bl	8006fc8 <__sinit>
 8007aec:	69a3      	ldr	r3, [r4, #24]
 8007aee:	60a3      	str	r3, [r4, #8]
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	071b      	lsls	r3, r3, #28
 8007af4:	d502      	bpl.n	8007afc <__swbuf_r+0x26>
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d109      	bne.n	8007b10 <__swbuf_r+0x3a>
 8007afc:	0021      	movs	r1, r4
 8007afe:	0030      	movs	r0, r6
 8007b00:	f000 f82c 	bl	8007b5c <__swsetup_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d003      	beq.n	8007b10 <__swbuf_r+0x3a>
 8007b08:	2501      	movs	r5, #1
 8007b0a:	426d      	negs	r5, r5
 8007b0c:	0028      	movs	r0, r5
 8007b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	6820      	ldr	r0, [r4, #0]
 8007b14:	b2ef      	uxtb	r7, r5
 8007b16:	1ac0      	subs	r0, r0, r3
 8007b18:	6963      	ldr	r3, [r4, #20]
 8007b1a:	b2ed      	uxtb	r5, r5
 8007b1c:	4283      	cmp	r3, r0
 8007b1e:	dc05      	bgt.n	8007b2c <__swbuf_r+0x56>
 8007b20:	0021      	movs	r1, r4
 8007b22:	0030      	movs	r0, r6
 8007b24:	f7ff ffac 	bl	8007a80 <_fflush_r>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d1ed      	bne.n	8007b08 <__swbuf_r+0x32>
 8007b2c:	68a3      	ldr	r3, [r4, #8]
 8007b2e:	3001      	adds	r0, #1
 8007b30:	3b01      	subs	r3, #1
 8007b32:	60a3      	str	r3, [r4, #8]
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	6022      	str	r2, [r4, #0]
 8007b3a:	701f      	strb	r7, [r3, #0]
 8007b3c:	6963      	ldr	r3, [r4, #20]
 8007b3e:	4283      	cmp	r3, r0
 8007b40:	d004      	beq.n	8007b4c <__swbuf_r+0x76>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	07db      	lsls	r3, r3, #31
 8007b46:	d5e1      	bpl.n	8007b0c <__swbuf_r+0x36>
 8007b48:	2d0a      	cmp	r5, #10
 8007b4a:	d1df      	bne.n	8007b0c <__swbuf_r+0x36>
 8007b4c:	0021      	movs	r1, r4
 8007b4e:	0030      	movs	r0, r6
 8007b50:	f7ff ff96 	bl	8007a80 <_fflush_r>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d0d9      	beq.n	8007b0c <__swbuf_r+0x36>
 8007b58:	e7d6      	b.n	8007b08 <__swbuf_r+0x32>
	...

08007b5c <__swsetup_r>:
 8007b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8007c14 <__swsetup_r+0xb8>)
 8007b5e:	b570      	push	{r4, r5, r6, lr}
 8007b60:	0005      	movs	r5, r0
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	000c      	movs	r4, r1
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d004      	beq.n	8007b74 <__swsetup_r+0x18>
 8007b6a:	6a03      	ldr	r3, [r0, #32]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <__swsetup_r+0x18>
 8007b70:	f7ff fa2a 	bl	8006fc8 <__sinit>
 8007b74:	220c      	movs	r2, #12
 8007b76:	5ea3      	ldrsh	r3, [r4, r2]
 8007b78:	071a      	lsls	r2, r3, #28
 8007b7a:	d423      	bmi.n	8007bc4 <__swsetup_r+0x68>
 8007b7c:	06da      	lsls	r2, r3, #27
 8007b7e:	d407      	bmi.n	8007b90 <__swsetup_r+0x34>
 8007b80:	2209      	movs	r2, #9
 8007b82:	602a      	str	r2, [r5, #0]
 8007b84:	2240      	movs	r2, #64	@ 0x40
 8007b86:	2001      	movs	r0, #1
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	4240      	negs	r0, r0
 8007b8e:	e03a      	b.n	8007c06 <__swsetup_r+0xaa>
 8007b90:	075b      	lsls	r3, r3, #29
 8007b92:	d513      	bpl.n	8007bbc <__swsetup_r+0x60>
 8007b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b96:	2900      	cmp	r1, #0
 8007b98:	d008      	beq.n	8007bac <__swsetup_r+0x50>
 8007b9a:	0023      	movs	r3, r4
 8007b9c:	3344      	adds	r3, #68	@ 0x44
 8007b9e:	4299      	cmp	r1, r3
 8007ba0:	d002      	beq.n	8007ba8 <__swsetup_r+0x4c>
 8007ba2:	0028      	movs	r0, r5
 8007ba4:	f7ff fb2a 	bl	80071fc <_free_r>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bac:	2224      	movs	r2, #36	@ 0x24
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	4393      	bics	r3, r2
 8007bb2:	81a3      	strh	r3, [r4, #12]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	6023      	str	r3, [r4, #0]
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	89a2      	ldrh	r2, [r4, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10b      	bne.n	8007be2 <__swsetup_r+0x86>
 8007bca:	21a0      	movs	r1, #160	@ 0xa0
 8007bcc:	2280      	movs	r2, #128	@ 0x80
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	0089      	lsls	r1, r1, #2
 8007bd2:	0092      	lsls	r2, r2, #2
 8007bd4:	400b      	ands	r3, r1
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d003      	beq.n	8007be2 <__swsetup_r+0x86>
 8007bda:	0021      	movs	r1, r4
 8007bdc:	0028      	movs	r0, r5
 8007bde:	f000 f8ad 	bl	8007d3c <__smakebuf_r>
 8007be2:	220c      	movs	r2, #12
 8007be4:	5ea3      	ldrsh	r3, [r4, r2]
 8007be6:	2101      	movs	r1, #1
 8007be8:	001a      	movs	r2, r3
 8007bea:	400a      	ands	r2, r1
 8007bec:	420b      	tst	r3, r1
 8007bee:	d00b      	beq.n	8007c08 <__swsetup_r+0xac>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	60a2      	str	r2, [r4, #8]
 8007bf4:	6962      	ldr	r2, [r4, #20]
 8007bf6:	4252      	negs	r2, r2
 8007bf8:	61a2      	str	r2, [r4, #24]
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	6922      	ldr	r2, [r4, #16]
 8007bfe:	4282      	cmp	r2, r0
 8007c00:	d101      	bne.n	8007c06 <__swsetup_r+0xaa>
 8007c02:	061a      	lsls	r2, r3, #24
 8007c04:	d4be      	bmi.n	8007b84 <__swsetup_r+0x28>
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	0799      	lsls	r1, r3, #30
 8007c0a:	d400      	bmi.n	8007c0e <__swsetup_r+0xb2>
 8007c0c:	6962      	ldr	r2, [r4, #20]
 8007c0e:	60a2      	str	r2, [r4, #8]
 8007c10:	e7f3      	b.n	8007bfa <__swsetup_r+0x9e>
 8007c12:	46c0      	nop			@ (mov r8, r8)
 8007c14:	20000094 	.word	0x20000094

08007c18 <_raise_r>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	0004      	movs	r4, r0
 8007c1c:	000d      	movs	r5, r1
 8007c1e:	291f      	cmp	r1, #31
 8007c20:	d904      	bls.n	8007c2c <_raise_r+0x14>
 8007c22:	2316      	movs	r3, #22
 8007c24:	6003      	str	r3, [r0, #0]
 8007c26:	2001      	movs	r0, #1
 8007c28:	4240      	negs	r0, r0
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <_raise_r+0x24>
 8007c32:	008a      	lsls	r2, r1, #2
 8007c34:	189b      	adds	r3, r3, r2
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	2a00      	cmp	r2, #0
 8007c3a:	d108      	bne.n	8007c4e <_raise_r+0x36>
 8007c3c:	0020      	movs	r0, r4
 8007c3e:	f000 f831 	bl	8007ca4 <_getpid_r>
 8007c42:	002a      	movs	r2, r5
 8007c44:	0001      	movs	r1, r0
 8007c46:	0020      	movs	r0, r4
 8007c48:	f000 f81a 	bl	8007c80 <_kill_r>
 8007c4c:	e7ed      	b.n	8007c2a <_raise_r+0x12>
 8007c4e:	2a01      	cmp	r2, #1
 8007c50:	d009      	beq.n	8007c66 <_raise_r+0x4e>
 8007c52:	1c51      	adds	r1, r2, #1
 8007c54:	d103      	bne.n	8007c5e <_raise_r+0x46>
 8007c56:	2316      	movs	r3, #22
 8007c58:	6003      	str	r3, [r0, #0]
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	e7e5      	b.n	8007c2a <_raise_r+0x12>
 8007c5e:	2100      	movs	r1, #0
 8007c60:	0028      	movs	r0, r5
 8007c62:	6019      	str	r1, [r3, #0]
 8007c64:	4790      	blx	r2
 8007c66:	2000      	movs	r0, #0
 8007c68:	e7df      	b.n	8007c2a <_raise_r+0x12>
	...

08007c6c <raise>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4b03      	ldr	r3, [pc, #12]	@ (8007c7c <raise+0x10>)
 8007c70:	0001      	movs	r1, r0
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	f7ff ffd0 	bl	8007c18 <_raise_r>
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	46c0      	nop			@ (mov r8, r8)
 8007c7c:	20000094 	.word	0x20000094

08007c80 <_kill_r>:
 8007c80:	2300      	movs	r3, #0
 8007c82:	b570      	push	{r4, r5, r6, lr}
 8007c84:	4d06      	ldr	r5, [pc, #24]	@ (8007ca0 <_kill_r+0x20>)
 8007c86:	0004      	movs	r4, r0
 8007c88:	0008      	movs	r0, r1
 8007c8a:	0011      	movs	r1, r2
 8007c8c:	602b      	str	r3, [r5, #0]
 8007c8e:	f7fc f9fb 	bl	8004088 <_kill>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d103      	bne.n	8007c9e <_kill_r+0x1e>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d000      	beq.n	8007c9e <_kill_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	20000568 	.word	0x20000568

08007ca4 <_getpid_r>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	f7fc f9e9 	bl	800407c <_getpid>
 8007caa:	bd10      	pop	{r4, pc}

08007cac <_sbrk_r>:
 8007cac:	2300      	movs	r3, #0
 8007cae:	b570      	push	{r4, r5, r6, lr}
 8007cb0:	4d06      	ldr	r5, [pc, #24]	@ (8007ccc <_sbrk_r+0x20>)
 8007cb2:	0004      	movs	r4, r0
 8007cb4:	0008      	movs	r0, r1
 8007cb6:	602b      	str	r3, [r5, #0]
 8007cb8:	f7fc fa68 	bl	800418c <_sbrk>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d103      	bne.n	8007cc8 <_sbrk_r+0x1c>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d000      	beq.n	8007cc8 <_sbrk_r+0x1c>
 8007cc6:	6023      	str	r3, [r4, #0]
 8007cc8:	bd70      	pop	{r4, r5, r6, pc}
 8007cca:	46c0      	nop			@ (mov r8, r8)
 8007ccc:	20000568 	.word	0x20000568

08007cd0 <memchr>:
 8007cd0:	b2c9      	uxtb	r1, r1
 8007cd2:	1882      	adds	r2, r0, r2
 8007cd4:	4290      	cmp	r0, r2
 8007cd6:	d101      	bne.n	8007cdc <memchr+0xc>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	4770      	bx	lr
 8007cdc:	7803      	ldrb	r3, [r0, #0]
 8007cde:	428b      	cmp	r3, r1
 8007ce0:	d0fb      	beq.n	8007cda <memchr+0xa>
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	e7f6      	b.n	8007cd4 <memchr+0x4>
	...

08007ce8 <__swhatbuf_r>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	000e      	movs	r6, r1
 8007cec:	001d      	movs	r5, r3
 8007cee:	230e      	movs	r3, #14
 8007cf0:	5ec9      	ldrsh	r1, [r1, r3]
 8007cf2:	0014      	movs	r4, r2
 8007cf4:	b096      	sub	sp, #88	@ 0x58
 8007cf6:	2900      	cmp	r1, #0
 8007cf8:	da0c      	bge.n	8007d14 <__swhatbuf_r+0x2c>
 8007cfa:	89b2      	ldrh	r2, [r6, #12]
 8007cfc:	2380      	movs	r3, #128	@ 0x80
 8007cfe:	0011      	movs	r1, r2
 8007d00:	4019      	ands	r1, r3
 8007d02:	421a      	tst	r2, r3
 8007d04:	d114      	bne.n	8007d30 <__swhatbuf_r+0x48>
 8007d06:	2380      	movs	r3, #128	@ 0x80
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	6029      	str	r1, [r5, #0]
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	b016      	add	sp, #88	@ 0x58
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	466a      	mov	r2, sp
 8007d16:	f000 f853 	bl	8007dc0 <_fstat_r>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	dbed      	blt.n	8007cfa <__swhatbuf_r+0x12>
 8007d1e:	23f0      	movs	r3, #240	@ 0xf0
 8007d20:	9901      	ldr	r1, [sp, #4]
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	4019      	ands	r1, r3
 8007d26:	4b04      	ldr	r3, [pc, #16]	@ (8007d38 <__swhatbuf_r+0x50>)
 8007d28:	18c9      	adds	r1, r1, r3
 8007d2a:	424b      	negs	r3, r1
 8007d2c:	4159      	adcs	r1, r3
 8007d2e:	e7ea      	b.n	8007d06 <__swhatbuf_r+0x1e>
 8007d30:	2100      	movs	r1, #0
 8007d32:	2340      	movs	r3, #64	@ 0x40
 8007d34:	e7e9      	b.n	8007d0a <__swhatbuf_r+0x22>
 8007d36:	46c0      	nop			@ (mov r8, r8)
 8007d38:	ffffe000 	.word	0xffffe000

08007d3c <__smakebuf_r>:
 8007d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d3e:	2602      	movs	r6, #2
 8007d40:	898b      	ldrh	r3, [r1, #12]
 8007d42:	0005      	movs	r5, r0
 8007d44:	000c      	movs	r4, r1
 8007d46:	b085      	sub	sp, #20
 8007d48:	4233      	tst	r3, r6
 8007d4a:	d007      	beq.n	8007d5c <__smakebuf_r+0x20>
 8007d4c:	0023      	movs	r3, r4
 8007d4e:	3347      	adds	r3, #71	@ 0x47
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	6123      	str	r3, [r4, #16]
 8007d54:	2301      	movs	r3, #1
 8007d56:	6163      	str	r3, [r4, #20]
 8007d58:	b005      	add	sp, #20
 8007d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d5c:	ab03      	add	r3, sp, #12
 8007d5e:	aa02      	add	r2, sp, #8
 8007d60:	f7ff ffc2 	bl	8007ce8 <__swhatbuf_r>
 8007d64:	9f02      	ldr	r7, [sp, #8]
 8007d66:	9001      	str	r0, [sp, #4]
 8007d68:	0039      	movs	r1, r7
 8007d6a:	0028      	movs	r0, r5
 8007d6c:	f7ff fab2 	bl	80072d4 <_malloc_r>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d108      	bne.n	8007d86 <__smakebuf_r+0x4a>
 8007d74:	220c      	movs	r2, #12
 8007d76:	5ea3      	ldrsh	r3, [r4, r2]
 8007d78:	059a      	lsls	r2, r3, #22
 8007d7a:	d4ed      	bmi.n	8007d58 <__smakebuf_r+0x1c>
 8007d7c:	2203      	movs	r2, #3
 8007d7e:	4393      	bics	r3, r2
 8007d80:	431e      	orrs	r6, r3
 8007d82:	81a6      	strh	r6, [r4, #12]
 8007d84:	e7e2      	b.n	8007d4c <__smakebuf_r+0x10>
 8007d86:	2380      	movs	r3, #128	@ 0x80
 8007d88:	89a2      	ldrh	r2, [r4, #12]
 8007d8a:	6020      	str	r0, [r4, #0]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	6120      	str	r0, [r4, #16]
 8007d94:	6167      	str	r7, [r4, #20]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00c      	beq.n	8007db4 <__smakebuf_r+0x78>
 8007d9a:	0028      	movs	r0, r5
 8007d9c:	230e      	movs	r3, #14
 8007d9e:	5ee1      	ldrsh	r1, [r4, r3]
 8007da0:	f000 f820 	bl	8007de4 <_isatty_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d005      	beq.n	8007db4 <__smakebuf_r+0x78>
 8007da8:	2303      	movs	r3, #3
 8007daa:	89a2      	ldrh	r2, [r4, #12]
 8007dac:	439a      	bics	r2, r3
 8007dae:	3b02      	subs	r3, #2
 8007db0:	4313      	orrs	r3, r2
 8007db2:	81a3      	strh	r3, [r4, #12]
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	9a01      	ldr	r2, [sp, #4]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	81a3      	strh	r3, [r4, #12]
 8007dbc:	e7cc      	b.n	8007d58 <__smakebuf_r+0x1c>
	...

08007dc0 <_fstat_r>:
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	b570      	push	{r4, r5, r6, lr}
 8007dc4:	4d06      	ldr	r5, [pc, #24]	@ (8007de0 <_fstat_r+0x20>)
 8007dc6:	0004      	movs	r4, r0
 8007dc8:	0008      	movs	r0, r1
 8007dca:	0011      	movs	r1, r2
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	f7fc f9bb 	bl	8004148 <_fstat>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d103      	bne.n	8007dde <_fstat_r+0x1e>
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d000      	beq.n	8007dde <_fstat_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
 8007de0:	20000568 	.word	0x20000568

08007de4 <_isatty_r>:
 8007de4:	2300      	movs	r3, #0
 8007de6:	b570      	push	{r4, r5, r6, lr}
 8007de8:	4d06      	ldr	r5, [pc, #24]	@ (8007e04 <_isatty_r+0x20>)
 8007dea:	0004      	movs	r4, r0
 8007dec:	0008      	movs	r0, r1
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	f7fc f9b8 	bl	8004164 <_isatty>
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	d103      	bne.n	8007e00 <_isatty_r+0x1c>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d000      	beq.n	8007e00 <_isatty_r+0x1c>
 8007dfe:	6023      	str	r3, [r4, #0]
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	46c0      	nop			@ (mov r8, r8)
 8007e04:	20000568 	.word	0x20000568

08007e08 <log>:
 8007e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0a:	0004      	movs	r4, r0
 8007e0c:	000d      	movs	r5, r1
 8007e0e:	f000 f837 	bl	8007e80 <__ieee754_log>
 8007e12:	0022      	movs	r2, r4
 8007e14:	0006      	movs	r6, r0
 8007e16:	000f      	movs	r7, r1
 8007e18:	002b      	movs	r3, r5
 8007e1a:	0020      	movs	r0, r4
 8007e1c:	0029      	movs	r1, r5
 8007e1e:	f7fa fb45 	bl	80024ac <__aeabi_dcmpun>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d115      	bne.n	8007e52 <log+0x4a>
 8007e26:	2200      	movs	r2, #0
 8007e28:	2300      	movs	r3, #0
 8007e2a:	0020      	movs	r0, r4
 8007e2c:	0029      	movs	r1, r5
 8007e2e:	f7f8 fa29 	bl	8000284 <__aeabi_dcmpgt>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d10d      	bne.n	8007e52 <log+0x4a>
 8007e36:	2200      	movs	r2, #0
 8007e38:	2300      	movs	r3, #0
 8007e3a:	0020      	movs	r0, r4
 8007e3c:	0029      	movs	r1, r5
 8007e3e:	f7f8 fa07 	bl	8000250 <__aeabi_dcmpeq>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d008      	beq.n	8007e58 <log+0x50>
 8007e46:	f7ff f9a5 	bl	8007194 <__errno>
 8007e4a:	2322      	movs	r3, #34	@ 0x22
 8007e4c:	2600      	movs	r6, #0
 8007e4e:	4f07      	ldr	r7, [pc, #28]	@ (8007e6c <log+0x64>)
 8007e50:	6003      	str	r3, [r0, #0]
 8007e52:	0030      	movs	r0, r6
 8007e54:	0039      	movs	r1, r7
 8007e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e58:	f7ff f99c 	bl	8007194 <__errno>
 8007e5c:	2321      	movs	r3, #33	@ 0x21
 8007e5e:	6003      	str	r3, [r0, #0]
 8007e60:	4803      	ldr	r0, [pc, #12]	@ (8007e70 <log+0x68>)
 8007e62:	f000 f807 	bl	8007e74 <nan>
 8007e66:	0006      	movs	r6, r0
 8007e68:	000f      	movs	r7, r1
 8007e6a:	e7f2      	b.n	8007e52 <log+0x4a>
 8007e6c:	fff00000 	.word	0xfff00000
 8007e70:	080083a7 	.word	0x080083a7

08007e74 <nan>:
 8007e74:	2000      	movs	r0, #0
 8007e76:	4901      	ldr	r1, [pc, #4]	@ (8007e7c <nan+0x8>)
 8007e78:	4770      	bx	lr
 8007e7a:	46c0      	nop			@ (mov r8, r8)
 8007e7c:	7ff80000 	.word	0x7ff80000

08007e80 <__ieee754_log>:
 8007e80:	2380      	movs	r3, #128	@ 0x80
 8007e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e84:	035b      	lsls	r3, r3, #13
 8007e86:	000e      	movs	r6, r1
 8007e88:	b08d      	sub	sp, #52	@ 0x34
 8007e8a:	4299      	cmp	r1, r3
 8007e8c:	da23      	bge.n	8007ed6 <__ieee754_log+0x56>
 8007e8e:	004b      	lsls	r3, r1, #1
 8007e90:	085b      	lsrs	r3, r3, #1
 8007e92:	4303      	orrs	r3, r0
 8007e94:	d107      	bne.n	8007ea6 <__ieee754_log+0x26>
 8007e96:	2200      	movs	r2, #0
 8007e98:	2300      	movs	r3, #0
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	49b4      	ldr	r1, [pc, #720]	@ (8008170 <__ieee754_log+0x2f0>)
 8007e9e:	f7f8 ffdb 	bl	8000e58 <__aeabi_ddiv>
 8007ea2:	b00d      	add	sp, #52	@ 0x34
 8007ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	da06      	bge.n	8007eb8 <__ieee754_log+0x38>
 8007eaa:	0002      	movs	r2, r0
 8007eac:	000b      	movs	r3, r1
 8007eae:	f7f9 fef3 	bl	8001c98 <__aeabi_dsub>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e7f2      	b.n	8007e9e <__ieee754_log+0x1e>
 8007eb8:	4bae      	ldr	r3, [pc, #696]	@ (8008174 <__ieee754_log+0x2f4>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f7f9 fc06 	bl	80016cc <__aeabi_dmul>
 8007ec0:	2336      	movs	r3, #54	@ 0x36
 8007ec2:	000e      	movs	r6, r1
 8007ec4:	425b      	negs	r3, r3
 8007ec6:	4aac      	ldr	r2, [pc, #688]	@ (8008178 <__ieee754_log+0x2f8>)
 8007ec8:	4296      	cmp	r6, r2
 8007eca:	dd06      	ble.n	8007eda <__ieee754_log+0x5a>
 8007ecc:	0002      	movs	r2, r0
 8007ece:	000b      	movs	r3, r1
 8007ed0:	f7f8 fbfc 	bl	80006cc <__aeabi_dadd>
 8007ed4:	e7e5      	b.n	8007ea2 <__ieee754_log+0x22>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e7f5      	b.n	8007ec6 <__ieee754_log+0x46>
 8007eda:	4ca8      	ldr	r4, [pc, #672]	@ (800817c <__ieee754_log+0x2fc>)
 8007edc:	1532      	asrs	r2, r6, #20
 8007ede:	1912      	adds	r2, r2, r4
 8007ee0:	0336      	lsls	r6, r6, #12
 8007ee2:	4ca7      	ldr	r4, [pc, #668]	@ (8008180 <__ieee754_log+0x300>)
 8007ee4:	18d2      	adds	r2, r2, r3
 8007ee6:	0b33      	lsrs	r3, r6, #12
 8007ee8:	9302      	str	r3, [sp, #8]
 8007eea:	191b      	adds	r3, r3, r4
 8007eec:	2480      	movs	r4, #128	@ 0x80
 8007eee:	0364      	lsls	r4, r4, #13
 8007ef0:	4023      	ands	r3, r4
 8007ef2:	4ca4      	ldr	r4, [pc, #656]	@ (8008184 <__ieee754_log+0x304>)
 8007ef4:	9d02      	ldr	r5, [sp, #8]
 8007ef6:	405c      	eors	r4, r3
 8007ef8:	151b      	asrs	r3, r3, #20
 8007efa:	189b      	adds	r3, r3, r2
 8007efc:	4325      	orrs	r5, r4
 8007efe:	2200      	movs	r2, #0
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	0029      	movs	r1, r5
 8007f04:	4b9f      	ldr	r3, [pc, #636]	@ (8008184 <__ieee754_log+0x304>)
 8007f06:	f7f9 fec7 	bl	8001c98 <__aeabi_dsub>
 8007f0a:	9b02      	ldr	r3, [sp, #8]
 8007f0c:	0006      	movs	r6, r0
 8007f0e:	3302      	adds	r3, #2
 8007f10:	031b      	lsls	r3, r3, #12
 8007f12:	000f      	movs	r7, r1
 8007f14:	2200      	movs	r2, #0
 8007f16:	0b1b      	lsrs	r3, r3, #12
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	dc64      	bgt.n	8007fe6 <__ieee754_log+0x166>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f7f8 f997 	bl	8000250 <__aeabi_dcmpeq>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d019      	beq.n	8007f5a <__ieee754_log+0xda>
 8007f26:	9b00      	ldr	r3, [sp, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d100      	bne.n	8007f2e <__ieee754_log+0xae>
 8007f2c:	e11c      	b.n	8008168 <__ieee754_log+0x2e8>
 8007f2e:	0018      	movs	r0, r3
 8007f30:	f7fa fb1a 	bl	8002568 <__aeabi_i2d>
 8007f34:	4a94      	ldr	r2, [pc, #592]	@ (8008188 <__ieee754_log+0x308>)
 8007f36:	4b95      	ldr	r3, [pc, #596]	@ (800818c <__ieee754_log+0x30c>)
 8007f38:	0004      	movs	r4, r0
 8007f3a:	000d      	movs	r5, r1
 8007f3c:	f7f9 fbc6 	bl	80016cc <__aeabi_dmul>
 8007f40:	4a93      	ldr	r2, [pc, #588]	@ (8008190 <__ieee754_log+0x310>)
 8007f42:	0006      	movs	r6, r0
 8007f44:	000f      	movs	r7, r1
 8007f46:	4b93      	ldr	r3, [pc, #588]	@ (8008194 <__ieee754_log+0x314>)
 8007f48:	0020      	movs	r0, r4
 8007f4a:	0029      	movs	r1, r5
 8007f4c:	f7f9 fbbe 	bl	80016cc <__aeabi_dmul>
 8007f50:	0002      	movs	r2, r0
 8007f52:	000b      	movs	r3, r1
 8007f54:	0030      	movs	r0, r6
 8007f56:	0039      	movs	r1, r7
 8007f58:	e7ba      	b.n	8007ed0 <__ieee754_log+0x50>
 8007f5a:	4a8f      	ldr	r2, [pc, #572]	@ (8008198 <__ieee754_log+0x318>)
 8007f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800819c <__ieee754_log+0x31c>)
 8007f5e:	0030      	movs	r0, r6
 8007f60:	0039      	movs	r1, r7
 8007f62:	f7f9 fbb3 	bl	80016cc <__aeabi_dmul>
 8007f66:	0002      	movs	r2, r0
 8007f68:	000b      	movs	r3, r1
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	498c      	ldr	r1, [pc, #560]	@ (80081a0 <__ieee754_log+0x320>)
 8007f6e:	f7f9 fe93 	bl	8001c98 <__aeabi_dsub>
 8007f72:	0032      	movs	r2, r6
 8007f74:	0004      	movs	r4, r0
 8007f76:	000d      	movs	r5, r1
 8007f78:	003b      	movs	r3, r7
 8007f7a:	0030      	movs	r0, r6
 8007f7c:	0039      	movs	r1, r7
 8007f7e:	f7f9 fba5 	bl	80016cc <__aeabi_dmul>
 8007f82:	000b      	movs	r3, r1
 8007f84:	0002      	movs	r2, r0
 8007f86:	0029      	movs	r1, r5
 8007f88:	0020      	movs	r0, r4
 8007f8a:	f7f9 fb9f 	bl	80016cc <__aeabi_dmul>
 8007f8e:	9b00      	ldr	r3, [sp, #0]
 8007f90:	9002      	str	r0, [sp, #8]
 8007f92:	9103      	str	r1, [sp, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d106      	bne.n	8007fa6 <__ieee754_log+0x126>
 8007f98:	0002      	movs	r2, r0
 8007f9a:	000b      	movs	r3, r1
 8007f9c:	0030      	movs	r0, r6
 8007f9e:	0039      	movs	r1, r7
 8007fa0:	f7f9 fe7a 	bl	8001c98 <__aeabi_dsub>
 8007fa4:	e77d      	b.n	8007ea2 <__ieee754_log+0x22>
 8007fa6:	9800      	ldr	r0, [sp, #0]
 8007fa8:	f7fa fade 	bl	8002568 <__aeabi_i2d>
 8007fac:	4a76      	ldr	r2, [pc, #472]	@ (8008188 <__ieee754_log+0x308>)
 8007fae:	4b77      	ldr	r3, [pc, #476]	@ (800818c <__ieee754_log+0x30c>)
 8007fb0:	0004      	movs	r4, r0
 8007fb2:	000d      	movs	r5, r1
 8007fb4:	f7f9 fb8a 	bl	80016cc <__aeabi_dmul>
 8007fb8:	4a75      	ldr	r2, [pc, #468]	@ (8008190 <__ieee754_log+0x310>)
 8007fba:	9000      	str	r0, [sp, #0]
 8007fbc:	9101      	str	r1, [sp, #4]
 8007fbe:	4b75      	ldr	r3, [pc, #468]	@ (8008194 <__ieee754_log+0x314>)
 8007fc0:	0020      	movs	r0, r4
 8007fc2:	0029      	movs	r1, r5
 8007fc4:	f7f9 fb82 	bl	80016cc <__aeabi_dmul>
 8007fc8:	0002      	movs	r2, r0
 8007fca:	000b      	movs	r3, r1
 8007fcc:	9802      	ldr	r0, [sp, #8]
 8007fce:	9903      	ldr	r1, [sp, #12]
 8007fd0:	f7f9 fe62 	bl	8001c98 <__aeabi_dsub>
 8007fd4:	0032      	movs	r2, r6
 8007fd6:	003b      	movs	r3, r7
 8007fd8:	f7f9 fe5e 	bl	8001c98 <__aeabi_dsub>
 8007fdc:	0002      	movs	r2, r0
 8007fde:	000b      	movs	r3, r1
 8007fe0:	9800      	ldr	r0, [sp, #0]
 8007fe2:	9901      	ldr	r1, [sp, #4]
 8007fe4:	e7dc      	b.n	8007fa0 <__ieee754_log+0x120>
 8007fe6:	2380      	movs	r3, #128	@ 0x80
 8007fe8:	05db      	lsls	r3, r3, #23
 8007fea:	f7f8 fb6f 	bl	80006cc <__aeabi_dadd>
 8007fee:	0002      	movs	r2, r0
 8007ff0:	000b      	movs	r3, r1
 8007ff2:	0030      	movs	r0, r6
 8007ff4:	0039      	movs	r1, r7
 8007ff6:	f7f8 ff2f 	bl	8000e58 <__aeabi_ddiv>
 8007ffa:	9004      	str	r0, [sp, #16]
 8007ffc:	9105      	str	r1, [sp, #20]
 8007ffe:	9800      	ldr	r0, [sp, #0]
 8008000:	f7fa fab2 	bl	8002568 <__aeabi_i2d>
 8008004:	9a04      	ldr	r2, [sp, #16]
 8008006:	9b05      	ldr	r3, [sp, #20]
 8008008:	9006      	str	r0, [sp, #24]
 800800a:	9107      	str	r1, [sp, #28]
 800800c:	0010      	movs	r0, r2
 800800e:	0019      	movs	r1, r3
 8008010:	f7f9 fb5c 	bl	80016cc <__aeabi_dmul>
 8008014:	4a63      	ldr	r2, [pc, #396]	@ (80081a4 <__ieee754_log+0x324>)
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	4694      	mov	ip, r2
 800801a:	4463      	add	r3, ip
 800801c:	0002      	movs	r2, r0
 800801e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008020:	000b      	movs	r3, r1
 8008022:	9008      	str	r0, [sp, #32]
 8008024:	9109      	str	r1, [sp, #36]	@ 0x24
 8008026:	f7f9 fb51 	bl	80016cc <__aeabi_dmul>
 800802a:	0004      	movs	r4, r0
 800802c:	000d      	movs	r5, r1
 800802e:	4a5e      	ldr	r2, [pc, #376]	@ (80081a8 <__ieee754_log+0x328>)
 8008030:	4b5e      	ldr	r3, [pc, #376]	@ (80081ac <__ieee754_log+0x32c>)
 8008032:	f7f9 fb4b 	bl	80016cc <__aeabi_dmul>
 8008036:	4a5e      	ldr	r2, [pc, #376]	@ (80081b0 <__ieee754_log+0x330>)
 8008038:	4b5e      	ldr	r3, [pc, #376]	@ (80081b4 <__ieee754_log+0x334>)
 800803a:	f7f8 fb47 	bl	80006cc <__aeabi_dadd>
 800803e:	0022      	movs	r2, r4
 8008040:	002b      	movs	r3, r5
 8008042:	f7f9 fb43 	bl	80016cc <__aeabi_dmul>
 8008046:	4a5c      	ldr	r2, [pc, #368]	@ (80081b8 <__ieee754_log+0x338>)
 8008048:	4b5c      	ldr	r3, [pc, #368]	@ (80081bc <__ieee754_log+0x33c>)
 800804a:	f7f8 fb3f 	bl	80006cc <__aeabi_dadd>
 800804e:	0022      	movs	r2, r4
 8008050:	002b      	movs	r3, r5
 8008052:	f7f9 fb3b 	bl	80016cc <__aeabi_dmul>
 8008056:	4a5a      	ldr	r2, [pc, #360]	@ (80081c0 <__ieee754_log+0x340>)
 8008058:	4b5a      	ldr	r3, [pc, #360]	@ (80081c4 <__ieee754_log+0x344>)
 800805a:	f7f8 fb37 	bl	80006cc <__aeabi_dadd>
 800805e:	9a08      	ldr	r2, [sp, #32]
 8008060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008062:	f7f9 fb33 	bl	80016cc <__aeabi_dmul>
 8008066:	4a58      	ldr	r2, [pc, #352]	@ (80081c8 <__ieee754_log+0x348>)
 8008068:	9008      	str	r0, [sp, #32]
 800806a:	9109      	str	r1, [sp, #36]	@ 0x24
 800806c:	4b57      	ldr	r3, [pc, #348]	@ (80081cc <__ieee754_log+0x34c>)
 800806e:	0020      	movs	r0, r4
 8008070:	0029      	movs	r1, r5
 8008072:	f7f9 fb2b 	bl	80016cc <__aeabi_dmul>
 8008076:	4a56      	ldr	r2, [pc, #344]	@ (80081d0 <__ieee754_log+0x350>)
 8008078:	4b56      	ldr	r3, [pc, #344]	@ (80081d4 <__ieee754_log+0x354>)
 800807a:	f7f8 fb27 	bl	80006cc <__aeabi_dadd>
 800807e:	0022      	movs	r2, r4
 8008080:	002b      	movs	r3, r5
 8008082:	f7f9 fb23 	bl	80016cc <__aeabi_dmul>
 8008086:	4a54      	ldr	r2, [pc, #336]	@ (80081d8 <__ieee754_log+0x358>)
 8008088:	4b54      	ldr	r3, [pc, #336]	@ (80081dc <__ieee754_log+0x35c>)
 800808a:	f7f8 fb1f 	bl	80006cc <__aeabi_dadd>
 800808e:	0022      	movs	r2, r4
 8008090:	002b      	movs	r3, r5
 8008092:	f7f9 fb1b 	bl	80016cc <__aeabi_dmul>
 8008096:	0002      	movs	r2, r0
 8008098:	000b      	movs	r3, r1
 800809a:	9808      	ldr	r0, [sp, #32]
 800809c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800809e:	f7f8 fb15 	bl	80006cc <__aeabi_dadd>
 80080a2:	9a02      	ldr	r2, [sp, #8]
 80080a4:	4b4e      	ldr	r3, [pc, #312]	@ (80081e0 <__ieee754_log+0x360>)
 80080a6:	0004      	movs	r4, r0
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080ac:	000d      	movs	r5, r1
 80080ae:	4313      	orrs	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	dd34      	ble.n	800811e <__ieee754_log+0x29e>
 80080b4:	2200      	movs	r2, #0
 80080b6:	4b3a      	ldr	r3, [pc, #232]	@ (80081a0 <__ieee754_log+0x320>)
 80080b8:	0030      	movs	r0, r6
 80080ba:	0039      	movs	r1, r7
 80080bc:	f7f9 fb06 	bl	80016cc <__aeabi_dmul>
 80080c0:	0032      	movs	r2, r6
 80080c2:	003b      	movs	r3, r7
 80080c4:	f7f9 fb02 	bl	80016cc <__aeabi_dmul>
 80080c8:	0002      	movs	r2, r0
 80080ca:	000b      	movs	r3, r1
 80080cc:	9002      	str	r0, [sp, #8]
 80080ce:	9103      	str	r1, [sp, #12]
 80080d0:	0020      	movs	r0, r4
 80080d2:	0029      	movs	r1, r5
 80080d4:	f7f8 fafa 	bl	80006cc <__aeabi_dadd>
 80080d8:	9a04      	ldr	r2, [sp, #16]
 80080da:	9b05      	ldr	r3, [sp, #20]
 80080dc:	f7f9 faf6 	bl	80016cc <__aeabi_dmul>
 80080e0:	9b00      	ldr	r3, [sp, #0]
 80080e2:	0004      	movs	r4, r0
 80080e4:	000d      	movs	r5, r1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <__ieee754_log+0x278>
 80080ea:	0002      	movs	r2, r0
 80080ec:	000b      	movs	r3, r1
 80080ee:	9802      	ldr	r0, [sp, #8]
 80080f0:	9903      	ldr	r1, [sp, #12]
 80080f2:	f7f9 fdd1 	bl	8001c98 <__aeabi_dsub>
 80080f6:	e74f      	b.n	8007f98 <__ieee754_log+0x118>
 80080f8:	4a23      	ldr	r2, [pc, #140]	@ (8008188 <__ieee754_log+0x308>)
 80080fa:	4b24      	ldr	r3, [pc, #144]	@ (800818c <__ieee754_log+0x30c>)
 80080fc:	9806      	ldr	r0, [sp, #24]
 80080fe:	9907      	ldr	r1, [sp, #28]
 8008100:	f7f9 fae4 	bl	80016cc <__aeabi_dmul>
 8008104:	4a22      	ldr	r2, [pc, #136]	@ (8008190 <__ieee754_log+0x310>)
 8008106:	9000      	str	r0, [sp, #0]
 8008108:	9101      	str	r1, [sp, #4]
 800810a:	9806      	ldr	r0, [sp, #24]
 800810c:	9907      	ldr	r1, [sp, #28]
 800810e:	4b21      	ldr	r3, [pc, #132]	@ (8008194 <__ieee754_log+0x314>)
 8008110:	f7f9 fadc 	bl	80016cc <__aeabi_dmul>
 8008114:	0022      	movs	r2, r4
 8008116:	002b      	movs	r3, r5
 8008118:	f7f8 fad8 	bl	80006cc <__aeabi_dadd>
 800811c:	e754      	b.n	8007fc8 <__ieee754_log+0x148>
 800811e:	0002      	movs	r2, r0
 8008120:	000b      	movs	r3, r1
 8008122:	0030      	movs	r0, r6
 8008124:	0039      	movs	r1, r7
 8008126:	f7f9 fdb7 	bl	8001c98 <__aeabi_dsub>
 800812a:	9a04      	ldr	r2, [sp, #16]
 800812c:	9b05      	ldr	r3, [sp, #20]
 800812e:	f7f9 facd 	bl	80016cc <__aeabi_dmul>
 8008132:	9b00      	ldr	r3, [sp, #0]
 8008134:	0004      	movs	r4, r0
 8008136:	000d      	movs	r5, r1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d102      	bne.n	8008142 <__ieee754_log+0x2c2>
 800813c:	0002      	movs	r2, r0
 800813e:	000b      	movs	r3, r1
 8008140:	e72c      	b.n	8007f9c <__ieee754_log+0x11c>
 8008142:	4a11      	ldr	r2, [pc, #68]	@ (8008188 <__ieee754_log+0x308>)
 8008144:	4b11      	ldr	r3, [pc, #68]	@ (800818c <__ieee754_log+0x30c>)
 8008146:	9806      	ldr	r0, [sp, #24]
 8008148:	9907      	ldr	r1, [sp, #28]
 800814a:	f7f9 fabf 	bl	80016cc <__aeabi_dmul>
 800814e:	4a10      	ldr	r2, [pc, #64]	@ (8008190 <__ieee754_log+0x310>)
 8008150:	9000      	str	r0, [sp, #0]
 8008152:	9101      	str	r1, [sp, #4]
 8008154:	9806      	ldr	r0, [sp, #24]
 8008156:	9907      	ldr	r1, [sp, #28]
 8008158:	4b0e      	ldr	r3, [pc, #56]	@ (8008194 <__ieee754_log+0x314>)
 800815a:	f7f9 fab7 	bl	80016cc <__aeabi_dmul>
 800815e:	0002      	movs	r2, r0
 8008160:	000b      	movs	r3, r1
 8008162:	0020      	movs	r0, r4
 8008164:	0029      	movs	r1, r5
 8008166:	e733      	b.n	8007fd0 <__ieee754_log+0x150>
 8008168:	2000      	movs	r0, #0
 800816a:	2100      	movs	r1, #0
 800816c:	e699      	b.n	8007ea2 <__ieee754_log+0x22>
 800816e:	46c0      	nop			@ (mov r8, r8)
 8008170:	c3500000 	.word	0xc3500000
 8008174:	43500000 	.word	0x43500000
 8008178:	7fefffff 	.word	0x7fefffff
 800817c:	fffffc01 	.word	0xfffffc01
 8008180:	00095f64 	.word	0x00095f64
 8008184:	3ff00000 	.word	0x3ff00000
 8008188:	fee00000 	.word	0xfee00000
 800818c:	3fe62e42 	.word	0x3fe62e42
 8008190:	35793c76 	.word	0x35793c76
 8008194:	3dea39ef 	.word	0x3dea39ef
 8008198:	55555555 	.word	0x55555555
 800819c:	3fd55555 	.word	0x3fd55555
 80081a0:	3fe00000 	.word	0x3fe00000
 80081a4:	fff9eb86 	.word	0xfff9eb86
 80081a8:	df3e5244 	.word	0xdf3e5244
 80081ac:	3fc2f112 	.word	0x3fc2f112
 80081b0:	96cb03de 	.word	0x96cb03de
 80081b4:	3fc74664 	.word	0x3fc74664
 80081b8:	94229359 	.word	0x94229359
 80081bc:	3fd24924 	.word	0x3fd24924
 80081c0:	55555593 	.word	0x55555593
 80081c4:	3fe55555 	.word	0x3fe55555
 80081c8:	d078c69f 	.word	0xd078c69f
 80081cc:	3fc39a09 	.word	0x3fc39a09
 80081d0:	1d8e78af 	.word	0x1d8e78af
 80081d4:	3fcc71c5 	.word	0x3fcc71c5
 80081d8:	9997fa04 	.word	0x9997fa04
 80081dc:	3fd99999 	.word	0x3fd99999
 80081e0:	0006b851 	.word	0x0006b851

080081e4 <_init>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	46c0      	nop			@ (mov r8, r8)
 80081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ea:	bc08      	pop	{r3}
 80081ec:	469e      	mov	lr, r3
 80081ee:	4770      	bx	lr

080081f0 <_fini>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	46c0      	nop			@ (mov r8, r8)
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr
